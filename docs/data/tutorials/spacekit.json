{"schemaVersion":{"major":0,"patch":0,"minor":3},"sections":[{"kind":"hero","title":"Meet SpaceKit","action":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools","isActive":true,"type":"reference","overridingTitle":"Get started","overridingTitleInlineContent":[{"text":"Get started","type":"text"}]},"content":[{"inlineContent":[{"text":"Discover how SpaceKit simplifies blockchain development using Swift. Dive into the world of Web3 with ease and efficiency.","type":"text"}],"type":"paragraph"}]},{"kind":"volume","image":"InstallingToolsSection1Step1.png","content":[{"type":"paragraph","inlineContent":[{"text":"Start your journey as a blockchain developer.","type":"text"}]}],"chapters":[{"tutorials":["doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools"],"content":[],"name":"Installing the Tools","image":"InstallingToolsSection1Step1.png"},{"tutorials":["doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract"],"name":"Building Your First Smart Contract","image":"InstallingToolsSection1Step1.png","content":[]}],"name":"Getting Started"},{"content":[{"inlineContent":[{"text":"Gain a deeper understanding of SpaceKit’s architecture, from core types to advanced usage scenarios.","type":"text"}],"type":"paragraph"}],"chapters":[{"tutorials":["doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes"],"image":"InstallingToolsSection1Step1.png","name":"Exploring SpaceKit's Types","content":[{"type":"paragraph","inlineContent":[{"text":"Learn about the core types that power smart contracts in SpaceKit, including WebAssembly integration and Swift interoperability.","type":"text"}]}]},{"name":"Persisting Data Across Executions","image":"InstallingToolsSection1Step1.png","tutorials":["doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues"],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Discover how to retain data across multiple contract executions using SpaceKit’s storage features."}]}]},{"name":"Retrieving Information from the Blockchain","tutorials":["doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo"],"content":[{"inlineContent":[{"type":"text","text":"Learn how to access transaction and blockchain context data, such as caller information, payments, and timestamps, using the SpaceKit framework."}],"type":"paragraph"}],"image":"InstallingToolsSection1Step1.png"},{"name":"Interacting with Other Contracts","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Learn how to enable smart contracts to call other contracts in a synchronous manner, and explore contract-to-contract interaction using SpaceKit’s proxy mechanisms."}]}],"image":"InstallingToolsSection1Step1.png","tutorials":["doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls"]},{"tutorials":["doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls"],"image":"InstallingToolsSection1Step1.png","name":"Calling Contracts Across Shards","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Asynchronous calls enable interaction with contracts across different shards. Let’s explore how to implement these cross-shard calls in SpaceKit."}]}]}],"kind":"volume","image":"InstallingToolsSection1Step1.png","name":"Deep Dive into SpaceKit Concepts"}],"hierarchy":{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit","paths":[]},"variants":[{"paths":["\/tutorials\/spacekit"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/SpaceKit\/tutorials\/SpaceKit","interfaceLanguage":"swift"},"kind":"overview","metadata":{"estimatedTime":"1hr 45min","role":"overview","category":"SpaceKit","title":"Meet SpaceKit","categoryPathComponent":"SpaceKit"},"references":{"doc://SpaceKit/tutorials/SpaceKit/AsyncCalls":{"title":"Interacting with Contracts Across Shards","role":"project","kind":"project","url":"\/tutorials\/spacekit\/asynccalls","type":"topic","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls","abstract":[{"type":"text","text":"Blockchain platforms using SpaceVM enable seamless execution within a sharded environment. Sharding divides a blockchain’s global state and validation workload into smaller, manageable units known as shards. This method enhances scalability without compromising decentralization, allowing nodes to operate without significant computational resources."}],"estimatedTime":"15min"},"doc://SpaceKit/tutorials/SpaceKit/StoreValues":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues","abstract":[{"type":"text","text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory."}],"type":"topic","role":"project","estimatedTime":"15min","title":"Persist Values Between Executions","kind":"project","url":"\/tutorials\/spacekit\/storevalues"},"InstallingToolsSection1Step1.png":{"identifier":"InstallingToolsSection1Step1.png","type":"image","alt":"A terminal window displaying code examples.","variants":[{"traits":["1x","light"],"url":"\/images\/SpaceKit\/InstallingToolsSection1Step1.png"}]},"doc://SpaceKit/tutorials/SpaceKit/GetInfo":{"abstract":[{"text":"Many smart contracts rely on contextual data to execute their operations effectively. This data can include input payments, the caller’s address, the current time, the balance of a specific account, or even the contract owner.","type":"text"}],"title":"Retrieving Information from the Blockchain","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo","url":"\/tutorials\/spacekit\/getinfo","estimatedTime":"10min","type":"topic","role":"project","kind":"project"},"doc://SpaceKit/tutorials/SpaceKit/SyncCalls":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls","abstract":[{"type":"text","text":"Smart contracts can interact not only with users but also with other smart contracts. This enables more advanced protocols by leveraging existing ones. For example, you could integrate a decentralized exchange directly into your contract to perform token swaps. Decentralized applications often involve multiple contracts, each with a dedicated role, working together to achieve complex functionality—similar to microservices in backend systems."}],"type":"topic","role":"project","estimatedTime":"15min","title":"Interact with Other Contracts","kind":"project","url":"\/tutorials\/spacekit\/synccalls"},"doc://SpaceKit/tutorials/SpaceKit":{"url":"\/tutorials\/spacekit","kind":"overview","title":"Meet SpaceKit","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit","type":"topic","role":"overview","abstract":[{"text":"Discover how SpaceKit simplifies blockchain development using Swift. Dive into the world of Web3 with ease and efficiency.","type":"text"}]},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes":{"url":"\/tutorials\/spacekit\/familiarizewithtypes","type":"topic","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes","kind":"project","abstract":[{"type":"text","text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM."}],"role":"project","estimatedTime":"20min","title":"Exploring SpaceKit's Types"},"doc://SpaceKit/tutorials/SpaceKit/CodingYourFirstContract":{"abstract":[{"type":"text","text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user."}],"kind":"project","url":"\/tutorials\/spacekit\/codingyourfirstcontract","title":"Building Your First Smart Contract","role":"project","estimatedTime":"20min","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract","type":"topic"},"doc://SpaceKit/tutorials/SpaceKit/InstallingTools":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools","abstract":[{"text":"Before writing your first smart contract with SpaceKit, ensure you have the necessary tools installed.","type":"text"}],"type":"topic","role":"project","estimatedTime":"10min","title":"Install the Necessary Tools","kind":"project","url":"\/tutorials\/spacekit\/installingtools"}}}