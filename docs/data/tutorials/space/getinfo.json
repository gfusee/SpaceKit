{"identifier":{"url":"doc:\/\/Space\/tutorials\/Space\/GetInfo","interfaceLanguage":"swift"},"kind":"project","sections":[{"chapter":"Retrieving Information from the Blockchain","kind":"hero","title":"Retrieving Information from the Blockchain","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Many smart contracts rely on contextual data to execute their operations effectively. This data can include input payments, the caller’s address, the current time, the balance of a specific account, or even the contract owner."}]},{"inlineContent":[{"type":"text","text":"The Space framework provides an intuitive way to retrieve all of this information using the "},{"code":"Message","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"Blockchain","type":"codeVoice"},{"type":"text","text":" objects."}],"type":"paragraph"}],"estimatedTimeInMinutes":10},{"kind":"tasks","tasks":[{"title":"Accessing Transaction Context Data","anchor":"Accessing-Transaction-Context-Data","stepsSection":[{"type":"step","content":[{"inlineContent":[{"text":"Start by defining the contract’s basic structure.","type":"text"}],"type":"paragraph"}],"runtimePreview":null,"media":null,"caption":[],"code":"GetInfoSection1Step1.swift"},{"content":[{"inlineContent":[{"text":"Track the specific token type to be deposited. Store its identifier in the contract’s storage using a ","type":"text"},{"type":"codeVoice","code":"@Storage"},{"text":" variable.","type":"text"}],"type":"paragraph"}],"runtimePreview":null,"media":null,"type":"step","code":"GetInfoSection1Step2.swift","caption":[{"inlineContent":[{"type":"text","text":"Note: This variable will be initialized later in the contract’s "},{"type":"codeVoice","code":"init"},{"type":"text","text":" function."}],"type":"paragraph"}]},{"caption":[{"type":"paragraph","inlineContent":[{"text":"Reminder: Numeric storage variables default to 0.","type":"text"}]}],"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a "},{"type":"codeVoice","code":"@Mapping"},{"type":"text","text":" variable to keep track of the total amount deposited by each user."}]}],"code":"GetInfoSection1Step3.swift","runtimePreview":null,"media":null},{"runtimePreview":null,"type":"step","caption":[],"media":null,"content":[{"inlineContent":[{"type":"text","text":"Add an initializer to the contract, which accepts the token identifier as a parameter."}],"type":"paragraph"}],"code":"GetInfoSection1Step4.swift"},{"runtimePreview":null,"code":"GetInfoSection1Step5.swift","caption":[],"type":"step","media":null,"content":[{"inlineContent":[{"text":"Define the ","type":"text"},{"type":"codeVoice","code":"deposit"},{"type":"text","text":" endpoint for the contract."}],"type":"paragraph"}]},{"caption":[],"media":null,"code":"GetInfoSection1Step6.swift","runtimePreview":null,"type":"step","content":[{"inlineContent":[{"text":"Use the ","type":"text"},{"type":"codeVoice","code":"Message.caller"},{"type":"text","text":" property to retrieve the address of the user making the deposit."}],"type":"paragraph"}]},{"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Access the single fungible token payment using "},{"code":"Message.singleFungibleEsdt","type":"codeVoice"},{"text":". If the transaction doesn’t include exactly one fungible token payment, the transaction will fail.","type":"text"}]}],"media":null,"type":"step","code":"GetInfoSection1Step7.swift","caption":[{"inlineContent":[{"type":"text","text":"Note: The "},{"type":"codeVoice","code":"Message"},{"type":"text","text":" object also allows retrieval of multi payments, non-fungible tokens, and EGLD payments."}],"type":"paragraph"}]},{"media":null,"code":"GetInfoSection1Step8.swift","caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Verify the payment by comparing the token identifier with the stored value."}]}],"type":"step","runtimePreview":null},{"runtimePreview":null,"caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add the payment amount to the storage mapping for the caller’s address."}]}],"type":"step","media":null,"code":"GetInfoSection1Step9.swift"}],"contentSection":[{"content":[{"inlineContent":[{"type":"text","text":"In this section, you will create a simple smart contract that allows users to deposit a specified fungible token. The contract will track the total amount of tokens deposited by each user."}],"type":"paragraph"}],"mediaPosition":"trailing","kind":"contentAndMedia"}]},{"anchor":"Accessing-Blockchain-Context-Data","contentSection":[{"content":[{"type":"paragraph","inlineContent":[{"text":"In this section, you will improve the previous contract by adding constraints: each address can deposit only once every 24 hours, and deposits must not exceed 10% of the user’s token balance.","type":"text"}]}],"mediaPosition":"trailing","kind":"contentAndMedia"}],"title":"Accessing Blockchain Context Data","stepsSection":[{"media":null,"runtimePreview":null,"caption":[],"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Start by using the contract from the previous section.","type":"text"}]}],"code":"GetInfoSection2Step1.swift"},{"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Define a global constant representing the number of seconds in a day."}]}],"code":"GetInfoSection2Step2.swift","type":"step","media":null,"caption":[]},{"code":"GetInfoSection2Step3.swift","runtimePreview":null,"caption":[],"media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add a mapping to store the last deposit time for each user."}]}],"type":"step"},{"content":[{"inlineContent":[{"type":"text","text":"In the "},{"code":"deposit","type":"codeVoice"},{"type":"text","text":" endpoint, retrieve the current timestamp using "},{"code":"Blockchain.getBlockTimestamp()","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}],"code":"GetInfoSection2Step4.swift","runtimePreview":null,"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Note: The timestamp is the number of seconds since January 1, 1970."}]}],"media":null,"type":"step"},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Retrieve the last deposit time for the caller from the storage."}]}],"media":null,"runtimePreview":null,"caption":[],"code":"GetInfoSection2Step5.swift"},{"code":"GetInfoSection2Step6.swift","runtimePreview":null,"media":null,"content":[{"inlineContent":[{"text":"Compute the next allowed deposit time by adding one day’s worth of seconds to the last deposit time.","type":"text"}],"type":"paragraph"}],"caption":[],"type":"step"},{"caption":[],"runtimePreview":null,"media":null,"code":"GetInfoSection2Step7.swift","content":[{"inlineContent":[{"text":"Ensure the caller is allowed to deposit now.","type":"text"}],"type":"paragraph"}],"type":"step"},{"caption":[],"runtimePreview":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"If the deposit isn’t allowed yet, calculate the remaining time before the next deposit is permitted.","type":"text"}]}],"media":null,"code":"GetInfoSection2Step8.swift"},{"caption":[{"type":"paragraph","inlineContent":[{"text":"Tip: You can interpolate buffers, addresses, and numeric types into string literals when creating error messages.","type":"text"}]}],"media":null,"code":"GetInfoSection2Step9.swift","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the calculated time to return an error message with the remaining time."}]}],"type":"step"},{"code":"GetInfoSection2Step10.swift","media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Retrieve the caller’s token balance using ","type":"text"},{"type":"codeVoice","code":"Blockchain.getBalance()"},{"text":".","type":"text"}]}],"runtimePreview":null,"type":"step","caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Tip: If no token identifier is provided, the EGLD balance is returned."}]}]},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Calculate the maximum allowable deposit by dividing the caller’s token balance by 10."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Note: Be cautious when performing integer division as any fractional part is discarded."}]}],"media":null,"code":"GetInfoSection2Step11.swift","runtimePreview":null},{"media":null,"code":"GetInfoSection2Step12.swift","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Ensure the deposit amount does not exceed the maximum allowable limit."}]}],"caption":[],"type":"step"},{"caption":[],"content":[{"type":"paragraph","inlineContent":[{"text":"Update the last deposit time for the caller to the current block timestamp.","type":"text"}]}],"media":null,"runtimePreview":null,"type":"step","code":"GetInfoSection2Step13.swift"}]}]},{"featuredEyebrow":"Tutorial","abstract":[{"text":"Smart contracts can interact not only with users but also with other smart contracts. This enables more advanced protocols by leveraging existing ones. For example, you could integrate a decentralized exchange directly into your contract to perform token swaps. Decentralized applications often involve multiple contracts, each with a dedicated role, working together to achieve complex functionality—similar to microservices in backend systems.","type":"text"}],"title":"Interact with Other Contracts","kind":"callToAction","action":{"identifier":"doc:\/\/Space\/tutorials\/Space\/SyncCalls","overridingTitleInlineContent":[{"type":"text","text":"Get started"}],"isActive":true,"type":"reference","overridingTitle":"Get started"}}],"schemaVersion":{"major":0,"minor":3,"patch":0},"variants":[{"paths":["\/tutorials\/space\/getinfo"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"category":"Space","title":"Retrieving Information from the Blockchain","categoryPathComponent":"Space","role":"project"},"hierarchy":{"modules":[{"reference":"doc:\/\/Space\/tutorials\/Space\/Getting-Started\/Installing-the-Tools","projects":[{"sections":[{"reference":"doc:\/\/Space\/tutorials\/Space\/InstallingTools#Installing-Spaces-Dependencies","kind":"task"},{"kind":"task","reference":"doc:\/\/Space\/tutorials\/Space\/InstallingTools#Setting-Up-the-Space-CLI"},{"kind":"task","reference":"doc:\/\/Space\/tutorials\/Space\/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract"}],"reference":"doc:\/\/Space\/tutorials\/Space\/InstallingTools"}]},{"reference":"doc:\/\/Space\/tutorials\/Space\/Getting-Started\/Building-Your-First-Smart-Contract","projects":[{"reference":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract","sections":[{"kind":"task","reference":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract#Initializing-the-Project"},{"reference":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract#Writing-the-Contract-Code","kind":"task"},{"kind":"task","reference":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract#Testing-the-Contract"}]}]},{"projects":[{"sections":[{"reference":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges","kind":"task"},{"kind":"task","reference":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Understanding-the-Buffer-Type"},{"reference":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Working-with-the-BigUint-Type","kind":"task"},{"kind":"task","reference":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Working-with-the-Vector-Type"},{"reference":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Creating-Your-Own-Types","kind":"task"}],"reference":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes"}],"reference":"doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Exploring-Space's-Types"},{"projects":[{"reference":"doc:\/\/Space\/tutorials\/Space\/StoreValues","sections":[{"reference":"doc:\/\/Space\/tutorials\/Space\/StoreValues#Working-with-Storage-for-Single-Value-Persistence","kind":"task"},{"kind":"task","reference":"doc:\/\/Space\/tutorials\/Space\/StoreValues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage"}]}],"reference":"doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Persisting-Data-Across-Executions"},{"reference":"doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Retrieving-Information-from-the-Blockchain","projects":[{"sections":[{"reference":"doc:\/\/Space\/tutorials\/Space\/GetInfo#Accessing-Transaction-Context-Data","kind":"task"},{"kind":"task","reference":"doc:\/\/Space\/tutorials\/Space\/GetInfo#Accessing-Blockchain-Context-Data"}],"reference":"doc:\/\/Space\/tutorials\/Space\/GetInfo"}]},{"projects":[{"reference":"doc:\/\/Space\/tutorials\/Space\/SyncCalls","sections":[{"reference":"doc:\/\/Space\/tutorials\/Space\/SyncCalls#Declare-the-Callee-Proxy","kind":"task"},{"reference":"doc:\/\/Space\/tutorials\/Space\/SyncCalls#Perform-a-Synchronous-Call","kind":"task"}]}],"reference":"doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Interact-with-Other-Contracts"}],"paths":[["doc:\/\/Space\/tutorials\/Space","doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts","doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Retrieving-Information-from-the-Blockchain"]],"reference":"doc:\/\/Space\/tutorials\/Space"},"references":{"GetInfoSection2Step5.swift":{"identifier":"GetInfoSection2Step5.swift","type":"file","fileName":"lib.swift","content":["import Space","","let secondsInADay: UInt64 = 86_400","","@Contract struct MyContract {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","    @Mapping<Address, UInt64>(key: \"lastDepositTime\") var lastDepositTimeForAddress","    @Mapping<Address, BigUint>(key: \"depositedTokens\") var depositedTokensForAddress","    ","    init(tokenIdentifier: Buffer) {","        self.tokenIdentifier = tokenIdentifier","    }","    ","    public mutating func deposit() {","        let caller = Message.caller","        let payment = Message.singleFungibleEsdt","        ","        guard payment.tokenIdentifier == self.tokenIdentifier else {","            smartContractError(message: \"Wrong payment provided\")","        }","        ","        let currentTime = Blockchain.getBlockTimestamp()","        let callerLastDepositTime = self.lastDepositTimeForAddress[caller]","        ","        self.depositedTokensForAddress[caller] = self.depositedTokensForAddress[caller] + payment.amount","    }","}"],"syntax":"swift","highlights":[{"line":23}],"fileType":"swift"},"GetInfoSection1Step5.swift":{"identifier":"GetInfoSection1Step5.swift","fileType":"swift","highlights":[{"line":10},{"line":11},{"line":12},{"line":13}],"content":["import Space","","@Contract struct MyContract {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","    @Mapping<Address, BigUint>(key: \"depositedTokens\") var depositedTokensForAddress","    ","    init(tokenIdentifier: Buffer) {","        self.tokenIdentifier = tokenIdentifier","    }","    ","    public mutating func deposit() {","        ","    }","}"],"fileName":"lib.swift","type":"file","syntax":"swift"},"GetInfoSection1Step9.swift":{"identifier":"GetInfoSection1Step9.swift","type":"file","fileName":"lib.swift","content":["import Space","","@Contract struct MyContract {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","    @Mapping<Address, BigUint>(key: \"depositedTokens\") var depositedTokensForAddress","    ","    init(tokenIdentifier: Buffer) {","        self.tokenIdentifier = tokenIdentifier","    }","    ","    public mutating func deposit() {","        let caller = Message.caller","        let payment = Message.singleFungibleEsdt","        ","        guard payment.tokenIdentifier == self.tokenIdentifier else {","            smartContractError(message: \"Wrong payment provided\")","        }","        ","        self.depositedTokensForAddress[caller] = self.depositedTokensForAddress[caller] + payment.amount","    }","}"],"syntax":"swift","highlights":[{"line":18},{"line":19}],"fileType":"swift"},"GetInfoSection1Step7.swift":{"identifier":"GetInfoSection1Step7.swift","fileType":"swift","highlights":[{"line":13}],"content":["import Space","","@Contract struct MyContract {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","    @Mapping<Address, BigUint>(key: \"depositedTokens\") var depositedTokensForAddress","    ","    init(tokenIdentifier: Buffer) {","        self.tokenIdentifier = tokenIdentifier","    }","    ","    public mutating func deposit() {","        let caller = Message.caller","        let payment = Message.singleFungibleEsdt","    }","}"],"fileName":"lib.swift","type":"file","syntax":"swift"},"GetInfoSection2Step6.swift":{"identifier":"GetInfoSection2Step6.swift","type":"file","fileName":"lib.swift","content":["import Space","","let secondsInADay: UInt64 = 86_400","","@Contract struct MyContract {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","    @Mapping<Address, UInt64>(key: \"lastDepositTime\") var lastDepositTimeForAddress","    @Mapping<Address, BigUint>(key: \"depositedTokens\") var depositedTokensForAddress","    ","    init(tokenIdentifier: Buffer) {","        self.tokenIdentifier = tokenIdentifier","    }","    ","    public mutating func deposit() {","        let caller = Message.caller","        let payment = Message.singleFungibleEsdt","        ","        guard payment.tokenIdentifier == self.tokenIdentifier else {","            smartContractError(message: \"Wrong payment provided\")","        }","        ","        let currentTime = Blockchain.getBlockTimestamp()","        let callerLastDepositTime = self.lastDepositTimeForAddress[caller]","        let nextAllowedTime = callerLastDepositTime + secondsInADay","        ","        self.depositedTokensForAddress[caller] = self.depositedTokensForAddress[caller] + payment.amount","    }","}"],"syntax":"swift","highlights":[{"line":24}],"fileType":"swift"},"doc://Space/tutorials/Space/Deep-Dive-into-Space-Concepts/Persisting-Data-Across-Executions":{"identifier":"doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Persisting-Data-Across-Executions","title":"Persisting Data Across Executions","abstract":[],"type":"topic","role":"article","kind":"article","url":"\/tutorials\/space\/deep-dive-into-space-concepts\/persisting-data-across-executions"},"doc://Space/tutorials/Space/StoreValues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage":{"type":"section","identifier":"doc:\/\/Space\/tutorials\/Space\/StoreValues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage","title":"Leveraging @Mapping for Dynamic Key-Value Storage","role":"pseudoSymbol","kind":"section","abstract":[{"type":"text","text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory."}],"url":"\/tutorials\/space\/storevalues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage"},"doc://Space/tutorials/Space/StoreValues":{"role":"project","identifier":"doc:\/\/Space\/tutorials\/Space\/StoreValues","title":"Persist Values Between Executions","url":"\/tutorials\/space\/storevalues","type":"topic","kind":"project","estimatedTime":"15min","abstract":[{"text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory.","type":"text"}]},"doc://Space/tutorials/Space/GetInfo#Accessing-Blockchain-Context-Data":{"url":"\/tutorials\/space\/getinfo#Accessing-Blockchain-Context-Data","role":"pseudoSymbol","type":"section","identifier":"doc:\/\/Space\/tutorials\/Space\/GetInfo#Accessing-Blockchain-Context-Data","title":"Accessing Blockchain Context Data","abstract":[{"type":"text","text":"Many smart contracts rely on contextual data to execute their operations effectively. This data can include input payments, the caller’s address, the current time, the balance of a specific account, or even the contract owner."}],"kind":"section"},"doc://Space/tutorials/Space/Deep-Dive-into-Space-Concepts/Retrieving-Information-from-the-Blockchain":{"identifier":"doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Retrieving-Information-from-the-Blockchain","title":"Retrieving Information from the Blockchain","abstract":[],"role":"article","kind":"article","url":"\/tutorials\/space\/deep-dive-into-space-concepts\/retrieving-information-from-the-blockchain","type":"topic"},"doc://Space/tutorials/Space/SyncCalls":{"identifier":"doc:\/\/Space\/tutorials\/Space\/SyncCalls","estimatedTime":"15min","title":"Interact with Other Contracts","abstract":[{"type":"text","text":"Smart contracts can interact not only with users but also with other smart contracts. This enables more advanced protocols by leveraging existing ones. For example, you could integrate a decentralized exchange directly into your contract to perform token swaps. Decentralized applications often involve multiple contracts, each with a dedicated role, working together to achieve complex functionality—similar to microservices in backend systems."}],"type":"topic","role":"project","kind":"project","url":"\/tutorials\/space\/synccalls"},"doc://Space/tutorials/Space/CodingYourFirstContract#Writing-the-Contract-Code":{"abstract":[{"type":"text","text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user."}],"url":"\/tutorials\/space\/codingyourfirstcontract#Writing-the-Contract-Code","role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract#Writing-the-Contract-Code","type":"section","title":"Writing the Contract Code"},"GetInfoSection1Step3.swift":{"identifier":"GetInfoSection1Step3.swift","fileType":"swift","highlights":[{"line":5}],"content":["import Space","","@Contract struct MyContract {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","    @Mapping<Address, BigUint>(key: \"depositedTokens\") var depositedTokensForAddress","}"],"fileName":"lib.swift","type":"file","syntax":"swift"},"GetInfoSection2Step2.swift":{"identifier":"GetInfoSection2Step2.swift","type":"file","fileName":"lib.swift","content":["import Space","","let secondsInADay: UInt64 = 86_400","","@Contract struct MyContract {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","    @Mapping<Address, BigUint>(key: \"depositedTokens\") var depositedTokensForAddress","    ","    init(tokenIdentifier: Buffer) {","        self.tokenIdentifier = tokenIdentifier","    }","    ","    public mutating func deposit() {","        let caller = Message.caller","        let payment = Message.singleFungibleEsdt","        ","        guard payment.tokenIdentifier == self.tokenIdentifier else {","            smartContractError(message: \"Wrong payment provided\")","        }","        ","        self.depositedTokensForAddress[caller] = self.depositedTokensForAddress[caller] + payment.amount","    }","}"],"syntax":"swift","highlights":[{"line":3},{"line":4}],"fileType":"swift"},"doc://Space/tutorials/Space/GetInfo":{"identifier":"doc:\/\/Space\/tutorials\/Space\/GetInfo","abstract":[{"type":"text","text":"Many smart contracts rely on contextual data to execute their operations effectively. This data can include input payments, the caller’s address, the current time, the balance of a specific account, or even the contract owner."}],"title":"Retrieving Information from the Blockchain","role":"project","estimatedTime":"10min","type":"topic","kind":"project","url":"\/tutorials\/space\/getinfo"},"doc://Space/tutorials/Space/CodingYourFirstContract#Testing-the-Contract":{"identifier":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract#Testing-the-Contract","kind":"section","type":"section","url":"\/tutorials\/space\/codingyourfirstcontract#Testing-the-Contract","title":"Testing the Contract","role":"pseudoSymbol","abstract":[{"type":"text","text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user."}]},"doc://Space/tutorials/Space/Deep-Dive-into-Space-Concepts/Exploring-Space's-Types":{"role":"article","identifier":"doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Exploring-Space's-Types","title":"Exploring Space's Types","url":"\/tutorials\/space\/deep-dive-into-space-concepts\/exploring-space's-types","type":"topic","kind":"article","abstract":[]},"doc://Space/tutorials/Space/Getting-Started/Building-Your-First-Smart-Contract":{"role":"article","identifier":"doc:\/\/Space\/tutorials\/Space\/Getting-Started\/Building-Your-First-Smart-Contract","title":"Building Your First Smart Contract","url":"\/tutorials\/space\/getting-started\/building-your-first-smart-contract","type":"topic","kind":"article","abstract":[]},"doc://Space/tutorials/Space/StoreValues#Working-with-Storage-for-Single-Value-Persistence":{"type":"section","url":"\/tutorials\/space\/storevalues#Working-with-Storage-for-Single-Value-Persistence","abstract":[{"type":"text","text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory."}],"kind":"section","role":"pseudoSymbol","identifier":"doc:\/\/Space\/tutorials\/Space\/StoreValues#Working-with-Storage-for-Single-Value-Persistence","title":"Working with @Storage for Single Value Persistence"},"doc://Space/tutorials/Space/FamiliarizeWithTypes#Creating-Your-Own-Types":{"abstract":[{"type":"text","text":"Space provides types that allow you to leverage the full potential of the SpaceVM."}],"url":"\/tutorials\/space\/familiarizewithtypes#Creating-Your-Own-Types","role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Creating-Your-Own-Types","type":"section","title":"Creating Your Own Types"},"GetInfoSection2Step1.swift":{"identifier":"GetInfoSection2Step1.swift","fileType":"swift","highlights":[],"content":["import Space","","@Contract struct MyContract {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","    @Mapping<Address, BigUint>(key: \"depositedTokens\") var depositedTokensForAddress","    ","    init(tokenIdentifier: Buffer) {","        self.tokenIdentifier = tokenIdentifier","    }","    ","    public mutating func deposit() {","        let caller = Message.caller","        let payment = Message.singleFungibleEsdt","        ","        guard payment.tokenIdentifier == self.tokenIdentifier else {","            smartContractError(message: \"Wrong payment provided\")","        }","        ","        self.depositedTokensForAddress[caller] = self.depositedTokensForAddress[caller] + payment.amount","    }","}"],"fileName":"lib.swift","type":"file","syntax":"swift"},"doc://Space/tutorials/Space/Deep-Dive-into-Space-Concepts/Interact-with-Other-Contracts":{"abstract":[],"identifier":"doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Interact-with-Other-Contracts","title":"Interact with Other Contracts","role":"article","type":"topic","kind":"article","url":"\/tutorials\/space\/deep-dive-into-space-concepts\/interact-with-other-contracts"},"GetInfoSection2Step8.swift":{"identifier":"GetInfoSection2Step8.swift","type":"file","fileName":"lib.swift","content":["import Space","","let secondsInADay: UInt64 = 86_400","","@Contract struct MyContract {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","    @Mapping<Address, UInt64>(key: \"lastDepositTime\") var lastDepositTimeForAddress","    @Mapping<Address, BigUint>(key: \"depositedTokens\") var depositedTokensForAddress","    ","    init(tokenIdentifier: Buffer) {","        self.tokenIdentifier = tokenIdentifier","    }","    ","    public mutating func deposit() {","        let caller = Message.caller","        let payment = Message.singleFungibleEsdt","        ","        guard payment.tokenIdentifier == self.tokenIdentifier else {","            smartContractError(message: \"Wrong payment provided\")","        }","        ","        let currentTime = Blockchain.getBlockTimestamp()","        let callerLastDepositTime = self.lastDepositTimeForAddress[caller]","        let nextAllowedTime = callerLastDepositTime + secondsInADay","        ","        guard currentTime > nextAllowedTime else {","            let secondsRemaining = nextAllowedTime - currentTime","        }","        ","        self.depositedTokensForAddress[caller] = self.depositedTokensForAddress[caller] + payment.amount","    }","}"],"syntax":"swift","highlights":[{"line":27}],"fileType":"swift"},"GetInfoSection1Step2.swift":{"identifier":"GetInfoSection1Step2.swift","fileType":"swift","highlights":[{"line":4}],"content":["import Space","","@Contract struct MyContract {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","}"],"fileName":"lib.swift","type":"file","syntax":"swift"},"doc://Space/tutorials/Space/SyncCalls#Perform-a-Synchronous-Call":{"type":"section","url":"\/tutorials\/space\/synccalls#Perform-a-Synchronous-Call","abstract":[{"type":"text","text":"Smart contracts can interact not only with users but also with other smart contracts. This enables more advanced protocols by leveraging existing ones. For example, you could integrate a decentralized exchange directly into your contract to perform token swaps. Decentralized applications often involve multiple contracts, each with a dedicated role, working together to achieve complex functionality—similar to microservices in backend systems."}],"role":"pseudoSymbol","kind":"section","title":"Perform a Synchronous Call","identifier":"doc:\/\/Space\/tutorials\/Space\/SyncCalls#Perform-a-Synchronous-Call"},"doc://Space/tutorials/Space/InstallingTools":{"estimatedTime":"10min","url":"\/tutorials\/space\/installingtools","role":"project","type":"topic","identifier":"doc:\/\/Space\/tutorials\/Space\/InstallingTools","title":"Install the Necessary Tools","abstract":[{"type":"text","text":"Before writing your first smart contract with Space, ensure you have the necessary tools installed."}],"kind":"project"},"doc://Space/tutorials/Space":{"identifier":"doc:\/\/Space\/tutorials\/Space","title":"Meet Space","abstract":[{"type":"text","text":"Discover how Space simplifies blockchain development using Swift. Dive into the world of Web3 with ease and efficiency."}],"type":"topic","role":"overview","kind":"overview","url":"\/tutorials\/space"},"GetInfoSection1Step8.swift":{"identifier":"GetInfoSection1Step8.swift","type":"file","fileName":"lib.swift","content":["import Space","","@Contract struct MyContract {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","    @Mapping<Address, BigUint>(key: \"depositedTokens\") var depositedTokensForAddress","    ","    init(tokenIdentifier: Buffer) {","        self.tokenIdentifier = tokenIdentifier","    }","    ","    public mutating func deposit() {","        let caller = Message.caller","        let payment = Message.singleFungibleEsdt","        ","        guard payment.tokenIdentifier == self.tokenIdentifier else {","            smartContractError(message: \"Wrong payment provided\")","        }","    }","}"],"syntax":"swift","highlights":[{"line":14},{"line":15},{"line":16},{"line":17}],"fileType":"swift"},"doc://Space/tutorials/Space/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges":{"identifier":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges","title":"Handling Heap Allocation Challenges","abstract":[{"type":"text","text":"Space provides types that allow you to leverage the full potential of the SpaceVM."}],"type":"section","role":"pseudoSymbol","kind":"section","url":"\/tutorials\/space\/familiarizewithtypes#Handling-Heap-Allocation-Challenges"},"doc://Space/tutorials/Space/FamiliarizeWithTypes":{"role":"project","identifier":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes","title":"Exploring Space's Types","url":"\/tutorials\/space\/familiarizewithtypes","type":"topic","kind":"project","estimatedTime":"20min","abstract":[{"type":"text","text":"Space provides types that allow you to leverage the full potential of the SpaceVM."}]},"GetInfoSection2Step3.swift":{"identifier":"GetInfoSection2Step3.swift","fileType":"swift","highlights":[{"line":7}],"content":["import Space","","let secondsInADay: UInt64 = 86_400","","@Contract struct MyContract {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","    @Mapping<Address, UInt64>(key: \"lastDepositTime\") var lastDepositTimeForAddress","    @Mapping<Address, BigUint>(key: \"depositedTokens\") var depositedTokensForAddress","    ","    init(tokenIdentifier: Buffer) {","        self.tokenIdentifier = tokenIdentifier","    }","    ","    public mutating func deposit() {","        let caller = Message.caller","        let payment = Message.singleFungibleEsdt","        ","        guard payment.tokenIdentifier == self.tokenIdentifier else {","            smartContractError(message: \"Wrong payment provided\")","        }","        ","        self.depositedTokensForAddress[caller] = self.depositedTokensForAddress[caller] + payment.amount","    }","}"],"fileName":"lib.swift","type":"file","syntax":"swift"},"doc://Space/tutorials/Space/InstallingTools#Setting-Up-the-Space-CLI":{"abstract":[{"type":"text","text":"Before writing your first smart contract with Space, ensure you have the necessary tools installed."}],"url":"\/tutorials\/space\/installingtools#Setting-Up-the-Space-CLI","role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/Space\/tutorials\/Space\/InstallingTools#Setting-Up-the-Space-CLI","type":"section","title":"Setting Up the Space CLI"},"GetInfoSection2Step7.swift":{"identifier":"GetInfoSection2Step7.swift","type":"file","fileName":"lib.swift","content":["import Space","","let secondsInADay: UInt64 = 86_400","","@Contract struct MyContract {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","    @Mapping<Address, UInt64>(key: \"lastDepositTime\") var lastDepositTimeForAddress","    @Mapping<Address, BigUint>(key: \"depositedTokens\") var depositedTokensForAddress","    ","    init(tokenIdentifier: Buffer) {","        self.tokenIdentifier = tokenIdentifier","    }","    ","    public mutating func deposit() {","        let caller = Message.caller","        let payment = Message.singleFungibleEsdt","        ","        guard payment.tokenIdentifier == self.tokenIdentifier else {","            smartContractError(message: \"Wrong payment provided\")","        }","        ","        let currentTime = Blockchain.getBlockTimestamp()","        let callerLastDepositTime = self.lastDepositTimeForAddress[caller]","        let nextAllowedTime = callerLastDepositTime + secondsInADay","        ","        guard currentTime > nextAllowedTime else {","            ","        }","        ","        self.depositedTokensForAddress[caller] = self.depositedTokensForAddress[caller] + payment.amount","    }","}"],"syntax":"swift","highlights":[{"line":26},{"line":27},{"line":28},{"line":29}],"fileType":"swift"},"GetInfoSection2Step4.swift":{"identifier":"GetInfoSection2Step4.swift","fileType":"swift","highlights":[{"line":22},{"line":23}],"content":["import Space","","let secondsInADay: UInt64 = 86_400","","@Contract struct MyContract {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","    @Mapping<Address, UInt64>(key: \"lastDepositTime\") var lastDepositTimeForAddress","    @Mapping<Address, BigUint>(key: \"depositedTokens\") var depositedTokensForAddress","    ","    init(tokenIdentifier: Buffer) {","        self.tokenIdentifier = tokenIdentifier","    }","    ","    public mutating func deposit() {","        let caller = Message.caller","        let payment = Message.singleFungibleEsdt","        ","        guard payment.tokenIdentifier == self.tokenIdentifier else {","            smartContractError(message: \"Wrong payment provided\")","        }","        ","        let currentTime = Blockchain.getBlockTimestamp()","        ","        self.depositedTokensForAddress[caller] = self.depositedTokensForAddress[caller] + payment.amount","    }","}"],"fileName":"lib.swift","type":"file","syntax":"swift"},"doc://Space/tutorials/Space/InstallingTools#Installing-Spaces-Dependencies":{"identifier":"doc:\/\/Space\/tutorials\/Space\/InstallingTools#Installing-Spaces-Dependencies","title":"Installing Space's Dependencies","abstract":[{"type":"text","text":"Before writing your first smart contract with Space, ensure you have the necessary tools installed."}],"type":"section","role":"pseudoSymbol","kind":"section","url":"\/tutorials\/space\/installingtools#Installing-Spaces-Dependencies"},"doc://Space/tutorials/Space/FamiliarizeWithTypes#Understanding-the-Buffer-Type":{"identifier":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Understanding-the-Buffer-Type","title":"Understanding the Buffer Type","abstract":[{"type":"text","text":"Space provides types that allow you to leverage the full potential of the SpaceVM."}],"role":"pseudoSymbol","kind":"section","url":"\/tutorials\/space\/familiarizewithtypes#Understanding-the-Buffer-Type","type":"section"},"GetInfoSection1Step1.swift":{"identifier":"GetInfoSection1Step1.swift","type":"file","fileName":"lib.swift","content":["import Space","","@Contract struct MyContract {","    ","}"],"syntax":"swift","highlights":[],"fileType":"swift"},"doc://Space/tutorials/Space/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract":{"type":"section","identifier":"doc:\/\/Space\/tutorials\/Space\/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract","title":"Initializing and Compiling Your First Smart Contract","role":"pseudoSymbol","kind":"section","abstract":[{"type":"text","text":"Before writing your first smart contract with Space, ensure you have the necessary tools installed."}],"url":"\/tutorials\/space\/installingtools#Initializing-and-Compiling-Your-First-Smart-Contract"},"GetInfoSection2Step9.swift":{"identifier":"GetInfoSection2Step9.swift","fileType":"swift","highlights":[{"line":28},{"line":29}],"content":["import Space","","let secondsInADay: UInt64 = 86_400","","@Contract struct MyContract {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","    @Mapping<Address, UInt64>(key: \"lastDepositTime\") var lastDepositTimeForAddress","    @Mapping<Address, BigUint>(key: \"depositedTokens\") var depositedTokensForAddress","    ","    init(tokenIdentifier: Buffer) {","        self.tokenIdentifier = tokenIdentifier","    }","    ","    public mutating func deposit() {","        let caller = Message.caller","        let payment = Message.singleFungibleEsdt","        ","        guard payment.tokenIdentifier == self.tokenIdentifier else {","            smartContractError(message: \"Wrong payment provided\")","        }","        ","        let currentTime = Blockchain.getBlockTimestamp()","        let callerLastDepositTime = self.lastDepositTimeForAddress[caller]","        let nextAllowedTime = callerLastDepositTime + secondsInADay","        ","        guard currentTime > nextAllowedTime else {","            let secondsRemaining = nextAllowedTime - currentTime","            ","            smartContractError(message: \"Not allowed to deposit yet. Please wait \\(secondsRemaining) seconds.\")","        }","        ","        self.depositedTokensForAddress[caller] = self.depositedTokensForAddress[caller] + payment.amount","    }","}"],"fileName":"lib.swift","type":"file","syntax":"swift"},"doc://Space/tutorials/Space/FamiliarizeWithTypes#Working-with-the-Vector-Type":{"abstract":[{"type":"text","text":"Space provides types that allow you to leverage the full potential of the SpaceVM."}],"url":"\/tutorials\/space\/familiarizewithtypes#Working-with-the-Vector-Type","role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Working-with-the-Vector-Type","type":"section","title":"Working with the Vector Type"},"GetInfoSection1Step6.swift":{"identifier":"GetInfoSection1Step6.swift","type":"file","fileName":"lib.swift","content":["import Space","","@Contract struct MyContract {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","    @Mapping<Address, BigUint>(key: \"depositedTokens\") var depositedTokensForAddress","    ","    init(tokenIdentifier: Buffer) {","        self.tokenIdentifier = tokenIdentifier","    }","    ","    public mutating func deposit() {","        let caller = Message.caller","    }","}"],"syntax":"swift","highlights":[{"line":12}],"fileType":"swift"},"GetInfoSection2Step12.swift":{"identifier":"GetInfoSection2Step12.swift","fileType":"swift","highlights":[{"line":23},{"line":35},{"line":36},{"line":37},{"line":38}],"content":["import Space","","let secondsInADay: UInt64 = 86_400","","@Contract struct MyContract {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","    @Mapping<Address, UInt64>(key: \"lastDepositTime\") var lastDepositTimeForAddress","    @Mapping<Address, BigUint>(key: \"depositedTokens\") var depositedTokensForAddress","    ","    init(tokenIdentifier: Buffer) {","        self.tokenIdentifier = tokenIdentifier","    }","    ","    public mutating func deposit() {","        let caller = Message.caller","        let payment = Message.singleFungibleEsdt","        ","        guard payment.tokenIdentifier == self.tokenIdentifier else {","            smartContractError(message: \"Wrong payment provided\")","        }","        ","        let callerLastDepositTime = self.lastDepositTimeForAddress[caller]","        let currentTime = Blockchain.getBlockTimestamp()","        let nextAllowedTime = callerLastDepositTime + secondsInADay","        ","        guard currentTime > nextAllowedTime else {","            let secondsRemaining = nextAllowedTime - currentTime","            ","            smartContractError(message: \"Not allowed to deposit yet. Please wait \\(secondsRemaining) seconds.\")","        }","        ","        let callerTokenBalance = caller.getBalance(tokenIdentifier: payment.tokenIdentifier)","        let maxAllowedDeposit = callerTokenBalance \/ 10","        ","        guard payment.amount <= maxAllowedDeposit else {","            smartContractError(message: \"Payment amount should not be greater than 10% of the caller's balance for the token. Allowance: \\(maxAllowedDeposit)\")","        }","        ","        self.depositedTokensForAddress[caller] = self.depositedTokensForAddress[caller] + payment.amount","    }","}"],"fileName":"lib.swift","type":"file","syntax":"swift"},"doc://Space/tutorials/Space/GetInfo#Accessing-Transaction-Context-Data":{"identifier":"doc:\/\/Space\/tutorials\/Space\/GetInfo#Accessing-Transaction-Context-Data","title":"Accessing Transaction Context Data","abstract":[{"text":"Many smart contracts rely on contextual data to execute their operations effectively. This data can include input payments, the caller’s address, the current time, the balance of a specific account, or even the contract owner.","type":"text"}],"type":"section","role":"pseudoSymbol","kind":"section","url":"\/tutorials\/space\/getinfo#Accessing-Transaction-Context-Data"},"GetInfoSection2Step13.swift":{"identifier":"GetInfoSection2Step13.swift","type":"file","fileName":"lib.swift","content":["import Space","","let secondsInADay: UInt64 = 86_400","","@Contract struct MyContract {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","    @Mapping<Address, UInt64>(key: \"lastDepositTime\") var lastDepositTimeForAddress","    @Mapping<Address, BigUint>(key: \"depositedTokens\") var depositedTokensForAddress","    ","    init(tokenIdentifier: Buffer) {","        self.tokenIdentifier = tokenIdentifier","    }","    ","    public mutating func deposit() {","        let caller = Message.caller","        let payment = Message.singleFungibleEsdt","        ","        guard payment.tokenIdentifier == self.tokenIdentifier else {","            smartContractError(message: \"Wrong payment provided\")","        }","        ","        let callerLastDepositTime = self.lastDepositTimeForAddress[caller]","        let currentTime = Blockchain.getBlockTimestamp()","        let nextAllowedTime = callerLastDepositTime + secondsInADay","        ","        guard currentTime > nextAllowedTime else {","            let secondsRemaining = nextAllowedTime - currentTime","            ","            smartContractError(message: \"Not allowed to deposit yet. Please wait \\(secondsRemaining) seconds.\")","        }","        ","        let callerTokenBalance = caller.getBalance(tokenIdentifier: payment.tokenIdentifier)","        let maxAllowedDeposit = callerTokenBalance \/ 10","        ","        guard payment.amount <= maxAllowedDeposit else {","            smartContractError(message: \"Payment amount should not be greater than 10% of the caller's balance for the token. Allowance: \\(maxAllowedDeposit)\")","        }","        ","        self.depositedTokensForAddress[caller] = self.depositedTokensForAddress[caller] + payment.amount","        self.lastDepositTimeForAddress[caller] = currentTime","    }","}"],"syntax":"swift","highlights":[{"line":40}],"fileType":"swift"},"doc://Space/tutorials/Space/CodingYourFirstContract":{"identifier":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract","estimatedTime":"20min","title":"Building Your First Smart Contract","abstract":[{"type":"text","text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user."}],"type":"topic","role":"project","kind":"project","url":"\/tutorials\/space\/codingyourfirstcontract"},"GetInfoSection2Step11.swift":{"identifier":"GetInfoSection2Step11.swift","fileType":"swift","highlights":[{"line":33}],"content":["import Space","","let secondsInADay: UInt64 = 86_400","","@Contract struct MyContract {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","    @Mapping<Address, UInt64>(key: \"lastDepositTime\") var lastDepositTimeForAddress","    @Mapping<Address, BigUint>(key: \"depositedTokens\") var depositedTokensForAddress","    ","    init(tokenIdentifier: Buffer) {","        self.tokenIdentifier = tokenIdentifier","    }","    ","    public mutating func deposit() {","        let caller = Message.caller","        let payment = Message.singleFungibleEsdt","        ","        guard payment.tokenIdentifier == self.tokenIdentifier else {","            smartContractError(message: \"Wrong payment provided\")","        }","        ","        let currentTime = Blockchain.getBlockTimestamp()","        let callerLastDepositTime = self.lastDepositTimeForAddress[caller]","        let nextAllowedTime = callerLastDepositTime + secondsInADay","        ","        guard currentTime > nextAllowedTime else {","            let secondsRemaining = nextAllowedTime - currentTime","            ","            smartContractError(message: \"Not allowed to deposit yet. Please wait \\(secondsRemaining) seconds.\")","        }","        ","        let callerTokenBalance = caller.getBalance(tokenIdentifier: payment.tokenIdentifier)","        let maxAllowedDeposit = callerTokenBalance \/ 10","        ","        self.depositedTokensForAddress[caller] = self.depositedTokensForAddress[caller] + payment.amount","    }","}"],"fileName":"lib.swift","type":"file","syntax":"swift"},"doc://Space/tutorials/Space/Getting-Started/Installing-the-Tools":{"identifier":"doc:\/\/Space\/tutorials\/Space\/Getting-Started\/Installing-the-Tools","title":"Installing the Tools","abstract":[],"type":"topic","role":"article","kind":"article","url":"\/tutorials\/space\/getting-started\/installing-the-tools"},"doc://Space/tutorials/Space/SyncCalls#Declare-the-Callee-Proxy":{"abstract":[{"type":"text","text":"Smart contracts can interact not only with users but also with other smart contracts. This enables more advanced protocols by leveraging existing ones. For example, you could integrate a decentralized exchange directly into your contract to perform token swaps. Decentralized applications often involve multiple contracts, each with a dedicated role, working together to achieve complex functionality—similar to microservices in backend systems."}],"url":"\/tutorials\/space\/synccalls#Declare-the-Callee-Proxy","role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/Space\/tutorials\/Space\/SyncCalls#Declare-the-Callee-Proxy","type":"section","title":"Declare the Callee Proxy"},"doc://Space/tutorials/Space/CodingYourFirstContract#Initializing-the-Project":{"abstract":[{"type":"text","text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user."}],"url":"\/tutorials\/space\/codingyourfirstcontract#Initializing-the-Project","role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract#Initializing-the-Project","type":"section","title":"Initializing the Project"},"GetInfoSection1Step4.swift":{"identifier":"GetInfoSection1Step4.swift","type":"file","fileName":"lib.swift","content":["import Space","","@Contract struct MyContract {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","    @Mapping<Address, BigUint>(key: \"depositedTokens\") var depositedTokensForAddress","    ","    init(tokenIdentifier: Buffer) {","        self.tokenIdentifier = tokenIdentifier","    }","}"],"syntax":"swift","highlights":[{"line":6},{"line":7},{"line":8},{"line":9}],"fileType":"swift"},"doc://Space/tutorials/Space/FamiliarizeWithTypes#Working-with-the-BigUint-Type":{"identifier":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Working-with-the-BigUint-Type","title":"Working with the BigUint Type","abstract":[{"type":"text","text":"Space provides types that allow you to leverage the full potential of the SpaceVM."}],"type":"section","role":"pseudoSymbol","kind":"section","url":"\/tutorials\/space\/familiarizewithtypes#Working-with-the-BigUint-Type"},"GetInfoSection2Step10.swift":{"identifier":"GetInfoSection2Step10.swift","fileType":"swift","highlights":[{"line":32},{"line":33}],"content":["import Space","","let secondsInADay: UInt64 = 86_400","","@Contract struct MyContract {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","    @Mapping<Address, UInt64>(key: \"lastDepositTime\") var lastDepositTimeForAddress","    @Mapping<Address, BigUint>(key: \"depositedTokens\") var depositedTokensForAddress","    ","    init(tokenIdentifier: Buffer) {","        self.tokenIdentifier = tokenIdentifier","    }","    ","    public mutating func deposit() {","        let caller = Message.caller","        let payment = Message.singleFungibleEsdt","        ","        guard payment.tokenIdentifier == self.tokenIdentifier else {","            smartContractError(message: \"Wrong payment provided\")","        }","        ","        let currentTime = Blockchain.getBlockTimestamp()","        let callerLastDepositTime = self.lastDepositTimeForAddress[caller]","        let nextAllowedTime = callerLastDepositTime + secondsInADay","        ","        guard currentTime > nextAllowedTime else {","            let secondsRemaining = nextAllowedTime - currentTime","            ","            smartContractError(message: \"Not allowed to deposit yet. Please wait \\(secondsRemaining) seconds.\")","        }","        ","        let callerTokenBalance = caller.getBalance(tokenIdentifier: payment.tokenIdentifier)","        ","        self.depositedTokensForAddress[caller] = self.depositedTokensForAddress[caller] + payment.amount","    }","}"],"fileName":"lib.swift","type":"file","syntax":"swift"}}}