{"metadata":{"categoryPathComponent":"Space","role":"project","category":"Space","title":"Retrieving Information from the Blockchain"},"schemaVersion":{"patch":0,"major":0,"minor":3},"hierarchy":{"paths":[["doc:\/\/Space\/tutorials\/Space","doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts","doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Retrieving-Information-from-the-Blockchain"]],"modules":[{"reference":"doc:\/\/Space\/tutorials\/Space\/Getting-Started\/Installing-the-Tools","projects":[{"sections":[{"reference":"doc:\/\/Space\/tutorials\/Space\/InstallingTools#Installing-Spaces-Dependencies","kind":"task"},{"kind":"task","reference":"doc:\/\/Space\/tutorials\/Space\/InstallingTools#Setting-Up-the-Space-CLI"},{"reference":"doc:\/\/Space\/tutorials\/Space\/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract","kind":"task"}],"reference":"doc:\/\/Space\/tutorials\/Space\/InstallingTools"}]},{"reference":"doc:\/\/Space\/tutorials\/Space\/Getting-Started\/Building-Your-First-Smart-Contract","projects":[{"reference":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract","sections":[{"reference":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract#Initializing-the-Project","kind":"task"},{"kind":"task","reference":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract#Writing-the-Contract-Code"},{"reference":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract#Testing-the-Contract","kind":"task"}]}]},{"projects":[{"reference":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes","sections":[{"reference":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges","kind":"task"},{"kind":"task","reference":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Understanding-the-Buffer-Type"},{"reference":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Working-with-the-BigUint-Type","kind":"task"},{"reference":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Working-with-the-Vector-Type","kind":"task"},{"reference":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Creating-Your-Own-Types","kind":"task"}]}],"reference":"doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Exploring-Space's-Types"},{"projects":[{"sections":[{"kind":"task","reference":"doc:\/\/Space\/tutorials\/Space\/StoreValues#Working-with-Storage-for-Single-Value-Persistence"},{"kind":"task","reference":"doc:\/\/Space\/tutorials\/Space\/StoreValues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage"}],"reference":"doc:\/\/Space\/tutorials\/Space\/StoreValues"}],"reference":"doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Persisting-Data-Across-Executions"},{"projects":[{"reference":"doc:\/\/Space\/tutorials\/Space\/GetInfo","sections":[{"reference":"doc:\/\/Space\/tutorials\/Space\/GetInfo#Accessing-Transaction-Context-Data","kind":"task"},{"reference":"doc:\/\/Space\/tutorials\/Space\/GetInfo#Accessing-Blockchain-Context-Data","kind":"task"}]}],"reference":"doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Retrieving-Information-from-the-Blockchain"},{"reference":"doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Interact-with-Other-Contracts","projects":[{"reference":"doc:\/\/Space\/tutorials\/Space\/SyncCalls","sections":[{"reference":"doc:\/\/Space\/tutorials\/Space\/SyncCalls#Declare-the-Callee-Proxy","kind":"task"},{"kind":"task","reference":"doc:\/\/Space\/tutorials\/Space\/SyncCalls#Perform-a-Synchronous-Call"}]}]}],"reference":"doc:\/\/Space\/tutorials\/Space"},"kind":"project","sections":[{"content":[{"inlineContent":[{"type":"text","text":"Many smart contracts rely on contextual data to execute their operations effectively. This data can include input payments, the caller’s address, the current time, the balance of a specific account, or even the contract owner."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The Space framework provides an intuitive way to retrieve all of this information using the "},{"type":"codeVoice","code":"Message"},{"text":" and ","type":"text"},{"code":"Blockchain","type":"codeVoice"},{"text":" objects.","type":"text"}]}],"title":"Retrieving Information from the Blockchain","kind":"hero","estimatedTimeInMinutes":10,"chapter":"Retrieving Information from the Blockchain"},{"kind":"tasks","tasks":[{"anchor":"Accessing-Transaction-Context-Data","contentSection":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In this section, you will create a simple smart contract that allows users to deposit a specified fungible token. The contract will track the total amount of tokens deposited by each user."}]}],"mediaPosition":"trailing","kind":"contentAndMedia"}],"title":"Accessing Transaction Context Data","stepsSection":[{"type":"step","content":[{"inlineContent":[{"type":"text","text":"Start by defining the contract’s basic structure."}],"type":"paragraph"}],"code":"GetInfoSection1Step1.swift","caption":[],"runtimePreview":null,"media":null},{"media":null,"type":"step","content":[{"inlineContent":[{"type":"text","text":"Track the specific token type to be deposited. Store its identifier in the contract’s storage using a "},{"code":"@Storage","type":"codeVoice"},{"type":"text","text":" variable."}],"type":"paragraph"}],"code":"GetInfoSection1Step2.swift","runtimePreview":null,"caption":[{"inlineContent":[{"type":"text","text":"Note: This variable will be initialized later in the contract’s "},{"code":"init","type":"codeVoice"},{"type":"text","text":" function."}],"type":"paragraph"}]},{"code":"GetInfoSection1Step3.swift","media":null,"caption":[{"inlineContent":[{"type":"text","text":"Reminder: Numeric storage variables default to 0."}],"type":"paragraph"}],"runtimePreview":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a "},{"code":"@Mapping","type":"codeVoice"},{"type":"text","text":" variable to keep track of the total amount deposited by each user."}]}]},{"media":null,"type":"step","caption":[],"content":[{"inlineContent":[{"text":"Add an initializer to the contract, which accepts the token identifier as a parameter.","type":"text"}],"type":"paragraph"}],"code":"GetInfoSection1Step4.swift","runtimePreview":null},{"caption":[],"type":"step","media":null,"code":"GetInfoSection1Step5.swift","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Define the "},{"type":"codeVoice","code":"deposit"},{"text":" endpoint for the contract.","type":"text"}]}]},{"caption":[],"media":null,"code":"GetInfoSection1Step6.swift","type":"step","runtimePreview":null,"content":[{"inlineContent":[{"text":"Use the ","type":"text"},{"type":"codeVoice","code":"Message.caller"},{"text":" property to retrieve the address of the user making the deposit.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Access the single fungible token payment using ","type":"text"},{"code":"Message.singleFungibleEsdt","type":"codeVoice"},{"type":"text","text":". If the transaction doesn’t include exactly one fungible token payment, the transaction will fail."}],"type":"paragraph"}],"media":null,"type":"step","code":"GetInfoSection1Step7.swift","runtimePreview":null,"caption":[{"inlineContent":[{"text":"Note: The ","type":"text"},{"type":"codeVoice","code":"Message"},{"type":"text","text":" object also allows retrieval of multi payments, non-fungible tokens, and EGLD payments."}],"type":"paragraph"}]},{"code":"GetInfoSection1Step8.swift","type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Verify the payment by comparing the token identifier with the stored value."}]}],"media":null,"runtimePreview":null,"caption":[]},{"caption":[],"media":null,"code":"GetInfoSection1Step9.swift","runtimePreview":null,"type":"step","content":[{"inlineContent":[{"type":"text","text":"Add the payment amount to the storage mapping for the caller’s address."}],"type":"paragraph"}]}]},{"title":"Accessing Blockchain Context Data","stepsSection":[{"media":null,"caption":[],"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Start by using the contract from the previous section.","type":"text"}]}],"code":"GetInfoSection2Step1.swift","runtimePreview":null},{"content":[{"inlineContent":[{"type":"text","text":"Define a global constant representing the number of seconds in a day."}],"type":"paragraph"}],"type":"step","code":"GetInfoSection2Step2.swift","media":null,"runtimePreview":null,"caption":[]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Add a mapping to store the last deposit time for each user.","type":"text"}]}],"code":"GetInfoSection2Step3.swift","caption":[],"type":"step","runtimePreview":null,"media":null},{"type":"step","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In the "},{"code":"deposit","type":"codeVoice"},{"type":"text","text":" endpoint, retrieve the current timestamp using "},{"code":"Blockchain.getBlockTimestamp()","type":"codeVoice"},{"type":"text","text":"."}]}],"caption":[{"inlineContent":[{"type":"text","text":"Note: The timestamp is the number of seconds since January 1, 1970."}],"type":"paragraph"}],"media":null,"code":"GetInfoSection2Step4.swift"},{"code":"GetInfoSection2Step5.swift","type":"step","caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Retrieve the last deposit time for the caller from the storage."}]}],"media":null,"runtimePreview":null},{"runtimePreview":null,"content":[{"inlineContent":[{"text":"Compute the next allowed deposit time by adding one day’s worth of seconds to the last deposit time.","type":"text"}],"type":"paragraph"}],"media":null,"caption":[],"type":"step","code":"GetInfoSection2Step6.swift"},{"runtimePreview":null,"media":null,"code":"GetInfoSection2Step7.swift","caption":[],"type":"step","content":[{"inlineContent":[{"text":"Ensure the caller is allowed to deposit now.","type":"text"}],"type":"paragraph"}]},{"media":null,"type":"step","caption":[],"code":"GetInfoSection2Step8.swift","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the deposit isn’t allowed yet, calculate the remaining time before the next deposit is permitted."}]}]},{"code":"GetInfoSection2Step9.swift","runtimePreview":null,"media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Use the calculated time to return an error message with the remaining time.","type":"text"}]}],"type":"step","caption":[{"inlineContent":[{"text":"Tip: You can interpolate buffers, addresses, and numeric types into string literals when creating error messages.","type":"text"}],"type":"paragraph"}]},{"runtimePreview":null,"code":"GetInfoSection2Step10.swift","type":"step","caption":[{"inlineContent":[{"text":"Tip: If no token identifier is provided, the EGLD balance is returned.","type":"text"}],"type":"paragraph"}],"media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Retrieve the caller’s token balance using "},{"code":"Blockchain.getBalance()","type":"codeVoice"},{"text":".","type":"text"}]}]},{"media":null,"code":"GetInfoSection2Step11.swift","runtimePreview":null,"caption":[{"inlineContent":[{"type":"text","text":"Note: Be cautious when performing integer division as any fractional part is discarded."}],"type":"paragraph"}],"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Calculate the maximum allowable deposit by dividing the caller’s token balance by 10."}]}]},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Ensure the deposit amount does not exceed the maximum allowable limit."}]}],"caption":[],"media":null,"code":"GetInfoSection2Step12.swift","runtimePreview":null},{"type":"step","media":null,"code":"GetInfoSection2Step13.swift","runtimePreview":null,"caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Update the last deposit time for the caller to the current block timestamp."}]}]}],"contentSection":[{"mediaPosition":"trailing","content":[{"inlineContent":[{"text":"In this section, you will improve the previous contract by adding constraints: each address can deposit only once every 24 hours, and deposits must not exceed 10% of the user’s token balance.","type":"text"}],"type":"paragraph"}],"kind":"contentAndMedia"}],"anchor":"Accessing-Blockchain-Context-Data"}]},{"action":{"overridingTitle":"Get started","isActive":true,"overridingTitleInlineContent":[{"text":"Get started","type":"text"}],"identifier":"doc:\/\/Space\/tutorials\/Space\/SyncCalls","type":"reference"},"title":"Interact with Other Contracts","kind":"callToAction","featuredEyebrow":"Tutorial","abstract":[{"text":"Smart contracts can interact not only with users but also with other smart contracts. This enables more advanced protocols by leveraging existing ones. For example, you could integrate a decentralized exchange directly into your contract to perform token swaps. Decentralized applications often involve multiple contracts, each with a dedicated role, working together to achieve complex functionality—similar to microservices in backend systems.","type":"text"}]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/tutorials\/space\/getinfo"]}],"identifier":{"url":"doc:\/\/Space\/tutorials\/Space\/GetInfo","interfaceLanguage":"swift"},"references":{"doc://Space/tutorials/Space/GetInfo#Accessing-Transaction-Context-Data":{"url":"\/tutorials\/space\/getinfo#Accessing-Transaction-Context-Data","kind":"section","role":"pseudoSymbol","identifier":"doc:\/\/Space\/tutorials\/Space\/GetInfo#Accessing-Transaction-Context-Data","type":"section","title":"Accessing Transaction Context Data","abstract":[{"text":"Many smart contracts rely on contextual data to execute their operations effectively. This data can include input payments, the caller’s address, the current time, the balance of a specific account, or even the contract owner.","type":"text"}]},"doc://Space/tutorials/Space/SyncCalls#Perform-a-Synchronous-Call":{"type":"section","title":"Perform a Synchronous Call","identifier":"doc:\/\/Space\/tutorials\/Space\/SyncCalls#Perform-a-Synchronous-Call","kind":"section","abstract":[{"text":"Smart contracts can interact not only with users but also with other smart contracts. This enables more advanced protocols by leveraging existing ones. For example, you could integrate a decentralized exchange directly into your contract to perform token swaps. Decentralized applications often involve multiple contracts, each with a dedicated role, working together to achieve complex functionality—similar to microservices in backend systems.","type":"text"}],"role":"pseudoSymbol","url":"\/tutorials\/space\/synccalls#Perform-a-Synchronous-Call"},"GetInfoSection2Step6.swift":{"content":["import Space","","let secondsInADay: UInt64 = 86_400","","@Contract struct MyContract {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","    @Mapping<Address, UInt64>(key: \"lastDepositTime\") var lastDepositTimeForAddress","    @Mapping<Address, BigUint>(key: \"depositedTokens\") var depositedTokensForAddress","    ","    init(tokenIdentifier: Buffer) {","        self.tokenIdentifier = tokenIdentifier","    }","    ","    public mutating func deposit() {","        let caller = Message.caller","        let payment = Message.singleFungibleEsdt","        ","        guard payment.tokenIdentifier == self.tokenIdentifier else {","            smartContractError(message: \"Wrong payment provided\")","        }","        ","        let currentTime = Blockchain.getBlockTimestamp()","        let callerLastDepositTime = self.lastDepositTimeForAddress[caller]","        let nextAllowedTime = callerLastDepositTime + secondsInADay","        ","        self.depositedTokensForAddress[caller] = self.depositedTokensForAddress[caller] + payment.amount","    }","}"],"identifier":"GetInfoSection2Step6.swift","syntax":"swift","fileName":"lib.swift","fileType":"swift","highlights":[{"line":24}],"type":"file"},"doc://Space/tutorials/Space/FamiliarizeWithTypes":{"role":"project","url":"\/tutorials\/space\/familiarizewithtypes","estimatedTime":"20min","abstract":[{"text":"Space provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}],"identifier":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes","title":"Exploring Space's Types","kind":"project","type":"topic"},"doc://Space/tutorials/Space/StoreValues#Working-with-Storage-for-Single-Value-Persistence":{"abstract":[{"text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory.","type":"text"}],"kind":"section","title":"Working with @Storage for Single Value Persistence","role":"pseudoSymbol","url":"\/tutorials\/space\/storevalues#Working-with-Storage-for-Single-Value-Persistence","identifier":"doc:\/\/Space\/tutorials\/Space\/StoreValues#Working-with-Storage-for-Single-Value-Persistence","type":"section"},"doc://Space/tutorials/Space/InstallingTools":{"type":"topic","title":"Install the Necessary Tools","identifier":"doc:\/\/Space\/tutorials\/Space\/InstallingTools","kind":"project","abstract":[{"text":"Before writing your first smart contract with Space, ensure you have the necessary tools installed.","type":"text"}],"role":"project","url":"\/tutorials\/space\/installingtools","estimatedTime":"10min"},"GetInfoSection2Step5.swift":{"identifier":"GetInfoSection2Step5.swift","content":["import Space","","let secondsInADay: UInt64 = 86_400","","@Contract struct MyContract {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","    @Mapping<Address, UInt64>(key: \"lastDepositTime\") var lastDepositTimeForAddress","    @Mapping<Address, BigUint>(key: \"depositedTokens\") var depositedTokensForAddress","    ","    init(tokenIdentifier: Buffer) {","        self.tokenIdentifier = tokenIdentifier","    }","    ","    public mutating func deposit() {","        let caller = Message.caller","        let payment = Message.singleFungibleEsdt","        ","        guard payment.tokenIdentifier == self.tokenIdentifier else {","            smartContractError(message: \"Wrong payment provided\")","        }","        ","        let currentTime = Blockchain.getBlockTimestamp()","        let callerLastDepositTime = self.lastDepositTimeForAddress[caller]","        ","        self.depositedTokensForAddress[caller] = self.depositedTokensForAddress[caller] + payment.amount","    }","}"],"fileName":"lib.swift","type":"file","syntax":"swift","highlights":[{"line":23}],"fileType":"swift"},"GetInfoSection2Step8.swift":{"content":["import Space","","let secondsInADay: UInt64 = 86_400","","@Contract struct MyContract {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","    @Mapping<Address, UInt64>(key: \"lastDepositTime\") var lastDepositTimeForAddress","    @Mapping<Address, BigUint>(key: \"depositedTokens\") var depositedTokensForAddress","    ","    init(tokenIdentifier: Buffer) {","        self.tokenIdentifier = tokenIdentifier","    }","    ","    public mutating func deposit() {","        let caller = Message.caller","        let payment = Message.singleFungibleEsdt","        ","        guard payment.tokenIdentifier == self.tokenIdentifier else {","            smartContractError(message: \"Wrong payment provided\")","        }","        ","        let currentTime = Blockchain.getBlockTimestamp()","        let callerLastDepositTime = self.lastDepositTimeForAddress[caller]","        let nextAllowedTime = callerLastDepositTime + secondsInADay","        ","        guard currentTime > nextAllowedTime else {","            let secondsRemaining = nextAllowedTime - currentTime","        }","        ","        self.depositedTokensForAddress[caller] = self.depositedTokensForAddress[caller] + payment.amount","    }","}"],"identifier":"GetInfoSection2Step8.swift","syntax":"swift","fileName":"lib.swift","fileType":"swift","highlights":[{"line":27}],"type":"file"},"GetInfoSection2Step3.swift":{"identifier":"GetInfoSection2Step3.swift","content":["import Space","","let secondsInADay: UInt64 = 86_400","","@Contract struct MyContract {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","    @Mapping<Address, UInt64>(key: \"lastDepositTime\") var lastDepositTimeForAddress","    @Mapping<Address, BigUint>(key: \"depositedTokens\") var depositedTokensForAddress","    ","    init(tokenIdentifier: Buffer) {","        self.tokenIdentifier = tokenIdentifier","    }","    ","    public mutating func deposit() {","        let caller = Message.caller","        let payment = Message.singleFungibleEsdt","        ","        guard payment.tokenIdentifier == self.tokenIdentifier else {","            smartContractError(message: \"Wrong payment provided\")","        }","        ","        self.depositedTokensForAddress[caller] = self.depositedTokensForAddress[caller] + payment.amount","    }","}"],"fileName":"lib.swift","type":"file","syntax":"swift","highlights":[{"line":7}],"fileType":"swift"},"GetInfoSection2Step9.swift":{"content":["import Space","","let secondsInADay: UInt64 = 86_400","","@Contract struct MyContract {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","    @Mapping<Address, UInt64>(key: \"lastDepositTime\") var lastDepositTimeForAddress","    @Mapping<Address, BigUint>(key: \"depositedTokens\") var depositedTokensForAddress","    ","    init(tokenIdentifier: Buffer) {","        self.tokenIdentifier = tokenIdentifier","    }","    ","    public mutating func deposit() {","        let caller = Message.caller","        let payment = Message.singleFungibleEsdt","        ","        guard payment.tokenIdentifier == self.tokenIdentifier else {","            smartContractError(message: \"Wrong payment provided\")","        }","        ","        let currentTime = Blockchain.getBlockTimestamp()","        let callerLastDepositTime = self.lastDepositTimeForAddress[caller]","        let nextAllowedTime = callerLastDepositTime + secondsInADay","        ","        guard currentTime > nextAllowedTime else {","            let secondsRemaining = nextAllowedTime - currentTime","            ","            smartContractError(message: \"Not allowed to deposit yet. Please wait \\(secondsRemaining) seconds.\")","        }","        ","        self.depositedTokensForAddress[caller] = self.depositedTokensForAddress[caller] + payment.amount","    }","}"],"identifier":"GetInfoSection2Step9.swift","syntax":"swift","fileName":"lib.swift","fileType":"swift","highlights":[{"line":28},{"line":29}],"type":"file"},"GetInfoSection1Step6.swift":{"identifier":"GetInfoSection1Step6.swift","content":["import Space","","@Contract struct MyContract {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","    @Mapping<Address, BigUint>(key: \"depositedTokens\") var depositedTokensForAddress","    ","    init(tokenIdentifier: Buffer) {","        self.tokenIdentifier = tokenIdentifier","    }","    ","    public mutating func deposit() {","        let caller = Message.caller","    }","}"],"fileName":"lib.swift","type":"file","syntax":"swift","highlights":[{"line":12}],"fileType":"swift"},"doc://Space/tutorials/Space/FamiliarizeWithTypes#Creating-Your-Own-Types":{"type":"section","identifier":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Creating-Your-Own-Types","abstract":[{"type":"text","text":"Space provides types that allow you to leverage the full potential of the SpaceVM."}],"url":"\/tutorials\/space\/familiarizewithtypes#Creating-Your-Own-Types","title":"Creating Your Own Types","kind":"section","role":"pseudoSymbol"},"GetInfoSection1Step1.swift":{"content":["import Space","","@Contract struct MyContract {","    ","}"],"identifier":"GetInfoSection1Step1.swift","syntax":"swift","fileName":"lib.swift","fileType":"swift","highlights":[],"type":"file"},"GetInfoSection2Step10.swift":{"identifier":"GetInfoSection2Step10.swift","content":["import Space","","let secondsInADay: UInt64 = 86_400","","@Contract struct MyContract {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","    @Mapping<Address, UInt64>(key: \"lastDepositTime\") var lastDepositTimeForAddress","    @Mapping<Address, BigUint>(key: \"depositedTokens\") var depositedTokensForAddress","    ","    init(tokenIdentifier: Buffer) {","        self.tokenIdentifier = tokenIdentifier","    }","    ","    public mutating func deposit() {","        let caller = Message.caller","        let payment = Message.singleFungibleEsdt","        ","        guard payment.tokenIdentifier == self.tokenIdentifier else {","            smartContractError(message: \"Wrong payment provided\")","        }","        ","        let currentTime = Blockchain.getBlockTimestamp()","        let callerLastDepositTime = self.lastDepositTimeForAddress[caller]","        let nextAllowedTime = callerLastDepositTime + secondsInADay","        ","        guard currentTime > nextAllowedTime else {","            let secondsRemaining = nextAllowedTime - currentTime","            ","            smartContractError(message: \"Not allowed to deposit yet. Please wait \\(secondsRemaining) seconds.\")","        }","        ","        let callerTokenBalance = caller.getBalance(tokenIdentifier: payment.tokenIdentifier)","        ","        self.depositedTokensForAddress[caller] = self.depositedTokensForAddress[caller] + payment.amount","    }","}"],"fileName":"lib.swift","type":"file","syntax":"swift","highlights":[{"line":32},{"line":33}],"fileType":"swift"},"doc://Space/tutorials/Space/GetInfo":{"identifier":"doc:\/\/Space\/tutorials\/Space\/GetInfo","role":"project","url":"\/tutorials\/space\/getinfo","title":"Retrieving Information from the Blockchain","estimatedTime":"10min","abstract":[{"text":"Many smart contracts rely on contextual data to execute their operations effectively. This data can include input payments, the caller’s address, the current time, the balance of a specific account, or even the contract owner.","type":"text"}],"kind":"project","type":"topic"},"doc://Space/tutorials/Space/FamiliarizeWithTypes#Working-with-the-Vector-Type":{"abstract":[{"text":"Space provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}],"kind":"section","title":"Working with the Vector Type","role":"pseudoSymbol","url":"\/tutorials\/space\/familiarizewithtypes#Working-with-the-Vector-Type","identifier":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Working-with-the-Vector-Type","type":"section"},"GetInfoSection1Step9.swift":{"content":["import Space","","@Contract struct MyContract {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","    @Mapping<Address, BigUint>(key: \"depositedTokens\") var depositedTokensForAddress","    ","    init(tokenIdentifier: Buffer) {","        self.tokenIdentifier = tokenIdentifier","    }","    ","    public mutating func deposit() {","        let caller = Message.caller","        let payment = Message.singleFungibleEsdt","        ","        guard payment.tokenIdentifier == self.tokenIdentifier else {","            smartContractError(message: \"Wrong payment provided\")","        }","        ","        self.depositedTokensForAddress[caller] = self.depositedTokensForAddress[caller] + payment.amount","    }","}"],"identifier":"GetInfoSection1Step9.swift","syntax":"swift","fileName":"lib.swift","fileType":"swift","highlights":[{"line":18},{"line":19}],"type":"file"},"doc://Space/tutorials/Space/CodingYourFirstContract#Testing-the-Contract":{"type":"section","identifier":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract#Testing-the-Contract","abstract":[{"type":"text","text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user."}],"url":"\/tutorials\/space\/codingyourfirstcontract#Testing-the-Contract","title":"Testing the Contract","kind":"section","role":"pseudoSymbol"},"doc://Space/tutorials/Space/StoreValues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage":{"abstract":[{"text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory.","type":"text"}],"kind":"section","title":"Leveraging @Mapping for Dynamic Key-Value Storage","role":"pseudoSymbol","url":"\/tutorials\/space\/storevalues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage","identifier":"doc:\/\/Space\/tutorials\/Space\/StoreValues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage","type":"section"},"GetInfoSection1Step2.swift":{"identifier":"GetInfoSection1Step2.swift","content":["import Space","","@Contract struct MyContract {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","}"],"fileName":"lib.swift","type":"file","syntax":"swift","highlights":[{"line":4}],"fileType":"swift"},"doc://Space/tutorials/Space":{"role":"overview","url":"\/tutorials\/space","abstract":[{"text":"Discover how Space simplifies blockchain development using Swift. Dive into the world of Web3 with ease and efficiency.","type":"text"}],"identifier":"doc:\/\/Space\/tutorials\/Space","title":"Meet Space","kind":"overview","type":"topic"},"doc://Space/tutorials/Space/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges":{"type":"section","identifier":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges","abstract":[{"type":"text","text":"Space provides types that allow you to leverage the full potential of the SpaceVM."}],"url":"\/tutorials\/space\/familiarizewithtypes#Handling-Heap-Allocation-Challenges","title":"Handling Heap Allocation Challenges","kind":"section","role":"pseudoSymbol"},"GetInfoSection1Step5.swift":{"content":["import Space","","@Contract struct MyContract {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","    @Mapping<Address, BigUint>(key: \"depositedTokens\") var depositedTokensForAddress","    ","    init(tokenIdentifier: Buffer) {","        self.tokenIdentifier = tokenIdentifier","    }","    ","    public mutating func deposit() {","        ","    }","}"],"identifier":"GetInfoSection1Step5.swift","syntax":"swift","fileName":"lib.swift","fileType":"swift","highlights":[{"line":10},{"line":11},{"line":12},{"line":13}],"type":"file"},"doc://Space/tutorials/Space/FamiliarizeWithTypes#Understanding-the-Buffer-Type":{"role":"pseudoSymbol","url":"\/tutorials\/space\/familiarizewithtypes#Understanding-the-Buffer-Type","abstract":[{"text":"Space provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}],"identifier":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Understanding-the-Buffer-Type","title":"Understanding the Buffer Type","kind":"section","type":"section"},"GetInfoSection1Step3.swift":{"fileName":"lib.swift","syntax":"swift","type":"file","highlights":[{"line":5}],"fileType":"swift","content":["import Space","","@Contract struct MyContract {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","    @Mapping<Address, BigUint>(key: \"depositedTokens\") var depositedTokensForAddress","}"],"identifier":"GetInfoSection1Step3.swift"},"doc://Space/tutorials/Space/InstallingTools#Installing-Spaces-Dependencies":{"url":"\/tutorials\/space\/installingtools#Installing-Spaces-Dependencies","kind":"section","role":"pseudoSymbol","identifier":"doc:\/\/Space\/tutorials\/Space\/InstallingTools#Installing-Spaces-Dependencies","type":"section","title":"Installing Space's Dependencies","abstract":[{"text":"Before writing your first smart contract with Space, ensure you have the necessary tools installed.","type":"text"}]},"doc://Space/tutorials/Space/Getting-Started/Building-Your-First-Smart-Contract":{"abstract":[],"type":"topic","kind":"article","identifier":"doc:\/\/Space\/tutorials\/Space\/Getting-Started\/Building-Your-First-Smart-Contract","url":"\/tutorials\/space\/getting-started\/building-your-first-smart-contract","title":"Building Your First Smart Contract","role":"article"},"GetInfoSection2Step1.swift":{"content":["import Space","","@Contract struct MyContract {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","    @Mapping<Address, BigUint>(key: \"depositedTokens\") var depositedTokensForAddress","    ","    init(tokenIdentifier: Buffer) {","        self.tokenIdentifier = tokenIdentifier","    }","    ","    public mutating func deposit() {","        let caller = Message.caller","        let payment = Message.singleFungibleEsdt","        ","        guard payment.tokenIdentifier == self.tokenIdentifier else {","            smartContractError(message: \"Wrong payment provided\")","        }","        ","        self.depositedTokensForAddress[caller] = self.depositedTokensForAddress[caller] + payment.amount","    }","}"],"identifier":"GetInfoSection2Step1.swift","syntax":"swift","fileName":"lib.swift","fileType":"swift","highlights":[],"type":"file"},"doc://Space/tutorials/Space/Deep-Dive-into-Space-Concepts/Persisting-Data-Across-Executions":{"abstract":[],"type":"topic","kind":"article","identifier":"doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Persisting-Data-Across-Executions","url":"\/tutorials\/space\/deep-dive-into-space-concepts\/persisting-data-across-executions","title":"Persisting Data Across Executions","role":"article"},"doc://Space/tutorials/Space/CodingYourFirstContract#Initializing-the-Project":{"role":"pseudoSymbol","url":"\/tutorials\/space\/codingyourfirstcontract#Initializing-the-Project","abstract":[{"text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user.","type":"text"}],"identifier":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract#Initializing-the-Project","title":"Initializing the Project","kind":"section","type":"section"},"doc://Space/tutorials/Space/FamiliarizeWithTypes#Working-with-the-BigUint-Type":{"identifier":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Working-with-the-BigUint-Type","role":"pseudoSymbol","url":"\/tutorials\/space\/familiarizewithtypes#Working-with-the-BigUint-Type","title":"Working with the BigUint Type","abstract":[{"text":"Space provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}],"kind":"section","type":"section"},"doc://Space/tutorials/Space/Deep-Dive-into-Space-Concepts/Interact-with-Other-Contracts":{"type":"topic","title":"Interact with Other Contracts","identifier":"doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Interact-with-Other-Contracts","kind":"article","abstract":[],"role":"article","url":"\/tutorials\/space\/deep-dive-into-space-concepts\/interact-with-other-contracts"},"doc://Space/tutorials/Space/SyncCalls":{"title":"Interact with Other Contracts","kind":"project","estimatedTime":"15min","identifier":"doc:\/\/Space\/tutorials\/Space\/SyncCalls","type":"topic","abstract":[{"type":"text","text":"Smart contracts can interact not only with users but also with other smart contracts. This enables more advanced protocols by leveraging existing ones. For example, you could integrate a decentralized exchange directly into your contract to perform token swaps. Decentralized applications often involve multiple contracts, each with a dedicated role, working together to achieve complex functionality—similar to microservices in backend systems."}],"role":"project","url":"\/tutorials\/space\/synccalls"},"doc://Space/tutorials/Space/Deep-Dive-into-Space-Concepts/Exploring-Space's-Types":{"title":"Exploring Space's Types","kind":"article","identifier":"doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Exploring-Space's-Types","type":"topic","abstract":[],"role":"article","url":"\/tutorials\/space\/deep-dive-into-space-concepts\/exploring-space's-types"},"GetInfoSection2Step11.swift":{"identifier":"GetInfoSection2Step11.swift","content":["import Space","","let secondsInADay: UInt64 = 86_400","","@Contract struct MyContract {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","    @Mapping<Address, UInt64>(key: \"lastDepositTime\") var lastDepositTimeForAddress","    @Mapping<Address, BigUint>(key: \"depositedTokens\") var depositedTokensForAddress","    ","    init(tokenIdentifier: Buffer) {","        self.tokenIdentifier = tokenIdentifier","    }","    ","    public mutating func deposit() {","        let caller = Message.caller","        let payment = Message.singleFungibleEsdt","        ","        guard payment.tokenIdentifier == self.tokenIdentifier else {","            smartContractError(message: \"Wrong payment provided\")","        }","        ","        let currentTime = Blockchain.getBlockTimestamp()","        let callerLastDepositTime = self.lastDepositTimeForAddress[caller]","        let nextAllowedTime = callerLastDepositTime + secondsInADay","        ","        guard currentTime > nextAllowedTime else {","            let secondsRemaining = nextAllowedTime - currentTime","            ","            smartContractError(message: \"Not allowed to deposit yet. Please wait \\(secondsRemaining) seconds.\")","        }","        ","        let callerTokenBalance = caller.getBalance(tokenIdentifier: payment.tokenIdentifier)","        let maxAllowedDeposit = callerTokenBalance \/ 10","        ","        self.depositedTokensForAddress[caller] = self.depositedTokensForAddress[caller] + payment.amount","    }","}"],"fileName":"lib.swift","type":"file","syntax":"swift","highlights":[{"line":33}],"fileType":"swift"},"doc://Space/tutorials/Space/Getting-Started/Installing-the-Tools":{"role":"article","url":"\/tutorials\/space\/getting-started\/installing-the-tools","abstract":[],"identifier":"doc:\/\/Space\/tutorials\/Space\/Getting-Started\/Installing-the-Tools","title":"Installing the Tools","kind":"article","type":"topic"},"doc://Space/tutorials/Space/StoreValues":{"role":"project","url":"\/tutorials\/space\/storevalues","estimatedTime":"15min","abstract":[{"text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory.","type":"text"}],"identifier":"doc:\/\/Space\/tutorials\/Space\/StoreValues","title":"Persist Values Between Executions","kind":"project","type":"topic"},"doc://Space/tutorials/Space/CodingYourFirstContract#Writing-the-Contract-Code":{"title":"Writing the Contract Code","kind":"section","identifier":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract#Writing-the-Contract-Code","type":"section","abstract":[{"type":"text","text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user."}],"role":"pseudoSymbol","url":"\/tutorials\/space\/codingyourfirstcontract#Writing-the-Contract-Code"},"GetInfoSection2Step12.swift":{"content":["import Space","","let secondsInADay: UInt64 = 86_400","","@Contract struct MyContract {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","    @Mapping<Address, UInt64>(key: \"lastDepositTime\") var lastDepositTimeForAddress","    @Mapping<Address, BigUint>(key: \"depositedTokens\") var depositedTokensForAddress","    ","    init(tokenIdentifier: Buffer) {","        self.tokenIdentifier = tokenIdentifier","    }","    ","    public mutating func deposit() {","        let caller = Message.caller","        let payment = Message.singleFungibleEsdt","        ","        guard payment.tokenIdentifier == self.tokenIdentifier else {","            smartContractError(message: \"Wrong payment provided\")","        }","        ","        let callerLastDepositTime = self.lastDepositTimeForAddress[caller]","        let currentTime = Blockchain.getBlockTimestamp()","        let nextAllowedTime = callerLastDepositTime + secondsInADay","        ","        guard currentTime > nextAllowedTime else {","            let secondsRemaining = nextAllowedTime - currentTime","            ","            smartContractError(message: \"Not allowed to deposit yet. Please wait \\(secondsRemaining) seconds.\")","        }","        ","        let callerTokenBalance = caller.getBalance(tokenIdentifier: payment.tokenIdentifier)","        let maxAllowedDeposit = callerTokenBalance \/ 10","        ","        guard payment.amount <= maxAllowedDeposit else {","            smartContractError(message: \"Payment amount should not be greater than 10% of the caller's balance for the token. Allowance: \\(maxAllowedDeposit)\")","        }","        ","        self.depositedTokensForAddress[caller] = self.depositedTokensForAddress[caller] + payment.amount","    }","}"],"identifier":"GetInfoSection2Step12.swift","syntax":"swift","fileName":"lib.swift","fileType":"swift","highlights":[{"line":23},{"line":35},{"line":36},{"line":37},{"line":38}],"type":"file"},"doc://Space/tutorials/Space/GetInfo#Accessing-Blockchain-Context-Data":{"role":"pseudoSymbol","url":"\/tutorials\/space\/getinfo#Accessing-Blockchain-Context-Data","abstract":[{"text":"Many smart contracts rely on contextual data to execute their operations effectively. This data can include input payments, the caller’s address, the current time, the balance of a specific account, or even the contract owner.","type":"text"}],"identifier":"doc:\/\/Space\/tutorials\/Space\/GetInfo#Accessing-Blockchain-Context-Data","title":"Accessing Blockchain Context Data","kind":"section","type":"section"},"GetInfoSection2Step7.swift":{"identifier":"GetInfoSection2Step7.swift","content":["import Space","","let secondsInADay: UInt64 = 86_400","","@Contract struct MyContract {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","    @Mapping<Address, UInt64>(key: \"lastDepositTime\") var lastDepositTimeForAddress","    @Mapping<Address, BigUint>(key: \"depositedTokens\") var depositedTokensForAddress","    ","    init(tokenIdentifier: Buffer) {","        self.tokenIdentifier = tokenIdentifier","    }","    ","    public mutating func deposit() {","        let caller = Message.caller","        let payment = Message.singleFungibleEsdt","        ","        guard payment.tokenIdentifier == self.tokenIdentifier else {","            smartContractError(message: \"Wrong payment provided\")","        }","        ","        let currentTime = Blockchain.getBlockTimestamp()","        let callerLastDepositTime = self.lastDepositTimeForAddress[caller]","        let nextAllowedTime = callerLastDepositTime + secondsInADay","        ","        guard currentTime > nextAllowedTime else {","            ","        }","        ","        self.depositedTokensForAddress[caller] = self.depositedTokensForAddress[caller] + payment.amount","    }","}"],"fileName":"lib.swift","type":"file","syntax":"swift","highlights":[{"line":26},{"line":27},{"line":28},{"line":29}],"fileType":"swift"},"doc://Space/tutorials/Space/CodingYourFirstContract":{"type":"topic","title":"Building Your First Smart Contract","identifier":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract","kind":"project","abstract":[{"text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user.","type":"text"}],"role":"project","url":"\/tutorials\/space\/codingyourfirstcontract","estimatedTime":"20min"},"GetInfoSection2Step13.swift":{"content":["import Space","","let secondsInADay: UInt64 = 86_400","","@Contract struct MyContract {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","    @Mapping<Address, UInt64>(key: \"lastDepositTime\") var lastDepositTimeForAddress","    @Mapping<Address, BigUint>(key: \"depositedTokens\") var depositedTokensForAddress","    ","    init(tokenIdentifier: Buffer) {","        self.tokenIdentifier = tokenIdentifier","    }","    ","    public mutating func deposit() {","        let caller = Message.caller","        let payment = Message.singleFungibleEsdt","        ","        guard payment.tokenIdentifier == self.tokenIdentifier else {","            smartContractError(message: \"Wrong payment provided\")","        }","        ","        let callerLastDepositTime = self.lastDepositTimeForAddress[caller]","        let currentTime = Blockchain.getBlockTimestamp()","        let nextAllowedTime = callerLastDepositTime + secondsInADay","        ","        guard currentTime > nextAllowedTime else {","            let secondsRemaining = nextAllowedTime - currentTime","            ","            smartContractError(message: \"Not allowed to deposit yet. Please wait \\(secondsRemaining) seconds.\")","        }","        ","        let callerTokenBalance = caller.getBalance(tokenIdentifier: payment.tokenIdentifier)","        let maxAllowedDeposit = callerTokenBalance \/ 10","        ","        guard payment.amount <= maxAllowedDeposit else {","            smartContractError(message: \"Payment amount should not be greater than 10% of the caller's balance for the token. Allowance: \\(maxAllowedDeposit)\")","        }","        ","        self.depositedTokensForAddress[caller] = self.depositedTokensForAddress[caller] + payment.amount","        self.lastDepositTimeForAddress[caller] = currentTime","    }","}"],"identifier":"GetInfoSection2Step13.swift","syntax":"swift","fileName":"lib.swift","fileType":"swift","highlights":[{"line":40}],"type":"file"},"doc://Space/tutorials/Space/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract":{"type":"section","title":"Initializing and Compiling Your First Smart Contract","identifier":"doc:\/\/Space\/tutorials\/Space\/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract","kind":"section","abstract":[{"text":"Before writing your first smart contract with Space, ensure you have the necessary tools installed.","type":"text"}],"role":"pseudoSymbol","url":"\/tutorials\/space\/installingtools#Initializing-and-Compiling-Your-First-Smart-Contract"},"GetInfoSection1Step4.swift":{"identifier":"GetInfoSection1Step4.swift","content":["import Space","","@Contract struct MyContract {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","    @Mapping<Address, BigUint>(key: \"depositedTokens\") var depositedTokensForAddress","    ","    init(tokenIdentifier: Buffer) {","        self.tokenIdentifier = tokenIdentifier","    }","}"],"fileName":"lib.swift","type":"file","syntax":"swift","highlights":[{"line":6},{"line":7},{"line":8},{"line":9}],"fileType":"swift"},"doc://Space/tutorials/Space/InstallingTools#Setting-Up-the-Space-CLI":{"type":"section","identifier":"doc:\/\/Space\/tutorials\/Space\/InstallingTools#Setting-Up-the-Space-CLI","abstract":[{"type":"text","text":"Before writing your first smart contract with Space, ensure you have the necessary tools installed."}],"url":"\/tutorials\/space\/installingtools#Setting-Up-the-Space-CLI","title":"Setting Up the Space CLI","kind":"section","role":"pseudoSymbol"},"doc://Space/tutorials/Space/SyncCalls#Declare-the-Callee-Proxy":{"url":"\/tutorials\/space\/synccalls#Declare-the-Callee-Proxy","kind":"section","role":"pseudoSymbol","identifier":"doc:\/\/Space\/tutorials\/Space\/SyncCalls#Declare-the-Callee-Proxy","type":"section","title":"Declare the Callee Proxy","abstract":[{"text":"Smart contracts can interact not only with users but also with other smart contracts. This enables more advanced protocols by leveraging existing ones. For example, you could integrate a decentralized exchange directly into your contract to perform token swaps. Decentralized applications often involve multiple contracts, each with a dedicated role, working together to achieve complex functionality—similar to microservices in backend systems.","type":"text"}]},"doc://Space/tutorials/Space/Deep-Dive-into-Space-Concepts/Retrieving-Information-from-the-Blockchain":{"type":"topic","title":"Retrieving Information from the Blockchain","identifier":"doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Retrieving-Information-from-the-Blockchain","kind":"article","abstract":[],"role":"article","url":"\/tutorials\/space\/deep-dive-into-space-concepts\/retrieving-information-from-the-blockchain"},"GetInfoSection1Step8.swift":{"content":["import Space","","@Contract struct MyContract {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","    @Mapping<Address, BigUint>(key: \"depositedTokens\") var depositedTokensForAddress","    ","    init(tokenIdentifier: Buffer) {","        self.tokenIdentifier = tokenIdentifier","    }","    ","    public mutating func deposit() {","        let caller = Message.caller","        let payment = Message.singleFungibleEsdt","        ","        guard payment.tokenIdentifier == self.tokenIdentifier else {","            smartContractError(message: \"Wrong payment provided\")","        }","    }","}"],"identifier":"GetInfoSection1Step8.swift","syntax":"swift","fileName":"lib.swift","fileType":"swift","highlights":[{"line":14},{"line":15},{"line":16},{"line":17}],"type":"file"},"GetInfoSection2Step4.swift":{"identifier":"GetInfoSection2Step4.swift","content":["import Space","","let secondsInADay: UInt64 = 86_400","","@Contract struct MyContract {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","    @Mapping<Address, UInt64>(key: \"lastDepositTime\") var lastDepositTimeForAddress","    @Mapping<Address, BigUint>(key: \"depositedTokens\") var depositedTokensForAddress","    ","    init(tokenIdentifier: Buffer) {","        self.tokenIdentifier = tokenIdentifier","    }","    ","    public mutating func deposit() {","        let caller = Message.caller","        let payment = Message.singleFungibleEsdt","        ","        guard payment.tokenIdentifier == self.tokenIdentifier else {","            smartContractError(message: \"Wrong payment provided\")","        }","        ","        let currentTime = Blockchain.getBlockTimestamp()","        ","        self.depositedTokensForAddress[caller] = self.depositedTokensForAddress[caller] + payment.amount","    }","}"],"fileName":"lib.swift","type":"file","syntax":"swift","highlights":[{"line":22},{"line":23}],"fileType":"swift"},"GetInfoSection1Step7.swift":{"content":["import Space","","@Contract struct MyContract {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","    @Mapping<Address, BigUint>(key: \"depositedTokens\") var depositedTokensForAddress","    ","    init(tokenIdentifier: Buffer) {","        self.tokenIdentifier = tokenIdentifier","    }","    ","    public mutating func deposit() {","        let caller = Message.caller","        let payment = Message.singleFungibleEsdt","    }","}"],"identifier":"GetInfoSection1Step7.swift","syntax":"swift","fileName":"lib.swift","fileType":"swift","highlights":[{"line":13}],"type":"file"},"GetInfoSection2Step2.swift":{"identifier":"GetInfoSection2Step2.swift","content":["import Space","","let secondsInADay: UInt64 = 86_400","","@Contract struct MyContract {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","    @Mapping<Address, BigUint>(key: \"depositedTokens\") var depositedTokensForAddress","    ","    init(tokenIdentifier: Buffer) {","        self.tokenIdentifier = tokenIdentifier","    }","    ","    public mutating func deposit() {","        let caller = Message.caller","        let payment = Message.singleFungibleEsdt","        ","        guard payment.tokenIdentifier == self.tokenIdentifier else {","            smartContractError(message: \"Wrong payment provided\")","        }","        ","        self.depositedTokensForAddress[caller] = self.depositedTokensForAddress[caller] + payment.amount","    }","}"],"fileName":"lib.swift","type":"file","syntax":"swift","highlights":[{"line":3},{"line":4}],"fileType":"swift"}}}