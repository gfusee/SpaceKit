{"schemaVersion":{"minor":3,"patch":0,"major":0},"variants":[{"paths":["\/tutorials\/space\/asynccalls"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"modules":[{"reference":"doc:\/\/Space\/tutorials\/Space\/Getting-Started\/Installing-the-Tools","projects":[{"reference":"doc:\/\/Space\/tutorials\/Space\/InstallingTools","sections":[{"reference":"doc:\/\/Space\/tutorials\/Space\/InstallingTools#Installing-Spaces-Dependencies","kind":"task"},{"kind":"task","reference":"doc:\/\/Space\/tutorials\/Space\/InstallingTools#Setting-Up-the-Space-CLI"},{"kind":"task","reference":"doc:\/\/Space\/tutorials\/Space\/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract"}]}]},{"reference":"doc:\/\/Space\/tutorials\/Space\/Getting-Started\/Building-Your-First-Smart-Contract","projects":[{"reference":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract","sections":[{"kind":"task","reference":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract#Initializing-the-Project"},{"reference":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract#Writing-the-Contract-Code","kind":"task"},{"reference":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract#Testing-the-Contract","kind":"task"}]}]},{"reference":"doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Exploring-Space's-Types","projects":[{"sections":[{"reference":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges","kind":"task"},{"reference":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Understanding-the-Buffer-Type","kind":"task"},{"reference":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Working-with-the-BigUint-Type","kind":"task"},{"kind":"task","reference":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Working-with-the-Vector-Type"},{"reference":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Creating-Your-Own-Types","kind":"task"}],"reference":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes"}]},{"projects":[{"sections":[{"reference":"doc:\/\/Space\/tutorials\/Space\/StoreValues#Working-with-Storage-for-Single-Value-Persistence","kind":"task"},{"reference":"doc:\/\/Space\/tutorials\/Space\/StoreValues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage","kind":"task"}],"reference":"doc:\/\/Space\/tutorials\/Space\/StoreValues"}],"reference":"doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Persisting-Data-Across-Executions"},{"projects":[{"reference":"doc:\/\/Space\/tutorials\/Space\/GetInfo","sections":[{"reference":"doc:\/\/Space\/tutorials\/Space\/GetInfo#Accessing-Transaction-Context-Data","kind":"task"},{"kind":"task","reference":"doc:\/\/Space\/tutorials\/Space\/GetInfo#Accessing-Blockchain-Context-Data"}]}],"reference":"doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Retrieving-Information-from-the-Blockchain"},{"reference":"doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Interacting-with-Other-Contracts","projects":[{"sections":[{"kind":"task","reference":"doc:\/\/Space\/tutorials\/Space\/SyncCalls#Declare-the-Callee-Proxy"},{"kind":"task","reference":"doc:\/\/Space\/tutorials\/Space\/SyncCalls#Perform-a-Synchronous-Call"}],"reference":"doc:\/\/Space\/tutorials\/Space\/SyncCalls"}]},{"reference":"doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Calling-Contracts-Across-Shards","projects":[{"sections":[{"reference":"doc:\/\/Space\/tutorials\/Space\/AsyncCalls#Declare-the-Callee-Proxy","kind":"task"},{"kind":"task","reference":"doc:\/\/Space\/tutorials\/Space\/AsyncCalls#Perform-an-Asynchronous-Call"}],"reference":"doc:\/\/Space\/tutorials\/Space\/AsyncCalls"}]}],"paths":[["doc:\/\/Space\/tutorials\/Space","doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts","doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Calling-Contracts-Across-Shards"]],"reference":"doc:\/\/Space\/tutorials\/Space"},"sections":[{"title":"Interacting with Contracts Across Shards","estimatedTimeInMinutes":15,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Blockchain platforms using SpaceVM enable seamless execution within a sharded environment. Sharding divides a blockchain’s global state and validation workload into smaller, manageable units known as shards. This method enhances scalability without compromising decentralization, allowing nodes to operate without significant computational resources."}]},{"inlineContent":[{"text":"In a sharded blockchain, each wallet is associated with a specific shard, and any smart contract deployed resides within that shard. Communication between contracts on different shards requires an asynchronous approach, differing from the synchronous communication methods covered earlier due to the nature of inter-shard interactions.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Executing an asynchronous contract-to-contract (SC-to-SC) call is similar to issuing an HTTP request in traditional web development. Within a transaction, the async call is initiated, and a callback is provided to handle success or failure. It is important to note that errors in the called contract do not automatically revert the entire transaction. Handling state reversion must be explicitly managed within the callback logic.","type":"text"}]}],"chapter":"Calling Contracts Across Shards","kind":"hero"},{"kind":"tasks","tasks":[{"title":"Declare the Callee Proxy","contentSection":[{"kind":"contentAndMedia","content":[{"inlineContent":[{"text":"This section builds upon the contract code from the previous chapter covering synchronous calls, as the setup is similar.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This example focuses on the "},{"type":"codeVoice","code":"deposit"},{"text":" endpoint, assumed to return a ","type":"text"},{"code":"TokenPayment","type":"codeVoice"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The objective is to return the payment to the initial caller upon a successful deposit. If the deposit fails, the original value must be refunded."}]}],"mediaPosition":"trailing"}],"stepsSection":[{"content":[{"inlineContent":[{"text":"Review the contract provided in the previous chapter.","type":"text"}],"type":"paragraph"}],"caption":[],"media":null,"runtimePreview":null,"code":"AsyncCallsSection1Step1.swift","type":"step"},{"content":[{"inlineContent":[{"type":"text","text":"Reuse the structure of the caller contract from the previous chapter. The proxy setup is used for both synchronous and asynchronous calls."}],"type":"paragraph"}],"type":"step","media":null,"code":"AsyncCallsSection1Step2.swift","runtimePreview":null,"caption":[{"inlineContent":[{"text":"The example assumes that the caller and callee are on different shards.","type":"text"}],"type":"paragraph"}]}],"anchor":"Declare-the-Callee-Proxy"},{"title":"Perform an Asynchronous Call","anchor":"Perform-an-Asynchronous-Call","contentSection":[{"content":[{"type":"paragraph","inlineContent":[{"text":"After setting up the proxy, initiate the asynchronous call and declare the callback.","type":"text"}]}],"mediaPosition":"trailing","kind":"contentAndMedia"}],"stepsSection":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Review the complete code from the previous section."}]}],"media":null,"code":"AsyncCallsSection1Step2.swift","caption":[],"type":"step","runtimePreview":null},{"caption":[],"media":null,"code":"AsyncCallsSection2Step2.swift","runtimePreview":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add the endpoint that users will call to initiate the deposit async call."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Retrieve the payment provided by the user."}]}],"type":"step","media":null,"runtimePreview":null,"code":"AsyncCallsSection2Step3.swift","caption":[]},{"media":null,"code":"AsyncCallsSection2Step4.swift","type":"step","runtimePreview":null,"content":[{"inlineContent":[{"text":"Initiate the async call using the ","type":"text"},{"type":"codeVoice","code":"registerPromise"},{"type":"text","text":" method on the proxy."}],"type":"paragraph"}],"caption":[{"type":"paragraph","inlineContent":[{"text":"Note: Unlike synchronous calls, all changes made before and after the registration are committed to the blockchain, regardless of the call’s result.","type":"text"}]}]},{"type":"step","media":null,"code":"AsyncCallsSection2Step5.swift","runtimePreview":null,"caption":[{"inlineContent":[{"text":"Technically, a callback acts as an endpoint, but it is protected and only callable by SpaceVM after an async call.","type":"text"}],"type":"paragraph"}],"content":[{"inlineContent":[{"text":"Define the callback function, annotated with ","type":"text"},{"type":"codeVoice","code":"@Callback"},{"text":". The function can take arguments to store information computed during the initial execution phase, before the async call.","type":"text"}],"type":"paragraph"}]},{"runtimePreview":null,"media":null,"type":"step","code":"AsyncCallsSection2Step6.swift","caption":[{"type":"paragraph","inlineContent":[{"text":"Note: The result is represented as ","type":"text"},{"code":"AsyncCallResult<T>","type":"codeVoice"},{"type":"text","text":", where "},{"code":"T","type":"codeVoice"},{"type":"text","text":" is the return type of the endpoint."}]}],"content":[{"type":"paragraph","inlineContent":[{"text":"Retrieve the result of the asynchronous call.","type":"text"}]}]},{"caption":[{"type":"paragraph","inlineContent":[{"text":"In the event of success, the result contains the execution output; in the event of failure, it contains the error.","type":"text"}]}],"media":null,"type":"step","code":"AsyncCallsSection2Step7.swift","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Handle success and error cases."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Forward the received payment to the original user upon successful completion.","type":"text"}]}],"type":"step","code":"AsyncCallsSection2Step8.swift","media":null,"runtimePreview":null,"caption":[]},{"caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Refund the original payment to the user in the event of failure."}]}],"code":"AsyncCallsSection2Step9.swift","runtimePreview":null,"media":null,"type":"step"},{"runtimePreview":null,"media":null,"content":[{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"@Callback"},{"type":"text","text":" annotation generates a "},{"type":"codeVoice","code":"$"},{"type":"text","text":" function that is used to populate the callback parameter in "},{"code":"registerPromise","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}],"caption":[{"inlineContent":[{"text":"Ensure that the ","type":"text"},{"code":"gasForCallback","type":"codeVoice"},{"type":"text","text":" parameter of the "},{"type":"codeVoice","code":"$"},{"type":"text","text":" function is set to provide sufficient gas for callback execution."}],"type":"paragraph"}],"type":"step","code":"AsyncCallsSection2Step10.swift"}]}]}],"kind":"project","metadata":{"categoryPathComponent":"Space","title":"Interacting with Contracts Across Shards","category":"Space","role":"project"},"identifier":{"url":"doc:\/\/Space\/tutorials\/Space\/AsyncCalls","interfaceLanguage":"swift"},"references":{"doc://Space/tutorials/Space/Deep-Dive-into-Space-Concepts/Persisting-Data-Across-Executions":{"kind":"article","type":"topic","role":"article","title":"Persisting Data Across Executions","url":"\/tutorials\/space\/deep-dive-into-space-concepts\/persisting-data-across-executions","abstract":[],"identifier":"doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Persisting-Data-Across-Executions"},"doc://Space/tutorials/Space/SyncCalls":{"role":"project","title":"Interact with Other Contracts","url":"\/tutorials\/space\/synccalls","abstract":[{"text":"Smart contracts can interact not only with users but also with other smart contracts. This enables more advanced protocols by leveraging existing ones. For example, you could integrate a decentralized exchange directly into your contract to perform token swaps. Decentralized applications often involve multiple contracts, each with a dedicated role, working together to achieve complex functionality—similar to microservices in backend systems.","type":"text"}],"kind":"project","identifier":"doc:\/\/Space\/tutorials\/Space\/SyncCalls","estimatedTime":"15min","type":"topic"},"doc://Space/tutorials/Space/AsyncCalls":{"role":"project","title":"Interacting with Contracts Across Shards","url":"\/tutorials\/space\/asynccalls","abstract":[{"text":"Blockchain platforms using SpaceVM enable seamless execution within a sharded environment. Sharding divides a blockchain’s global state and validation workload into smaller, manageable units known as shards. This method enhances scalability without compromising decentralization, allowing nodes to operate without significant computational resources.","type":"text"}],"kind":"project","identifier":"doc:\/\/Space\/tutorials\/Space\/AsyncCalls","estimatedTime":"15min","type":"topic"},"doc://Space/tutorials/Space/InstallingTools":{"url":"\/tutorials\/space\/installingtools","kind":"project","type":"topic","estimatedTime":"10min","identifier":"doc:\/\/Space\/tutorials\/Space\/InstallingTools","abstract":[{"type":"text","text":"Before writing your first smart contract with Space, ensure you have the necessary tools installed."}],"role":"project","title":"Install the Necessary Tools"},"doc://Space/tutorials/Space/Deep-Dive-into-Space-Concepts/Retrieving-Information-from-the-Blockchain":{"role":"article","title":"Retrieving Information from the Blockchain","url":"\/tutorials\/space\/deep-dive-into-space-concepts\/retrieving-information-from-the-blockchain","abstract":[],"kind":"article","identifier":"doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Retrieving-Information-from-the-Blockchain","type":"topic"},"doc://Space/tutorials/Space/StoreValues":{"abstract":[{"text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory.","type":"text"}],"identifier":"doc:\/\/Space\/tutorials\/Space\/StoreValues","type":"topic","url":"\/tutorials\/space\/storevalues","kind":"project","title":"Persist Values Between Executions","estimatedTime":"15min","role":"project"},"doc://Space/tutorials/Space/CodingYourFirstContract":{"abstract":[{"text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user.","type":"text"}],"identifier":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract","type":"topic","url":"\/tutorials\/space\/codingyourfirstcontract","kind":"project","title":"Building Your First Smart Contract","estimatedTime":"20min","role":"project"},"doc://Space/tutorials/Space/Deep-Dive-into-Space-Concepts/Calling-Contracts-Across-Shards":{"identifier":"doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Calling-Contracts-Across-Shards","role":"article","abstract":[],"url":"\/tutorials\/space\/deep-dive-into-space-concepts\/calling-contracts-across-shards","title":"Calling Contracts Across Shards","type":"topic","kind":"article"},"doc://Space/tutorials/Space/StoreValues#Working-with-Storage-for-Single-Value-Persistence":{"role":"pseudoSymbol","title":"Working with @Storage for Single Value Persistence","url":"\/tutorials\/space\/storevalues#Working-with-Storage-for-Single-Value-Persistence","abstract":[{"text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory.","type":"text"}],"kind":"section","identifier":"doc:\/\/Space\/tutorials\/Space\/StoreValues#Working-with-Storage-for-Single-Value-Persistence","type":"section"},"doc://Space/tutorials/Space/Deep-Dive-into-Space-Concepts/Exploring-Space's-Types":{"url":"\/tutorials\/space\/deep-dive-into-space-concepts\/exploring-space's-types","kind":"article","type":"topic","identifier":"doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Exploring-Space's-Types","abstract":[],"role":"article","title":"Exploring Space's Types"},"doc://Space/tutorials/Space/GetInfo#Accessing-Blockchain-Context-Data":{"abstract":[{"text":"Many smart contracts rely on contextual data to execute their operations effectively. This data can include input payments, the caller’s address, the current time, the balance of a specific account, or even the contract owner.","type":"text"}],"identifier":"doc:\/\/Space\/tutorials\/Space\/GetInfo#Accessing-Blockchain-Context-Data","type":"section","url":"\/tutorials\/space\/getinfo#Accessing-Blockchain-Context-Data","kind":"section","title":"Accessing Blockchain Context Data","role":"pseudoSymbol"},"doc://Space/tutorials/Space/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges":{"role":"pseudoSymbol","title":"Handling Heap Allocation Challenges","url":"\/tutorials\/space\/familiarizewithtypes#Handling-Heap-Allocation-Challenges","abstract":[{"text":"Space provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}],"kind":"section","identifier":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges","type":"section"},"doc://Space/tutorials/Space/FamiliarizeWithTypes#Working-with-the-Vector-Type":{"title":"Working with the Vector Type","kind":"section","role":"pseudoSymbol","identifier":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Working-with-the-Vector-Type","abstract":[{"type":"text","text":"Space provides types that allow you to leverage the full potential of the SpaceVM."}],"type":"section","url":"\/tutorials\/space\/familiarizewithtypes#Working-with-the-Vector-Type"},"AsyncCallsSection2Step2.swift":{"fileName":"lib.swift","content":["import Space","","@Proxy enum CalleeContractProxy {","    case deposit","}","","@Contract struct MyContract {","    ","    public mutating func initiateDeposit(receiverAddress: Address) {","        ","    }","    ","}"],"type":"file","highlights":[{"line":9},{"line":10},{"line":11},{"line":12}],"syntax":"swift","fileType":"swift","identifier":"AsyncCallsSection2Step2.swift"},"AsyncCallsSection2Step6.swift":{"fileType":"swift","highlights":[{"line":22}],"type":"file","content":["import Space","","@Proxy enum CalleeContractProxy {","    case deposit","}","","@Contract struct MyContract {","    ","    public mutating func initiateDeposit(receiverAddress: Address) {","        let payment = Message.egldValue","        ","        CalleeContractProxy","            .deposit","            .registerPromise(","                receiver: receiverAddress,","                gas: 60_000_000,","                callback: \/\/ We will set this parameter later","            )","    }","    ","    @Callback public func depositCallback(sentPayment: BigUint, originalCaller: Address) {","        let result: AsyncCallResult<TokenPayment> = Message.asyncCallResult()","    }","}"],"syntax":"swift","fileName":"lib.swift","identifier":"AsyncCallsSection2Step6.swift"},"doc://Space/tutorials/Space/SyncCalls#Perform-a-Synchronous-Call":{"abstract":[{"text":"Smart contracts can interact not only with users but also with other smart contracts. This enables more advanced protocols by leveraging existing ones. For example, you could integrate a decentralized exchange directly into your contract to perform token swaps. Decentralized applications often involve multiple contracts, each with a dedicated role, working together to achieve complex functionality—similar to microservices in backend systems.","type":"text"}],"identifier":"doc:\/\/Space\/tutorials\/Space\/SyncCalls#Perform-a-Synchronous-Call","type":"section","url":"\/tutorials\/space\/synccalls#Perform-a-Synchronous-Call","kind":"section","title":"Perform a Synchronous Call","role":"pseudoSymbol"},"doc://Space/tutorials/Space/Deep-Dive-into-Space-Concepts/Interacting-with-Other-Contracts":{"url":"\/tutorials\/space\/deep-dive-into-space-concepts\/interacting-with-other-contracts","kind":"article","type":"topic","identifier":"doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Interacting-with-Other-Contracts","abstract":[],"role":"article","title":"Interacting with Other Contracts"},"AsyncCallsSection2Step3.swift":{"fileName":"lib.swift","content":["import Space","","@Proxy enum CalleeContractProxy {","    case deposit","}","","@Contract struct MyContract {","    ","    public mutating func initiateDeposit(receiverAddress: Address) {","        let payment = Message.egldValue","    }","    ","}"],"type":"file","highlights":[{"line":10}],"syntax":"swift","fileType":"swift","identifier":"AsyncCallsSection2Step3.swift"},"doc://Space/tutorials/Space/FamiliarizeWithTypes#Understanding-the-Buffer-Type":{"abstract":[{"text":"Space provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}],"identifier":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Understanding-the-Buffer-Type","type":"section","url":"\/tutorials\/space\/familiarizewithtypes#Understanding-the-Buffer-Type","kind":"section","title":"Understanding the Buffer Type","role":"pseudoSymbol"},"AsyncCallsSection2Step9.swift":{"fileType":"swift","highlights":[{"line":35}],"type":"file","content":["import Space","","@Proxy enum CalleeContractProxy {","    case deposit","}","","@Contract struct MyContract {","    ","    public mutating func initiateDeposit(receiverAddress: Address) {","        let payment = Message.egldValue","        ","        CalleeContractProxy","            .deposit","            .registerPromise(","                receiver: receiverAddress,","                gas: 60_000_000,","                callback: \/\/ We will set this parameter later","            )","    }","    ","    @Callback public func depositCallback(sentPayment: BigUint, originalCaller: Address) {","        let result: AsyncCallResult<TokenPayment> = Message.asyncCallResult()","        ","        switch result {","        case .success(let resultPayment):","            \/\/ The deposit is a success, we can send the payment to the original caller","            originalCaller.send(","                tokenIdentifier: resultPayment.tokenIdentifier,","                nonce: resultPayment.nonce,","                amount: resultPayment.amount","            )","        case .error(_):","            \/\/ The deposit is an error and the payment made in the async call has been cancelled.","            \/\/ We have to send it back to the original caller","            originalCaller.send(egldValue: sentPayment)","        }","    }","}"],"syntax":"swift","fileName":"lib.swift","identifier":"AsyncCallsSection2Step9.swift"},"AsyncCallsSection1Step1.swift":{"fileName":"CalleeContractProxy.swift","content":["import Space","","@Contract struct CalleeContract {","    public func deposit() -> TokenPayment {","        \/\/ Implements the logic to handle a deposit.","        \/\/ This endpoint requires an input EGLD payment.","    }","}"],"type":"file","highlights":[],"syntax":"swift","fileType":"swift","identifier":"AsyncCallsSection1Step1.swift"},"doc://Space/tutorials/Space/Getting-Started/Installing-the-Tools":{"role":"article","title":"Installing the Tools","url":"\/tutorials\/space\/getting-started\/installing-the-tools","abstract":[],"kind":"article","identifier":"doc:\/\/Space\/tutorials\/Space\/Getting-Started\/Installing-the-Tools","type":"topic"},"doc://Space/tutorials/Space/GetInfo":{"abstract":[{"text":"Many smart contracts rely on contextual data to execute their operations effectively. This data can include input payments, the caller’s address, the current time, the balance of a specific account, or even the contract owner.","type":"text"}],"identifier":"doc:\/\/Space\/tutorials\/Space\/GetInfo","type":"topic","url":"\/tutorials\/space\/getinfo","kind":"project","title":"Retrieving Information from the Blockchain","estimatedTime":"10min","role":"project"},"doc://Space/tutorials/Space/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract":{"url":"\/tutorials\/space\/installingtools#Initializing-and-Compiling-Your-First-Smart-Contract","type":"section","kind":"section","role":"pseudoSymbol","abstract":[{"text":"Before writing your first smart contract with Space, ensure you have the necessary tools installed.","type":"text"}],"identifier":"doc:\/\/Space\/tutorials\/Space\/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract","title":"Initializing and Compiling Your First Smart Contract"},"doc://Space/tutorials/Space/StoreValues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage":{"role":"pseudoSymbol","title":"Leveraging @Mapping for Dynamic Key-Value Storage","url":"\/tutorials\/space\/storevalues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage","abstract":[{"text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory.","type":"text"}],"kind":"section","identifier":"doc:\/\/Space\/tutorials\/Space\/StoreValues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage","type":"section"},"doc://Space/tutorials/Space/GetInfo#Accessing-Transaction-Context-Data":{"url":"\/tutorials\/space\/getinfo#Accessing-Transaction-Context-Data","kind":"section","type":"section","identifier":"doc:\/\/Space\/tutorials\/Space\/GetInfo#Accessing-Transaction-Context-Data","abstract":[{"text":"Many smart contracts rely on contextual data to execute their operations effectively. This data can include input payments, the caller’s address, the current time, the balance of a specific account, or even the contract owner.","type":"text"}],"role":"pseudoSymbol","title":"Accessing Transaction Context Data"},"AsyncCallsSection2Step8.swift":{"fileType":"swift","highlights":[{"line":27},{"line":28},{"line":29},{"line":30},{"line":31}],"type":"file","content":["import Space","","@Proxy enum CalleeContractProxy {","    case deposit","}","","@Contract struct MyContract {","    ","    public mutating func initiateDeposit(receiverAddress: Address) {","        let payment = Message.egldValue","        ","        CalleeContractProxy","            .deposit","            .registerPromise(","                receiver: receiverAddress,","                gas: 60_000_000,","                callback: \/\/ We will set this parameter later","            )","    }","    ","    @Callback public func depositCallback(sentPayment: BigUint, originalCaller: Address) {","        let result: AsyncCallResult<TokenPayment> = Message.asyncCallResult()","        ","        switch result {","        case .success(let resultPayment):","            \/\/ The deposit is a success, we can send the payment to the original caller","            originalCaller.send(","                tokenIdentifier: resultPayment.tokenIdentifier,","                nonce: resultPayment.nonce,","                amount: resultPayment.amount","            )","        case .error(_):","            \/\/ The deposit is an error and the payment made in the async call has been cancelled.","            \/\/ We have to send it back to the original caller","            ","        }","    }","}"],"syntax":"swift","fileName":"lib.swift","identifier":"AsyncCallsSection2Step8.swift"},"AsyncCallsSection1Step2.swift":{"type":"file","fileType":"swift","syntax":"swift","identifier":"AsyncCallsSection1Step2.swift","highlights":[],"content":["import Space","","@Proxy enum CalleeContractProxy {","    case deposit","}","","@Contract struct MyContract {","    ","}"],"fileName":"lib.swift"},"AsyncCallsSection2Step5.swift":{"fileType":"swift","highlights":[{"line":21},{"line":22},{"line":23}],"type":"file","content":["import Space","","@Proxy enum CalleeContractProxy {","    case deposit","}","","@Contract struct MyContract {","    ","    public mutating func initiateDeposit(receiverAddress: Address) {","        let payment = Message.egldValue","        ","        CalleeContractProxy","            .deposit","            .registerPromise(","                receiver: receiverAddress,","                gas: 60_000_000,","                callback: \/\/ We will set this parameter later","            )","    }","    ","    @Callback public func depositCallback(sentPayment: BigUint, originalCaller: Address) {","        ","    }","}"],"syntax":"swift","fileName":"lib.swift","identifier":"AsyncCallsSection2Step5.swift"},"doc://Space/tutorials/Space/SyncCalls#Declare-the-Callee-Proxy":{"url":"\/tutorials\/space\/synccalls#Declare-the-Callee-Proxy","kind":"section","type":"section","identifier":"doc:\/\/Space\/tutorials\/Space\/SyncCalls#Declare-the-Callee-Proxy","abstract":[{"text":"Smart contracts can interact not only with users but also with other smart contracts. This enables more advanced protocols by leveraging existing ones. For example, you could integrate a decentralized exchange directly into your contract to perform token swaps. Decentralized applications often involve multiple contracts, each with a dedicated role, working together to achieve complex functionality—similar to microservices in backend systems.","type":"text"}],"role":"pseudoSymbol","title":"Declare the Callee Proxy"},"doc://Space/tutorials/Space":{"url":"\/tutorials\/space","kind":"overview","type":"topic","identifier":"doc:\/\/Space\/tutorials\/Space","abstract":[{"text":"Discover how Space simplifies blockchain development using Swift. Dive into the world of Web3 with ease and efficiency.","type":"text"}],"role":"overview","title":"Meet Space"},"AsyncCallsSection2Step4.swift":{"type":"file","fileType":"swift","syntax":"swift","identifier":"AsyncCallsSection2Step4.swift","highlights":[{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18}],"content":["import Space","","@Proxy enum CalleeContractProxy {","    case deposit","}","","@Contract struct MyContract {","    ","    public mutating func initiateDeposit(receiverAddress: Address) {","        let payment = Message.egldValue","        ","        CalleeContractProxy","            .deposit","            .registerPromise(","                receiver: receiverAddress,","                gas: 60_000_000,","                callback: \/\/ We will set this parameter later","            )","    }","    ","}"],"fileName":"lib.swift"},"doc://Space/tutorials/Space/AsyncCalls#Perform-an-Asynchronous-Call":{"url":"\/tutorials\/space\/asynccalls#Perform-an-Asynchronous-Call","type":"section","kind":"section","role":"pseudoSymbol","abstract":[{"text":"Blockchain platforms using SpaceVM enable seamless execution within a sharded environment. Sharding divides a blockchain’s global state and validation workload into smaller, manageable units known as shards. This method enhances scalability without compromising decentralization, allowing nodes to operate without significant computational resources.","type":"text"}],"identifier":"doc:\/\/Space\/tutorials\/Space\/AsyncCalls#Perform-an-Asynchronous-Call","title":"Perform an Asynchronous Call"},"doc://Space/tutorials/Space/InstallingTools#Setting-Up-the-Space-CLI":{"role":"pseudoSymbol","title":"Setting Up the Space CLI","url":"\/tutorials\/space\/installingtools#Setting-Up-the-Space-CLI","abstract":[{"text":"Before writing your first smart contract with Space, ensure you have the necessary tools installed.","type":"text"}],"kind":"section","identifier":"doc:\/\/Space\/tutorials\/Space\/InstallingTools#Setting-Up-the-Space-CLI","type":"section"},"doc://Space/tutorials/Space/CodingYourFirstContract#Testing-the-Contract":{"url":"\/tutorials\/space\/codingyourfirstcontract#Testing-the-Contract","type":"section","kind":"section","role":"pseudoSymbol","abstract":[{"type":"text","text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user."}],"identifier":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract#Testing-the-Contract","title":"Testing the Contract"},"doc://Space/tutorials/Space/FamiliarizeWithTypes":{"url":"\/tutorials\/space\/familiarizewithtypes","kind":"project","type":"topic","estimatedTime":"20min","identifier":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes","abstract":[{"text":"Space provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}],"role":"project","title":"Exploring Space's Types"},"doc://Space/tutorials/Space/FamiliarizeWithTypes#Working-with-the-BigUint-Type":{"url":"\/tutorials\/space\/familiarizewithtypes#Working-with-the-BigUint-Type","kind":"section","type":"section","identifier":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Working-with-the-BigUint-Type","abstract":[{"text":"Space provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}],"role":"pseudoSymbol","title":"Working with the BigUint Type"},"doc://Space/tutorials/Space/CodingYourFirstContract#Writing-the-Contract-Code":{"url":"\/tutorials\/space\/codingyourfirstcontract#Writing-the-Contract-Code","kind":"section","type":"section","identifier":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract#Writing-the-Contract-Code","abstract":[{"text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user.","type":"text"}],"role":"pseudoSymbol","title":"Writing the Contract Code"},"doc://Space/tutorials/Space/CodingYourFirstContract#Initializing-the-Project":{"url":"\/tutorials\/space\/codingyourfirstcontract#Initializing-the-Project","type":"section","kind":"section","role":"pseudoSymbol","abstract":[{"text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user.","type":"text"}],"identifier":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract#Initializing-the-Project","title":"Initializing the Project"},"AsyncCallsSection2Step10.swift":{"content":["import Space","","@Proxy enum CalleeContractProxy {","    case deposit","}","","@Contract struct MyContract {","    ","    public mutating func initiateDeposit(receiverAddress: Address) {","        let payment = Message.egldValue","        ","        CalleeContractProxy","            .deposit","            .registerPromise(","                receiver: receiverAddress,","                gas: 60_000_000,","                callback: self.$depositCallback(","                    sentPayment: payment,","                    originalCaller: Message.caller,","                    gasForCallback: 50_000_000","                )","            )","    }","    ","    @Callback public func depositCallback(sentPayment: BigUint, originalCaller: Address) {","        let result: AsyncCallResult<TokenPayment> = Message.asyncCallResult()","        ","        switch result {","        case .success(let resultPayment):","            \/\/ The deposit is a success, we can send the payment to the original caller","            originalCaller.send(","                tokenIdentifier: resultPayment.tokenIdentifier,","                nonce: resultPayment.nonce,","                amount: resultPayment.amount","            )","        case .error(_):","            \/\/ The deposit is an error and the payment made in the async call has been cancelled.","            \/\/ We have to send it back to the original caller","            originalCaller.send(egldValue: sentPayment)","        }","    }","}"],"fileType":"swift","type":"file","fileName":"lib.swift","identifier":"AsyncCallsSection2Step10.swift","syntax":"swift","highlights":[{"line":17},{"line":18},{"line":19},{"line":20},{"line":21}]},"doc://Space/tutorials/Space/FamiliarizeWithTypes#Creating-Your-Own-Types":{"url":"\/tutorials\/space\/familiarizewithtypes#Creating-Your-Own-Types","type":"section","kind":"section","role":"pseudoSymbol","abstract":[{"type":"text","text":"Space provides types that allow you to leverage the full potential of the SpaceVM."}],"identifier":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Creating-Your-Own-Types","title":"Creating Your Own Types"},"doc://Space/tutorials/Space/Getting-Started/Building-Your-First-Smart-Contract":{"role":"article","title":"Building Your First Smart Contract","url":"\/tutorials\/space\/getting-started\/building-your-first-smart-contract","abstract":[],"kind":"article","identifier":"doc:\/\/Space\/tutorials\/Space\/Getting-Started\/Building-Your-First-Smart-Contract","type":"topic"},"doc://Space/tutorials/Space/AsyncCalls#Declare-the-Callee-Proxy":{"url":"\/tutorials\/space\/asynccalls#Declare-the-Callee-Proxy","type":"section","kind":"section","role":"pseudoSymbol","abstract":[{"type":"text","text":"Blockchain platforms using SpaceVM enable seamless execution within a sharded environment. Sharding divides a blockchain’s global state and validation workload into smaller, manageable units known as shards. This method enhances scalability without compromising decentralization, allowing nodes to operate without significant computational resources."}],"identifier":"doc:\/\/Space\/tutorials\/Space\/AsyncCalls#Declare-the-Callee-Proxy","title":"Declare the Callee Proxy"},"AsyncCallsSection2Step7.swift":{"identifier":"AsyncCallsSection2Step7.swift","highlights":[{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32}],"content":["import Space","","@Proxy enum CalleeContractProxy {","    case deposit","}","","@Contract struct MyContract {","    ","    public mutating func initiateDeposit(receiverAddress: Address) {","        let payment = Message.egldValue","        ","        CalleeContractProxy","            .deposit","            .registerPromise(","                receiver: receiverAddress,","                gas: 60_000_000,","                callback: \/\/ We will set this parameter later","            )","    }","    ","    @Callback public func depositCallback(sentPayment: BigUint, originalCaller: Address) {","        let result: AsyncCallResult<TokenPayment> = Message.asyncCallResult()","        ","        switch result {","        case .success(let resultPayment):","            \/\/ The deposit is a success, we can send the payment to the original caller","            ","        case .error(_):","            \/\/ The deposit is an error and the payment made in the async call has been cancelled.","            \/\/ We have to send it back to the original caller","            ","        }","    }","}"],"type":"file","syntax":"swift","fileType":"swift","fileName":"lib.swift"},"doc://Space/tutorials/Space/InstallingTools#Installing-Spaces-Dependencies":{"url":"\/tutorials\/space\/installingtools#Installing-Spaces-Dependencies","kind":"section","type":"section","identifier":"doc:\/\/Space\/tutorials\/Space\/InstallingTools#Installing-Spaces-Dependencies","abstract":[{"text":"Before writing your first smart contract with Space, ensure you have the necessary tools installed.","type":"text"}],"role":"pseudoSymbol","title":"Installing Space's Dependencies"}}}