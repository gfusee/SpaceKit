{"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[{"estimatedTimeInMinutes":15,"kind":"hero","title":"Persist Values Between Executions","content":[{"type":"paragraph","inlineContent":[{"text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory.","type":"text"}]},{"inlineContent":[{"text":"However, there are situations where you need to persist data across multiple executions. To support this, Space provides a built-in “storage” system for every contract.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The storage system is essentially a key-value dictionary where both keys and values are stored as raw data."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Space abstracts away the complexities of encoding and decoding values, offering simple APIs for interacting with storage."}],"type":"paragraph"},{"inlineContent":[{"text":"In this tutorial, you’ll learn two common approaches for storing data using ","type":"text"},{"type":"codeVoice","code":"@Storage"},{"type":"text","text":" and "},{"code":"@Mapping","type":"codeVoice"},{"type":"text","text":" annotations. Additionally, Space provides advanced mechanisms like storage mappers to handle more complex data structures, which will be covered in a later chapter."}],"type":"paragraph"}],"chapter":"Persisting Data Across Executions"},{"kind":"tasks","tasks":[{"title":"Working with @Storage for Single Value Persistence","stepsSection":[{"code":"StoreValuesSection1Step1.swift","type":"step","caption":[],"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Begin by setting up the basic structure of the contract."}]}],"media":null},{"type":"step","caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add a persistent integer to the contract using the "},{"type":"codeVoice","code":"@Storage"},{"type":"text","text":" annotation. By default, this integer is initialized to 0 unless otherwise specified."}]}],"media":null,"code":"StoreValuesSection1Step2.swift","runtimePreview":null},{"runtimePreview":null,"type":"step","content":[{"inlineContent":[{"text":"Implement the logic to increment the stored integer whenever the ","type":"text"},{"code":"increaseStoredValue","type":"codeVoice"},{"text":" endpoint is invoked.","type":"text"}],"type":"paragraph"}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Tip: Be mindful that reading from storage increases transaction costs. This section focuses on functionality, and optimization techniques will be covered in later chapters."}]}],"media":null,"code":"StoreValuesSection1Step3.swift"},{"runtimePreview":null,"media":null,"content":[{"inlineContent":[{"type":"text","text":"If the integer reaches 100, reset it to 0."}],"type":"paragraph"}],"caption":[],"type":"step","code":"StoreValuesSection1Step4.swift"}],"anchor":"Working-with-Storage-for-Single-Value-Persistence","contentSection":[{"kind":"contentAndMedia","mediaPosition":"trailing","content":[{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"@Storage"},{"text":" annotation allows you to persist a single value under a specified key. The ","type":"text"},{"type":"codeVoice","code":"key"},{"type":"text","text":" parameter defines the storage key, and we recommend matching the key to the variable name for consistency."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"In this section, you’ll implement an endpoint called "},{"type":"codeVoice","code":"increaseStoredValue"},{"type":"text","text":", which increments a persistent integer each time it is called. If the value reaches 100, it resets to 0."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Note: The focus here is on basic implementation. Optimizations, especially for transaction cost reductions, will be introduced in a later chapter."}],"type":"paragraph"}]}]},{"title":"Leveraging @Mapping for Dynamic Key-Value Storage","contentSection":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"@Mapping","type":"codeVoice"},{"type":"text","text":" annotation allows you to store values under dynamically computed keys, effectively creating a nested dictionary in the contract’s storage. Space automatically handles encoding and decoding, ensuring typed access to both keys and values."}]},{"inlineContent":[{"text":"Think of it like this: if Alice and Bob both call your smart contract, each of them will have their own persistent storage space. When Alice calls the contract, her address is used to store or retrieve address unique data, and the same happens for Bob with his own key. This way, each user can have their own independent version of the same data, without interference.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this section, you’ll extend the "},{"code":"increaseStoredValue","type":"codeVoice"},{"type":"text","text":" endpoint so that each user (like Alice and Bob) will have a unique persistent integer tied to their address. The integer will be stored and incremented individually for each user, ensuring their data remains isolated."}]}],"mediaPosition":"trailing","kind":"contentAndMedia"}],"stepsSection":[{"type":"step","caption":[],"media":null,"code":"StoreValuesSection2Step1.swift","content":[{"inlineContent":[{"type":"text","text":"Begin by defining the structure of your contract."}],"type":"paragraph"}],"runtimePreview":null},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Use the ","type":"text"},{"type":"codeVoice","code":"@Mapping<Key, Value>"},{"text":" annotation to associate each user’s address with their own persistent integer.","type":"text"}]}],"media":null,"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Tip: You don’t need to explicitly declare the type of the variable. Specifying the "},{"type":"codeVoice","code":"Key"},{"text":" and ","type":"text"},{"code":"Value","type":"codeVoice"},{"type":"text","text":" generic parameters is sufficient."}]}],"code":"StoreValuesSection2Step2.swift","runtimePreview":null},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Retrieve the caller’s address."}]}],"type":"step","media":null,"code":"StoreValuesSection2Step3.swift","caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Note: This involves interacting with the "},{"type":"codeVoice","code":"Message"},{"text":" object, which will be covered in detail in a future chapter.","type":"text"}]}],"runtimePreview":null},{"content":[{"inlineContent":[{"text":"Increment the persistent integer associated with the caller’s address.","type":"text"}],"type":"paragraph"}],"media":null,"code":"StoreValuesSection2Step4.swift","type":"step","caption":[],"runtimePreview":null},{"code":"StoreValuesSection2Step5.swift","type":"step","media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Reset the caller’s integer to 0 once it reaches 100.","type":"text"}]}],"caption":[],"runtimePreview":null},{"type":"step","runtimePreview":null,"code":"StoreValuesSection2Step6.swift","content":[{"inlineContent":[{"type":"text","text":"Implement a view to allow querying of the stored integer value for a given user, enabling off-chain access to the data."}],"type":"paragraph"}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Reminder: A view is an endpoint that does not alter any state on the blockchain."}]}],"media":null}],"anchor":"Leveraging-Mapping-for-Dynamic-Key-Value-Storage"}]},{"abstract":[{"type":"text","text":"Many smart contracts rely on contextual data to execute their operations effectively. This data can include input payments, the caller’s address, the current time, the balance of a specific account, or even the contract owner."}],"title":"Retrieving Information from the Blockchain","action":{"identifier":"doc:\/\/Space\/tutorials\/Space\/GetInfo","type":"reference","isActive":true,"overridingTitle":"Get started","overridingTitleInlineContent":[{"type":"text","text":"Get started"}]},"featuredEyebrow":"Tutorial","kind":"callToAction"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/tutorials\/space\/storevalues"]}],"metadata":{"title":"Persist Values Between Executions","role":"project","category":"Space","categoryPathComponent":"Space"},"kind":"project","hierarchy":{"modules":[{"reference":"doc:\/\/Space\/tutorials\/Space\/Getting-Started\/Installing-the-Tools","projects":[{"sections":[{"reference":"doc:\/\/Space\/tutorials\/Space\/InstallingTools#Installing-Spaces-Dependencies","kind":"task"},{"kind":"task","reference":"doc:\/\/Space\/tutorials\/Space\/InstallingTools#Setting-Up-the-Space-CLI"},{"kind":"task","reference":"doc:\/\/Space\/tutorials\/Space\/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract"}],"reference":"doc:\/\/Space\/tutorials\/Space\/InstallingTools"}]},{"reference":"doc:\/\/Space\/tutorials\/Space\/Getting-Started\/Building-Your-First-Smart-Contract","projects":[{"reference":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract","sections":[{"reference":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract#Initializing-the-Project","kind":"task"},{"reference":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract#Writing-the-Contract-Code","kind":"task"},{"reference":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract#Testing-the-Contract","kind":"task"}]}]},{"reference":"doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Exploring-Space's-Types","projects":[{"sections":[{"reference":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges","kind":"task"},{"kind":"task","reference":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Understanding-the-Buffer-Type"},{"reference":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Working-with-the-BigUint-Type","kind":"task"},{"reference":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Working-with-the-Vector-Type","kind":"task"},{"kind":"task","reference":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Creating-Your-Own-Types"}],"reference":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes"}]},{"reference":"doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Persisting-Data-Across-Executions","projects":[{"reference":"doc:\/\/Space\/tutorials\/Space\/StoreValues","sections":[{"kind":"task","reference":"doc:\/\/Space\/tutorials\/Space\/StoreValues#Working-with-Storage-for-Single-Value-Persistence"},{"reference":"doc:\/\/Space\/tutorials\/Space\/StoreValues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage","kind":"task"}]}]},{"reference":"doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Retrieving-Information-from-the-Blockchain","projects":[{"sections":[{"reference":"doc:\/\/Space\/tutorials\/Space\/GetInfo#Accessing-Transaction-Context-Data","kind":"task"},{"reference":"doc:\/\/Space\/tutorials\/Space\/GetInfo#Accessing-Blockchain-Context-Data","kind":"task"}],"reference":"doc:\/\/Space\/tutorials\/Space\/GetInfo"}]},{"projects":[{"sections":[{"reference":"doc:\/\/Space\/tutorials\/Space\/SyncCalls#Declare-the-Callee-Proxy","kind":"task"},{"reference":"doc:\/\/Space\/tutorials\/Space\/SyncCalls#Perform-a-Synchronous-Call","kind":"task"}],"reference":"doc:\/\/Space\/tutorials\/Space\/SyncCalls"}],"reference":"doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Interact-with-Other-Contracts"}],"paths":[["doc:\/\/Space\/tutorials\/Space","doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts","doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Persisting-Data-Across-Executions"]],"reference":"doc:\/\/Space\/tutorials\/Space"},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Space\/tutorials\/Space\/StoreValues"},"references":{"StoreValuesSection1Step1.swift":{"syntax":"swift","fileName":"lib.swift","type":"file","fileType":"swift","identifier":"StoreValuesSection1Step1.swift","highlights":[],"content":["import Space","","@Contract struct MyContract {","    public func increaseStoredValue() {","        ","    }","}"]},"doc://Space/tutorials/Space/SyncCalls#Declare-the-Callee-Proxy":{"abstract":[{"type":"text","text":"Smart contracts can interact not only with users but also with other smart contracts. This enables more advanced protocols by leveraging existing ones. For example, you could integrate a decentralized exchange directly into your contract to perform token swaps. Decentralized applications often involve multiple contracts, each with a dedicated role, working together to achieve complex functionality—similar to microservices in backend systems."}],"url":"\/tutorials\/space\/synccalls#Declare-the-Callee-Proxy","role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/Space\/tutorials\/Space\/SyncCalls#Declare-the-Callee-Proxy","type":"section","title":"Declare the Callee Proxy"},"doc://Space/tutorials/Space/FamiliarizeWithTypes#Creating-Your-Own-Types":{"abstract":[{"type":"text","text":"Space provides types that allow you to leverage the full potential of the SpaceVM."}],"url":"\/tutorials\/space\/familiarizewithtypes#Creating-Your-Own-Types","role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Creating-Your-Own-Types","type":"section","title":"Creating Your Own Types"},"doc://Space/tutorials/Space/Deep-Dive-into-Space-Concepts/Interact-with-Other-Contracts":{"abstract":[],"identifier":"doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Interact-with-Other-Contracts","title":"Interact with Other Contracts","role":"article","type":"topic","kind":"article","url":"\/tutorials\/space\/deep-dive-into-space-concepts\/interact-with-other-contracts"},"StoreValuesSection1Step3.swift":{"content":["import Space","","@Contract struct MyContract {","    @Storage(key: \"storedInteger\") var storedInteger: UInt64","    ","    public func increaseStoredValue() {","        self.storedInteger = self.storedInteger + 1","    }","}"],"type":"file","fileName":"lib.swift","identifier":"StoreValuesSection1Step3.swift","syntax":"swift","highlights":[{"line":7}],"fileType":"swift"},"StoreValuesSection2Step5.swift":{"syntax":"swift","fileName":"lib.swift","type":"file","fileType":"swift","identifier":"StoreValuesSection2Step5.swift","highlights":[{"line":9},{"line":10},{"line":11},{"line":12},{"line":13}],"content":["import Space","","@Contract struct MyContract {","    @Mapping<Address, UInt64>(key: \"storedIntegerForUser\") var storedIntegerForUser","    ","    public func increaseStoredValue() {","        let caller = Message.caller","        ","        guard self.storedIntegerForUser[caller] < 100 else {","            self.storedIntegerForUser[caller] = 0","            return","        }","        ","        self.storedIntegerForUser[caller] = self.storedIntegerForUser[caller] + 1","    }","}"]},"doc://Space/tutorials/Space/Deep-Dive-into-Space-Concepts/Persisting-Data-Across-Executions":{"identifier":"doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Persisting-Data-Across-Executions","title":"Persisting Data Across Executions","abstract":[],"type":"topic","role":"article","kind":"article","url":"\/tutorials\/space\/deep-dive-into-space-concepts\/persisting-data-across-executions"},"doc://Space/tutorials/Space/Deep-Dive-into-Space-Concepts/Retrieving-Information-from-the-Blockchain":{"identifier":"doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Retrieving-Information-from-the-Blockchain","title":"Retrieving Information from the Blockchain","abstract":[],"role":"article","kind":"article","url":"\/tutorials\/space\/deep-dive-into-space-concepts\/retrieving-information-from-the-blockchain","type":"topic"},"doc://Space/tutorials/Space/Getting-Started/Building-Your-First-Smart-Contract":{"role":"article","identifier":"doc:\/\/Space\/tutorials\/Space\/Getting-Started\/Building-Your-First-Smart-Contract","title":"Building Your First Smart Contract","url":"\/tutorials\/space\/getting-started\/building-your-first-smart-contract","type":"topic","kind":"article","abstract":[]},"doc://Space/tutorials/Space":{"identifier":"doc:\/\/Space\/tutorials\/Space","title":"Meet Space","abstract":[{"type":"text","text":"Discover how Space simplifies blockchain development using Swift. Dive into the world of Web3 with ease and efficiency."}],"type":"topic","role":"overview","kind":"overview","url":"\/tutorials\/space"},"doc://Space/tutorials/Space/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges":{"identifier":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges","title":"Handling Heap Allocation Challenges","abstract":[{"type":"text","text":"Space provides types that allow you to leverage the full potential of the SpaceVM."}],"type":"section","role":"pseudoSymbol","kind":"section","url":"\/tutorials\/space\/familiarizewithtypes#Handling-Heap-Allocation-Challenges"},"doc://Space/tutorials/Space/FamiliarizeWithTypes":{"role":"project","identifier":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes","title":"Exploring Space's Types","url":"\/tutorials\/space\/familiarizewithtypes","type":"topic","kind":"project","estimatedTime":"20min","abstract":[{"type":"text","text":"Space provides types that allow you to leverage the full potential of the SpaceVM."}]},"doc://Space/tutorials/Space/Getting-Started/Installing-the-Tools":{"identifier":"doc:\/\/Space\/tutorials\/Space\/Getting-Started\/Installing-the-Tools","title":"Installing the Tools","abstract":[],"type":"topic","role":"article","kind":"article","url":"\/tutorials\/space\/getting-started\/installing-the-tools"},"doc://Space/tutorials/Space/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract":{"type":"section","identifier":"doc:\/\/Space\/tutorials\/Space\/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract","title":"Initializing and Compiling Your First Smart Contract","role":"pseudoSymbol","kind":"section","abstract":[{"type":"text","text":"Before writing your first smart contract with Space, ensure you have the necessary tools installed."}],"url":"\/tutorials\/space\/installingtools#Initializing-and-Compiling-Your-First-Smart-Contract"},"StoreValuesSection2Step3.swift":{"content":["import Space","","@Contract struct MyContract {","    @Mapping<Address, UInt64>(key: \"storedIntegerForUser\") var storedIntegerForUser","    ","    public func increaseStoredValue() {","        let caller = Message.caller","    }","}"],"type":"file","fileName":"lib.swift","identifier":"StoreValuesSection2Step3.swift","syntax":"swift","highlights":[{"line":7}],"fileType":"swift"},"doc://Space/tutorials/Space/CodingYourFirstContract#Initializing-the-Project":{"abstract":[{"type":"text","text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user."}],"url":"\/tutorials\/space\/codingyourfirstcontract#Initializing-the-Project","role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract#Initializing-the-Project","type":"section","title":"Initializing the Project"},"doc://Space/tutorials/Space/FamiliarizeWithTypes#Understanding-the-Buffer-Type":{"identifier":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Understanding-the-Buffer-Type","title":"Understanding the Buffer Type","abstract":[{"type":"text","text":"Space provides types that allow you to leverage the full potential of the SpaceVM."}],"role":"pseudoSymbol","kind":"section","url":"\/tutorials\/space\/familiarizewithtypes#Understanding-the-Buffer-Type","type":"section"},"StoreValuesSection1Step2.swift":{"syntax":"swift","fileName":"lib.swift","type":"file","fileType":"swift","identifier":"StoreValuesSection1Step2.swift","highlights":[{"line":4},{"line":5}],"content":["import Space","","@Contract struct MyContract {","    @Storage(key: \"storedInteger\") var storedInteger: UInt64","    ","    public func increaseStoredValue() {","        ","    }","}"]},"StoreValuesSection2Step4.swift":{"content":["import Space","","@Contract struct MyContract {","    @Mapping<Address, UInt64>(key: \"storedIntegerForUser\") var storedIntegerForUser","    ","    public func increaseStoredValue() {","        let caller = Message.caller","        ","        self.storedIntegerForUser[caller] = self.storedIntegerForUser[caller] + 1","    }","}"],"type":"file","fileName":"lib.swift","identifier":"StoreValuesSection2Step4.swift","syntax":"swift","highlights":[{"line":8},{"line":9}],"fileType":"swift"},"StoreValuesSection1Step4.swift":{"syntax":"swift","fileName":"lib.swift","type":"file","fileType":"swift","identifier":"StoreValuesSection1Step4.swift","highlights":[{"line":7},{"line":8},{"line":9},{"line":10},{"line":11}],"content":["import Space","","@Contract struct MyContract {","    @Storage(key: \"storedInteger\") var storedInteger: UInt64","    ","    public func increaseStoredValue() {","        guard self.storedInteger < 100 else {","            self.storedInteger = 0","            return","        }","        ","        self.storedInteger = self.storedInteger + 1","    }","}"]},"doc://Space/tutorials/Space/CodingYourFirstContract":{"identifier":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract","estimatedTime":"20min","title":"Building Your First Smart Contract","abstract":[{"type":"text","text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user."}],"type":"topic","role":"project","kind":"project","url":"\/tutorials\/space\/codingyourfirstcontract"},"doc://Space/tutorials/Space/SyncCalls":{"identifier":"doc:\/\/Space\/tutorials\/Space\/SyncCalls","estimatedTime":"15min","title":"Interact with Other Contracts","abstract":[{"type":"text","text":"Smart contracts can interact not only with users but also with other smart contracts. This enables more advanced protocols by leveraging existing ones. For example, you could integrate a decentralized exchange directly into your contract to perform token swaps. Decentralized applications often involve multiple contracts, each with a dedicated role, working together to achieve complex functionality—similar to microservices in backend systems."}],"type":"topic","role":"project","kind":"project","url":"\/tutorials\/space\/synccalls"},"doc://Space/tutorials/Space/CodingYourFirstContract#Writing-the-Contract-Code":{"abstract":[{"type":"text","text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user."}],"url":"\/tutorials\/space\/codingyourfirstcontract#Writing-the-Contract-Code","role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract#Writing-the-Contract-Code","type":"section","title":"Writing the Contract Code"},"doc://Space/tutorials/Space/InstallingTools":{"estimatedTime":"10min","url":"\/tutorials\/space\/installingtools","role":"project","type":"topic","identifier":"doc:\/\/Space\/tutorials\/Space\/InstallingTools","title":"Install the Necessary Tools","abstract":[{"type":"text","text":"Before writing your first smart contract with Space, ensure you have the necessary tools installed."}],"kind":"project"},"doc://Space/tutorials/Space/StoreValues#Working-with-Storage-for-Single-Value-Persistence":{"type":"section","url":"\/tutorials\/space\/storevalues#Working-with-Storage-for-Single-Value-Persistence","abstract":[{"type":"text","text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory."}],"kind":"section","role":"pseudoSymbol","identifier":"doc:\/\/Space\/tutorials\/Space\/StoreValues#Working-with-Storage-for-Single-Value-Persistence","title":"Working with @Storage for Single Value Persistence"},"doc://Space/tutorials/Space/CodingYourFirstContract#Testing-the-Contract":{"identifier":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract#Testing-the-Contract","kind":"section","type":"section","url":"\/tutorials\/space\/codingyourfirstcontract#Testing-the-Contract","title":"Testing the Contract","role":"pseudoSymbol","abstract":[{"type":"text","text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user."}]},"doc://Space/tutorials/Space/GetInfo#Accessing-Transaction-Context-Data":{"identifier":"doc:\/\/Space\/tutorials\/Space\/GetInfo#Accessing-Transaction-Context-Data","title":"Accessing Transaction Context Data","abstract":[{"text":"Many smart contracts rely on contextual data to execute their operations effectively. This data can include input payments, the caller’s address, the current time, the balance of a specific account, or even the contract owner.","type":"text"}],"type":"section","role":"pseudoSymbol","kind":"section","url":"\/tutorials\/space\/getinfo#Accessing-Transaction-Context-Data"},"doc://Space/tutorials/Space/GetInfo":{"identifier":"doc:\/\/Space\/tutorials\/Space\/GetInfo","abstract":[{"type":"text","text":"Many smart contracts rely on contextual data to execute their operations effectively. This data can include input payments, the caller’s address, the current time, the balance of a specific account, or even the contract owner."}],"title":"Retrieving Information from the Blockchain","role":"project","estimatedTime":"10min","type":"topic","kind":"project","url":"\/tutorials\/space\/getinfo"},"doc://Space/tutorials/Space/InstallingTools#Installing-Spaces-Dependencies":{"identifier":"doc:\/\/Space\/tutorials\/Space\/InstallingTools#Installing-Spaces-Dependencies","title":"Installing Space's Dependencies","abstract":[{"type":"text","text":"Before writing your first smart contract with Space, ensure you have the necessary tools installed."}],"type":"section","role":"pseudoSymbol","kind":"section","url":"\/tutorials\/space\/installingtools#Installing-Spaces-Dependencies"},"doc://Space/tutorials/Space/SyncCalls#Perform-a-Synchronous-Call":{"type":"section","url":"\/tutorials\/space\/synccalls#Perform-a-Synchronous-Call","abstract":[{"type":"text","text":"Smart contracts can interact not only with users but also with other smart contracts. This enables more advanced protocols by leveraging existing ones. For example, you could integrate a decentralized exchange directly into your contract to perform token swaps. Decentralized applications often involve multiple contracts, each with a dedicated role, working together to achieve complex functionality—similar to microservices in backend systems."}],"role":"pseudoSymbol","kind":"section","title":"Perform a Synchronous Call","identifier":"doc:\/\/Space\/tutorials\/Space\/SyncCalls#Perform-a-Synchronous-Call"},"doc://Space/tutorials/Space/InstallingTools#Setting-Up-the-Space-CLI":{"abstract":[{"type":"text","text":"Before writing your first smart contract with Space, ensure you have the necessary tools installed."}],"url":"\/tutorials\/space\/installingtools#Setting-Up-the-Space-CLI","role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/Space\/tutorials\/Space\/InstallingTools#Setting-Up-the-Space-CLI","type":"section","title":"Setting Up the Space CLI"},"StoreValuesSection2Step1.swift":{"content":["import Space","","@Contract struct MyContract {","    public func increaseStoredValue() {","        ","    }","}"],"type":"file","fileName":"lib.swift","identifier":"StoreValuesSection2Step1.swift","syntax":"swift","highlights":[],"fileType":"swift"},"doc://Space/tutorials/Space/GetInfo#Accessing-Blockchain-Context-Data":{"url":"\/tutorials\/space\/getinfo#Accessing-Blockchain-Context-Data","role":"pseudoSymbol","type":"section","identifier":"doc:\/\/Space\/tutorials\/Space\/GetInfo#Accessing-Blockchain-Context-Data","title":"Accessing Blockchain Context Data","abstract":[{"type":"text","text":"Many smart contracts rely on contextual data to execute their operations effectively. This data can include input payments, the caller’s address, the current time, the balance of a specific account, or even the contract owner."}],"kind":"section"},"StoreValuesSection2Step2.swift":{"syntax":"swift","fileName":"lib.swift","type":"file","fileType":"swift","identifier":"StoreValuesSection2Step2.swift","highlights":[{"line":4},{"line":5}],"content":["import Space","","@Contract struct MyContract {","    @Mapping<Address, UInt64>(key: \"storedIntegerForUser\") var storedIntegerForUser","    ","    public func increaseStoredValue() {","        ","    }","}"]},"doc://Space/tutorials/Space/StoreValues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage":{"type":"section","identifier":"doc:\/\/Space\/tutorials\/Space\/StoreValues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage","title":"Leveraging @Mapping for Dynamic Key-Value Storage","role":"pseudoSymbol","kind":"section","abstract":[{"type":"text","text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory."}],"url":"\/tutorials\/space\/storevalues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage"},"doc://Space/tutorials/Space/FamiliarizeWithTypes#Working-with-the-Vector-Type":{"abstract":[{"type":"text","text":"Space provides types that allow you to leverage the full potential of the SpaceVM."}],"url":"\/tutorials\/space\/familiarizewithtypes#Working-with-the-Vector-Type","role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Working-with-the-Vector-Type","type":"section","title":"Working with the Vector Type"},"doc://Space/tutorials/Space/StoreValues":{"role":"project","identifier":"doc:\/\/Space\/tutorials\/Space\/StoreValues","title":"Persist Values Between Executions","url":"\/tutorials\/space\/storevalues","type":"topic","kind":"project","estimatedTime":"15min","abstract":[{"text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory.","type":"text"}]},"doc://Space/tutorials/Space/Deep-Dive-into-Space-Concepts/Exploring-Space's-Types":{"role":"article","identifier":"doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Exploring-Space's-Types","title":"Exploring Space's Types","url":"\/tutorials\/space\/deep-dive-into-space-concepts\/exploring-space's-types","type":"topic","kind":"article","abstract":[]},"doc://Space/tutorials/Space/FamiliarizeWithTypes#Working-with-the-BigUint-Type":{"identifier":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Working-with-the-BigUint-Type","title":"Working with the BigUint Type","abstract":[{"type":"text","text":"Space provides types that allow you to leverage the full potential of the SpaceVM."}],"type":"section","role":"pseudoSymbol","kind":"section","url":"\/tutorials\/space\/familiarizewithtypes#Working-with-the-BigUint-Type"},"StoreValuesSection2Step6.swift":{"content":["import Space","","@Contract struct MyContract {","    @Mapping<Address, UInt64>(key: \"storedIntegerForUser\") var storedIntegerForUser","    ","    public func increaseStoredValue() {","        let caller = Message.caller","        ","        guard self.storedIntegerForUser[caller] < 100 else {","            self.storedIntegerForUser[caller] = 0","            return","        }","        ","        self.storedIntegerForUser[caller] = self.storedIntegerForUser[caller] + 1","    }","    ","    public func getStoredIntegerForUser(user: Address) -> UInt64 {","        return self.storedIntegerForUser[user]","    }","}"],"type":"file","fileName":"lib.swift","identifier":"StoreValuesSection2Step6.swift","syntax":"swift","highlights":[{"line":16},{"line":17},{"line":18},{"line":19}],"fileType":"swift"}}}