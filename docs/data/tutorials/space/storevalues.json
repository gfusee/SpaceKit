{"identifier":{"url":"doc:\/\/Space\/tutorials\/Space\/StoreValues","interfaceLanguage":"swift"},"metadata":{"title":"Persist Values Between Executions","categoryPathComponent":"Space","category":"Space","role":"project"},"hierarchy":{"paths":[["doc:\/\/Space\/tutorials\/Space","doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts","doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Persisting-Data-Across-Executions"]],"reference":"doc:\/\/Space\/tutorials\/Space","modules":[{"reference":"doc:\/\/Space\/tutorials\/Space\/Getting-Started\/Installing-the-Tools","projects":[{"sections":[{"kind":"task","reference":"doc:\/\/Space\/tutorials\/Space\/InstallingTools#Installing-Spaces-Dependencies"},{"kind":"task","reference":"doc:\/\/Space\/tutorials\/Space\/InstallingTools#Setting-Up-the-Space-CLI"},{"reference":"doc:\/\/Space\/tutorials\/Space\/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract","kind":"task"}],"reference":"doc:\/\/Space\/tutorials\/Space\/InstallingTools"}]},{"projects":[{"reference":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract","sections":[{"reference":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract#Initializing-the-Project","kind":"task"},{"reference":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract#Writing-the-Contract-Code","kind":"task"},{"reference":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract#Testing-the-Contract","kind":"task"}]}],"reference":"doc:\/\/Space\/tutorials\/Space\/Getting-Started\/Building-Your-First-Smart-Contract"},{"reference":"doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Exploring-Space's-Types","projects":[{"reference":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes","sections":[{"reference":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges","kind":"task"},{"kind":"task","reference":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Understanding-the-Buffer-Type"},{"reference":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Working-with-the-BigUint-Type","kind":"task"},{"reference":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Working-with-the-Vector-Type","kind":"task"},{"reference":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Creating-Your-Own-Types","kind":"task"}]}]},{"reference":"doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Persisting-Data-Across-Executions","projects":[{"sections":[{"reference":"doc:\/\/Space\/tutorials\/Space\/StoreValues#Working-with-Storage-for-Single-Value-Persistence","kind":"task"},{"reference":"doc:\/\/Space\/tutorials\/Space\/StoreValues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage","kind":"task"}],"reference":"doc:\/\/Space\/tutorials\/Space\/StoreValues"}]}]},"sections":[{"kind":"hero","title":"Persist Values Between Executions","chapter":"Persisting Data Across Executions","estimatedTimeInMinutes":15,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory."}]},{"inlineContent":[{"text":"However, there are situations where you need to persist data across multiple executions. To support this, Space provides a built-in “storage” system for every contract.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The storage system is essentially a key-value dictionary where both keys and values are stored as raw data."}]},{"inlineContent":[{"type":"text","text":"Space abstracts away the complexities of encoding and decoding values, offering simple APIs for interacting with storage."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"In this tutorial, you’ll learn two common approaches for storing data using "},{"type":"codeVoice","code":"@Storage"},{"text":" and ","type":"text"},{"code":"@Mapping","type":"codeVoice"},{"text":" annotations. Additionally, Space provides advanced mechanisms like storage mappers to handle more complex data structures, which will be covered in a later chapter.","type":"text"}],"type":"paragraph"}]},{"tasks":[{"anchor":"Working-with-Storage-for-Single-Value-Persistence","contentSection":[{"content":[{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"@Storage"},{"type":"text","text":" annotation allows you to persist a single value under a specified key. The "},{"type":"codeVoice","code":"key"},{"text":" parameter defines the storage key, and we recommend matching the key to the variable name for consistency.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"In this section, you’ll implement an endpoint called ","type":"text"},{"code":"increaseStoredValue","type":"codeVoice"},{"text":", which increments a persistent integer each time it is called. If the value reaches 100, it resets to 0.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Note: The focus here is on basic implementation. Optimizations, especially for transaction cost reductions, will be introduced in a later chapter."}],"type":"paragraph"}],"mediaPosition":"trailing","kind":"contentAndMedia"}],"stepsSection":[{"media":null,"code":"StoreValuesSection1Step1.swift","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Begin by setting up the basic structure of the contract."}]}],"type":"step","caption":[]},{"code":"StoreValuesSection1Step2.swift","type":"step","media":null,"content":[{"inlineContent":[{"type":"text","text":"Add a persistent integer to the contract using the "},{"code":"@Storage","type":"codeVoice"},{"type":"text","text":" annotation. By default, this integer is initialized to 0 unless otherwise specified."}],"type":"paragraph"}],"caption":[],"runtimePreview":null},{"media":null,"caption":[{"inlineContent":[{"type":"text","text":"Tip: Be mindful that reading from storage increases transaction costs. This section focuses on functionality, and optimization techniques will be covered in later chapters."}],"type":"paragraph"}],"code":"StoreValuesSection1Step3.swift","type":"step","content":[{"inlineContent":[{"type":"text","text":"Implement the logic to increment the stored integer whenever the "},{"code":"increaseStoredValue","type":"codeVoice"},{"text":" endpoint is invoked.","type":"text"}],"type":"paragraph"}],"runtimePreview":null},{"type":"step","runtimePreview":null,"caption":[],"code":"StoreValuesSection1Step4.swift","content":[{"type":"paragraph","inlineContent":[{"text":"If the integer reaches 100, reset it to 0.","type":"text"}]}],"media":null}],"title":"Working with @Storage for Single Value Persistence"},{"contentSection":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"@Mapping"},{"text":" annotation allows you to store values under dynamically computed keys, effectively creating a nested dictionary in the contract’s storage. Space automatically handles encoding and decoding, ensuring typed access to both keys and values.","type":"text"}]},{"inlineContent":[{"type":"text","text":"Think of it like this: if Alice and Bob both call your smart contract, each of them will have their own persistent storage space. When Alice calls the contract, her address is used to store or retrieve address unique data, and the same happens for Bob with his own key. This way, each user can have their own independent version of the same data, without interference."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"In this section, you’ll extend the ","type":"text"},{"code":"increaseStoredValue","type":"codeVoice"},{"type":"text","text":" endpoint so that each user (like Alice and Bob) will have a unique persistent integer tied to their address. The integer will be stored and incremented individually for each user, ensuring their data remains isolated."}]}],"mediaPosition":"trailing","kind":"contentAndMedia"}],"title":"Leveraging @Mapping for Dynamic Key-Value Storage","stepsSection":[{"type":"step","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Begin by defining the structure of your contract."}]}],"caption":[],"code":"StoreValuesSection2Step1.swift","media":null},{"content":[{"inlineContent":[{"type":"text","text":"Use the "},{"code":"@Mapping<Key, Value>","type":"codeVoice"},{"type":"text","text":" annotation to associate each user’s address with their own persistent integer."}],"type":"paragraph"}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Tip: You don’t need to explicitly declare the type of the variable. Specifying the "},{"code":"Key","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"Value","type":"codeVoice"},{"type":"text","text":" generic parameters is sufficient."}]}],"media":null,"type":"step","code":"StoreValuesSection2Step2.swift","runtimePreview":null},{"code":"StoreValuesSection2Step3.swift","caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Note: This involves interacting with the "},{"type":"codeVoice","code":"Message"},{"text":" object, which will be covered in detail in a future chapter.","type":"text"}]}],"media":null,"type":"step","runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"Retrieve the caller’s address."}],"type":"paragraph"}]},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Increment the persistent integer associated with the caller’s address."}]}],"media":null,"runtimePreview":null,"caption":[],"code":"StoreValuesSection2Step4.swift"},{"caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Reset the caller’s integer to 0 once it reaches 100."}]}],"code":"StoreValuesSection2Step5.swift","runtimePreview":null,"type":"step","media":null},{"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Reminder: A view is an endpoint that does not alter any state on the blockchain."}]}],"code":"StoreValuesSection2Step6.swift","runtimePreview":null,"media":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Implement a view to allow querying of the stored integer value for a given user, enabling off-chain access to the data.","type":"text"}]}]}],"anchor":"Leveraging-Mapping-for-Dynamic-Key-Value-Storage"}],"kind":"tasks"}],"schemaVersion":{"patch":0,"major":0,"minor":3},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/tutorials\/space\/storevalues"]}],"kind":"project","references":{"StoreValuesSection1Step1.swift":{"fileType":"swift","content":["import Space","","@Contract struct MyContract {","    public func increaseStoredValue() {","        ","    }","}"],"highlights":[],"fileName":"lib.swift","type":"file","identifier":"StoreValuesSection1Step1.swift","syntax":"swift"},"doc://Space/tutorials/Space/Deep-Dive-into-Space-Concepts/Exploring-Space's-Types":{"type":"topic","title":"Exploring Space's Types","abstract":[],"kind":"article","identifier":"doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Exploring-Space's-Types","url":"\/tutorials\/space\/deep-dive-into-space-concepts\/exploring-space's-types","role":"article"},"doc://Space/tutorials/Space/InstallingTools#Setting-Up-the-Space-CLI":{"type":"section","abstract":[{"type":"text","text":"Before writing your first smart contract with Space, ensure you have the necessary tools installed."}],"role":"pseudoSymbol","identifier":"doc:\/\/Space\/tutorials\/Space\/InstallingTools#Setting-Up-the-Space-CLI","kind":"section","title":"Setting Up the Space CLI","url":"\/tutorials\/space\/installingtools#Setting-Up-the-Space-CLI"},"doc://Space/tutorials/Space/FamiliarizeWithTypes#Working-with-the-BigUint-Type":{"abstract":[{"type":"text","text":"Space provides types that allow you to leverage the full potential of the SpaceVM."}],"kind":"section","type":"section","url":"\/tutorials\/space\/familiarizewithtypes#Working-with-the-BigUint-Type","identifier":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Working-with-the-BigUint-Type","title":"Working with the BigUint Type","role":"pseudoSymbol"},"doc://Space/tutorials/Space/CodingYourFirstContract":{"type":"topic","abstract":[{"type":"text","text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user."}],"role":"project","estimatedTime":"20min","identifier":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract","kind":"project","title":"Building Your First Smart Contract","url":"\/tutorials\/space\/codingyourfirstcontract"},"StoreValuesSection2Step5.swift":{"syntax":"swift","fileType":"swift","highlights":[{"line":9},{"line":10},{"line":11},{"line":12},{"line":13}],"type":"file","identifier":"StoreValuesSection2Step5.swift","fileName":"lib.swift","content":["import Space","","@Contract struct MyContract {","    @Mapping<Address, UInt64>(key: \"storedIntegerForUser\") var storedIntegerForUser","    ","    public func increaseStoredValue() {","        let caller = Message.caller","        ","        guard self.storedIntegerForUser[caller] < 100 else {","            self.storedIntegerForUser[caller] = 0","            return","        }","        ","        self.storedIntegerForUser[caller] = self.storedIntegerForUser[caller] + 1","    }","}"]},"doc://Space/tutorials/Space/CodingYourFirstContract#Writing-the-Contract-Code":{"identifier":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract#Writing-the-Contract-Code","title":"Writing the Contract Code","url":"\/tutorials\/space\/codingyourfirstcontract#Writing-the-Contract-Code","kind":"section","type":"section","abstract":[{"type":"text","text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user."}],"role":"pseudoSymbol"},"doc://Space/tutorials/Space/StoreValues#Working-with-Storage-for-Single-Value-Persistence":{"role":"pseudoSymbol","type":"section","identifier":"doc:\/\/Space\/tutorials\/Space\/StoreValues#Working-with-Storage-for-Single-Value-Persistence","abstract":[{"type":"text","text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory."}],"kind":"section","title":"Working with @Storage for Single Value Persistence","url":"\/tutorials\/space\/storevalues#Working-with-Storage-for-Single-Value-Persistence"},"StoreValuesSection1Step3.swift":{"type":"file","syntax":"swift","fileName":"lib.swift","identifier":"StoreValuesSection1Step3.swift","content":["import Space","","@Contract struct MyContract {","    @Storage(key: \"storedInteger\") var storedInteger: UInt64","    ","    public func increaseStoredValue() {","        self.storedInteger = self.storedInteger + 1","    }","}"],"highlights":[{"line":7}],"fileType":"swift"},"StoreValuesSection2Step3.swift":{"syntax":"swift","fileName":"lib.swift","identifier":"StoreValuesSection2Step3.swift","content":["import Space","","@Contract struct MyContract {","    @Mapping<Address, UInt64>(key: \"storedIntegerForUser\") var storedIntegerForUser","    ","    public func increaseStoredValue() {","        let caller = Message.caller","    }","}"],"highlights":[{"line":7}],"type":"file","fileType":"swift"},"StoreValuesSection1Step4.swift":{"type":"file","syntax":"swift","fileName":"lib.swift","identifier":"StoreValuesSection1Step4.swift","content":["import Space","","@Contract struct MyContract {","    @Storage(key: \"storedInteger\") var storedInteger: UInt64","    ","    public func increaseStoredValue() {","        guard self.storedInteger < 100 else {","            self.storedInteger = 0","            return","        }","        ","        self.storedInteger = self.storedInteger + 1","    }","}"],"highlights":[{"line":7},{"line":8},{"line":9},{"line":10},{"line":11}],"fileType":"swift"},"doc://Space/tutorials/Space/FamiliarizeWithTypes":{"kind":"project","role":"project","estimatedTime":"20min","url":"\/tutorials\/space\/familiarizewithtypes","title":"Exploring Space's Types","identifier":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes","type":"topic","abstract":[{"type":"text","text":"Space provides types that allow you to leverage the full potential of the SpaceVM."}]},"StoreValuesSection2Step6.swift":{"type":"file","syntax":"swift","fileName":"lib.swift","identifier":"StoreValuesSection2Step6.swift","content":["import Space","","@Contract struct MyContract {","    @Mapping<Address, UInt64>(key: \"storedIntegerForUser\") var storedIntegerForUser","    ","    public func increaseStoredValue() {","        let caller = Message.caller","        ","        guard self.storedIntegerForUser[caller] < 100 else {","            self.storedIntegerForUser[caller] = 0","            return","        }","        ","        self.storedIntegerForUser[caller] = self.storedIntegerForUser[caller] + 1","    }","    ","    public func getStoredIntegerForUser(user: Address) -> UInt64 {","        return self.storedIntegerForUser[user]","    }","}"],"highlights":[{"line":16},{"line":17},{"line":18},{"line":19}],"fileType":"swift"},"StoreValuesSection2Step1.swift":{"syntax":"swift","fileName":"lib.swift","identifier":"StoreValuesSection2Step1.swift","content":["import Space","","@Contract struct MyContract {","    public func increaseStoredValue() {","        ","    }","}"],"highlights":[],"type":"file","fileType":"swift"},"doc://Space/tutorials/Space/Getting-Started/Installing-the-Tools":{"type":"topic","identifier":"doc:\/\/Space\/tutorials\/Space\/Getting-Started\/Installing-the-Tools","kind":"article","title":"Installing the Tools","abstract":[],"url":"\/tutorials\/space\/getting-started\/installing-the-tools","role":"article"},"doc://Space/tutorials/Space/Deep-Dive-into-Space-Concepts/Persisting-Data-Across-Executions":{"kind":"article","role":"article","url":"\/tutorials\/space\/deep-dive-into-space-concepts\/persisting-data-across-executions","title":"Persisting Data Across Executions","identifier":"doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Persisting-Data-Across-Executions","type":"topic","abstract":[]},"StoreValuesSection2Step2.swift":{"syntax":"swift","identifier":"StoreValuesSection2Step2.swift","type":"file","content":["import Space","","@Contract struct MyContract {","    @Mapping<Address, UInt64>(key: \"storedIntegerForUser\") var storedIntegerForUser","    ","    public func increaseStoredValue() {","        ","    }","}"],"fileName":"lib.swift","fileType":"swift","highlights":[{"line":4},{"line":5}]},"doc://Space/tutorials/Space/CodingYourFirstContract#Testing-the-Contract":{"kind":"section","role":"pseudoSymbol","url":"\/tutorials\/space\/codingyourfirstcontract#Testing-the-Contract","title":"Testing the Contract","identifier":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract#Testing-the-Contract","type":"section","abstract":[{"type":"text","text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user."}]},"doc://Space/tutorials/Space/Getting-Started/Building-Your-First-Smart-Contract":{"url":"\/tutorials\/space\/getting-started\/building-your-first-smart-contract","identifier":"doc:\/\/Space\/tutorials\/Space\/Getting-Started\/Building-Your-First-Smart-Contract","role":"article","abstract":[],"kind":"article","type":"topic","title":"Building Your First Smart Contract"},"doc://Space/tutorials/Space/FamiliarizeWithTypes#Understanding-the-Buffer-Type":{"kind":"section","role":"pseudoSymbol","url":"\/tutorials\/space\/familiarizewithtypes#Understanding-the-Buffer-Type","title":"Understanding the Buffer Type","identifier":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Understanding-the-Buffer-Type","type":"section","abstract":[{"type":"text","text":"Space provides types that allow you to leverage the full potential of the SpaceVM."}]},"doc://Space/tutorials/Space/StoreValues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage":{"url":"\/tutorials\/space\/storevalues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage","identifier":"doc:\/\/Space\/tutorials\/Space\/StoreValues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage","role":"pseudoSymbol","abstract":[{"type":"text","text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory."}],"kind":"section","type":"section","title":"Leveraging @Mapping for Dynamic Key-Value Storage"},"doc://Space/tutorials/Space/InstallingTools":{"kind":"project","role":"project","estimatedTime":"10min","url":"\/tutorials\/space\/installingtools","title":"Install the Necessary Tools","identifier":"doc:\/\/Space\/tutorials\/Space\/InstallingTools","type":"topic","abstract":[{"type":"text","text":"Before writing your first smart contract with Space, ensure you have the necessary tools installed."}]},"StoreValuesSection1Step2.swift":{"identifier":"StoreValuesSection1Step2.swift","highlights":[{"line":4},{"line":5}],"content":["import Space","","@Contract struct MyContract {","    @Storage(key: \"storedInteger\") var storedInteger: UInt64","    ","    public func increaseStoredValue() {","        ","    }","}"],"syntax":"swift","fileName":"lib.swift","fileType":"swift","type":"file"},"doc://Space/tutorials/Space/FamiliarizeWithTypes#Creating-Your-Own-Types":{"kind":"section","role":"pseudoSymbol","url":"\/tutorials\/space\/familiarizewithtypes#Creating-Your-Own-Types","title":"Creating Your Own Types","identifier":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Creating-Your-Own-Types","type":"section","abstract":[{"type":"text","text":"Space provides types that allow you to leverage the full potential of the SpaceVM."}]},"doc://Space/tutorials/Space/FamiliarizeWithTypes#Working-with-the-Vector-Type":{"url":"\/tutorials\/space\/familiarizewithtypes#Working-with-the-Vector-Type","identifier":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Working-with-the-Vector-Type","role":"pseudoSymbol","abstract":[{"type":"text","text":"Space provides types that allow you to leverage the full potential of the SpaceVM."}],"kind":"section","type":"section","title":"Working with the Vector Type"},"StoreValuesSection2Step4.swift":{"syntax":"swift","fileName":"lib.swift","identifier":"StoreValuesSection2Step4.swift","content":["import Space","","@Contract struct MyContract {","    @Mapping<Address, UInt64>(key: \"storedIntegerForUser\") var storedIntegerForUser","    ","    public func increaseStoredValue() {","        let caller = Message.caller","        ","        self.storedIntegerForUser[caller] = self.storedIntegerForUser[caller] + 1","    }","}"],"highlights":[{"line":8},{"line":9}],"type":"file","fileType":"swift"},"doc://Space/tutorials/Space/CodingYourFirstContract#Initializing-the-Project":{"url":"\/tutorials\/space\/codingyourfirstcontract#Initializing-the-Project","identifier":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract#Initializing-the-Project","role":"pseudoSymbol","abstract":[{"type":"text","text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user."}],"kind":"section","type":"section","title":"Initializing the Project"},"doc://Space/tutorials/Space/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges":{"kind":"section","role":"pseudoSymbol","url":"\/tutorials\/space\/familiarizewithtypes#Handling-Heap-Allocation-Challenges","title":"Handling Heap Allocation Challenges","identifier":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges","type":"section","abstract":[{"type":"text","text":"Space provides types that allow you to leverage the full potential of the SpaceVM."}]},"doc://Space/tutorials/Space/InstallingTools#Installing-Spaces-Dependencies":{"url":"\/tutorials\/space\/installingtools#Installing-Spaces-Dependencies","identifier":"doc:\/\/Space\/tutorials\/Space\/InstallingTools#Installing-Spaces-Dependencies","role":"pseudoSymbol","abstract":[{"type":"text","text":"Before writing your first smart contract with Space, ensure you have the necessary tools installed."}],"kind":"section","type":"section","title":"Installing Space's Dependencies"},"doc://Space/tutorials/Space/StoreValues":{"url":"\/tutorials\/space\/storevalues","abstract":[{"type":"text","text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory."}],"title":"Persist Values Between Executions","kind":"project","role":"project","estimatedTime":"15min","type":"topic","identifier":"doc:\/\/Space\/tutorials\/Space\/StoreValues"},"doc://Space/tutorials/Space":{"role":"overview","title":"Meet Space","kind":"overview","abstract":[{"type":"text","text":"Discover how Space simplifies blockchain development using Swift. Dive into the world of Web3 with ease and efficiency."}],"identifier":"doc:\/\/Space\/tutorials\/Space","type":"topic","url":"\/tutorials\/space"},"doc://Space/tutorials/Space/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract":{"type":"section","abstract":[{"type":"text","text":"Before writing your first smart contract with Space, ensure you have the necessary tools installed."}],"identifier":"doc:\/\/Space\/tutorials\/Space\/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract","kind":"section","title":"Initializing and Compiling Your First Smart Contract","url":"\/tutorials\/space\/installingtools#Initializing-and-Compiling-Your-First-Smart-Contract","role":"pseudoSymbol"}}}