{"hierarchy":{"modules":[{"projects":[{"sections":[{"kind":"task","reference":"doc:\/\/Space\/tutorials\/Space\/InstallingTools#Installing-Spaces-Dependencies"},{"kind":"task","reference":"doc:\/\/Space\/tutorials\/Space\/InstallingTools#Setting-Up-the-Space-CLI"},{"reference":"doc:\/\/Space\/tutorials\/Space\/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract","kind":"task"}],"reference":"doc:\/\/Space\/tutorials\/Space\/InstallingTools"}],"reference":"doc:\/\/Space\/tutorials\/Space\/Getting-Started\/Installing-the-Tools"},{"reference":"doc:\/\/Space\/tutorials\/Space\/Getting-Started\/Building-Your-First-Smart-Contract","projects":[{"sections":[{"reference":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract#Initializing-the-Project","kind":"task"},{"kind":"task","reference":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract#Writing-the-Contract-Code"},{"reference":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract#Testing-the-Contract","kind":"task"}],"reference":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract"}]},{"reference":"doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Exploring-Space's-Types","projects":[{"reference":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes","sections":[{"reference":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges","kind":"task"},{"kind":"task","reference":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Understanding-the-Buffer-Type"},{"kind":"task","reference":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Working-with-the-BigUint-Type"},{"kind":"task","reference":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Working-with-the-Vector-Type"},{"kind":"task","reference":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Creating-Your-Own-Types"}]}]},{"reference":"doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Persisting-Data-Across-Executions","projects":[{"reference":"doc:\/\/Space\/tutorials\/Space\/StoreValues","sections":[{"reference":"doc:\/\/Space\/tutorials\/Space\/StoreValues#Working-with-Storage-for-Single-Value-Persistence","kind":"task"},{"reference":"doc:\/\/Space\/tutorials\/Space\/StoreValues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage","kind":"task"}]}]},{"projects":[{"reference":"doc:\/\/Space\/tutorials\/Space\/GetInfo","sections":[{"reference":"doc:\/\/Space\/tutorials\/Space\/GetInfo#Accessing-Transaction-Context-Data","kind":"task"},{"reference":"doc:\/\/Space\/tutorials\/Space\/GetInfo#Accessing-Blockchain-Context-Data","kind":"task"}]}],"reference":"doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Retrieving-Information-from-the-Blockchain"},{"projects":[{"reference":"doc:\/\/Space\/tutorials\/Space\/SyncCalls","sections":[{"kind":"task","reference":"doc:\/\/Space\/tutorials\/Space\/SyncCalls#Declare-the-Callee-Proxy"},{"reference":"doc:\/\/Space\/tutorials\/Space\/SyncCalls#Perform-a-Synchronous-Call","kind":"task"}]}],"reference":"doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Interact-with-Other-Contracts"}],"reference":"doc:\/\/Space\/tutorials\/Space","paths":[["doc:\/\/Space\/tutorials\/Space","doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts","doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Persisting-Data-Across-Executions"]]},"sections":[{"chapter":"Persisting Data Across Executions","estimatedTimeInMinutes":15,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, there are situations where you need to persist data across multiple executions. To support this, Space provides a built-in “storage” system for every contract."}]},{"inlineContent":[{"type":"text","text":"The storage system is essentially a key-value dictionary where both keys and values are stored as raw data."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Space abstracts away the complexities of encoding and decoding values, offering simple APIs for interacting with storage.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this tutorial, you’ll learn two common approaches for storing data using "},{"type":"codeVoice","code":"@Storage"},{"type":"text","text":" and "},{"type":"codeVoice","code":"@Mapping"},{"text":" annotations. Additionally, Space provides advanced mechanisms like storage mappers to handle more complex data structures, which will be covered in a later chapter.","type":"text"}]}],"title":"Persist Values Between Executions","kind":"hero"},{"kind":"tasks","tasks":[{"title":"Working with @Storage for Single Value Persistence","anchor":"Working-with-Storage-for-Single-Value-Persistence","contentSection":[{"mediaPosition":"trailing","kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"@Storage"},{"text":" annotation allows you to persist a single value under a specified key. The ","type":"text"},{"code":"key","type":"codeVoice"},{"text":" parameter defines the storage key, and we recommend matching the key to the variable name for consistency.","type":"text"}]},{"inlineContent":[{"type":"text","text":"In this section, you’ll implement an endpoint called "},{"code":"increaseStoredValue","type":"codeVoice"},{"type":"text","text":", which increments a persistent integer each time it is called. If the value reaches 100, it resets to 0."}],"type":"paragraph"},{"inlineContent":[{"text":"Note: The focus here is on basic implementation. Optimizations, especially for transaction cost reductions, will be introduced in a later chapter.","type":"text"}],"type":"paragraph"}]}],"stepsSection":[{"media":null,"code":"StoreValuesSection1Step1.swift","caption":[],"type":"step","content":[{"inlineContent":[{"type":"text","text":"Begin by setting up the basic structure of the contract."}],"type":"paragraph"}],"runtimePreview":null},{"media":null,"code":"StoreValuesSection1Step2.swift","caption":[],"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add a persistent integer to the contract using the "},{"type":"codeVoice","code":"@Storage"},{"type":"text","text":" annotation. By default, this integer is initialized to 0 unless otherwise specified."}]}],"type":"step"},{"media":null,"content":[{"inlineContent":[{"type":"text","text":"Implement the logic to increment the stored integer whenever the "},{"type":"codeVoice","code":"increaseStoredValue"},{"text":" endpoint is invoked.","type":"text"}],"type":"paragraph"}],"caption":[{"type":"paragraph","inlineContent":[{"text":"Tip: Be mindful that reading from storage increases transaction costs. This section focuses on functionality, and optimization techniques will be covered in later chapters.","type":"text"}]}],"type":"step","code":"StoreValuesSection1Step3.swift","runtimePreview":null},{"runtimePreview":null,"caption":[],"content":[{"type":"paragraph","inlineContent":[{"text":"If the integer reaches 100, reset it to 0.","type":"text"}]}],"type":"step","media":null,"code":"StoreValuesSection1Step4.swift"}]},{"contentSection":[{"content":[{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"@Mapping"},{"type":"text","text":" annotation allows you to store values under dynamically computed keys, effectively creating a nested dictionary in the contract’s storage. Space automatically handles encoding and decoding, ensuring typed access to both keys and values."}]},{"type":"paragraph","inlineContent":[{"text":"Think of it like this: if Alice and Bob both call your smart contract, each of them will have their own persistent storage space. When Alice calls the contract, her address is used to store or retrieve address unique data, and the same happens for Bob with his own key. This way, each user can have their own independent version of the same data, without interference.","type":"text"}]},{"inlineContent":[{"text":"In this section, you’ll extend the ","type":"text"},{"code":"increaseStoredValue","type":"codeVoice"},{"text":" endpoint so that each user (like Alice and Bob) will have a unique persistent integer tied to their address. The integer will be stored and incremented individually for each user, ensuring their data remains isolated.","type":"text"}],"type":"paragraph"}],"kind":"contentAndMedia","mediaPosition":"trailing"}],"anchor":"Leveraging-Mapping-for-Dynamic-Key-Value-Storage","title":"Leveraging @Mapping for Dynamic Key-Value Storage","stepsSection":[{"code":"StoreValuesSection2Step1.swift","runtimePreview":null,"media":null,"type":"step","content":[{"inlineContent":[{"type":"text","text":"Begin by defining the structure of your contract."}],"type":"paragraph"}],"caption":[]},{"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Use the ","type":"text"},{"type":"codeVoice","code":"@Mapping<Key, Value>"},{"type":"text","text":" annotation to associate each user’s address with their own persistent integer."}]}],"media":null,"code":"StoreValuesSection2Step2.swift","caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Tip: You don’t need to explicitly declare the type of the variable. Specifying the "},{"type":"codeVoice","code":"Key"},{"text":" and ","type":"text"},{"code":"Value","type":"codeVoice"},{"type":"text","text":" generic parameters is sufficient."}]}],"type":"step"},{"code":"StoreValuesSection2Step3.swift","caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Note: This involves interacting with the "},{"code":"Message","type":"codeVoice"},{"type":"text","text":" object, which will be covered in detail in a future chapter."}]}],"content":[{"inlineContent":[{"type":"text","text":"Retrieve the caller’s address."}],"type":"paragraph"}],"type":"step","runtimePreview":null,"media":null},{"caption":[],"runtimePreview":null,"media":null,"type":"step","code":"StoreValuesSection2Step4.swift","content":[{"inlineContent":[{"text":"Increment the persistent integer associated with the caller’s address.","type":"text"}],"type":"paragraph"}]},{"runtimePreview":null,"type":"step","media":null,"code":"StoreValuesSection2Step5.swift","caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Reset the caller’s integer to 0 once it reaches 100."}]}]},{"runtimePreview":null,"media":null,"type":"step","code":"StoreValuesSection2Step6.swift","content":[{"type":"paragraph","inlineContent":[{"text":"Implement a view to allow querying of the stored integer value for a given user, enabling off-chain access to the data.","type":"text"}]}],"caption":[{"type":"paragraph","inlineContent":[{"text":"Reminder: A view is an endpoint that does not alter any state on the blockchain.","type":"text"}]}]}]}]},{"abstract":[{"text":"Many smart contracts rely on contextual data to execute their operations effectively. This data can include input payments, the caller’s address, the current time, the balance of a specific account, or even the contract owner.","type":"text"}],"title":"Retrieving Information from the Blockchain","kind":"callToAction","featuredEyebrow":"Tutorial","action":{"isActive":true,"identifier":"doc:\/\/Space\/tutorials\/Space\/GetInfo","type":"reference","overridingTitleInlineContent":[{"type":"text","text":"Get started"}],"overridingTitle":"Get started"}}],"variants":[{"paths":["\/tutorials\/space\/storevalues"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"metadata":{"categoryPathComponent":"Space","category":"Space","title":"Persist Values Between Executions","role":"project"},"kind":"project","identifier":{"url":"doc:\/\/Space\/tutorials\/Space\/StoreValues","interfaceLanguage":"swift"},"references":{"doc://Space/tutorials/Space/FamiliarizeWithTypes#Creating-Your-Own-Types":{"url":"\/tutorials\/space\/familiarizewithtypes#Creating-Your-Own-Types","title":"Creating Your Own Types","role":"pseudoSymbol","abstract":[{"type":"text","text":"Space provides types that allow you to leverage the full potential of the SpaceVM."}],"kind":"section","identifier":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Creating-Your-Own-Types","type":"section"},"doc://Space/tutorials/Space/SyncCalls#Perform-a-Synchronous-Call":{"url":"\/tutorials\/space\/synccalls#Perform-a-Synchronous-Call","kind":"section","title":"Perform a Synchronous Call","role":"pseudoSymbol","identifier":"doc:\/\/Space\/tutorials\/Space\/SyncCalls#Perform-a-Synchronous-Call","type":"section","abstract":[{"type":"text","text":"Smart contracts can interact not only with users but also with other smart contracts. This enables more advanced protocols by leveraging existing ones. For example, you could integrate a decentralized exchange directly into your contract to perform token swaps. Decentralized applications often involve multiple contracts, each with a dedicated role, working together to achieve complex functionality—similar to microservices in backend systems."}]},"doc://Space/tutorials/Space/Deep-Dive-into-Space-Concepts/Exploring-Space's-Types":{"abstract":[],"identifier":"doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Exploring-Space's-Types","title":"Exploring Space's Types","role":"article","url":"\/tutorials\/space\/deep-dive-into-space-concepts\/exploring-space's-types","type":"topic","kind":"article"},"doc://Space/tutorials/Space/GetInfo#Accessing-Transaction-Context-Data":{"role":"pseudoSymbol","identifier":"doc:\/\/Space\/tutorials\/Space\/GetInfo#Accessing-Transaction-Context-Data","url":"\/tutorials\/space\/getinfo#Accessing-Transaction-Context-Data","abstract":[{"type":"text","text":"Many smart contracts rely on contextual data to execute their operations effectively. This data can include input payments, the caller’s address, the current time, the balance of a specific account, or even the contract owner."}],"type":"section","title":"Accessing Transaction Context Data","kind":"section"},"doc://Space/tutorials/Space/FamiliarizeWithTypes#Understanding-the-Buffer-Type":{"identifier":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Understanding-the-Buffer-Type","type":"section","abstract":[{"text":"Space provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}],"title":"Understanding the Buffer Type","kind":"section","url":"\/tutorials\/space\/familiarizewithtypes#Understanding-the-Buffer-Type","role":"pseudoSymbol"},"doc://Space/tutorials/Space/GetInfo":{"type":"topic","estimatedTime":"10min","url":"\/tutorials\/space\/getinfo","role":"project","kind":"project","title":"Retrieving Information from the Blockchain","abstract":[{"text":"Many smart contracts rely on contextual data to execute their operations effectively. This data can include input payments, the caller’s address, the current time, the balance of a specific account, or even the contract owner.","type":"text"}],"identifier":"doc:\/\/Space\/tutorials\/Space\/GetInfo"},"doc://Space/tutorials/Space/StoreValues#Working-with-Storage-for-Single-Value-Persistence":{"type":"section","identifier":"doc:\/\/Space\/tutorials\/Space\/StoreValues#Working-with-Storage-for-Single-Value-Persistence","role":"pseudoSymbol","url":"\/tutorials\/space\/storevalues#Working-with-Storage-for-Single-Value-Persistence","title":"Working with @Storage for Single Value Persistence","kind":"section","abstract":[{"text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory.","type":"text"}]},"doc://Space/tutorials/Space/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract":{"type":"section","url":"\/tutorials\/space\/installingtools#Initializing-and-Compiling-Your-First-Smart-Contract","role":"pseudoSymbol","kind":"section","title":"Initializing and Compiling Your First Smart Contract","abstract":[{"text":"Before writing your first smart contract with Space, ensure you have the necessary tools installed.","type":"text"}],"identifier":"doc:\/\/Space\/tutorials\/Space\/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract"},"StoreValuesSection2Step3.swift":{"syntax":"swift","highlights":[{"line":7}],"identifier":"StoreValuesSection2Step3.swift","fileName":"lib.swift","content":["import Space","","@Contract struct MyContract {","    @Mapping<Address, UInt64>(key: \"storedIntegerForUser\") var storedIntegerForUser","    ","    public func increaseStoredValue() {","        let caller = Message.caller","    }","}"],"fileType":"swift","type":"file"},"doc://Space/tutorials/Space/InstallingTools#Setting-Up-the-Space-CLI":{"type":"section","role":"pseudoSymbol","title":"Setting Up the Space CLI","url":"\/tutorials\/space\/installingtools#Setting-Up-the-Space-CLI","kind":"section","abstract":[{"type":"text","text":"Before writing your first smart contract with Space, ensure you have the necessary tools installed."}],"identifier":"doc:\/\/Space\/tutorials\/Space\/InstallingTools#Setting-Up-the-Space-CLI"},"StoreValuesSection2Step1.swift":{"syntax":"swift","type":"file","fileName":"lib.swift","highlights":[],"content":["import Space","","@Contract struct MyContract {","    public func increaseStoredValue() {","        ","    }","}"],"identifier":"StoreValuesSection2Step1.swift","fileType":"swift"},"doc://Space/tutorials/Space/GetInfo#Accessing-Blockchain-Context-Data":{"identifier":"doc:\/\/Space\/tutorials\/Space\/GetInfo#Accessing-Blockchain-Context-Data","role":"pseudoSymbol","title":"Accessing Blockchain Context Data","type":"section","kind":"section","abstract":[{"type":"text","text":"Many smart contracts rely on contextual data to execute their operations effectively. This data can include input payments, the caller’s address, the current time, the balance of a specific account, or even the contract owner."}],"url":"\/tutorials\/space\/getinfo#Accessing-Blockchain-Context-Data"},"doc://Space/tutorials/Space/SyncCalls#Declare-the-Callee-Proxy":{"url":"\/tutorials\/space\/synccalls#Declare-the-Callee-Proxy","title":"Declare the Callee Proxy","role":"pseudoSymbol","abstract":[{"type":"text","text":"Smart contracts can interact not only with users but also with other smart contracts. This enables more advanced protocols by leveraging existing ones. For example, you could integrate a decentralized exchange directly into your contract to perform token swaps. Decentralized applications often involve multiple contracts, each with a dedicated role, working together to achieve complex functionality—similar to microservices in backend systems."}],"kind":"section","identifier":"doc:\/\/Space\/tutorials\/Space\/SyncCalls#Declare-the-Callee-Proxy","type":"section"},"doc://Space/tutorials/Space/CodingYourFirstContract#Testing-the-Contract":{"abstract":[{"text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user.","type":"text"}],"identifier":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract#Testing-the-Contract","title":"Testing the Contract","role":"pseudoSymbol","url":"\/tutorials\/space\/codingyourfirstcontract#Testing-the-Contract","type":"section","kind":"section"},"doc://Space/tutorials/Space/CodingYourFirstContract#Writing-the-Contract-Code":{"abstract":[{"text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user.","type":"text"}],"identifier":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract#Writing-the-Contract-Code","title":"Writing the Contract Code","role":"pseudoSymbol","url":"\/tutorials\/space\/codingyourfirstcontract#Writing-the-Contract-Code","type":"section","kind":"section"},"doc://Space/tutorials/Space/SyncCalls":{"estimatedTime":"15min","identifier":"doc:\/\/Space\/tutorials\/Space\/SyncCalls","role":"project","title":"Interact with Other Contracts","type":"topic","kind":"project","abstract":[{"type":"text","text":"Smart contracts can interact not only with users but also with other smart contracts. This enables more advanced protocols by leveraging existing ones. For example, you could integrate a decentralized exchange directly into your contract to perform token swaps. Decentralized applications often involve multiple contracts, each with a dedicated role, working together to achieve complex functionality—similar to microservices in backend systems."}],"url":"\/tutorials\/space\/synccalls"},"doc://Space/tutorials/Space/InstallingTools#Installing-Spaces-Dependencies":{"type":"section","identifier":"doc:\/\/Space\/tutorials\/Space\/InstallingTools#Installing-Spaces-Dependencies","abstract":[{"text":"Before writing your first smart contract with Space, ensure you have the necessary tools installed.","type":"text"}],"title":"Installing Space's Dependencies","url":"\/tutorials\/space\/installingtools#Installing-Spaces-Dependencies","role":"pseudoSymbol","kind":"section"},"doc://Space/tutorials/Space/FamiliarizeWithTypes#Working-with-the-BigUint-Type":{"kind":"section","title":"Working with the BigUint Type","abstract":[{"text":"Space provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}],"identifier":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Working-with-the-BigUint-Type","url":"\/tutorials\/space\/familiarizewithtypes#Working-with-the-BigUint-Type","type":"section","role":"pseudoSymbol"},"doc://Space/tutorials/Space/FamiliarizeWithTypes#Working-with-the-Vector-Type":{"url":"\/tutorials\/space\/familiarizewithtypes#Working-with-the-Vector-Type","kind":"section","title":"Working with the Vector Type","role":"pseudoSymbol","identifier":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Working-with-the-Vector-Type","type":"section","abstract":[{"type":"text","text":"Space provides types that allow you to leverage the full potential of the SpaceVM."}]},"doc://Space/tutorials/Space/Getting-Started/Installing-the-Tools":{"abstract":[],"identifier":"doc:\/\/Space\/tutorials\/Space\/Getting-Started\/Installing-the-Tools","title":"Installing the Tools","role":"article","url":"\/tutorials\/space\/getting-started\/installing-the-tools","type":"topic","kind":"article"},"StoreValuesSection1Step1.swift":{"syntax":"swift","highlights":[],"identifier":"StoreValuesSection1Step1.swift","fileName":"lib.swift","content":["import Space","","@Contract struct MyContract {","    public func increaseStoredValue() {","        ","    }","}"],"fileType":"swift","type":"file"},"StoreValuesSection2Step5.swift":{"syntax":"swift","type":"file","fileName":"lib.swift","highlights":[{"line":9},{"line":10},{"line":11},{"line":12},{"line":13}],"content":["import Space","","@Contract struct MyContract {","    @Mapping<Address, UInt64>(key: \"storedIntegerForUser\") var storedIntegerForUser","    ","    public func increaseStoredValue() {","        let caller = Message.caller","        ","        guard self.storedIntegerForUser[caller] < 100 else {","            self.storedIntegerForUser[caller] = 0","            return","        }","        ","        self.storedIntegerForUser[caller] = self.storedIntegerForUser[caller] + 1","    }","}"],"identifier":"StoreValuesSection2Step5.swift","fileType":"swift"},"StoreValuesSection2Step4.swift":{"content":["import Space","","@Contract struct MyContract {","    @Mapping<Address, UInt64>(key: \"storedIntegerForUser\") var storedIntegerForUser","    ","    public func increaseStoredValue() {","        let caller = Message.caller","        ","        self.storedIntegerForUser[caller] = self.storedIntegerForUser[caller] + 1","    }","}"],"fileType":"swift","type":"file","fileName":"lib.swift","highlights":[{"line":8},{"line":9}],"syntax":"swift","identifier":"StoreValuesSection2Step4.swift"},"doc://Space/tutorials/Space/Deep-Dive-into-Space-Concepts/Interact-with-Other-Contracts":{"identifier":"doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Interact-with-Other-Contracts","role":"article","title":"Interact with Other Contracts","type":"topic","kind":"article","abstract":[],"url":"\/tutorials\/space\/deep-dive-into-space-concepts\/interact-with-other-contracts"},"doc://Space/tutorials/Space/Deep-Dive-into-Space-Concepts/Persisting-Data-Across-Executions":{"identifier":"doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Persisting-Data-Across-Executions","type":"topic","role":"article","url":"\/tutorials\/space\/deep-dive-into-space-concepts\/persisting-data-across-executions","title":"Persisting Data Across Executions","kind":"article","abstract":[]},"StoreValuesSection1Step3.swift":{"syntax":"swift","type":"file","fileName":"lib.swift","content":["import Space","","@Contract struct MyContract {","    @Storage(key: \"storedInteger\") var storedInteger: UInt64","    ","    public func increaseStoredValue() {","        self.storedInteger = self.storedInteger + 1","    }","}"],"highlights":[{"line":7}],"identifier":"StoreValuesSection1Step3.swift","fileType":"swift"},"StoreValuesSection1Step4.swift":{"highlights":[{"line":7},{"line":8},{"line":9},{"line":10},{"line":11}],"fileName":"lib.swift","syntax":"swift","fileType":"swift","content":["import Space","","@Contract struct MyContract {","    @Storage(key: \"storedInteger\") var storedInteger: UInt64","    ","    public func increaseStoredValue() {","        guard self.storedInteger < 100 else {","            self.storedInteger = 0","            return","        }","        ","        self.storedInteger = self.storedInteger + 1","    }","}"],"identifier":"StoreValuesSection1Step4.swift","type":"file"},"doc://Space/tutorials/Space/StoreValues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage":{"url":"\/tutorials\/space\/storevalues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage","title":"Leveraging @Mapping for Dynamic Key-Value Storage","role":"pseudoSymbol","abstract":[{"type":"text","text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory."}],"kind":"section","identifier":"doc:\/\/Space\/tutorials\/Space\/StoreValues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage","type":"section"},"doc://Space/tutorials/Space/InstallingTools":{"abstract":[{"type":"text","text":"Before writing your first smart contract with Space, ensure you have the necessary tools installed."}],"type":"topic","kind":"project","identifier":"doc:\/\/Space\/tutorials\/Space\/InstallingTools","url":"\/tutorials\/space\/installingtools","title":"Install the Necessary Tools","role":"project","estimatedTime":"10min"},"doc://Space/tutorials/Space/CodingYourFirstContract#Initializing-the-Project":{"url":"\/tutorials\/space\/codingyourfirstcontract#Initializing-the-Project","title":"Initializing the Project","role":"pseudoSymbol","abstract":[{"type":"text","text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user."}],"kind":"section","identifier":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract#Initializing-the-Project","type":"section"},"StoreValuesSection2Step6.swift":{"content":["import Space","","@Contract struct MyContract {","    @Mapping<Address, UInt64>(key: \"storedIntegerForUser\") var storedIntegerForUser","    ","    public func increaseStoredValue() {","        let caller = Message.caller","        ","        guard self.storedIntegerForUser[caller] < 100 else {","            self.storedIntegerForUser[caller] = 0","            return","        }","        ","        self.storedIntegerForUser[caller] = self.storedIntegerForUser[caller] + 1","    }","    ","    public func getStoredIntegerForUser(user: Address) -> UInt64 {","        return self.storedIntegerForUser[user]","    }","}"],"fileType":"swift","type":"file","fileName":"lib.swift","highlights":[{"line":16},{"line":17},{"line":18},{"line":19}],"syntax":"swift","identifier":"StoreValuesSection2Step6.swift"},"doc://Space/tutorials/Space/Deep-Dive-into-Space-Concepts/Retrieving-Information-from-the-Blockchain":{"kind":"article","type":"topic","identifier":"doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Retrieving-Information-from-the-Blockchain","url":"\/tutorials\/space\/deep-dive-into-space-concepts\/retrieving-information-from-the-blockchain","abstract":[],"role":"article","title":"Retrieving Information from the Blockchain"},"doc://Space/tutorials/Space/FamiliarizeWithTypes":{"type":"topic","estimatedTime":"20min","url":"\/tutorials\/space\/familiarizewithtypes","role":"project","kind":"project","title":"Exploring Space's Types","abstract":[{"text":"Space provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}],"identifier":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes"},"doc://Space/tutorials/Space/CodingYourFirstContract":{"estimatedTime":"20min","identifier":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract","type":"topic","abstract":[{"text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user.","type":"text"}],"title":"Building Your First Smart Contract","kind":"project","url":"\/tutorials\/space\/codingyourfirstcontract","role":"project"},"doc://Space/tutorials/Space/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges":{"identifier":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges","role":"pseudoSymbol","title":"Handling Heap Allocation Challenges","type":"section","kind":"section","abstract":[{"type":"text","text":"Space provides types that allow you to leverage the full potential of the SpaceVM."}],"url":"\/tutorials\/space\/familiarizewithtypes#Handling-Heap-Allocation-Challenges"},"doc://Space/tutorials/Space/StoreValues":{"type":"topic","estimatedTime":"15min","url":"\/tutorials\/space\/storevalues","role":"project","kind":"project","title":"Persist Values Between Executions","abstract":[{"text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory.","type":"text"}],"identifier":"doc:\/\/Space\/tutorials\/Space\/StoreValues"},"doc://Space/tutorials/Space/Getting-Started/Building-Your-First-Smart-Contract":{"title":"Building Your First Smart Contract","url":"\/tutorials\/space\/getting-started\/building-your-first-smart-contract","abstract":[],"type":"topic","identifier":"doc:\/\/Space\/tutorials\/Space\/Getting-Started\/Building-Your-First-Smart-Contract","kind":"article","role":"article"},"StoreValuesSection2Step2.swift":{"fileType":"swift","type":"file","fileName":"lib.swift","content":["import Space","","@Contract struct MyContract {","    @Mapping<Address, UInt64>(key: \"storedIntegerForUser\") var storedIntegerForUser","    ","    public func increaseStoredValue() {","        ","    }","}"],"highlights":[{"line":4},{"line":5}],"identifier":"StoreValuesSection2Step2.swift","syntax":"swift"},"doc://Space/tutorials/Space":{"url":"\/tutorials\/space","title":"Meet Space","role":"overview","abstract":[{"type":"text","text":"Discover how Space simplifies blockchain development using Swift. Dive into the world of Web3 with ease and efficiency."}],"kind":"overview","identifier":"doc:\/\/Space\/tutorials\/Space","type":"topic"},"StoreValuesSection1Step2.swift":{"syntax":"swift","type":"file","fileName":"lib.swift","content":["import Space","","@Contract struct MyContract {","    @Storage(key: \"storedInteger\") var storedInteger: UInt64","    ","    public func increaseStoredValue() {","        ","    }","}"],"highlights":[{"line":4},{"line":5}],"identifier":"StoreValuesSection1Step2.swift","fileType":"swift"}}}