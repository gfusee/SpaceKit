{"hierarchy":{"reference":"doc:\/\/Space\/tutorials\/Space","modules":[{"reference":"doc:\/\/Space\/tutorials\/Space\/Getting-Started\/Installing-the-Tools","projects":[{"reference":"doc:\/\/Space\/tutorials\/Space\/InstallingTools","sections":[{"reference":"doc:\/\/Space\/tutorials\/Space\/InstallingTools#Installing-Spaces-Dependencies","kind":"task"},{"reference":"doc:\/\/Space\/tutorials\/Space\/InstallingTools#Setting-Up-the-Space-CLI","kind":"task"},{"reference":"doc:\/\/Space\/tutorials\/Space\/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract","kind":"task"}]}]},{"reference":"doc:\/\/Space\/tutorials\/Space\/Getting-Started\/Building-Your-First-Smart-Contract","projects":[{"reference":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract","sections":[{"reference":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract#Initializing-the-Project","kind":"task"},{"reference":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract#Writing-the-Contract-Code","kind":"task"},{"reference":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract#Testing-the-Contract","kind":"task"}]}]},{"reference":"doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Exploring-Space's-Types","projects":[{"reference":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes","sections":[{"reference":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges","kind":"task"},{"kind":"task","reference":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Understanding-the-Buffer-Type"},{"reference":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Working-with-the-BigUint-Type","kind":"task"},{"reference":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Working-with-the-Vector-Type","kind":"task"},{"reference":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Creating-Your-Own-Types","kind":"task"}]}]},{"reference":"doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Persisting-Data-Across-Executions","projects":[{"reference":"doc:\/\/Space\/tutorials\/Space\/StoreValues","sections":[{"reference":"doc:\/\/Space\/tutorials\/Space\/StoreValues#Working-with-Storage-for-Single-Value-Persistence","kind":"task"},{"kind":"task","reference":"doc:\/\/Space\/tutorials\/Space\/StoreValues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage"}]}]},{"projects":[{"reference":"doc:\/\/Space\/tutorials\/Space\/GetInfo","sections":[{"kind":"task","reference":"doc:\/\/Space\/tutorials\/Space\/GetInfo#Accessing-Transaction-Context-Data"},{"kind":"task","reference":"doc:\/\/Space\/tutorials\/Space\/GetInfo#Accessing-Blockchain-Context-Data"}]}],"reference":"doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Retrieving-Information-from-the-Blockchain"},{"reference":"doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Interact-with-Other-Contracts","projects":[{"sections":[{"kind":"task","reference":"doc:\/\/Space\/tutorials\/Space\/SyncCalls#Declare-the-Callee-Proxy"},{"reference":"doc:\/\/Space\/tutorials\/Space\/SyncCalls#Perform-a-Synchronous-Call","kind":"task"}],"reference":"doc:\/\/Space\/tutorials\/Space\/SyncCalls"}]}],"paths":[["doc:\/\/Space\/tutorials\/Space","doc:\/\/Space\/tutorials\/Space\/Getting-Started","doc:\/\/Space\/tutorials\/Space\/Getting-Started\/Building-Your-First-Smart-Contract"]]},"sections":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user."}]}],"kind":"hero","chapter":"Building Your First Smart Contract","title":"Building Your First Smart Contract","estimatedTimeInMinutes":20},{"kind":"tasks","tasks":[{"stepsSection":[{"code":null,"type":"step","runtimePreview":null,"caption":[],"content":[{"inlineContent":[{"text":"Open a terminal.","type":"text"}],"type":"paragraph"}],"media":"InstallingToolsSection1Step1.png"},{"runtimePreview":null,"code":null,"caption":[{"inlineContent":[{"type":"text","text":"This command creates a new directory named “Counter.”"}],"type":"paragraph"}],"content":[{"inlineContent":[{"text":"Navigate to the desired directory, then run the command ","type":"text"},{"code":"space init Counter","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}],"media":"CodingFirstContractSection1Step2.png","type":"step"},{"code":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Open the project in your preferred Swift IDE by opening the “Counter” directory.","type":"text"}]}],"media":"CodingFirstContractSection1Step3.png","runtimePreview":null,"caption":[{"inlineContent":[{"type":"text","text":"We recommend Xcode or VSCode with the official Swift extension. In this tutorial, we’ll use Xcode. For other environments like VSCode on Linux or Windows, dedicated tutorials may be available."}],"type":"paragraph"}],"type":"step"},{"runtimePreview":null,"content":[{"inlineContent":[{"text":"(Optional) Build the project to enable macros and improve indexing in your IDE.","type":"text"}],"type":"paragraph"}],"media":"CodingFirstContractSection1Step4.png","caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In Xcode, go to "},{"inlineContent":[{"text":"Product > Build","type":"text"}],"type":"strong"},{"type":"text","text":" or press "},{"type":"codeVoice","code":"⌘ + B"},{"type":"text","text":"."}]}],"type":"step","code":null}],"anchor":"Initializing-the-Project","contentSection":[{"mediaPosition":"trailing","kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Before writing the contract, let’s initialize the project using the Space CLI."}]}]}],"title":"Initializing the Project"},{"title":"Writing the Contract Code","contentSection":[{"mediaPosition":"trailing","content":[{"inlineContent":[{"text":"Let’s start coding the smart contract.","type":"text"}],"type":"paragraph"}],"kind":"contentAndMedia"}],"anchor":"Writing-the-Contract-Code","stepsSection":[{"type":"step","media":null,"code":"CodingFirstContractSection2Step1.swift","runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"Open the "},{"code":"Contracts\/Counter\/Source\/lib.swift","type":"codeVoice"},{"text":" file and delete its contents.","type":"text"}],"type":"paragraph"}],"caption":[]},{"runtimePreview":null,"caption":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Note:"}],"type":"strong"},{"type":"text","text":" Only import the Space framework. Other libraries like Foundation are not compatible with SpaceVM."}]}],"content":[{"inlineContent":[{"text":"Import the framework by adding ","type":"text"},{"type":"codeVoice","code":"import Space"},{"type":"text","text":"."}],"type":"paragraph"}],"code":"CodingFirstContractSection2Step2.swift","media":null,"type":"step"},{"runtimePreview":null,"media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Declare the contract by annotating a struct with ","type":"text"},{"code":"@Contract","type":"codeVoice"},{"text":". For this project, we’ll declare the ","type":"text"},{"code":"Counter","type":"codeVoice"},{"type":"text","text":" contract."}]}],"type":"step","code":"CodingFirstContractSection2Step3.swift","caption":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Note:","type":"text"}],"type":"strong"},{"type":"text","text":" You should have only one "},{"code":"@Contract","type":"codeVoice"},{"text":" struct. The logic can be spread across multiple files, but the ","type":"text"},{"code":"@Contract","type":"codeVoice"},{"type":"text","text":" struct remains central."}]}]},{"code":"CodingFirstContractSection2Step4.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"To persist the counter across executions, declare it in the contract’s storage with "},{"type":"codeVoice","code":"@Storage(key: \"counter\")"},{"text":".","type":"text"}]}],"type":"step","media":null,"runtimePreview":null,"caption":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Note:"}],"type":"strong"},{"type":"text","text":" The "},{"type":"codeVoice","code":"BigUint"},{"text":" type handles arbitrarily large numbers, so there’s no risk of overflow.","type":"text"}]}]},{"caption":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"Note:"}],"type":"strong"},{"text":" The initializer is called only when the contract is deployed.","type":"text"}],"type":"paragraph"}],"code":"CodingFirstContractSection2Step5.swift","runtimePreview":null,"type":"step","media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Define the initializer for the contract, which is executed only once during deployment to set the initial counter value.","type":"text"}]}]},{"caption":[],"type":"step","code":"CodingFirstContractSection2Step6.swift","runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"Create an endpoint "},{"code":"increase","type":"codeVoice"},{"type":"text","text":" to allow users to increment the counter. The function takes a single user-provided parameter indicating how much to increment the counter."}],"type":"paragraph"}],"media":null},{"content":[{"inlineContent":[{"text":"Similarly, create the ","type":"text"},{"code":"decrease","type":"codeVoice"},{"type":"text","text":" endpoint to decrement the counter."}],"type":"paragraph"}],"runtimePreview":null,"type":"step","media":null,"code":"CodingFirstContractSection2Step7.swift","caption":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Note:"}]},{"text":" The ","type":"text"},{"type":"codeVoice","code":"BigUint"},{"text":" type cannot be negative, so if the operation results in a negative value, the transaction will fail without changes being committed.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"To allow users or other contracts to retrieve the counter’s value, create a view function ("},{"type":"codeVoice","code":"getCounter"},{"text":"), which does not modify the contract’s state.","type":"text"}]}],"code":"CodingFirstContractSection2Step8.swift","caption":[],"type":"step","media":null,"runtimePreview":null}]},{"title":"Testing the Contract","contentSection":[{"mediaPosition":"trailing","kind":"contentAndMedia","content":[{"inlineContent":[{"type":"text","text":"Space includes a built-in emulator called SwiftVM, which allows you to test your contract in the Swift environment."}],"type":"paragraph"}]}],"stepsSection":[{"media":"CodingFirstContractSection3Step1.png","code":null,"caption":[],"type":"step","content":[{"inlineContent":[{"type":"text","text":"Open the "},{"type":"codeVoice","code":"Contracts\/Counter\/Tests\/CounterTests"},{"type":"text","text":" directory. Delete any files and create a new file named "},{"type":"codeVoice","code":"CounterTests.swift"},{"text":".","type":"text"}],"type":"paragraph"}],"runtimePreview":null},{"media":null,"code":"CodingFirstContractSection3Step2.swift","runtimePreview":null,"caption":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Note:"}],"type":"strong"},{"type":"text","text":" XCTest is the official tool for writing unit tests in Swift."}]}],"content":[{"type":"paragraph","inlineContent":[{"text":"Import the necessary frameworks: Space, your contract, and XCTest.","type":"text"}]}],"type":"step"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Declare the contract’s address, as SwiftVM assigns a deterministic address to our contract."}]}],"media":null,"caption":[],"type":"step","runtimePreview":null,"code":"CodingFirstContractSection3Step3.swift"},{"media":null,"runtimePreview":null,"code":"CodingFirstContractSection3Step4.swift","caption":[{"inlineContent":[{"inlineContent":[{"text":"Note:","type":"text"}],"type":"strong"},{"type":"text","text":" Avoid overriding the "},{"code":"setUp","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"tearDown"},{"type":"text","text":" methods."}],"type":"paragraph"}],"content":[{"inlineContent":[{"type":"text","text":"Create a class for the tests, inheriting from "},{"code":"ContractTestCase","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}],"type":"step"},{"runtimePreview":null,"type":"step","media":null,"code":"CodingFirstContractSection3Step5.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Override the "},{"type":"codeVoice","code":"initialAccounts"},{"type":"text","text":" property to declare the contract’s address in SwiftVM."}]}],"caption":[]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create the first unit test to verify deploying the contract with an initial counter value of zero."}]}],"type":"step","code":"CodingFirstContractSection3Step6.swift","media":null,"caption":[],"runtimePreview":null},{"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Deploy the contract with an initial value of 0 using the generated "},{"type":"codeVoice","code":"testable"},{"type":"text","text":" function."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Note:"}]},{"type":"text","text":" This function allows you to catch any errors during execution."}]}],"type":"step","media":null,"code":"CodingFirstContractSection3Step7.swift"},{"code":"CodingFirstContractSection3Step8.swift","media":null,"runtimePreview":null,"type":"step","content":[{"inlineContent":[{"text":"Call the ","type":"text"},{"type":"codeVoice","code":"getCounter"},{"type":"text","text":" view to assert the counter is 0."}],"type":"paragraph"}],"caption":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Note:"}],"type":"strong"},{"text":" Space generates functions for contract views and endpoints.","type":"text"}]}]},{"runtimePreview":null,"code":"CodingFirstContractSection3Step9.swift","caption":[],"content":[{"inlineContent":[{"type":"text","text":"Add a unit test to verify deploying the contract with a non-zero initial value."}],"type":"paragraph"}],"type":"step","media":null},{"content":[{"type":"paragraph","inlineContent":[{"text":"Create unit tests for the ","type":"text"},{"type":"codeVoice","code":"increase"},{"type":"text","text":" endpoint, similar to the deployment tests."}]}],"media":null,"caption":[],"code":"CodingFirstContractSection3Step10.swift","runtimePreview":null,"type":"step"},{"code":"CodingFirstContractSection3Step11.swift","type":"step","caption":[],"content":[{"inlineContent":[{"type":"text","text":"Repeat for the "},{"type":"codeVoice","code":"decrease"},{"type":"text","text":" endpoint."}],"type":"paragraph"}],"media":null,"runtimePreview":null},{"code":"CodingFirstContractSection3Step12.swift","content":[{"inlineContent":[{"type":"text","text":"Add a test to ensure failure when trying to decrease the counter below zero."}],"type":"paragraph"}],"caption":[],"type":"step","media":null,"runtimePreview":null},{"caption":[],"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Run the tests to confirm your contract works correctly!"}]}],"media":"CodingFirstContractSection3Step13.png","code":null,"runtimePreview":null}],"anchor":"Testing-the-Contract"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract"},"metadata":{"category":"Space","categoryPathComponent":"Space","role":"project","title":"Building Your First Smart Contract"},"kind":"project","variants":[{"paths":["\/tutorials\/space\/codingyourfirstcontract"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://Space/tutorials/Space/CodingYourFirstContract#Initializing-the-Project":{"url":"\/tutorials\/space\/codingyourfirstcontract#Initializing-the-Project","title":"Initializing the Project","role":"pseudoSymbol","abstract":[{"type":"text","text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user."}],"kind":"section","identifier":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract#Initializing-the-Project","type":"section"},"doc://Space/tutorials/Space/Deep-Dive-into-Space-Concepts/Retrieving-Information-from-the-Blockchain":{"kind":"article","type":"topic","identifier":"doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Retrieving-Information-from-the-Blockchain","url":"\/tutorials\/space\/deep-dive-into-space-concepts\/retrieving-information-from-the-blockchain","abstract":[],"role":"article","title":"Retrieving Information from the Blockchain"},"doc://Space/tutorials/Space/FamiliarizeWithTypes":{"type":"topic","estimatedTime":"20min","url":"\/tutorials\/space\/familiarizewithtypes","role":"project","kind":"project","title":"Exploring Space's Types","abstract":[{"text":"Space provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}],"identifier":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes"},"CodingFirstContractSection2Step8.swift":{"fileName":"lib.swift","content":["import Space","","@Contract public struct Counter {","    @Storage(key: \"counter\") var counter: BigUint","    ","    init(initialValue: BigUint) {","        self.counter = initialValue","    }","    ","    public mutating func increase(value: BigUint) {","        self.counter = self.counter + value","    }","    ","    public mutating func decrease(value: BigUint) {","        self.counter = self.counter - value","    }","    ","    public func getCounter() -> BigUint {","        return self.counter","    }","}"],"identifier":"CodingFirstContractSection2Step8.swift","syntax":"swift","fileType":"swift","type":"file","highlights":[{"line":17},{"line":18},{"line":19},{"line":20}]},"doc://Space/tutorials/Space/GetInfo#Accessing-Blockchain-Context-Data":{"identifier":"doc:\/\/Space\/tutorials\/Space\/GetInfo#Accessing-Blockchain-Context-Data","role":"pseudoSymbol","title":"Accessing Blockchain Context Data","type":"section","kind":"section","abstract":[{"type":"text","text":"Many smart contracts rely on contextual data to execute their operations effectively. This data can include input payments, the caller’s address, the current time, the balance of a specific account, or even the contract owner."}],"url":"\/tutorials\/space\/getinfo#Accessing-Blockchain-Context-Data"},"doc://Space/tutorials/Space/FamiliarizeWithTypes#Working-with-the-BigUint-Type":{"kind":"section","title":"Working with the BigUint Type","abstract":[{"text":"Space provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}],"identifier":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Working-with-the-BigUint-Type","url":"\/tutorials\/space\/familiarizewithtypes#Working-with-the-BigUint-Type","type":"section","role":"pseudoSymbol"},"CodingFirstContractSection3Step2.swift":{"syntax":"swift","fileType":"swift","identifier":"CodingFirstContractSection3Step2.swift","fileName":"CounterTests.swift","type":"file","highlights":[],"content":["import Space","import Counter","import XCTest"]},"doc://Space/tutorials/Space/InstallingTools#Installing-Spaces-Dependencies":{"type":"section","identifier":"doc:\/\/Space\/tutorials\/Space\/InstallingTools#Installing-Spaces-Dependencies","abstract":[{"text":"Before writing your first smart contract with Space, ensure you have the necessary tools installed.","type":"text"}],"title":"Installing Space's Dependencies","url":"\/tutorials\/space\/installingtools#Installing-Spaces-Dependencies","role":"pseudoSymbol","kind":"section"},"doc://Space/tutorials/Space":{"url":"\/tutorials\/space","title":"Meet Space","role":"overview","abstract":[{"type":"text","text":"Discover how Space simplifies blockchain development using Swift. Dive into the world of Web3 with ease and efficiency."}],"kind":"overview","identifier":"doc:\/\/Space\/tutorials\/Space","type":"topic"},"CodingFirstContractSection3Step10.swift":{"fileName":"CounterTests.swift","content":["import Space","import Counter","import XCTest","","let COUNTER_ADDRESS = \"counter\"","","final class CounterTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(address: COUNTER_ADDRESS)","        ]","    }","    ","    func testDeployCounterInitialValueZero() throws {","        let contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 0","        )","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 0)","    }","    ","    func testDeployCounterInitialValueNonZero() throws {","        let contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 15","        )","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 15)","    }","    ","    func testIncreaseZero() throws {","        var contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 15","        )","        ","        try contract.increase(value: 0)","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 15)","    }","    ","    func testIncreaseMoreThanZero() throws {","        var contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 15","        )","        ","        try contract.increase(value: 5)","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 20)","    }","}"],"identifier":"CodingFirstContractSection3Step10.swift","syntax":"swift","fileType":"swift","type":"file","highlights":[{"line":35},{"line":36},{"line":37},{"line":38},{"line":39},{"line":40},{"line":41},{"line":42},{"line":43},{"line":44},{"line":45},{"line":46},{"line":47},{"line":48},{"line":49},{"line":50},{"line":51},{"line":52},{"line":53},{"line":54},{"line":55},{"line":56},{"line":57},{"line":58},{"line":59},{"line":60}]},"doc://Space/tutorials/Space/FamiliarizeWithTypes#Understanding-the-Buffer-Type":{"identifier":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Understanding-the-Buffer-Type","type":"section","abstract":[{"text":"Space provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}],"title":"Understanding the Buffer Type","kind":"section","url":"\/tutorials\/space\/familiarizewithtypes#Understanding-the-Buffer-Type","role":"pseudoSymbol"},"CodingFirstContractSection2Step2.swift":{"syntax":"swift","fileType":"swift","identifier":"CodingFirstContractSection2Step2.swift","fileName":"lib.swift","type":"file","highlights":[{"line":1}],"content":["import Space"]},"CodingFirstContractSection2Step7.swift":{"fileName":"lib.swift","content":["import Space","","@Contract public struct Counter {","    @Storage(key: \"counter\") var counter: BigUint","    ","    init(initialValue: BigUint) {","        self.counter = initialValue","    }","    ","    public mutating func increase(value: BigUint) {","        self.counter = self.counter + value","    }","    ","    public mutating func decrease(value: BigUint) {","        self.counter = self.counter - value","    }","}"],"identifier":"CodingFirstContractSection2Step7.swift","syntax":"swift","fileType":"swift","type":"file","highlights":[{"line":13},{"line":14},{"line":15},{"line":16}]},"CodingFirstContractSection3Step6.swift":{"syntax":"swift","fileType":"swift","identifier":"CodingFirstContractSection3Step6.swift","fileName":"CounterTests.swift","type":"file","highlights":[{"line":13},{"line":14},{"line":15},{"line":16}],"content":["import Space","import Counter","import XCTest","","let COUNTER_ADDRESS = \"counter\"","","final class CounterTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(address: COUNTER_ADDRESS)","        ]","    }","    ","    func testDeployCounterInitialValueZero() throws {","        ","    }","}"]},"doc://Space/tutorials/Space/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges":{"identifier":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges","role":"pseudoSymbol","title":"Handling Heap Allocation Challenges","type":"section","kind":"section","abstract":[{"type":"text","text":"Space provides types that allow you to leverage the full potential of the SpaceVM."}],"url":"\/tutorials\/space\/familiarizewithtypes#Handling-Heap-Allocation-Challenges"},"doc://Space/tutorials/Space/FamiliarizeWithTypes#Working-with-the-Vector-Type":{"url":"\/tutorials\/space\/familiarizewithtypes#Working-with-the-Vector-Type","kind":"section","title":"Working with the Vector Type","role":"pseudoSymbol","identifier":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Working-with-the-Vector-Type","type":"section","abstract":[{"type":"text","text":"Space provides types that allow you to leverage the full potential of the SpaceVM."}]},"CodingFirstContractSection2Step3.swift":{"content":["import Space","","@Contract public struct Counter {","    ","}"],"type":"file","fileType":"swift","syntax":"swift","fileName":"lib.swift","identifier":"CodingFirstContractSection2Step3.swift","highlights":[{"line":2},{"line":3},{"line":4},{"line":5}]},"doc://Space/tutorials/Space/StoreValues#Working-with-Storage-for-Single-Value-Persistence":{"type":"section","identifier":"doc:\/\/Space\/tutorials\/Space\/StoreValues#Working-with-Storage-for-Single-Value-Persistence","role":"pseudoSymbol","url":"\/tutorials\/space\/storevalues#Working-with-Storage-for-Single-Value-Persistence","title":"Working with @Storage for Single Value Persistence","kind":"section","abstract":[{"text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory.","type":"text"}]},"doc://Space/tutorials/Space/CodingYourFirstContract#Writing-the-Contract-Code":{"abstract":[{"text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user.","type":"text"}],"identifier":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract#Writing-the-Contract-Code","title":"Writing the Contract Code","role":"pseudoSymbol","url":"\/tutorials\/space\/codingyourfirstcontract#Writing-the-Contract-Code","type":"section","kind":"section"},"CodingFirstContractSection3Step9.swift":{"fileType":"swift","syntax":"swift","identifier":"CodingFirstContractSection3Step9.swift","type":"file","content":["import Space","import Counter","import XCTest","","let COUNTER_ADDRESS = \"counter\"","","final class CounterTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(address: COUNTER_ADDRESS)","        ]","    }","    ","    func testDeployCounterInitialValueZero() throws {","        let contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 0","        )","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 0)","    }","    ","    func testDeployCounterInitialValueNonZero() throws {","        let contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 15","        )","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 15)","    }","}"],"fileName":"CounterTests.swift","highlights":[{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34}]},"CodingFirstContractSection3Step13.png":{"variants":[{"traits":["1x","light"],"url":"\/images\/Space\/CodingFirstContractSection3Step13.png"}],"alt":"Xcode's test tab showing all tests passed.","type":"image","identifier":"CodingFirstContractSection3Step13.png"},"CodingFirstContractSection3Step7.swift":{"fileType":"swift","syntax":"swift","type":"file","identifier":"CodingFirstContractSection3Step7.swift","content":["import Space","import Counter","import XCTest","","let COUNTER_ADDRESS = \"counter\"","","final class CounterTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(address: COUNTER_ADDRESS)","        ]","    }","    ","    func testDeployCounterInitialValueZero() throws {","        let contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 0","        )","    }","}"],"fileName":"CounterTests.swift","highlights":[{"line":15},{"line":16},{"line":17},{"line":18}]},"doc://Space/tutorials/Space/StoreValues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage":{"url":"\/tutorials\/space\/storevalues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage","title":"Leveraging @Mapping for Dynamic Key-Value Storage","role":"pseudoSymbol","abstract":[{"type":"text","text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory."}],"kind":"section","identifier":"doc:\/\/Space\/tutorials\/Space\/StoreValues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage","type":"section"},"CodingFirstContractSection2Step1.swift":{"syntax":"swift","type":"file","identifier":"CodingFirstContractSection2Step1.swift","highlights":[],"content":[""],"fileType":"swift","fileName":"lib.swift"},"doc://Space/tutorials/Space/SyncCalls#Perform-a-Synchronous-Call":{"url":"\/tutorials\/space\/synccalls#Perform-a-Synchronous-Call","kind":"section","title":"Perform a Synchronous Call","role":"pseudoSymbol","identifier":"doc:\/\/Space\/tutorials\/Space\/SyncCalls#Perform-a-Synchronous-Call","type":"section","abstract":[{"type":"text","text":"Smart contracts can interact not only with users but also with other smart contracts. This enables more advanced protocols by leveraging existing ones. For example, you could integrate a decentralized exchange directly into your contract to perform token swaps. Decentralized applications often involve multiple contracts, each with a dedicated role, working together to achieve complex functionality—similar to microservices in backend systems."}]},"CodingFirstContractSection1Step2.png":{"variants":[{"url":"\/images\/Space\/CodingFirstContractSection1Step2.png","traits":["1x","light"]}],"alt":"Output of `space init Counter` command.","type":"image","identifier":"CodingFirstContractSection1Step2.png"},"doc://Space/tutorials/Space/SyncCalls":{"estimatedTime":"15min","identifier":"doc:\/\/Space\/tutorials\/Space\/SyncCalls","role":"project","title":"Interact with Other Contracts","type":"topic","kind":"project","abstract":[{"type":"text","text":"Smart contracts can interact not only with users but also with other smart contracts. This enables more advanced protocols by leveraging existing ones. For example, you could integrate a decentralized exchange directly into your contract to perform token swaps. Decentralized applications often involve multiple contracts, each with a dedicated role, working together to achieve complex functionality—similar to microservices in backend systems."}],"url":"\/tutorials\/space\/synccalls"},"doc://Space/tutorials/Space/SyncCalls#Declare-the-Callee-Proxy":{"url":"\/tutorials\/space\/synccalls#Declare-the-Callee-Proxy","title":"Declare the Callee Proxy","role":"pseudoSymbol","abstract":[{"type":"text","text":"Smart contracts can interact not only with users but also with other smart contracts. This enables more advanced protocols by leveraging existing ones. For example, you could integrate a decentralized exchange directly into your contract to perform token swaps. Decentralized applications often involve multiple contracts, each with a dedicated role, working together to achieve complex functionality—similar to microservices in backend systems."}],"kind":"section","identifier":"doc:\/\/Space\/tutorials\/Space\/SyncCalls#Declare-the-Callee-Proxy","type":"section"},"CodingFirstContractSection3Step8.swift":{"syntax":"swift","type":"file","identifier":"CodingFirstContractSection3Step8.swift","highlights":[{"line":19},{"line":20},{"line":21},{"line":22}],"content":["import Space","import Counter","import XCTest","","let COUNTER_ADDRESS = \"counter\"","","final class CounterTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(address: COUNTER_ADDRESS)","        ]","    }","    ","    func testDeployCounterInitialValueZero() throws {","        let contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 0","        )","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 0)","    }","}"],"fileType":"swift","fileName":"CounterTests.swift"},"doc://Space/tutorials/Space/CodingYourFirstContract#Testing-the-Contract":{"abstract":[{"text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user.","type":"text"}],"identifier":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract#Testing-the-Contract","title":"Testing the Contract","role":"pseudoSymbol","url":"\/tutorials\/space\/codingyourfirstcontract#Testing-the-Contract","type":"section","kind":"section"},"doc://Space/tutorials/Space/InstallingTools#Setting-Up-the-Space-CLI":{"type":"section","role":"pseudoSymbol","title":"Setting Up the Space CLI","url":"\/tutorials\/space\/installingtools#Setting-Up-the-Space-CLI","kind":"section","abstract":[{"type":"text","text":"Before writing your first smart contract with Space, ensure you have the necessary tools installed."}],"identifier":"doc:\/\/Space\/tutorials\/Space\/InstallingTools#Setting-Up-the-Space-CLI"},"doc://Space/tutorials/Space/Deep-Dive-into-Space-Concepts/Persisting-Data-Across-Executions":{"identifier":"doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Persisting-Data-Across-Executions","type":"topic","role":"article","url":"\/tutorials\/space\/deep-dive-into-space-concepts\/persisting-data-across-executions","title":"Persisting Data Across Executions","kind":"article","abstract":[]},"doc://Space/tutorials/Space/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract":{"type":"section","url":"\/tutorials\/space\/installingtools#Initializing-and-Compiling-Your-First-Smart-Contract","role":"pseudoSymbol","kind":"section","title":"Initializing and Compiling Your First Smart Contract","abstract":[{"text":"Before writing your first smart contract with Space, ensure you have the necessary tools installed.","type":"text"}],"identifier":"doc:\/\/Space\/tutorials\/Space\/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract"},"CodingFirstContractSection3Step5.swift":{"syntax":"swift","identifier":"CodingFirstContractSection3Step5.swift","fileType":"swift","highlights":[{"line":8},{"line":9},{"line":10},{"line":11},{"line":12}],"type":"file","content":["import Space","import Counter","import XCTest","","let COUNTER_ADDRESS = \"counter\"","","final class CounterTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(address: COUNTER_ADDRESS)","        ]","    }","}"],"fileName":"CounterTests.swift"},"CodingFirstContractSection3Step3.swift":{"syntax":"swift","type":"file","identifier":"CodingFirstContractSection3Step3.swift","highlights":[{"line":4},{"line":5}],"content":["import Space","import Counter","import XCTest","","let COUNTER_ADDRESS = \"counter\""],"fileType":"swift","fileName":"CounterTests.swift"},"doc://Space/tutorials/Space/StoreValues":{"type":"topic","estimatedTime":"15min","url":"\/tutorials\/space\/storevalues","role":"project","kind":"project","title":"Persist Values Between Executions","abstract":[{"text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory.","type":"text"}],"identifier":"doc:\/\/Space\/tutorials\/Space\/StoreValues"},"CodingFirstContractSection2Step5.swift":{"fileType":"swift","syntax":"swift","type":"file","identifier":"CodingFirstContractSection2Step5.swift","content":["import Space","","@Contract public struct Counter {","    @Storage(key: \"counter\") var counter: BigUint","    ","    init(initialValue: BigUint) {","        self.counter = initialValue","    }","}"],"fileName":"lib.swift","highlights":[{"line":5},{"line":6},{"line":7},{"line":8}]},"CodingFirstContractSection3Step12.swift":{"syntax":"swift","type":"file","identifier":"CodingFirstContractSection3Step12.swift","highlights":[{"line":87},{"line":88},{"line":89},{"line":90},{"line":91},{"line":92},{"line":93},{"line":94},{"line":95},{"line":96},{"line":97},{"line":98},{"line":99},{"line":100},{"line":101}],"content":["import Space","import Counter","import XCTest","","let COUNTER_ADDRESS = \"counter\"","","final class CounterTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(address: COUNTER_ADDRESS)","        ]","    }","    ","    func testDeployCounterInitialValueZero() throws {","        let contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 0","        )","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 0)","    }","    ","    func testDeployCounterInitialValueNonZero() throws {","        let contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 15","        )","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 15)","    }","    ","    func testIncreaseZero() throws {","        var contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 15","        )","        ","        try contract.increase(value: 0)","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 15)","    }","    ","    func testIncreaseMoreThanZero() throws {","        var contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 15","        )","        ","        try contract.increase(value: 5)","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 20)","    }","    ","    func testDecreaseZero() throws {","        var contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 15","        )","        ","        try contract.decrease(value: 0)","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 15)","    }","    ","    func testDecreaseMoreThanZero() throws {","        var contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 15","        )","        ","        try contract.decrease(value: 5)","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 10)","    }","    ","    func testDecreaseTooMuchShouldFail() throws {","        let contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 15","        )","        ","        do {","            try contract.decrease(value: 16)","            ","            XCTFail() \/\/ Decrease fails, so this line should not be executed","        } catch {","            XCTAssertEqual(error, .userError(message: \"cannot subtract because result would be negative\"))","        }","    }","}"],"fileType":"swift","fileName":"CounterTests.swift"},"CodingFirstContractSection1Step4.png":{"variants":[{"traits":["1x","light"],"url":"\/images\/Space\/CodingFirstContractSection1Step4.png"}],"alt":"Xcode's Product menu with 'Build' highlighted.","type":"image","identifier":"CodingFirstContractSection1Step4.png"},"doc://Space/tutorials/Space/FamiliarizeWithTypes#Creating-Your-Own-Types":{"url":"\/tutorials\/space\/familiarizewithtypes#Creating-Your-Own-Types","title":"Creating Your Own Types","role":"pseudoSymbol","abstract":[{"type":"text","text":"Space provides types that allow you to leverage the full potential of the SpaceVM."}],"kind":"section","identifier":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Creating-Your-Own-Types","type":"section"},"CodingFirstContractSection1Step3.png":{"variants":[{"url":"\/images\/Space\/CodingFirstContractSection1Step3.png","traits":["1x","light"]}],"alt":"Xcode project selection screen with 'Counter' highlighted.","type":"image","identifier":"CodingFirstContractSection1Step3.png"},"doc://Space/tutorials/Space/CodingYourFirstContract":{"estimatedTime":"20min","identifier":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract","type":"topic","abstract":[{"text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user.","type":"text"}],"title":"Building Your First Smart Contract","kind":"project","url":"\/tutorials\/space\/codingyourfirstcontract","role":"project"},"doc://Space/tutorials/Space/Getting-Started/Building-Your-First-Smart-Contract":{"title":"Building Your First Smart Contract","url":"\/tutorials\/space\/getting-started\/building-your-first-smart-contract","abstract":[],"type":"topic","identifier":"doc:\/\/Space\/tutorials\/Space\/Getting-Started\/Building-Your-First-Smart-Contract","kind":"article","role":"article"},"doc://Space/tutorials/Space/Getting-Started/Installing-the-Tools":{"abstract":[],"identifier":"doc:\/\/Space\/tutorials\/Space\/Getting-Started\/Installing-the-Tools","title":"Installing the Tools","role":"article","url":"\/tutorials\/space\/getting-started\/installing-the-tools","type":"topic","kind":"article"},"CodingFirstContractSection2Step6.swift":{"syntax":"swift","type":"file","identifier":"CodingFirstContractSection2Step6.swift","highlights":[{"line":9},{"line":10},{"line":11},{"line":12}],"content":["import Space","","@Contract public struct Counter {","    @Storage(key: \"counter\") var counter: BigUint","    ","    init(initialValue: BigUint) {","        self.counter = initialValue","    }","    ","    public mutating func increase(value: BigUint) {","        self.counter = self.counter + value","    }","}"],"fileType":"swift","fileName":"lib.swift"},"CodingFirstContractSection3Step1.png":{"variants":[{"traits":["1x","light"],"url":"\/images\/Space\/CodingFirstContractSection3Step1.png"}],"alt":"File tree showing newly created `CounterTests.swift`.","type":"image","identifier":"CodingFirstContractSection3Step1.png"},"doc://Space/tutorials/Space/Deep-Dive-into-Space-Concepts/Exploring-Space's-Types":{"abstract":[],"identifier":"doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Exploring-Space's-Types","title":"Exploring Space's Types","role":"article","url":"\/tutorials\/space\/deep-dive-into-space-concepts\/exploring-space's-types","type":"topic","kind":"article"},"doc://Space/tutorials/Space/GetInfo#Accessing-Transaction-Context-Data":{"role":"pseudoSymbol","identifier":"doc:\/\/Space\/tutorials\/Space\/GetInfo#Accessing-Transaction-Context-Data","url":"\/tutorials\/space\/getinfo#Accessing-Transaction-Context-Data","abstract":[{"type":"text","text":"Many smart contracts rely on contextual data to execute their operations effectively. This data can include input payments, the caller’s address, the current time, the balance of a specific account, or even the contract owner."}],"type":"section","title":"Accessing Transaction Context Data","kind":"section"},"CodingFirstContractSection3Step11.swift":{"fileType":"swift","highlights":[{"line":61},{"line":62},{"line":63},{"line":64},{"line":65},{"line":66},{"line":67},{"line":68},{"line":69},{"line":70},{"line":71},{"line":72},{"line":73},{"line":74},{"line":75},{"line":76},{"line":77},{"line":78},{"line":79},{"line":80},{"line":81},{"line":82},{"line":83},{"line":84},{"line":85},{"line":86}],"identifier":"CodingFirstContractSection3Step11.swift","syntax":"swift","content":["import Space","import Counter","import XCTest","","let COUNTER_ADDRESS = \"counter\"","","final class CounterTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(address: COUNTER_ADDRESS)","        ]","    }","    ","    func testDeployCounterInitialValueZero() throws {","        let contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 0","        )","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 0)","    }","    ","    func testDeployCounterInitialValueNonZero() throws {","        let contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 15","        )","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 15)","    }","    ","    func testIncreaseZero() throws {","        var contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 15","        )","        ","        try contract.increase(value: 0)","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 15)","    }","    ","    func testIncreaseMoreThanZero() throws {","        var contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 15","        )","        ","        try contract.increase(value: 5)","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 20)","    }","    ","    func testDecreaseZero() throws {","        var contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 15","        )","        ","        try contract.decrease(value: 0)","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 15)","    }","    ","    func testDecreaseMoreThanZero() throws {","        var contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 15","        )","        ","        try contract.decrease(value: 5)","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 10)","    }","}"],"type":"file","fileName":"CounterTests.swift"},"InstallingToolsSection1Step1.png":{"variants":[{"url":"\/images\/Space\/InstallingToolsSection1Step1.png","traits":["1x","light"]}],"alt":"An empty terminal window.","type":"image","identifier":"InstallingToolsSection1Step1.png"},"doc://Space/tutorials/Space/InstallingTools":{"abstract":[{"type":"text","text":"Before writing your first smart contract with Space, ensure you have the necessary tools installed."}],"type":"topic","kind":"project","identifier":"doc:\/\/Space\/tutorials\/Space\/InstallingTools","url":"\/tutorials\/space\/installingtools","title":"Install the Necessary Tools","role":"project","estimatedTime":"10min"},"CodingFirstContractSection2Step4.swift":{"syntax":"swift","type":"file","identifier":"CodingFirstContractSection2Step4.swift","highlights":[{"line":4}],"content":["import Space","","@Contract public struct Counter {","    @Storage(key: \"counter\") var counter: BigUint","}"],"fileType":"swift","fileName":"lib.swift"},"CodingFirstContractSection3Step4.swift":{"fileName":"CounterTests.swift","type":"file","identifier":"CodingFirstContractSection3Step4.swift","fileType":"swift","highlights":[{"line":6},{"line":7},{"line":8},{"line":9}],"content":["import Space","import Counter","import XCTest","","let COUNTER_ADDRESS = \"counter\"","","final class CounterTests: ContractTestCase {","    ","}"],"syntax":"swift"},"doc://Space/tutorials/Space/Deep-Dive-into-Space-Concepts/Interact-with-Other-Contracts":{"identifier":"doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Interact-with-Other-Contracts","role":"article","title":"Interact with Other Contracts","type":"topic","kind":"article","abstract":[],"url":"\/tutorials\/space\/deep-dive-into-space-concepts\/interact-with-other-contracts"},"doc://Space/tutorials/Space/GetInfo":{"type":"topic","estimatedTime":"10min","url":"\/tutorials\/space\/getinfo","role":"project","kind":"project","title":"Retrieving Information from the Blockchain","abstract":[{"text":"Many smart contracts rely on contextual data to execute their operations effectively. This data can include input payments, the caller’s address, the current time, the balance of a specific account, or even the contract owner.","type":"text"}],"identifier":"doc:\/\/Space\/tutorials\/Space\/GetInfo"}}}