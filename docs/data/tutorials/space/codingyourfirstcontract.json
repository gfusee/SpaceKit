{"metadata":{"category":"Space","title":"Building Your First Smart Contract","role":"project","categoryPathComponent":"Space"},"hierarchy":{"paths":[["doc:\/\/Space\/tutorials\/Space","doc:\/\/Space\/tutorials\/Space\/Getting-Started","doc:\/\/Space\/tutorials\/Space\/Getting-Started\/Building-Your-First-Smart-Contract"]],"modules":[{"reference":"doc:\/\/Space\/tutorials\/Space\/Getting-Started\/Installing-the-Tools","projects":[{"sections":[{"reference":"doc:\/\/Space\/tutorials\/Space\/InstallingTools#Installing-Spaces-Dependencies","kind":"task"},{"reference":"doc:\/\/Space\/tutorials\/Space\/InstallingTools#Setting-Up-the-Space-CLI","kind":"task"},{"kind":"task","reference":"doc:\/\/Space\/tutorials\/Space\/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract"}],"reference":"doc:\/\/Space\/tutorials\/Space\/InstallingTools"}]},{"projects":[{"reference":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract","sections":[{"kind":"task","reference":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract#Initializing-the-Project"},{"kind":"task","reference":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract#Writing-the-Contract-Code"},{"kind":"task","reference":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract#Testing-the-Contract"}]}],"reference":"doc:\/\/Space\/tutorials\/Space\/Getting-Started\/Building-Your-First-Smart-Contract"}],"reference":"doc:\/\/Space\/tutorials\/Space"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/tutorials\/space\/codingyourfirstcontract"]}],"sections":[{"chapter":"Building Your First Smart Contract","kind":"hero","title":"Building Your First Smart Contract","estimatedTimeInMinutes":20,"content":[{"inlineContent":[{"text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user.","type":"text"}],"type":"paragraph"}]},{"kind":"tasks","tasks":[{"title":"Initializing the Project","contentSection":[{"content":[{"inlineContent":[{"type":"text","text":"Before writing the contract, let’s initialize the project using the Space CLI."}],"type":"paragraph"}],"kind":"contentAndMedia","mediaPosition":"trailing"}],"anchor":"Initializing-the-Project","stepsSection":[{"media":"InstallingToolsSection1Step1.png","code":null,"runtimePreview":null,"type":"step","caption":[],"content":[{"inlineContent":[{"type":"text","text":"Open a terminal."}],"type":"paragraph"}]},{"caption":[{"inlineContent":[{"type":"text","text":"This command creates a new directory named “Counter.”"}],"type":"paragraph"}],"content":[{"type":"paragraph","inlineContent":[{"text":"Navigate to the desired directory, then run the command ","type":"text"},{"type":"codeVoice","code":"space init Counter"},{"text":".","type":"text"}]}],"code":null,"media":"CodingFirstContractSection1Step2.png","runtimePreview":null,"type":"step"},{"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We recommend Xcode or VSCode with the official Swift extension. In this tutorial, we’ll use Xcode. For other environments like VSCode on Linux or Windows, dedicated tutorials may be available."}]}],"code":null,"runtimePreview":null,"media":"CodingFirstContractSection1Step3.png","content":[{"inlineContent":[{"type":"text","text":"Open the project in your preferred Swift IDE by opening the “Counter” directory."}],"type":"paragraph"}],"type":"step"},{"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In Xcode, go to "},{"type":"strong","inlineContent":[{"type":"text","text":"Product > Build"}]},{"text":" or press ","type":"text"},{"type":"codeVoice","code":"⌘ + B"},{"text":".","type":"text"}]}],"media":"CodingFirstContractSection1Step4.png","type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"(Optional) Build the project to enable macros and improve indexing in your IDE."}]}],"code":null,"runtimePreview":null}]},{"contentSection":[{"kind":"contentAndMedia","content":[{"inlineContent":[{"text":"Let’s start coding the smart contract.","type":"text"}],"type":"paragraph"}],"mediaPosition":"trailing"}],"title":"Writing the Contract Code","anchor":"Writing-the-Contract-Code","stepsSection":[{"content":[{"inlineContent":[{"type":"text","text":"Open the "},{"type":"codeVoice","code":"Contracts\/Counter\/Source\/lib.swift"},{"text":" file and delete its contents.","type":"text"}],"type":"paragraph"}],"runtimePreview":null,"media":null,"caption":[],"type":"step","code":"CodingFirstContractSection2Step1.swift"},{"media":null,"content":[{"inlineContent":[{"type":"text","text":"Import the framework by adding "},{"type":"codeVoice","code":"import Space"},{"text":".","type":"text"}],"type":"paragraph"}],"code":"CodingFirstContractSection2Step2.swift","type":"step","runtimePreview":null,"caption":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Note:","type":"text"}],"type":"strong"},{"type":"text","text":" Only import the Space framework. Other libraries like Foundation are not compatible with SpaceVM."}]}]},{"type":"step","code":"CodingFirstContractSection2Step3.swift","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Declare the contract by annotating a struct with ","type":"text"},{"type":"codeVoice","code":"@Contract"},{"type":"text","text":". For this project, we’ll declare the "},{"type":"codeVoice","code":"Counter"},{"type":"text","text":" contract."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Note:","type":"text"}]},{"text":" You should have only one ","type":"text"},{"type":"codeVoice","code":"@Contract"},{"type":"text","text":" struct. The logic can be spread across multiple files, but the "},{"code":"@Contract","type":"codeVoice"},{"text":" struct remains central.","type":"text"}]}],"media":null},{"runtimePreview":null,"caption":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Note:"}]},{"type":"text","text":" The "},{"type":"codeVoice","code":"BigUint"},{"text":" type handles arbitrarily large numbers, so there’s no risk of overflow.","type":"text"}],"type":"paragraph"}],"code":"CodingFirstContractSection2Step4.swift","content":[{"inlineContent":[{"text":"To persist the counter across executions, declare it in the contract’s storage with ","type":"text"},{"code":"@Storage(key: \"counter\")","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}],"type":"step","media":null},{"runtimePreview":null,"media":null,"caption":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Note:","type":"text"}]},{"type":"text","text":" The initializer is called only when the contract is deployed."}]}],"type":"step","content":[{"inlineContent":[{"text":"Define the initializer for the contract, which is executed only once during deployment to set the initial counter value.","type":"text"}],"type":"paragraph"}],"code":"CodingFirstContractSection2Step5.swift"},{"caption":[],"runtimePreview":null,"media":null,"type":"step","code":"CodingFirstContractSection2Step6.swift","content":[{"inlineContent":[{"text":"Create an endpoint ","type":"text"},{"type":"codeVoice","code":"increase"},{"text":" to allow users to increment the counter. The function takes a single user-provided parameter indicating how much to increment the counter.","type":"text"}],"type":"paragraph"}]},{"caption":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Note:"}]},{"type":"text","text":" The "},{"type":"codeVoice","code":"BigUint"},{"type":"text","text":" type cannot be negative, so if the operation results in a negative value, the transaction will fail without changes being committed."}]}],"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Similarly, create the "},{"type":"codeVoice","code":"decrease"},{"text":" endpoint to decrement the counter.","type":"text"}]}],"code":"CodingFirstContractSection2Step7.swift","runtimePreview":null,"media":null},{"code":"CodingFirstContractSection2Step8.swift","media":null,"runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"To allow users or other contracts to retrieve the counter’s value, create a view function ("},{"type":"codeVoice","code":"getCounter"},{"type":"text","text":"), which does not modify the contract’s state."}],"type":"paragraph"}],"caption":[],"type":"step"}]},{"stepsSection":[{"media":"CodingFirstContractSection3Step1.png","code":null,"runtimePreview":null,"type":"step","content":[{"inlineContent":[{"type":"text","text":"Open the "},{"code":"Contracts\/Counter\/Tests\/CounterTests","type":"codeVoice"},{"type":"text","text":" directory. Delete any files and create a new file named "},{"type":"codeVoice","code":"CounterTests.swift"},{"type":"text","text":"."}],"type":"paragraph"}],"caption":[]},{"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Import the necessary frameworks: Space, your contract, and XCTest."}]}],"type":"step","caption":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Note:"}]},{"type":"text","text":" XCTest is the official tool for writing unit tests in Swift."}]}],"code":"CodingFirstContractSection3Step2.swift","media":null},{"type":"step","caption":[],"media":null,"code":"CodingFirstContractSection3Step3.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Declare the contract’s address, as SwiftVM assigns a deterministic address to our contract."}]}],"runtimePreview":null},{"content":[{"inlineContent":[{"type":"text","text":"Create a class for the tests, inheriting from "},{"code":"ContractTestCase","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}],"runtimePreview":null,"type":"step","media":null,"caption":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Note:"}],"type":"strong"},{"type":"text","text":" Avoid overriding the "},{"type":"codeVoice","code":"setUp"},{"type":"text","text":" and "},{"code":"tearDown","type":"codeVoice"},{"text":" methods.","type":"text"}]}],"code":"CodingFirstContractSection3Step4.swift"},{"caption":[],"type":"step","runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"Override the "},{"code":"initialAccounts","type":"codeVoice"},{"text":" property to declare the contract’s address in SwiftVM.","type":"text"}],"type":"paragraph"}],"media":null,"code":"CodingFirstContractSection3Step5.swift"},{"type":"step","media":null,"caption":[],"code":"CodingFirstContractSection3Step6.swift","content":[{"type":"paragraph","inlineContent":[{"text":"Create the first unit test to verify deploying the contract with an initial counter value of zero.","type":"text"}]}],"runtimePreview":null},{"type":"step","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Deploy the contract with an initial value of 0 using the generated "},{"type":"codeVoice","code":"testable"},{"type":"text","text":" function."}]}],"media":null,"code":"CodingFirstContractSection3Step7.swift","caption":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Note:","type":"text"}]},{"type":"text","text":" This function allows you to catch any errors during execution."}],"type":"paragraph"}]},{"runtimePreview":null,"caption":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Note:"}],"type":"strong"},{"type":"text","text":" Space generates functions for contract views and endpoints."}]}],"content":[{"inlineContent":[{"type":"text","text":"Call the "},{"type":"codeVoice","code":"getCounter"},{"text":" view to assert the counter is 0.","type":"text"}],"type":"paragraph"}],"code":"CodingFirstContractSection3Step8.swift","media":null,"type":"step"},{"runtimePreview":null,"caption":[],"media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add a unit test to verify deploying the contract with a non-zero initial value."}]}],"type":"step","code":"CodingFirstContractSection3Step9.swift"},{"caption":[],"type":"step","code":"CodingFirstContractSection3Step10.swift","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create unit tests for the "},{"code":"increase","type":"codeVoice"},{"type":"text","text":" endpoint, similar to the deployment tests."}]}],"media":null},{"media":null,"runtimePreview":null,"code":"CodingFirstContractSection3Step11.swift","type":"step","content":[{"inlineContent":[{"text":"Repeat for the ","type":"text"},{"code":"decrease","type":"codeVoice"},{"type":"text","text":" endpoint."}],"type":"paragraph"}],"caption":[]},{"runtimePreview":null,"type":"step","caption":[],"media":null,"code":"CodingFirstContractSection3Step12.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add a test to ensure failure when trying to decrease the counter below zero."}]}]},{"type":"step","content":[{"inlineContent":[{"type":"text","text":"Run the tests to confirm your contract works correctly!"}],"type":"paragraph"}],"caption":[],"media":"CodingFirstContractSection3Step13.png","code":null,"runtimePreview":null}],"title":"Testing the Contract","contentSection":[{"content":[{"inlineContent":[{"type":"text","text":"Space includes a built-in emulator called SwiftVM, which allows you to test your contract in the Swift environment."}],"type":"paragraph"}],"mediaPosition":"trailing","kind":"contentAndMedia"}],"anchor":"Testing-the-Contract"}]}],"kind":"project","schemaVersion":{"minor":3,"major":0,"patch":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract"},"references":{"doc://Space/tutorials/Space/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract":{"abstract":[{"type":"text","text":"Before writing your first smart contract with Space, ensure you have the necessary tools installed."}],"identifier":"doc:\/\/Space\/tutorials\/Space\/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract","role":"pseudoSymbol","title":"Initializing and Compiling Your First Smart Contract","kind":"section","url":"\/tutorials\/space\/installingtools#Initializing-and-Compiling-Your-First-Smart-Contract","type":"section"},"doc://Space/tutorials/Space/CodingYourFirstContract":{"title":"Building Your First Smart Contract","estimatedTime":"20min","abstract":[{"type":"text","text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user."}],"role":"project","type":"topic","url":"\/tutorials\/space\/codingyourfirstcontract","kind":"project","identifier":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract"},"CodingFirstContractSection3Step9.swift":{"highlights":[{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34}],"syntax":"swift","fileType":"swift","fileName":"CounterTests.swift","identifier":"CodingFirstContractSection3Step9.swift","type":"file","content":["import Space","import Counter","import XCTest","","let COUNTER_ADDRESS = \"counter\"","","final class CounterTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(address: COUNTER_ADDRESS)","        ]","    }","    ","    func testDeployCounterInitialValueZero() throws {","        let contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 0","        )","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 0)","    }","    ","    func testDeployCounterInitialValueNonZero() throws {","        let contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 15","        )","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 15)","    }","}"]},"CodingFirstContractSection2Step7.swift":{"type":"file","fileName":"lib.swift","content":["import Space","","@Contract public struct Counter {","    @Storage(key: \"counter\") var counter: BigUint","    ","    init(initialValue: BigUint) {","        self.counter = initialValue","    }","    ","    public mutating func increase(value: BigUint) {","        self.counter = self.counter + value","    }","    ","    public mutating func decrease(value: BigUint) {","        self.counter = self.counter - value","    }","}"],"fileType":"swift","identifier":"CodingFirstContractSection2Step7.swift","syntax":"swift","highlights":[{"line":13},{"line":14},{"line":15},{"line":16}]},"CodingFirstContractSection2Step5.swift":{"highlights":[{"line":5},{"line":6},{"line":7},{"line":8}],"syntax":"swift","fileType":"swift","fileName":"lib.swift","identifier":"CodingFirstContractSection2Step5.swift","type":"file","content":["import Space","","@Contract public struct Counter {","    @Storage(key: \"counter\") var counter: BigUint","    ","    init(initialValue: BigUint) {","        self.counter = initialValue","    }","}"]},"doc://Space/tutorials/Space/Getting-Started/Building-Your-First-Smart-Contract":{"title":"Building Your First Smart Contract","abstract":[],"identifier":"doc:\/\/Space\/tutorials\/Space\/Getting-Started\/Building-Your-First-Smart-Contract","url":"\/tutorials\/space\/getting-started\/building-your-first-smart-contract","role":"article","type":"topic","kind":"article"},"CodingFirstContractSection3Step7.swift":{"type":"file","fileName":"CounterTests.swift","content":["import Space","import Counter","import XCTest","","let COUNTER_ADDRESS = \"counter\"","","final class CounterTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(address: COUNTER_ADDRESS)","        ]","    }","    ","    func testDeployCounterInitialValueZero() throws {","        let contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 0","        )","    }","}"],"fileType":"swift","identifier":"CodingFirstContractSection3Step7.swift","syntax":"swift","highlights":[{"line":15},{"line":16},{"line":17},{"line":18}]},"CodingFirstContractSection2Step4.swift":{"highlights":[{"line":4}],"syntax":"swift","fileType":"swift","fileName":"lib.swift","identifier":"CodingFirstContractSection2Step4.swift","type":"file","content":["import Space","","@Contract public struct Counter {","    @Storage(key: \"counter\") var counter: BigUint","}"]},"CodingFirstContractSection3Step3.swift":{"type":"file","fileName":"CounterTests.swift","content":["import Space","import Counter","import XCTest","","let COUNTER_ADDRESS = \"counter\""],"fileType":"swift","identifier":"CodingFirstContractSection3Step3.swift","syntax":"swift","highlights":[{"line":4},{"line":5}]},"CodingFirstContractSection3Step11.swift":{"highlights":[{"line":61},{"line":62},{"line":63},{"line":64},{"line":65},{"line":66},{"line":67},{"line":68},{"line":69},{"line":70},{"line":71},{"line":72},{"line":73},{"line":74},{"line":75},{"line":76},{"line":77},{"line":78},{"line":79},{"line":80},{"line":81},{"line":82},{"line":83},{"line":84},{"line":85},{"line":86}],"syntax":"swift","fileType":"swift","fileName":"CounterTests.swift","identifier":"CodingFirstContractSection3Step11.swift","type":"file","content":["import Space","import Counter","import XCTest","","let COUNTER_ADDRESS = \"counter\"","","final class CounterTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(address: COUNTER_ADDRESS)","        ]","    }","    ","    func testDeployCounterInitialValueZero() throws {","        let contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 0","        )","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 0)","    }","    ","    func testDeployCounterInitialValueNonZero() throws {","        let contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 15","        )","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 15)","    }","    ","    func testIncreaseZero() throws {","        var contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 15","        )","        ","        try contract.increase(value: 0)","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 15)","    }","    ","    func testIncreaseMoreThanZero() throws {","        var contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 15","        )","        ","        try contract.increase(value: 5)","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 20)","    }","    ","    func testDecreaseZero() throws {","        var contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 15","        )","        ","        try contract.decrease(value: 0)","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 15)","    }","    ","    func testDecreaseMoreThanZero() throws {","        var contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 15","        )","        ","        try contract.decrease(value: 5)","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 10)","    }","}"]},"CodingFirstContractSection1Step2.png":{"alt":"Output of `space init Counter` command.","type":"image","identifier":"CodingFirstContractSection1Step2.png","variants":[{"url":"\/images\/Space\/CodingFirstContractSection1Step2.png","traits":["1x","light"]}]},"CodingFirstContractSection3Step2.swift":{"highlights":[],"syntax":"swift","fileType":"swift","fileName":"CounterTests.swift","identifier":"CodingFirstContractSection3Step2.swift","type":"file","content":["import Space","import Counter","import XCTest"]},"CodingFirstContractSection3Step5.swift":{"type":"file","fileName":"CounterTests.swift","content":["import Space","import Counter","import XCTest","","let COUNTER_ADDRESS = \"counter\"","","final class CounterTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(address: COUNTER_ADDRESS)","        ]","    }","}"],"fileType":"swift","identifier":"CodingFirstContractSection3Step5.swift","syntax":"swift","highlights":[{"line":8},{"line":9},{"line":10},{"line":11},{"line":12}]},"CodingFirstContractSection3Step13.png":{"alt":"Xcode's test tab showing all tests passed.","type":"image","identifier":"CodingFirstContractSection3Step13.png","variants":[{"url":"\/images\/Space\/CodingFirstContractSection3Step13.png","traits":["1x","light"]}]},"CodingFirstContractSection1Step4.png":{"alt":"Xcode's Product menu with 'Build' highlighted.","type":"image","identifier":"CodingFirstContractSection1Step4.png","variants":[{"url":"\/images\/Space\/CodingFirstContractSection1Step4.png","traits":["1x","light"]}]},"CodingFirstContractSection2Step6.swift":{"highlights":[{"line":9},{"line":10},{"line":11},{"line":12}],"syntax":"swift","fileType":"swift","fileName":"lib.swift","identifier":"CodingFirstContractSection2Step6.swift","type":"file","content":["import Space","","@Contract public struct Counter {","    @Storage(key: \"counter\") var counter: BigUint","    ","    init(initialValue: BigUint) {","        self.counter = initialValue","    }","    ","    public mutating func increase(value: BigUint) {","        self.counter = self.counter + value","    }","}"]},"doc://Space/tutorials/Space/Getting-Started/Installing-the-Tools":{"abstract":[],"title":"Installing the Tools","identifier":"doc:\/\/Space\/tutorials\/Space\/Getting-Started\/Installing-the-Tools","url":"\/tutorials\/space\/getting-started\/installing-the-tools","role":"article","type":"topic","kind":"article"},"doc://Space/tutorials/Space/CodingYourFirstContract#Writing-the-Contract-Code":{"type":"section","identifier":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract#Writing-the-Contract-Code","role":"pseudoSymbol","abstract":[{"type":"text","text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user."}],"url":"\/tutorials\/space\/codingyourfirstcontract#Writing-the-Contract-Code","kind":"section","title":"Writing the Contract Code"},"CodingFirstContractSection3Step4.swift":{"type":"file","fileName":"CounterTests.swift","content":["import Space","import Counter","import XCTest","","let COUNTER_ADDRESS = \"counter\"","","final class CounterTests: ContractTestCase {","    ","}"],"fileType":"swift","identifier":"CodingFirstContractSection3Step4.swift","syntax":"swift","highlights":[{"line":6},{"line":7},{"line":8},{"line":9}]},"CodingFirstContractSection3Step8.swift":{"highlights":[{"line":19},{"line":20},{"line":21},{"line":22}],"syntax":"swift","fileType":"swift","fileName":"CounterTests.swift","identifier":"CodingFirstContractSection3Step8.swift","type":"file","content":["import Space","import Counter","import XCTest","","let COUNTER_ADDRESS = \"counter\"","","final class CounterTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(address: COUNTER_ADDRESS)","        ]","    }","    ","    func testDeployCounterInitialValueZero() throws {","        let contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 0","        )","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 0)","    }","}"]},"CodingFirstContractSection3Step1.png":{"alt":"File tree showing newly created `CounterTests.swift`.","type":"image","identifier":"CodingFirstContractSection3Step1.png","variants":[{"url":"\/images\/Space\/CodingFirstContractSection3Step1.png","traits":["1x","light"]}]},"doc://Space/tutorials/Space/InstallingTools":{"url":"\/tutorials\/space\/installingtools","type":"topic","kind":"project","estimatedTime":"10min","identifier":"doc:\/\/Space\/tutorials\/Space\/InstallingTools","title":"Install the Necessary Tools","abstract":[{"text":"Before writing your first smart contract with Space, ensure you have the necessary tools installed.","type":"text"}],"role":"project"},"CodingFirstContractSection3Step6.swift":{"highlights":[{"line":13},{"line":14},{"line":15},{"line":16}],"syntax":"swift","fileType":"swift","fileName":"CounterTests.swift","identifier":"CodingFirstContractSection3Step6.swift","type":"file","content":["import Space","import Counter","import XCTest","","let COUNTER_ADDRESS = \"counter\"","","final class CounterTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(address: COUNTER_ADDRESS)","        ]","    }","    ","    func testDeployCounterInitialValueZero() throws {","        ","    }","}"]},"doc://Space/tutorials/Space/InstallingTools#Setting-Up-the-Space-CLI":{"kind":"section","url":"\/tutorials\/space\/installingtools#Setting-Up-the-Space-CLI","identifier":"doc:\/\/Space\/tutorials\/Space\/InstallingTools#Setting-Up-the-Space-CLI","role":"pseudoSymbol","title":"Setting Up the Space CLI","type":"section","abstract":[{"text":"Before writing your first smart contract with Space, ensure you have the necessary tools installed.","type":"text"}]},"InstallingToolsSection1Step1.png":{"alt":"An empty terminal window.","type":"image","identifier":"InstallingToolsSection1Step1.png","variants":[{"url":"\/images\/Space\/InstallingToolsSection1Step1.png","traits":["1x","light"]}]},"doc://Space/tutorials/Space":{"type":"topic","identifier":"doc:\/\/Space\/tutorials\/Space","role":"overview","title":"Meet Space","abstract":[{"text":"Discover how Space simplifies blockchain development using Swift. Dive into the world of Web3 with ease and efficiency.","type":"text"}],"kind":"overview","url":"\/tutorials\/space"},"CodingFirstContractSection2Step2.swift":{"highlights":[{"line":1}],"syntax":"swift","fileType":"swift","fileName":"lib.swift","identifier":"CodingFirstContractSection2Step2.swift","type":"file","content":["import Space"]},"CodingFirstContractSection1Step3.png":{"alt":"Xcode project selection screen with 'Counter' highlighted.","type":"image","identifier":"CodingFirstContractSection1Step3.png","variants":[{"url":"\/images\/Space\/CodingFirstContractSection1Step3.png","traits":["1x","light"]}]},"doc://Space/tutorials/Space/CodingYourFirstContract#Initializing-the-Project":{"identifier":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract#Initializing-the-Project","role":"pseudoSymbol","abstract":[{"type":"text","text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user."}],"kind":"section","type":"section","title":"Initializing the Project","url":"\/tutorials\/space\/codingyourfirstcontract#Initializing-the-Project"},"CodingFirstContractSection2Step8.swift":{"highlights":[{"line":17},{"line":18},{"line":19},{"line":20}],"syntax":"swift","fileType":"swift","fileName":"lib.swift","identifier":"CodingFirstContractSection2Step8.swift","type":"file","content":["import Space","","@Contract public struct Counter {","    @Storage(key: \"counter\") var counter: BigUint","    ","    init(initialValue: BigUint) {","        self.counter = initialValue","    }","    ","    public mutating func increase(value: BigUint) {","        self.counter = self.counter + value","    }","    ","    public mutating func decrease(value: BigUint) {","        self.counter = self.counter - value","    }","    ","    public func getCounter() -> BigUint {","        return self.counter","    }","}"]},"doc://Space/tutorials/Space/InstallingTools#Installing-Spaces-Dependencies":{"abstract":[{"type":"text","text":"Before writing your first smart contract with Space, ensure you have the necessary tools installed."}],"type":"section","role":"pseudoSymbol","url":"\/tutorials\/space\/installingtools#Installing-Spaces-Dependencies","identifier":"doc:\/\/Space\/tutorials\/Space\/InstallingTools#Installing-Spaces-Dependencies","kind":"section","title":"Installing Space's Dependencies"},"CodingFirstContractSection2Step1.swift":{"fileName":"lib.swift","type":"file","identifier":"CodingFirstContractSection2Step1.swift","content":[""],"syntax":"swift","fileType":"swift","highlights":[]},"doc://Space/tutorials/Space/CodingYourFirstContract#Testing-the-Contract":{"title":"Testing the Contract","url":"\/tutorials\/space\/codingyourfirstcontract#Testing-the-Contract","kind":"section","type":"section","abstract":[{"text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user.","type":"text"}],"role":"pseudoSymbol","identifier":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract#Testing-the-Contract"},"CodingFirstContractSection3Step12.swift":{"type":"file","content":["import Space","import Counter","import XCTest","","let COUNTER_ADDRESS = \"counter\"","","final class CounterTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(address: COUNTER_ADDRESS)","        ]","    }","    ","    func testDeployCounterInitialValueZero() throws {","        let contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 0","        )","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 0)","    }","    ","    func testDeployCounterInitialValueNonZero() throws {","        let contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 15","        )","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 15)","    }","    ","    func testIncreaseZero() throws {","        var contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 15","        )","        ","        try contract.increase(value: 0)","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 15)","    }","    ","    func testIncreaseMoreThanZero() throws {","        var contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 15","        )","        ","        try contract.increase(value: 5)","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 20)","    }","    ","    func testDecreaseZero() throws {","        var contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 15","        )","        ","        try contract.decrease(value: 0)","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 15)","    }","    ","    func testDecreaseMoreThanZero() throws {","        var contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 15","        )","        ","        try contract.decrease(value: 5)","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 10)","    }","    ","    func testDecreaseTooMuchShouldFail() throws {","        let contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 15","        )","        ","        do {","            try contract.decrease(value: 16)","            ","            XCTFail() \/\/ Decrease fails, so this line should not be executed","        } catch {","            XCTAssertEqual(error, .userError(message: \"cannot subtract because result would be negative\"))","        }","    }","}"],"fileType":"swift","identifier":"CodingFirstContractSection3Step12.swift","fileName":"CounterTests.swift","syntax":"swift","highlights":[{"line":87},{"line":88},{"line":89},{"line":90},{"line":91},{"line":92},{"line":93},{"line":94},{"line":95},{"line":96},{"line":97},{"line":98},{"line":99},{"line":100},{"line":101}]},"CodingFirstContractSection3Step10.swift":{"type":"file","syntax":"swift","content":["import Space","import Counter","import XCTest","","let COUNTER_ADDRESS = \"counter\"","","final class CounterTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(address: COUNTER_ADDRESS)","        ]","    }","    ","    func testDeployCounterInitialValueZero() throws {","        let contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 0","        )","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 0)","    }","    ","    func testDeployCounterInitialValueNonZero() throws {","        let contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 15","        )","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 15)","    }","    ","    func testIncreaseZero() throws {","        var contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 15","        )","        ","        try contract.increase(value: 0)","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 15)","    }","    ","    func testIncreaseMoreThanZero() throws {","        var contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 15","        )","        ","        try contract.increase(value: 5)","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 20)","    }","}"],"fileName":"CounterTests.swift","identifier":"CodingFirstContractSection3Step10.swift","fileType":"swift","highlights":[{"line":35},{"line":36},{"line":37},{"line":38},{"line":39},{"line":40},{"line":41},{"line":42},{"line":43},{"line":44},{"line":45},{"line":46},{"line":47},{"line":48},{"line":49},{"line":50},{"line":51},{"line":52},{"line":53},{"line":54},{"line":55},{"line":56},{"line":57},{"line":58},{"line":59},{"line":60}]},"CodingFirstContractSection2Step3.swift":{"syntax":"swift","content":["import Space","","@Contract public struct Counter {","    ","}"],"identifier":"CodingFirstContractSection2Step3.swift","fileType":"swift","type":"file","highlights":[{"line":2},{"line":3},{"line":4},{"line":5}],"fileName":"lib.swift"}}}