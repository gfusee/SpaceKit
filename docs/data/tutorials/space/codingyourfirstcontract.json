{"kind":"project","hierarchy":{"paths":[["doc:\/\/Space\/tutorials\/Space","doc:\/\/Space\/tutorials\/Space\/Getting-Started","doc:\/\/Space\/tutorials\/Space\/Getting-Started\/Building-Your-First-Smart-Contract"]],"reference":"doc:\/\/Space\/tutorials\/Space","modules":[{"reference":"doc:\/\/Space\/tutorials\/Space\/Getting-Started\/Installing-the-Tools","projects":[{"reference":"doc:\/\/Space\/tutorials\/Space\/InstallingTools","sections":[{"reference":"doc:\/\/Space\/tutorials\/Space\/InstallingTools#Installing-Spaces-Dependencies","kind":"task"},{"reference":"doc:\/\/Space\/tutorials\/Space\/InstallingTools#Setting-Up-the-Space-CLI","kind":"task"},{"kind":"task","reference":"doc:\/\/Space\/tutorials\/Space\/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract"}]}]},{"reference":"doc:\/\/Space\/tutorials\/Space\/Getting-Started\/Building-Your-First-Smart-Contract","projects":[{"reference":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract","sections":[{"kind":"task","reference":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract#Initializing-the-Project"},{"reference":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract#Writing-the-Contract-Code","kind":"task"},{"reference":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract#Testing-the-Contract","kind":"task"}]}]},{"reference":"doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Exploring-Space's-Types","projects":[{"reference":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes","sections":[{"kind":"task","reference":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges"},{"reference":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Understanding-the-Buffer-Type","kind":"task"},{"kind":"task","reference":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Working-with-the-BigUint-Type"},{"reference":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Working-with-the-Vector-Type","kind":"task"},{"reference":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Creating-Your-Own-Types","kind":"task"}]}]},{"projects":[{"reference":"doc:\/\/Space\/tutorials\/Space\/StoreValues","sections":[{"reference":"doc:\/\/Space\/tutorials\/Space\/StoreValues#Working-with-Storage-for-Single-Value-Persistence","kind":"task"},{"reference":"doc:\/\/Space\/tutorials\/Space\/StoreValues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage","kind":"task"}]}],"reference":"doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Persisting-Data-Across-Executions"},{"projects":[{"sections":[{"reference":"doc:\/\/Space\/tutorials\/Space\/GetInfo#Accessing-Transaction-Context-Data","kind":"task"},{"reference":"doc:\/\/Space\/tutorials\/Space\/GetInfo#Accessing-Blockchain-Context-Data","kind":"task"}],"reference":"doc:\/\/Space\/tutorials\/Space\/GetInfo"}],"reference":"doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Retrieving-Information-from-the-Blockchain"},{"reference":"doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Interact-with-Other-Contracts","projects":[{"reference":"doc:\/\/Space\/tutorials\/Space\/SyncCalls","sections":[{"kind":"task","reference":"doc:\/\/Space\/tutorials\/Space\/SyncCalls#Declare-the-Callee-Proxy"},{"reference":"doc:\/\/Space\/tutorials\/Space\/SyncCalls#Perform-a-Synchronous-Call","kind":"task"}]}]}]},"metadata":{"categoryPathComponent":"Space","title":"Building Your First Smart Contract","category":"Space","role":"project"},"schemaVersion":{"major":0,"patch":0,"minor":3},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/tutorials\/space\/codingyourfirstcontract"]}],"identifier":{"url":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract","interfaceLanguage":"swift"},"sections":[{"estimatedTimeInMinutes":20,"title":"Building Your First Smart Contract","chapter":"Building Your First Smart Contract","kind":"hero","content":[{"inlineContent":[{"text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user.","type":"text"}],"type":"paragraph"}]},{"tasks":[{"anchor":"Initializing-the-Project","contentSection":[{"content":[{"inlineContent":[{"text":"Before writing the contract, let’s initialize the project using the Space CLI.","type":"text"}],"type":"paragraph"}],"mediaPosition":"trailing","kind":"contentAndMedia"}],"stepsSection":[{"media":"InstallingToolsSection1Step1.png","content":[{"inlineContent":[{"text":"Open a terminal.","type":"text"}],"type":"paragraph"}],"type":"step","caption":[],"code":null,"runtimePreview":null},{"type":"step","media":"CodingFirstContractSection1Step2.png","caption":[{"inlineContent":[{"text":"This command creates a new directory named “Counter.”","type":"text"}],"type":"paragraph"}],"code":null,"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Navigate to the desired directory, then run the command "},{"code":"space init Counter","type":"codeVoice"},{"type":"text","text":"."}]}]},{"type":"step","caption":[{"inlineContent":[{"text":"We recommend Xcode or VSCode with the official Swift extension. In this tutorial, we’ll use Xcode. For other environments like VSCode on Linux or Windows, dedicated tutorials may be available.","type":"text"}],"type":"paragraph"}],"media":"CodingFirstContractSection1Step3.png","code":null,"content":[{"inlineContent":[{"type":"text","text":"Open the project in your preferred Swift IDE by opening the “Counter” directory."}],"type":"paragraph"}],"runtimePreview":null},{"media":"CodingFirstContractSection1Step4.png","code":null,"type":"step","caption":[{"inlineContent":[{"type":"text","text":"In Xcode, go to "},{"inlineContent":[{"type":"text","text":"Product > Build"}],"type":"strong"},{"type":"text","text":" or press "},{"type":"codeVoice","code":"⌘ + B"},{"text":".","type":"text"}],"type":"paragraph"}],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"(Optional) Build the project to enable macros and improve indexing in your IDE."}]}],"runtimePreview":null}],"title":"Initializing the Project"},{"anchor":"Writing-the-Contract-Code","title":"Writing the Contract Code","stepsSection":[{"caption":[],"runtimePreview":null,"type":"step","media":null,"code":"CodingFirstContractSection2Step1.swift","content":[{"type":"paragraph","inlineContent":[{"text":"Open the ","type":"text"},{"code":"Contracts\/Counter\/Source\/lib.swift","type":"codeVoice"},{"type":"text","text":" file and delete its contents."}]}]},{"media":null,"type":"step","code":"CodingFirstContractSection2Step2.swift","runtimePreview":null,"caption":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Note:"}]},{"type":"text","text":" Only import the Space framework. Other libraries like Foundation are not compatible with SpaceVM."}]}],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Import the framework by adding "},{"type":"codeVoice","code":"import Space"},{"type":"text","text":"."}]}]},{"type":"step","code":"CodingFirstContractSection2Step3.swift","runtimePreview":null,"caption":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Note:"}]},{"type":"text","text":" You should have only one "},{"code":"@Contract","type":"codeVoice"},{"type":"text","text":" struct. The logic can be spread across multiple files, but the "},{"type":"codeVoice","code":"@Contract"},{"text":" struct remains central.","type":"text"}],"type":"paragraph"}],"content":[{"inlineContent":[{"text":"Declare the contract by annotating a struct with ","type":"text"},{"code":"@Contract","type":"codeVoice"},{"text":". For this project, we’ll declare the ","type":"text"},{"code":"Counter","type":"codeVoice"},{"text":" contract.","type":"text"}],"type":"paragraph"}],"media":null},{"type":"step","content":[{"inlineContent":[{"text":"To persist the counter across executions, declare it in the contract’s storage with ","type":"text"},{"code":"@Storage(key: \"counter\")","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}],"code":"CodingFirstContractSection2Step4.swift","runtimePreview":null,"caption":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Note:"}]},{"type":"text","text":" The "},{"type":"codeVoice","code":"BigUint"},{"text":" type handles arbitrarily large numbers, so there’s no risk of overflow.","type":"text"}]}],"media":null},{"code":"CodingFirstContractSection2Step5.swift","caption":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Note:","type":"text"}]},{"type":"text","text":" The initializer is called only when the contract is deployed."}]}],"media":null,"type":"step","content":[{"inlineContent":[{"type":"text","text":"Define the initializer for the contract, which is executed only once during deployment to set the initial counter value."}],"type":"paragraph"}],"runtimePreview":null},{"content":[{"type":"paragraph","inlineContent":[{"text":"Create an endpoint ","type":"text"},{"type":"codeVoice","code":"increase"},{"text":" to allow users to increment the counter. The function takes a single user-provided parameter indicating how much to increment the counter.","type":"text"}]}],"media":null,"caption":[],"code":"CodingFirstContractSection2Step6.swift","runtimePreview":null,"type":"step"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Similarly, create the "},{"code":"decrease","type":"codeVoice"},{"type":"text","text":" endpoint to decrement the counter."}]}],"media":null,"runtimePreview":null,"code":"CodingFirstContractSection2Step7.swift","type":"step","caption":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Note:"}]},{"type":"text","text":" The "},{"code":"BigUint","type":"codeVoice"},{"type":"text","text":" type cannot be negative, so if the operation results in a negative value, the transaction will fail without changes being committed."}]}]},{"runtimePreview":null,"content":[{"inlineContent":[{"text":"To allow users or other contracts to retrieve the counter’s value, create a view function (","type":"text"},{"type":"codeVoice","code":"getCounter"},{"type":"text","text":"), which does not modify the contract’s state."}],"type":"paragraph"}],"type":"step","media":null,"code":"CodingFirstContractSection2Step8.swift","caption":[]}],"contentSection":[{"content":[{"inlineContent":[{"type":"text","text":"Let’s start coding the smart contract."}],"type":"paragraph"}],"mediaPosition":"trailing","kind":"contentAndMedia"}]},{"contentSection":[{"kind":"contentAndMedia","content":[{"inlineContent":[{"type":"text","text":"Space includes a built-in emulator called SwiftVM, which allows you to test your contract in the Swift environment."}],"type":"paragraph"}],"mediaPosition":"trailing"}],"stepsSection":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Open the "},{"type":"codeVoice","code":"Contracts\/Counter\/Tests\/CounterTests"},{"text":" directory. Delete any files and create a new file named ","type":"text"},{"code":"CounterTests.swift","type":"codeVoice"},{"type":"text","text":"."}]}],"type":"step","caption":[],"media":"CodingFirstContractSection3Step1.png","code":null,"runtimePreview":null},{"runtimePreview":null,"caption":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Note:"}],"type":"strong"},{"text":" XCTest is the official tool for writing unit tests in Swift.","type":"text"}]}],"content":[{"type":"paragraph","inlineContent":[{"text":"Import the necessary frameworks: Space, your contract, and XCTest.","type":"text"}]}],"media":null,"code":"CodingFirstContractSection3Step2.swift","type":"step"},{"code":"CodingFirstContractSection3Step3.swift","content":[{"inlineContent":[{"type":"text","text":"Declare the contract’s address, as SwiftVM assigns a deterministic address to our contract."}],"type":"paragraph"}],"caption":[],"type":"step","media":null,"runtimePreview":null},{"caption":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Note:"}],"type":"strong"},{"text":" Avoid overriding the ","type":"text"},{"type":"codeVoice","code":"setUp"},{"type":"text","text":" and "},{"type":"codeVoice","code":"tearDown"},{"type":"text","text":" methods."}]}],"code":"CodingFirstContractSection3Step4.swift","content":[{"type":"paragraph","inlineContent":[{"text":"Create a class for the tests, inheriting from ","type":"text"},{"code":"ContractTestCase","type":"codeVoice"},{"text":".","type":"text"}]}],"type":"step","runtimePreview":null,"media":null},{"media":null,"runtimePreview":null,"type":"step","code":"CodingFirstContractSection3Step5.swift","content":[{"inlineContent":[{"type":"text","text":"Override the "},{"type":"codeVoice","code":"initialAccounts"},{"type":"text","text":" property to declare the contract’s address in SwiftVM."}],"type":"paragraph"}],"caption":[]},{"type":"step","code":"CodingFirstContractSection3Step6.swift","media":null,"caption":[],"runtimePreview":null,"content":[{"inlineContent":[{"text":"Create the first unit test to verify deploying the contract with an initial counter value of zero.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Deploy the contract with an initial value of 0 using the generated ","type":"text"},{"type":"codeVoice","code":"testable"},{"text":" function.","type":"text"}]}],"media":null,"caption":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Note:"}]},{"type":"text","text":" This function allows you to catch any errors during execution."}],"type":"paragraph"}],"code":"CodingFirstContractSection3Step7.swift","type":"step","runtimePreview":null},{"media":null,"code":"CodingFirstContractSection3Step8.swift","runtimePreview":null,"caption":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Note:"}]},{"type":"text","text":" Space generates functions for contract views and endpoints."}]}],"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Call the "},{"type":"codeVoice","code":"getCounter"},{"text":" view to assert the counter is 0.","type":"text"}]}]},{"media":null,"code":"CodingFirstContractSection3Step9.swift","content":[{"inlineContent":[{"text":"Add a unit test to verify deploying the contract with a non-zero initial value.","type":"text"}],"type":"paragraph"}],"type":"step","caption":[],"runtimePreview":null},{"caption":[],"content":[{"inlineContent":[{"text":"Create unit tests for the ","type":"text"},{"type":"codeVoice","code":"increase"},{"type":"text","text":" endpoint, similar to the deployment tests."}],"type":"paragraph"}],"code":"CodingFirstContractSection3Step10.swift","media":null,"type":"step","runtimePreview":null},{"caption":[],"type":"step","content":[{"inlineContent":[{"text":"Repeat for the ","type":"text"},{"type":"codeVoice","code":"decrease"},{"text":" endpoint.","type":"text"}],"type":"paragraph"}],"media":null,"code":"CodingFirstContractSection3Step11.swift","runtimePreview":null},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add a test to ensure failure when trying to decrease the counter below zero."}]}],"type":"step","caption":[],"media":null,"code":"CodingFirstContractSection3Step12.swift","runtimePreview":null},{"content":[{"inlineContent":[{"type":"text","text":"Run the tests to confirm your contract works correctly!"}],"type":"paragraph"}],"media":"CodingFirstContractSection3Step13.png","caption":[],"code":null,"type":"step","runtimePreview":null}],"title":"Testing the Contract","anchor":"Testing-the-Contract"}],"kind":"tasks"}],"references":{"CodingFirstContractSection2Step4.swift":{"fileName":"lib.swift","fileType":"swift","syntax":"swift","highlights":[{"line":4}],"content":["import Space","","@Contract public struct Counter {","    @Storage(key: \"counter\") var counter: BigUint","}"],"identifier":"CodingFirstContractSection2Step4.swift","type":"file"},"CodingFirstContractSection3Step13.png":{"variants":[{"url":"\/images\/Space\/CodingFirstContractSection3Step13.png","traits":["1x","light"]}],"identifier":"CodingFirstContractSection3Step13.png","type":"image","alt":"Xcode's test tab showing all tests passed."},"CodingFirstContractSection2Step8.swift":{"highlights":[{"line":17},{"line":18},{"line":19},{"line":20}],"fileName":"lib.swift","syntax":"swift","fileType":"swift","identifier":"CodingFirstContractSection2Step8.swift","type":"file","content":["import Space","","@Contract public struct Counter {","    @Storage(key: \"counter\") var counter: BigUint","    ","    init(initialValue: BigUint) {","        self.counter = initialValue","    }","    ","    public mutating func increase(value: BigUint) {","        self.counter = self.counter + value","    }","    ","    public mutating func decrease(value: BigUint) {","        self.counter = self.counter - value","    }","    ","    public func getCounter() -> BigUint {","        return self.counter","    }","}"]},"CodingFirstContractSection3Step7.swift":{"highlights":[{"line":15},{"line":16},{"line":17},{"line":18}],"fileName":"CounterTests.swift","type":"file","content":["import Space","import Counter","import XCTest","","let COUNTER_ADDRESS = \"counter\"","","final class CounterTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(address: COUNTER_ADDRESS)","        ]","    }","    ","    func testDeployCounterInitialValueZero() throws {","        let contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 0","        )","    }","}"],"syntax":"swift","identifier":"CodingFirstContractSection3Step7.swift","fileType":"swift"},"CodingFirstContractSection2Step2.swift":{"fileType":"swift","syntax":"swift","highlights":[{"line":1}],"content":["import Space"],"fileName":"lib.swift","type":"file","identifier":"CodingFirstContractSection2Step2.swift"},"doc://Space/tutorials/Space/FamiliarizeWithTypes#Working-with-the-Vector-Type":{"identifier":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Working-with-the-Vector-Type","kind":"section","role":"pseudoSymbol","title":"Working with the Vector Type","url":"\/tutorials\/space\/familiarizewithtypes#Working-with-the-Vector-Type","type":"section","abstract":[{"type":"text","text":"Space provides types that allow you to leverage the full potential of the SpaceVM."}]},"CodingFirstContractSection2Step3.swift":{"fileType":"swift","highlights":[{"line":2},{"line":3},{"line":4},{"line":5}],"fileName":"lib.swift","type":"file","identifier":"CodingFirstContractSection2Step3.swift","content":["import Space","","@Contract public struct Counter {","    ","}"],"syntax":"swift"},"doc://Space/tutorials/Space/CodingYourFirstContract#Testing-the-Contract":{"identifier":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract#Testing-the-Contract","title":"Testing the Contract","kind":"section","url":"\/tutorials\/space\/codingyourfirstcontract#Testing-the-Contract","type":"section","role":"pseudoSymbol","abstract":[{"type":"text","text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user."}]},"doc://Space/tutorials/Space/Getting-Started/Installing-the-Tools":{"role":"article","title":"Installing the Tools","kind":"article","abstract":[],"type":"topic","identifier":"doc:\/\/Space\/tutorials\/Space\/Getting-Started\/Installing-the-Tools","url":"\/tutorials\/space\/getting-started\/installing-the-tools"},"doc://Space/tutorials/Space/Getting-Started/Building-Your-First-Smart-Contract":{"role":"article","url":"\/tutorials\/space\/getting-started\/building-your-first-smart-contract","type":"topic","identifier":"doc:\/\/Space\/tutorials\/Space\/Getting-Started\/Building-Your-First-Smart-Contract","kind":"article","title":"Building Your First Smart Contract","abstract":[]},"doc://Space/tutorials/Space/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract":{"identifier":"doc:\/\/Space\/tutorials\/Space\/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract","abstract":[{"text":"Before writing your first smart contract with Space, ensure you have the necessary tools installed.","type":"text"}],"kind":"section","url":"\/tutorials\/space\/installingtools#Initializing-and-Compiling-Your-First-Smart-Contract","type":"section","role":"pseudoSymbol","title":"Initializing and Compiling Your First Smart Contract"},"doc://Space/tutorials/Space/CodingYourFirstContract#Initializing-the-Project":{"identifier":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract#Initializing-the-Project","title":"Initializing the Project","abstract":[{"text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user.","type":"text"}],"type":"section","role":"pseudoSymbol","url":"\/tutorials\/space\/codingyourfirstcontract#Initializing-the-Project","kind":"section"},"CodingFirstContractSection3Step1.png":{"type":"image","alt":"File tree showing newly created `CounterTests.swift`.","identifier":"CodingFirstContractSection3Step1.png","variants":[{"url":"\/images\/Space\/CodingFirstContractSection3Step1.png","traits":["1x","light"]}]},"CodingFirstContractSection2Step1.swift":{"fileType":"swift","highlights":[],"fileName":"lib.swift","type":"file","identifier":"CodingFirstContractSection2Step1.swift","content":[""],"syntax":"swift"},"doc://Space/tutorials/Space/InstallingTools#Setting-Up-the-Space-CLI":{"identifier":"doc:\/\/Space\/tutorials\/Space\/InstallingTools#Setting-Up-the-Space-CLI","title":"Setting Up the Space CLI","type":"section","url":"\/tutorials\/space\/installingtools#Setting-Up-the-Space-CLI","kind":"section","abstract":[{"type":"text","text":"Before writing your first smart contract with Space, ensure you have the necessary tools installed."}],"role":"pseudoSymbol"},"doc://Space/tutorials/Space/StoreValues#Working-with-Storage-for-Single-Value-Persistence":{"title":"Working with @Storage for Single Value Persistence","kind":"section","url":"\/tutorials\/space\/storevalues#Working-with-Storage-for-Single-Value-Persistence","role":"pseudoSymbol","identifier":"doc:\/\/Space\/tutorials\/Space\/StoreValues#Working-with-Storage-for-Single-Value-Persistence","abstract":[{"text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory.","type":"text"}],"type":"section"},"CodingFirstContractSection1Step4.png":{"type":"image","alt":"Xcode's Product menu with 'Build' highlighted.","identifier":"CodingFirstContractSection1Step4.png","variants":[{"traits":["1x","light"],"url":"\/images\/Space\/CodingFirstContractSection1Step4.png"}]},"doc://Space/tutorials/Space/SyncCalls#Declare-the-Callee-Proxy":{"title":"Declare the Callee Proxy","type":"section","kind":"section","url":"\/tutorials\/space\/synccalls#Declare-the-Callee-Proxy","abstract":[{"text":"Smart contracts can interact not only with users but also with other smart contracts. This enables more advanced protocols by leveraging existing ones. For example, you could integrate a decentralized exchange directly into your contract to perform token swaps. Decentralized applications often involve multiple contracts, each with a dedicated role, working together to achieve complex functionality—similar to microservices in backend systems.","type":"text"}],"role":"pseudoSymbol","identifier":"doc:\/\/Space\/tutorials\/Space\/SyncCalls#Declare-the-Callee-Proxy"},"CodingFirstContractSection3Step4.swift":{"highlights":[{"line":6},{"line":7},{"line":8},{"line":9}],"fileType":"swift","syntax":"swift","fileName":"CounterTests.swift","identifier":"CodingFirstContractSection3Step4.swift","type":"file","content":["import Space","import Counter","import XCTest","","let COUNTER_ADDRESS = \"counter\"","","final class CounterTests: ContractTestCase {","    ","}"]},"CodingFirstContractSection3Step12.swift":{"fileType":"swift","syntax":"swift","highlights":[{"line":87},{"line":88},{"line":89},{"line":90},{"line":91},{"line":92},{"line":93},{"line":94},{"line":95},{"line":96},{"line":97},{"line":98},{"line":99},{"line":100},{"line":101}],"content":["import Space","import Counter","import XCTest","","let COUNTER_ADDRESS = \"counter\"","","final class CounterTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(address: COUNTER_ADDRESS)","        ]","    }","    ","    func testDeployCounterInitialValueZero() throws {","        let contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 0","        )","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 0)","    }","    ","    func testDeployCounterInitialValueNonZero() throws {","        let contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 15","        )","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 15)","    }","    ","    func testIncreaseZero() throws {","        var contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 15","        )","        ","        try contract.increase(value: 0)","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 15)","    }","    ","    func testIncreaseMoreThanZero() throws {","        var contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 15","        )","        ","        try contract.increase(value: 5)","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 20)","    }","    ","    func testDecreaseZero() throws {","        var contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 15","        )","        ","        try contract.decrease(value: 0)","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 15)","    }","    ","    func testDecreaseMoreThanZero() throws {","        var contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 15","        )","        ","        try contract.decrease(value: 5)","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 10)","    }","    ","    func testDecreaseTooMuchShouldFail() throws {","        var contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 15","        )","        ","        do {","            try contract.decrease(value: 16)","            ","            XCTFail() \/\/ Decrease fails, so this line should not be executed","        } catch {","            XCTAssertEqual(error, .userError(message: \"cannot subtract because result would be negative\"))","        }","    }","}"],"fileName":"CounterTests.swift","type":"file","identifier":"CodingFirstContractSection3Step12.swift"},"doc://Space/tutorials/Space/Deep-Dive-into-Space-Concepts/Persisting-Data-Across-Executions":{"identifier":"doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Persisting-Data-Across-Executions","abstract":[],"kind":"article","url":"\/tutorials\/space\/deep-dive-into-space-concepts\/persisting-data-across-executions","type":"topic","role":"article","title":"Persisting Data Across Executions"},"doc://Space/tutorials/Space/GetInfo#Accessing-Transaction-Context-Data":{"title":"Accessing Transaction Context Data","kind":"section","url":"\/tutorials\/space\/getinfo#Accessing-Transaction-Context-Data","role":"pseudoSymbol","identifier":"doc:\/\/Space\/tutorials\/Space\/GetInfo#Accessing-Transaction-Context-Data","abstract":[{"text":"Many smart contracts rely on contextual data to execute their operations effectively. This data can include input payments, the caller’s address, the current time, the balance of a specific account, or even the contract owner.","type":"text"}],"type":"section"},"CodingFirstContractSection3Step9.swift":{"fileType":"swift","highlights":[{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34}],"fileName":"CounterTests.swift","type":"file","identifier":"CodingFirstContractSection3Step9.swift","content":["import Space","import Counter","import XCTest","","let COUNTER_ADDRESS = \"counter\"","","final class CounterTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(address: COUNTER_ADDRESS)","        ]","    }","    ","    func testDeployCounterInitialValueZero() throws {","        let contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 0","        )","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 0)","    }","    ","    func testDeployCounterInitialValueNonZero() throws {","        let contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 15","        )","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 15)","    }","}"],"syntax":"swift"},"doc://Space/tutorials/Space/CodingYourFirstContract":{"role":"project","estimatedTime":"20min","identifier":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract","abstract":[{"text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user.","type":"text"}],"type":"topic","url":"\/tutorials\/space\/codingyourfirstcontract","title":"Building Your First Smart Contract","kind":"project"},"CodingFirstContractSection2Step6.swift":{"fileType":"swift","syntax":"swift","highlights":[{"line":9},{"line":10},{"line":11},{"line":12}],"content":["import Space","","@Contract public struct Counter {","    @Storage(key: \"counter\") var counter: BigUint","    ","    init(initialValue: BigUint) {","        self.counter = initialValue","    }","    ","    public mutating func increase(value: BigUint) {","        self.counter = self.counter + value","    }","}"],"fileName":"lib.swift","type":"file","identifier":"CodingFirstContractSection2Step6.swift"},"doc://Space/tutorials/Space/SyncCalls#Perform-a-Synchronous-Call":{"abstract":[{"type":"text","text":"Smart contracts can interact not only with users but also with other smart contracts. This enables more advanced protocols by leveraging existing ones. For example, you could integrate a decentralized exchange directly into your contract to perform token swaps. Decentralized applications often involve multiple contracts, each with a dedicated role, working together to achieve complex functionality—similar to microservices in backend systems."}],"kind":"section","role":"pseudoSymbol","title":"Perform a Synchronous Call","type":"section","url":"\/tutorials\/space\/synccalls#Perform-a-Synchronous-Call","identifier":"doc:\/\/Space\/tutorials\/Space\/SyncCalls#Perform-a-Synchronous-Call"},"doc://Space/tutorials/Space/InstallingTools":{"identifier":"doc:\/\/Space\/tutorials\/Space\/InstallingTools","abstract":[{"text":"Before writing your first smart contract with Space, ensure you have the necessary tools installed.","type":"text"}],"kind":"project","url":"\/tutorials\/space\/installingtools","type":"topic","role":"project","estimatedTime":"10min","title":"Install the Necessary Tools"},"CodingFirstContractSection1Step2.png":{"type":"image","alt":"Output of `space init Counter` command.","identifier":"CodingFirstContractSection1Step2.png","variants":[{"url":"\/images\/Space\/CodingFirstContractSection1Step2.png","traits":["1x","light"]}]},"doc://Space/tutorials/Space/FamiliarizeWithTypes#Understanding-the-Buffer-Type":{"identifier":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Understanding-the-Buffer-Type","abstract":[{"text":"Space provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}],"kind":"section","url":"\/tutorials\/space\/familiarizewithtypes#Understanding-the-Buffer-Type","type":"section","role":"pseudoSymbol","title":"Understanding the Buffer Type"},"doc://Space/tutorials/Space/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges":{"role":"pseudoSymbol","abstract":[{"text":"Space provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}],"identifier":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges","url":"\/tutorials\/space\/familiarizewithtypes#Handling-Heap-Allocation-Challenges","type":"section","title":"Handling Heap Allocation Challenges","kind":"section"},"doc://Space/tutorials/Space/CodingYourFirstContract#Writing-the-Contract-Code":{"kind":"section","role":"pseudoSymbol","url":"\/tutorials\/space\/codingyourfirstcontract#Writing-the-Contract-Code","title":"Writing the Contract Code","identifier":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract#Writing-the-Contract-Code","abstract":[{"type":"text","text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user."}],"type":"section"},"doc://Space/tutorials/Space/StoreValues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage":{"url":"\/tutorials\/space\/storevalues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage","title":"Leveraging @Mapping for Dynamic Key-Value Storage","abstract":[{"text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory.","type":"text"}],"kind":"section","identifier":"doc:\/\/Space\/tutorials\/Space\/StoreValues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage","type":"section","role":"pseudoSymbol"},"doc://Space/tutorials/Space/GetInfo":{"role":"project","url":"\/tutorials\/space\/getinfo","type":"topic","estimatedTime":"10min","identifier":"doc:\/\/Space\/tutorials\/Space\/GetInfo","kind":"project","title":"Retrieving Information from the Blockchain","abstract":[{"type":"text","text":"Many smart contracts rely on contextual data to execute their operations effectively. This data can include input payments, the caller’s address, the current time, the balance of a specific account, or even the contract owner."}]},"doc://Space/tutorials/Space/StoreValues":{"title":"Persist Values Between Executions","kind":"project","url":"\/tutorials\/space\/storevalues","role":"project","estimatedTime":"15min","identifier":"doc:\/\/Space\/tutorials\/Space\/StoreValues","abstract":[{"text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory.","type":"text"}],"type":"topic"},"doc://Space/tutorials/Space/InstallingTools#Installing-Spaces-Dependencies":{"kind":"section","role":"pseudoSymbol","url":"\/tutorials\/space\/installingtools#Installing-Spaces-Dependencies","title":"Installing Space's Dependencies","identifier":"doc:\/\/Space\/tutorials\/Space\/InstallingTools#Installing-Spaces-Dependencies","abstract":[{"type":"text","text":"Before writing your first smart contract with Space, ensure you have the necessary tools installed."}],"type":"section"},"doc://Space/tutorials/Space/FamiliarizeWithTypes#Creating-Your-Own-Types":{"identifier":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Creating-Your-Own-Types","title":"Creating Your Own Types","type":"section","url":"\/tutorials\/space\/familiarizewithtypes#Creating-Your-Own-Types","abstract":[{"type":"text","text":"Space provides types that allow you to leverage the full potential of the SpaceVM."}],"kind":"section","role":"pseudoSymbol"},"doc://Space/tutorials/Space":{"identifier":"doc:\/\/Space\/tutorials\/Space","kind":"overview","role":"overview","title":"Meet Space","url":"\/tutorials\/space","type":"topic","abstract":[{"type":"text","text":"Discover how Space simplifies blockchain development using Swift. Dive into the world of Web3 with ease and efficiency."}]},"CodingFirstContractSection3Step2.swift":{"fileType":"swift","syntax":"swift","highlights":[],"content":["import Space","import Counter","import XCTest"],"fileName":"CounterTests.swift","type":"file","identifier":"CodingFirstContractSection3Step2.swift"},"InstallingToolsSection1Step1.png":{"type":"image","alt":"An empty terminal window.","identifier":"InstallingToolsSection1Step1.png","variants":[{"traits":["1x","light"],"url":"\/images\/Space\/InstallingToolsSection1Step1.png"}]},"CodingFirstContractSection2Step5.swift":{"highlights":[{"line":5},{"line":6},{"line":7},{"line":8}],"fileType":"swift","syntax":"swift","fileName":"lib.swift","identifier":"CodingFirstContractSection2Step5.swift","type":"file","content":["import Space","","@Contract public struct Counter {","    @Storage(key: \"counter\") var counter: BigUint","    ","    init(initialValue: BigUint) {","        self.counter = initialValue","    }","}"]},"CodingFirstContractSection3Step5.swift":{"fileType":"swift","highlights":[{"line":8},{"line":9},{"line":10},{"line":11},{"line":12}],"fileName":"CounterTests.swift","type":"file","identifier":"CodingFirstContractSection3Step5.swift","content":["import Space","import Counter","import XCTest","","let COUNTER_ADDRESS = \"counter\"","","final class CounterTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(address: COUNTER_ADDRESS)","        ]","    }","}"],"syntax":"swift"},"doc://Space/tutorials/Space/Deep-Dive-into-Space-Concepts/Exploring-Space's-Types":{"title":"Exploring Space's Types","kind":"article","identifier":"doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Exploring-Space's-Types","abstract":[],"type":"topic","url":"\/tutorials\/space\/deep-dive-into-space-concepts\/exploring-space's-types","role":"article"},"doc://Space/tutorials/Space/SyncCalls":{"role":"project","url":"\/tutorials\/space\/synccalls","type":"topic","estimatedTime":"15min","identifier":"doc:\/\/Space\/tutorials\/Space\/SyncCalls","kind":"project","title":"Interact with Other Contracts","abstract":[{"type":"text","text":"Smart contracts can interact not only with users but also with other smart contracts. This enables more advanced protocols by leveraging existing ones. For example, you could integrate a decentralized exchange directly into your contract to perform token swaps. Decentralized applications often involve multiple contracts, each with a dedicated role, working together to achieve complex functionality—similar to microservices in backend systems."}]},"CodingFirstContractSection2Step7.swift":{"highlights":[{"line":13},{"line":14},{"line":15},{"line":16}],"fileType":"swift","syntax":"swift","fileName":"lib.swift","identifier":"CodingFirstContractSection2Step7.swift","type":"file","content":["import Space","","@Contract public struct Counter {","    @Storage(key: \"counter\") var counter: BigUint","    ","    init(initialValue: BigUint) {","        self.counter = initialValue","    }","    ","    public mutating func increase(value: BigUint) {","        self.counter = self.counter + value","    }","    ","    public mutating func decrease(value: BigUint) {","        self.counter = self.counter - value","    }","}"]},"CodingFirstContractSection3Step3.swift":{"identifier":"CodingFirstContractSection3Step3.swift","type":"file","fileType":"swift","content":["import Space","import Counter","import XCTest","","let COUNTER_ADDRESS = \"counter\""],"syntax":"swift","highlights":[{"line":4},{"line":5}],"fileName":"CounterTests.swift"},"doc://Space/tutorials/Space/FamiliarizeWithTypes":{"identifier":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes","abstract":[{"text":"Space provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}],"kind":"project","url":"\/tutorials\/space\/familiarizewithtypes","type":"topic","role":"project","estimatedTime":"20min","title":"Exploring Space's Types"},"CodingFirstContractSection3Step10.swift":{"type":"file","fileType":"swift","identifier":"CodingFirstContractSection3Step10.swift","content":["import Space","import Counter","import XCTest","","let COUNTER_ADDRESS = \"counter\"","","final class CounterTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(address: COUNTER_ADDRESS)","        ]","    }","    ","    func testDeployCounterInitialValueZero() throws {","        let contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 0","        )","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 0)","    }","    ","    func testDeployCounterInitialValueNonZero() throws {","        let contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 15","        )","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 15)","    }","    ","    func testIncreaseZero() throws {","        var contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 15","        )","        ","        try contract.increase(value: 0)","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 15)","    }","    ","    func testIncreaseMoreThanZero() throws {","        var contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 15","        )","        ","        try contract.increase(value: 5)","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 20)","    }","}"],"fileName":"CounterTests.swift","highlights":[{"line":35},{"line":36},{"line":37},{"line":38},{"line":39},{"line":40},{"line":41},{"line":42},{"line":43},{"line":44},{"line":45},{"line":46},{"line":47},{"line":48},{"line":49},{"line":50},{"line":51},{"line":52},{"line":53},{"line":54},{"line":55},{"line":56},{"line":57},{"line":58},{"line":59},{"line":60}],"syntax":"swift"},"CodingFirstContractSection3Step11.swift":{"fileType":"swift","syntax":"swift","highlights":[{"line":61},{"line":62},{"line":63},{"line":64},{"line":65},{"line":66},{"line":67},{"line":68},{"line":69},{"line":70},{"line":71},{"line":72},{"line":73},{"line":74},{"line":75},{"line":76},{"line":77},{"line":78},{"line":79},{"line":80},{"line":81},{"line":82},{"line":83},{"line":84},{"line":85},{"line":86}],"fileName":"CounterTests.swift","type":"file","content":["import Space","import Counter","import XCTest","","let COUNTER_ADDRESS = \"counter\"","","final class CounterTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(address: COUNTER_ADDRESS)","        ]","    }","    ","    func testDeployCounterInitialValueZero() throws {","        let contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 0","        )","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 0)","    }","    ","    func testDeployCounterInitialValueNonZero() throws {","        let contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 15","        )","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 15)","    }","    ","    func testIncreaseZero() throws {","        var contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 15","        )","        ","        try contract.increase(value: 0)","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 15)","    }","    ","    func testIncreaseMoreThanZero() throws {","        var contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 15","        )","        ","        try contract.increase(value: 5)","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 20)","    }","    ","    func testDecreaseZero() throws {","        var contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 15","        )","        ","        try contract.decrease(value: 0)","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 15)","    }","    ","    func testDecreaseMoreThanZero() throws {","        var contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 15","        )","        ","        try contract.decrease(value: 5)","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 10)","    }","}"],"identifier":"CodingFirstContractSection3Step11.swift"},"CodingFirstContractSection1Step3.png":{"type":"image","alt":"Xcode project selection screen with 'Counter' highlighted.","identifier":"CodingFirstContractSection1Step3.png","variants":[{"url":"\/images\/Space\/CodingFirstContractSection1Step3.png","traits":["1x","light"]}]},"CodingFirstContractSection3Step8.swift":{"fileType":"swift","syntax":"swift","highlights":[{"line":19},{"line":20},{"line":21},{"line":22}],"fileName":"CounterTests.swift","type":"file","content":["import Space","import Counter","import XCTest","","let COUNTER_ADDRESS = \"counter\"","","final class CounterTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(address: COUNTER_ADDRESS)","        ]","    }","    ","    func testDeployCounterInitialValueZero() throws {","        let contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 0","        )","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 0)","    }","}"],"identifier":"CodingFirstContractSection3Step8.swift"},"doc://Space/tutorials/Space/Deep-Dive-into-Space-Concepts/Interact-with-Other-Contracts":{"kind":"article","title":"Interact with Other Contracts","type":"topic","identifier":"doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Interact-with-Other-Contracts","abstract":[],"url":"\/tutorials\/space\/deep-dive-into-space-concepts\/interact-with-other-contracts","role":"article"},"doc://Space/tutorials/Space/GetInfo#Accessing-Blockchain-Context-Data":{"url":"\/tutorials\/space\/getinfo#Accessing-Blockchain-Context-Data","identifier":"doc:\/\/Space\/tutorials\/Space\/GetInfo#Accessing-Blockchain-Context-Data","title":"Accessing Blockchain Context Data","type":"section","abstract":[{"type":"text","text":"Many smart contracts rely on contextual data to execute their operations effectively. This data can include input payments, the caller’s address, the current time, the balance of a specific account, or even the contract owner."}],"kind":"section","role":"pseudoSymbol"},"doc://Space/tutorials/Space/FamiliarizeWithTypes#Working-with-the-BigUint-Type":{"role":"pseudoSymbol","title":"Working with the BigUint Type","kind":"section","abstract":[{"type":"text","text":"Space provides types that allow you to leverage the full potential of the SpaceVM."}],"type":"section","identifier":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Working-with-the-BigUint-Type","url":"\/tutorials\/space\/familiarizewithtypes#Working-with-the-BigUint-Type"},"CodingFirstContractSection3Step6.swift":{"content":["import Space","import Counter","import XCTest","","let COUNTER_ADDRESS = \"counter\"","","final class CounterTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(address: COUNTER_ADDRESS)","        ]","    }","    ","    func testDeployCounterInitialValueZero() throws {","        ","    }","}"],"fileType":"swift","type":"file","fileName":"CounterTests.swift","syntax":"swift","identifier":"CodingFirstContractSection3Step6.swift","highlights":[{"line":13},{"line":14},{"line":15},{"line":16}]},"doc://Space/tutorials/Space/Deep-Dive-into-Space-Concepts/Retrieving-Information-from-the-Blockchain":{"url":"\/tutorials\/space\/deep-dive-into-space-concepts\/retrieving-information-from-the-blockchain","identifier":"doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Retrieving-Information-from-the-Blockchain","title":"Retrieving Information from the Blockchain","type":"topic","abstract":[],"kind":"article","role":"article"}}}