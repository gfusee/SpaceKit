{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/tutorials\/space\/codingyourfirstcontract"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract"},"metadata":{"category":"Getting Started","categoryPathComponent":"GettingStarted","title":"Building Your First Smart Contract","role":"project"},"hierarchy":{"modules":[{"reference":"doc:\/\/Space\/tutorials\/GettingStarted\/Installing-the-Tools","projects":[{"reference":"doc:\/\/Space\/tutorials\/Space\/InstallingTools","sections":[{"kind":"task","reference":"doc:\/\/Space\/tutorials\/Space\/InstallingTools#Installing-Spaces-Dependencies"},{"reference":"doc:\/\/Space\/tutorials\/Space\/InstallingTools#Setting-Up-the-Space-CLI","kind":"task"},{"reference":"doc:\/\/Space\/tutorials\/Space\/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract","kind":"task"}]}]},{"projects":[{"reference":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract","sections":[{"reference":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract#Initializing-the-Project","kind":"task"},{"kind":"task","reference":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract#Writing-the-Contract-Code"},{"reference":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract#Testing-the-Contract","kind":"task"}]}],"reference":"doc:\/\/Space\/tutorials\/GettingStarted\/Building-Your-First-Smart-Contract"}],"reference":"doc:\/\/Space\/tutorials\/GettingStarted","paths":[["doc:\/\/Space\/tutorials\/GettingStarted","doc:\/\/Space\/tutorials\/GettingStarted\/$volume","doc:\/\/Space\/tutorials\/GettingStarted\/Building-Your-First-Smart-Contract"]]},"sections":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user."}]}],"title":"Building Your First Smart Contract","chapter":"Building Your First Smart Contract","kind":"hero","estimatedTimeInMinutes":20},{"tasks":[{"anchor":"Initializing-the-Project","contentSection":[{"kind":"contentAndMedia","mediaPosition":"trailing","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Before writing the contract, let’s initialize the project using the Space CLI."}]}]}],"title":"Initializing the Project","stepsSection":[{"type":"step","code":null,"runtimePreview":null,"caption":[],"media":"InstallingToolsSection1Step1.png","content":[{"inlineContent":[{"text":"Open a terminal.","type":"text"}],"type":"paragraph"}]},{"runtimePreview":null,"code":null,"content":[{"inlineContent":[{"text":"Navigate to the desired directory, then run the command ","type":"text"},{"type":"codeVoice","code":"space init Counter"},{"type":"text","text":"."}],"type":"paragraph"}],"type":"step","media":"CodingFirstContractSection1Step2.png","caption":[{"inlineContent":[{"type":"text","text":"This command creates a new directory named “Counter.”"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Open the project in your preferred Swift IDE by opening the “Counter” directory."}],"type":"paragraph"}],"type":"step","media":"CodingFirstContractSection1Step3.png","code":null,"runtimePreview":null,"caption":[{"type":"paragraph","inlineContent":[{"text":"We recommend Xcode or VSCode with the official Swift extension. In this tutorial, we’ll use Xcode. For other environments like VSCode on Linux or Windows, dedicated tutorials may be available.","type":"text"}]}]},{"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In Xcode, go to "},{"type":"strong","inlineContent":[{"type":"text","text":"Product > Build"}]},{"type":"text","text":" or press "},{"type":"codeVoice","code":"⌘ + B"},{"type":"text","text":"."}]}],"runtimePreview":null,"media":"CodingFirstContractSection1Step4.png","code":null,"content":[{"type":"paragraph","inlineContent":[{"text":"(Optional) Build the project to enable macros and improve indexing in your IDE.","type":"text"}]}],"type":"step"}]},{"anchor":"Writing-the-Contract-Code","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s start coding the smart contract."}]}],"mediaPosition":"trailing"}],"title":"Writing the Contract Code","stepsSection":[{"type":"step","caption":[],"media":null,"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Open the "},{"type":"codeVoice","code":"Contracts\/Counter\/Source\/lib.swift"},{"type":"text","text":" file and delete its contents."}]}],"code":"CodingFirstContractSection2Step1.swift"},{"caption":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Note:"}]},{"type":"text","text":" Only import the Space framework. Other libraries like Foundation are not compatible with SpaceVM."}]}],"code":"CodingFirstContractSection2Step2.swift","content":[{"inlineContent":[{"text":"Import the framework by adding ","type":"text"},{"code":"import Space","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}],"type":"step","media":null,"runtimePreview":null},{"media":null,"runtimePreview":null,"caption":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"Note:"}],"type":"strong"},{"type":"text","text":" You should have only one "},{"type":"codeVoice","code":"@Contract"},{"text":" struct. The logic can be spread across multiple files, but the ","type":"text"},{"code":"@Contract","type":"codeVoice"},{"type":"text","text":" struct remains central."}],"type":"paragraph"}],"code":"CodingFirstContractSection2Step3.swift","content":[{"inlineContent":[{"type":"text","text":"Declare the contract by annotating a struct with "},{"type":"codeVoice","code":"@Contract"},{"text":". For this project, we’ll declare the ","type":"text"},{"type":"codeVoice","code":"Counter"},{"type":"text","text":" contract."}],"type":"paragraph"}],"type":"step"},{"content":[{"inlineContent":[{"type":"text","text":"To persist the counter across executions, declare it in the contract’s storage with "},{"code":"@Storage(key: \"counter\")","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}],"media":null,"type":"step","caption":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Note:"}]},{"type":"text","text":" The "},{"type":"codeVoice","code":"BigUint"},{"type":"text","text":" type handles arbitrarily large numbers, so there’s no risk of overflow."}]}],"code":"CodingFirstContractSection2Step4.swift","runtimePreview":null},{"content":[{"inlineContent":[{"text":"Define the initializer for the contract, which is executed only once during deployment to set the initial counter value.","type":"text"}],"type":"paragraph"}],"caption":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Note:"}]},{"type":"text","text":" The initializer is called only when the contract is deployed."}]}],"runtimePreview":null,"type":"step","media":null,"code":"CodingFirstContractSection2Step5.swift"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create an endpoint "},{"type":"codeVoice","code":"increase"},{"type":"text","text":" to allow users to increment the counter. The function takes a single user-provided parameter indicating how much to increment the counter."}]}],"media":null,"code":"CodingFirstContractSection2Step6.swift","runtimePreview":null,"caption":[],"type":"step"},{"content":[{"type":"paragraph","inlineContent":[{"text":"Similarly, create the ","type":"text"},{"type":"codeVoice","code":"decrease"},{"type":"text","text":" endpoint to decrement the counter."}]}],"media":null,"caption":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Note:"}]},{"type":"text","text":" The "},{"type":"codeVoice","code":"BigUint"},{"type":"text","text":" type cannot be negative, so if the operation results in a negative value, the transaction will fail without changes being committed."}],"type":"paragraph"}],"type":"step","code":"CodingFirstContractSection2Step7.swift","runtimePreview":null},{"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"To allow users or other contracts to retrieve the counter’s value, create a view function ("},{"code":"getCounter","type":"codeVoice"},{"type":"text","text":"), which does not modify the contract’s state."}]}],"type":"step","media":null,"caption":[],"code":"CodingFirstContractSection2Step8.swift"}]},{"stepsSection":[{"caption":[],"media":"CodingFirstContractSection3Step1.png","code":null,"type":"step","content":[{"inlineContent":[{"text":"Open the ","type":"text"},{"code":"Contracts\/Counter\/Tests\/CounterTests","type":"codeVoice"},{"type":"text","text":" directory. Delete any files and create a new file named "},{"type":"codeVoice","code":"CounterTests.swift"},{"text":".","type":"text"}],"type":"paragraph"}],"runtimePreview":null},{"type":"step","content":[{"inlineContent":[{"type":"text","text":"Import the necessary frameworks: Space, your contract, and XCTest."}],"type":"paragraph"}],"caption":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Note:"}]},{"type":"text","text":" XCTest is the official tool for writing unit tests in Swift."}]}],"media":null,"code":"CodingFirstContractSection3Step2.swift","runtimePreview":null},{"type":"step","caption":[],"content":[{"type":"paragraph","inlineContent":[{"text":"Declare the contract’s address, as SwiftVM assigns a deterministic address to our contract.","type":"text"}]}],"media":null,"code":"CodingFirstContractSection3Step3.swift","runtimePreview":null},{"content":[{"type":"paragraph","inlineContent":[{"text":"Create a class for the tests, inheriting from ","type":"text"},{"type":"codeVoice","code":"ContractTestCase"},{"type":"text","text":"."}]}],"media":null,"caption":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Note:"}]},{"type":"text","text":" Avoid overriding the "},{"type":"codeVoice","code":"setUp"},{"type":"text","text":" and "},{"code":"tearDown","type":"codeVoice"},{"type":"text","text":" methods."}]}],"code":"CodingFirstContractSection3Step4.swift","type":"step","runtimePreview":null},{"code":"CodingFirstContractSection3Step5.swift","runtimePreview":null,"caption":[],"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Override the ","type":"text"},{"code":"initialAccounts","type":"codeVoice"},{"type":"text","text":" property to declare the contract’s address in SwiftVM."}]}],"media":null},{"type":"step","code":"CodingFirstContractSection3Step6.swift","content":[{"type":"paragraph","inlineContent":[{"text":"Create the first unit test to verify deploying the contract with an initial counter value of zero.","type":"text"}]}],"caption":[],"media":null,"runtimePreview":null},{"content":[{"inlineContent":[{"type":"text","text":"Deploy the contract with an initial value of 0 using the generated "},{"code":"testable","type":"codeVoice"},{"text":" function.","type":"text"}],"type":"paragraph"}],"media":null,"code":"CodingFirstContractSection3Step7.swift","caption":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Note:"}]},{"type":"text","text":" This function allows you to catch any errors during execution."}]}],"type":"step","runtimePreview":null},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Call the "},{"type":"codeVoice","code":"getCounter"},{"type":"text","text":" view to assert the counter is 0."}]}],"runtimePreview":null,"type":"step","caption":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Note:"}]},{"type":"text","text":" Space generates functions for contract views and endpoints."}]}],"code":"CodingFirstContractSection3Step8.swift","media":null},{"runtimePreview":null,"media":null,"type":"step","content":[{"inlineContent":[{"type":"text","text":"Add a unit test to verify deploying the contract with a non-zero initial value."}],"type":"paragraph"}],"caption":[],"code":"CodingFirstContractSection3Step9.swift"},{"caption":[],"type":"step","media":null,"code":"CodingFirstContractSection3Step10.swift","content":[{"inlineContent":[{"type":"text","text":"Create unit tests for the "},{"type":"codeVoice","code":"increase"},{"type":"text","text":" endpoint, similar to the deployment tests."}],"type":"paragraph"}],"runtimePreview":null},{"runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"Repeat for the "},{"type":"codeVoice","code":"decrease"},{"type":"text","text":" endpoint."}],"type":"paragraph"}],"type":"step","media":null,"code":"CodingFirstContractSection3Step11.swift","caption":[]},{"code":"CodingFirstContractSection3Step12.swift","runtimePreview":null,"media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add a test to ensure failure when trying to decrease the counter below zero."}]}],"caption":[],"type":"step"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Run the tests to confirm your contract works correctly!"}]}],"type":"step","caption":[],"code":null,"media":"CodingFirstContractSection3Step13.png","runtimePreview":null}],"anchor":"Testing-the-Contract","contentSection":[{"mediaPosition":"trailing","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Space includes a built-in emulator called SwiftVM, which allows you to test your contract in the Swift environment."}]}],"kind":"contentAndMedia"}],"title":"Testing the Contract"}],"kind":"tasks"}],"kind":"project","schemaVersion":{"minor":3,"patch":0,"major":0},"references":{"CodingFirstContractSection3Step1.png":{"alt":"File tree showing newly created `CounterTests.swift`.","variants":[{"url":"\/images\/Space\/CodingFirstContractSection3Step1.png","traits":["1x","light"]}],"identifier":"CodingFirstContractSection3Step1.png","type":"image"},"CodingFirstContractSection3Step5.swift":{"highlights":[{"line":8},{"line":9},{"line":10},{"line":11},{"line":12}],"fileName":"CounterTests.swift","syntax":"swift","type":"file","fileType":"swift","content":["import Space","import Counter","import XCTest","","let COUNTER_ADDRESS = \"counter\"","","final class CounterTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(address: COUNTER_ADDRESS)","        ]","    }","}"],"identifier":"CodingFirstContractSection3Step5.swift"},"CodingFirstContractSection3Step3.swift":{"fileType":"swift","syntax":"swift","type":"file","highlights":[{"line":4},{"line":5}],"identifier":"CodingFirstContractSection3Step3.swift","fileName":"CounterTests.swift","content":["import Space","import Counter","import XCTest","","let COUNTER_ADDRESS = \"counter\""]},"CodingFirstContractSection2Step5.swift":{"fileName":"lib.swift","fileType":"swift","identifier":"CodingFirstContractSection2Step5.swift","content":["import Space","","@Contract public struct Counter {","    @Storage(key: \"counter\") var counter: BigUint","    ","    init(initialValue: BigUint) {","        self.counter = initialValue","    }","}"],"syntax":"swift","type":"file","highlights":[{"line":5},{"line":6},{"line":7},{"line":8}]},"CodingFirstContractSection1Step2.png":{"identifier":"CodingFirstContractSection1Step2.png","alt":"Output of `space init Counter` command.","type":"image","variants":[{"traits":["1x","light"],"url":"\/images\/Space\/CodingFirstContractSection1Step2.png"}]},"CodingFirstContractSection3Step7.swift":{"content":["import Space","import Counter","import XCTest","","let COUNTER_ADDRESS = \"counter\"","","final class CounterTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(address: COUNTER_ADDRESS)","        ]","    }","    ","    func testDeployCounterInitialValueZero() throws {","        let contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 0","        )","    }","}"],"syntax":"swift","fileType":"swift","highlights":[{"line":15},{"line":16},{"line":17},{"line":18}],"type":"file","identifier":"CodingFirstContractSection3Step7.swift","fileName":"CounterTests.swift"},"CodingFirstContractSection2Step6.swift":{"fileType":"swift","syntax":"swift","type":"file","highlights":[{"line":9},{"line":10},{"line":11},{"line":12}],"identifier":"CodingFirstContractSection2Step6.swift","fileName":"lib.swift","content":["import Space","","@Contract public struct Counter {","    @Storage(key: \"counter\") var counter: BigUint","    ","    init(initialValue: BigUint) {","        self.counter = initialValue","    }","    ","    public mutating func increase(value: BigUint) {","        self.counter = self.counter + value","    }","}"]},"CodingFirstContractSection3Step6.swift":{"highlights":[{"line":13},{"line":14},{"line":15},{"line":16}],"syntax":"swift","fileName":"CounterTests.swift","type":"file","fileType":"swift","content":["import Space","import Counter","import XCTest","","let COUNTER_ADDRESS = \"counter\"","","final class CounterTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(address: COUNTER_ADDRESS)","        ]","    }","    ","    func testDeployCounterInitialValueZero() throws {","        ","    }","}"],"identifier":"CodingFirstContractSection3Step6.swift"},"CodingFirstContractSection2Step4.swift":{"content":["import Space","","@Contract public struct Counter {","    @Storage(key: \"counter\") var counter: BigUint","}"],"syntax":"swift","fileType":"swift","highlights":[{"line":4}],"type":"file","identifier":"CodingFirstContractSection2Step4.swift","fileName":"lib.swift"},"CodingFirstContractSection3Step11.swift":{"fileName":"CounterTests.swift","highlights":[{"line":61},{"line":62},{"line":63},{"line":64},{"line":65},{"line":66},{"line":67},{"line":68},{"line":69},{"line":70},{"line":71},{"line":72},{"line":73},{"line":74},{"line":75},{"line":76},{"line":77},{"line":78},{"line":79},{"line":80},{"line":81},{"line":82},{"line":83},{"line":84},{"line":85},{"line":86}],"content":["import Space","import Counter","import XCTest","","let COUNTER_ADDRESS = \"counter\"","","final class CounterTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(address: COUNTER_ADDRESS)","        ]","    }","    ","    func testDeployCounterInitialValueZero() throws {","        let contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 0","        )","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 0)","    }","    ","    func testDeployCounterInitialValueNonZero() throws {","        let contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 15","        )","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 15)","    }","    ","    func testIncreaseZero() throws {","        var contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 15","        )","        ","        try contract.increase(value: 0)","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 15)","    }","    ","    func testIncreaseMoreThanZero() throws {","        var contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 15","        )","        ","        try contract.increase(value: 5)","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 20)","    }","    ","    func testDecreaseZero() throws {","        var contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 15","        )","        ","        try contract.decrease(value: 0)","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 15)","    }","    ","    func testDecreaseMoreThanZero() throws {","        var contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 15","        )","        ","        try contract.decrease(value: 5)","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 10)","    }","}"],"type":"file","fileType":"swift","syntax":"swift","identifier":"CodingFirstContractSection3Step11.swift"},"CodingFirstContractSection2Step3.swift":{"identifier":"CodingFirstContractSection2Step3.swift","type":"file","syntax":"swift","fileType":"swift","fileName":"lib.swift","highlights":[{"line":2},{"line":3},{"line":4},{"line":5}],"content":["import Space","","@Contract public struct Counter {","    ","}"]},"CodingFirstContractSection3Step13.png":{"identifier":"CodingFirstContractSection3Step13.png","alt":"Xcode's test tab showing all tests passed.","variants":[{"url":"\/images\/Space\/CodingFirstContractSection3Step13.png","traits":["1x","light"]}],"type":"image"},"CodingFirstContractSection1Step3.png":{"type":"image","alt":"Xcode project selection screen with 'Counter' highlighted.","variants":[{"traits":["1x","light"],"url":"\/images\/Space\/CodingFirstContractSection1Step3.png"}],"identifier":"CodingFirstContractSection1Step3.png"},"doc://Space/tutorials/Space/InstallingTools#Setting-Up-the-Space-CLI":{"url":"\/tutorials\/space\/installingtools#Setting-Up-the-Space-CLI","abstract":[{"type":"text","text":"Before writing your first smart contract with Space, ensure you have the necessary tools installed."}],"kind":"section","identifier":"doc:\/\/Space\/tutorials\/Space\/InstallingTools#Setting-Up-the-Space-CLI","title":"Setting Up the Space CLI","type":"section","role":"pseudoSymbol"},"doc://Space/tutorials/GettingStarted":{"url":"\/tutorials\/gettingstarted","abstract":[{"type":"text","text":"Discover how Space simplifies blockchain development using Swift. Dive into the world of Web3 with ease and efficiency."}],"identifier":"doc:\/\/Space\/tutorials\/GettingStarted","kind":"overview","title":"Meet Space","role":"overview","type":"topic"},"CodingFirstContractSection2Step7.swift":{"fileName":"lib.swift","fileType":"swift","identifier":"CodingFirstContractSection2Step7.swift","content":["import Space","","@Contract public struct Counter {","    @Storage(key: \"counter\") var counter: BigUint","    ","    init(initialValue: BigUint) {","        self.counter = initialValue","    }","    ","    public mutating func increase(value: BigUint) {","        self.counter = self.counter + value","    }","    ","    public mutating func decrease(value: BigUint) {","        self.counter = self.counter - value","    }","}"],"highlights":[{"line":13},{"line":14},{"line":15},{"line":16}],"type":"file","syntax":"swift"},"CodingFirstContractSection1Step4.png":{"variants":[{"url":"\/images\/Space\/CodingFirstContractSection1Step4.png","traits":["1x","light"]}],"type":"image","alt":"Xcode's Product menu with 'Build' highlighted.","identifier":"CodingFirstContractSection1Step4.png"},"doc://Space/tutorials/GettingStarted/Installing-the-Tools":{"kind":"article","url":"\/tutorials\/gettingstarted\/installing-the-tools","type":"topic","title":"Installing the Tools","identifier":"doc:\/\/Space\/tutorials\/GettingStarted\/Installing-the-Tools","role":"article","abstract":[]},"CodingFirstContractSection3Step12.swift":{"identifier":"CodingFirstContractSection3Step12.swift","fileType":"swift","highlights":[{"line":87},{"line":88},{"line":89},{"line":90},{"line":91},{"line":92},{"line":93},{"line":94},{"line":95},{"line":96},{"line":97},{"line":98},{"line":99},{"line":100},{"line":101}],"type":"file","syntax":"swift","content":["import Space","import Counter","import XCTest","","let COUNTER_ADDRESS = \"counter\"","","final class CounterTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(address: COUNTER_ADDRESS)","        ]","    }","    ","    func testDeployCounterInitialValueZero() throws {","        let contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 0","        )","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 0)","    }","    ","    func testDeployCounterInitialValueNonZero() throws {","        let contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 15","        )","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 15)","    }","    ","    func testIncreaseZero() throws {","        var contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 15","        )","        ","        try contract.increase(value: 0)","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 15)","    }","    ","    func testIncreaseMoreThanZero() throws {","        var contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 15","        )","        ","        try contract.increase(value: 5)","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 20)","    }","    ","    func testDecreaseZero() throws {","        var contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 15","        )","        ","        try contract.decrease(value: 0)","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 15)","    }","    ","    func testDecreaseMoreThanZero() throws {","        var contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 15","        )","        ","        try contract.decrease(value: 5)","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 10)","    }","    ","    func testDecreaseTooMuchShouldFail() throws {","        let contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 15","        )","        ","        do {","            try contract.decrease(value: 16)","            ","            XCTFail() \/\/ Decrease fails, so this line should not be executed","        } catch {","            XCTAssertEqual(error, .userError(message: \"cannot subtract because result would be negative\"))","        }","    }","}"],"fileName":"CounterTests.swift"},"doc://Space/tutorials/Space/InstallingTools#Installing-Spaces-Dependencies":{"url":"\/tutorials\/space\/installingtools#Installing-Spaces-Dependencies","abstract":[{"type":"text","text":"Before writing your first smart contract with Space, ensure you have the necessary tools installed."}],"kind":"section","identifier":"doc:\/\/Space\/tutorials\/Space\/InstallingTools#Installing-Spaces-Dependencies","title":"Installing Space's Dependencies","type":"section","role":"pseudoSymbol"},"doc://Space/tutorials/Space/CodingYourFirstContract#Writing-the-Contract-Code":{"kind":"section","url":"\/tutorials\/space\/codingyourfirstcontract#Writing-the-Contract-Code","type":"section","title":"Writing the Contract Code","identifier":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract#Writing-the-Contract-Code","role":"pseudoSymbol","abstract":[{"type":"text","text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user."}]},"doc://Space/tutorials/Space/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract":{"kind":"section","url":"\/tutorials\/space\/installingtools#Initializing-and-Compiling-Your-First-Smart-Contract","type":"section","title":"Initializing and Compiling Your First Smart Contract","identifier":"doc:\/\/Space\/tutorials\/Space\/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract","role":"pseudoSymbol","abstract":[{"type":"text","text":"Before writing your first smart contract with Space, ensure you have the necessary tools installed."}]},"doc://Space/tutorials/Space/InstallingTools":{"abstract":[{"type":"text","text":"Before writing your first smart contract with Space, ensure you have the necessary tools installed."}],"identifier":"doc:\/\/Space\/tutorials\/Space\/InstallingTools","estimatedTime":"10min","role":"project","kind":"project","type":"topic","title":"Install the Necessary Tools","url":"\/tutorials\/space\/installingtools"},"CodingFirstContractSection2Step1.swift":{"type":"file","content":[""],"fileType":"swift","syntax":"swift","highlights":[],"identifier":"CodingFirstContractSection2Step1.swift","fileName":"lib.swift"},"CodingFirstContractSection3Step10.swift":{"content":["import Space","import Counter","import XCTest","","let COUNTER_ADDRESS = \"counter\"","","final class CounterTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(address: COUNTER_ADDRESS)","        ]","    }","    ","    func testDeployCounterInitialValueZero() throws {","        let contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 0","        )","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 0)","    }","    ","    func testDeployCounterInitialValueNonZero() throws {","        let contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 15","        )","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 15)","    }","    ","    func testIncreaseZero() throws {","        var contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 15","        )","        ","        try contract.increase(value: 0)","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 15)","    }","    ","    func testIncreaseMoreThanZero() throws {","        var contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 15","        )","        ","        try contract.increase(value: 5)","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 20)","    }","}"],"identifier":"CodingFirstContractSection3Step10.swift","syntax":"swift","type":"file","fileType":"swift","highlights":[{"line":35},{"line":36},{"line":37},{"line":38},{"line":39},{"line":40},{"line":41},{"line":42},{"line":43},{"line":44},{"line":45},{"line":46},{"line":47},{"line":48},{"line":49},{"line":50},{"line":51},{"line":52},{"line":53},{"line":54},{"line":55},{"line":56},{"line":57},{"line":58},{"line":59},{"line":60}],"fileName":"CounterTests.swift"},"CodingFirstContractSection3Step8.swift":{"type":"file","content":["import Space","import Counter","import XCTest","","let COUNTER_ADDRESS = \"counter\"","","final class CounterTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(address: COUNTER_ADDRESS)","        ]","    }","    ","    func testDeployCounterInitialValueZero() throws {","        let contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 0","        )","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 0)","    }","}"],"fileType":"swift","syntax":"swift","highlights":[{"line":19},{"line":20},{"line":21},{"line":22}],"identifier":"CodingFirstContractSection3Step8.swift","fileName":"CounterTests.swift"},"CodingFirstContractSection3Step2.swift":{"content":["import Space","import Counter","import XCTest"],"identifier":"CodingFirstContractSection3Step2.swift","syntax":"swift","type":"file","fileType":"swift","highlights":[],"fileName":"CounterTests.swift"},"doc://Space/tutorials/GettingStarted/Building-Your-First-Smart-Contract":{"kind":"article","url":"\/tutorials\/gettingstarted\/building-your-first-smart-contract","type":"topic","title":"Building Your First Smart Contract","identifier":"doc:\/\/Space\/tutorials\/GettingStarted\/Building-Your-First-Smart-Contract","role":"article","abstract":[]},"doc://Space/tutorials/Space/CodingYourFirstContract":{"url":"\/tutorials\/space\/codingyourfirstcontract","identifier":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract","role":"project","estimatedTime":"20min","type":"topic","abstract":[{"text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user.","type":"text"}],"kind":"project","title":"Building Your First Smart Contract"},"InstallingToolsSection1Step1.png":{"alt":"An empty terminal window.","variants":[{"url":"\/images\/Space\/InstallingToolsSection1Step1.png","traits":["1x","light"]}],"type":"image","identifier":"InstallingToolsSection1Step1.png"},"CodingFirstContractSection2Step2.swift":{"content":["import Space"],"identifier":"CodingFirstContractSection2Step2.swift","syntax":"swift","type":"file","fileType":"swift","highlights":[{"line":1}],"fileName":"lib.swift"},"doc://Space/tutorials/Space/CodingYourFirstContract#Testing-the-Contract":{"type":"section","url":"\/tutorials\/space\/codingyourfirstcontract#Testing-the-Contract","kind":"section","title":"Testing the Contract","identifier":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract#Testing-the-Contract","role":"pseudoSymbol","abstract":[{"type":"text","text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user."}]},"CodingFirstContractSection3Step9.swift":{"type":"file","content":["import Space","import Counter","import XCTest","","let COUNTER_ADDRESS = \"counter\"","","final class CounterTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(address: COUNTER_ADDRESS)","        ]","    }","    ","    func testDeployCounterInitialValueZero() throws {","        let contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 0","        )","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 0)","    }","    ","    func testDeployCounterInitialValueNonZero() throws {","        let contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 15","        )","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 15)","    }","}"],"fileType":"swift","syntax":"swift","highlights":[{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34}],"identifier":"CodingFirstContractSection3Step9.swift","fileName":"CounterTests.swift"},"CodingFirstContractSection2Step8.swift":{"identifier":"CodingFirstContractSection2Step8.swift","syntax":"swift","content":["import Space","","@Contract public struct Counter {","    @Storage(key: \"counter\") var counter: BigUint","    ","    init(initialValue: BigUint) {","        self.counter = initialValue","    }","    ","    public mutating func increase(value: BigUint) {","        self.counter = self.counter + value","    }","    ","    public mutating func decrease(value: BigUint) {","        self.counter = self.counter - value","    }","    ","    public func getCounter() -> BigUint {","        return self.counter","    }","}"],"type":"file","fileType":"swift","highlights":[{"line":17},{"line":18},{"line":19},{"line":20}],"fileName":"lib.swift"},"doc://Space/tutorials/Space/CodingYourFirstContract#Initializing-the-Project":{"url":"\/tutorials\/space\/codingyourfirstcontract#Initializing-the-Project","abstract":[{"type":"text","text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user."}],"kind":"section","identifier":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract#Initializing-the-Project","title":"Initializing the Project","type":"section","role":"pseudoSymbol"},"CodingFirstContractSection3Step4.swift":{"type":"file","content":["import Space","import Counter","import XCTest","","let COUNTER_ADDRESS = \"counter\"","","final class CounterTests: ContractTestCase {","    ","}"],"fileType":"swift","syntax":"swift","highlights":[{"line":6},{"line":7},{"line":8},{"line":9}],"identifier":"CodingFirstContractSection3Step4.swift","fileName":"CounterTests.swift"}}}