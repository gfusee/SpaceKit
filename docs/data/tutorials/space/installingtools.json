{"metadata":{"category":"Space","title":"Install the Necessary Tools","role":"project","categoryPathComponent":"Space"},"schemaVersion":{"minor":3,"patch":0,"major":0},"identifier":{"url":"doc:\/\/Space\/tutorials\/Space\/InstallingTools","interfaceLanguage":"swift"},"hierarchy":{"modules":[{"reference":"doc:\/\/Space\/tutorials\/Space\/Getting-Started\/Installing-the-Tools","projects":[{"reference":"doc:\/\/Space\/tutorials\/Space\/InstallingTools","sections":[{"reference":"doc:\/\/Space\/tutorials\/Space\/InstallingTools#Installing-Spaces-Dependencies","kind":"task"},{"kind":"task","reference":"doc:\/\/Space\/tutorials\/Space\/InstallingTools#Setting-Up-the-Space-CLI"},{"reference":"doc:\/\/Space\/tutorials\/Space\/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract","kind":"task"}]}]},{"projects":[{"sections":[{"reference":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract#Initializing-the-Project","kind":"task"},{"reference":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract#Writing-the-Contract-Code","kind":"task"},{"reference":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract#Testing-the-Contract","kind":"task"}],"reference":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract"}],"reference":"doc:\/\/Space\/tutorials\/Space\/Getting-Started\/Building-Your-First-Smart-Contract"},{"projects":[{"sections":[{"reference":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges","kind":"task"},{"reference":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Understanding-the-Buffer-Type","kind":"task"},{"reference":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Working-with-the-BigUint-Type","kind":"task"},{"reference":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Working-with-the-Vector-Type","kind":"task"},{"kind":"task","reference":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Creating-Your-Own-Types"}],"reference":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes"}],"reference":"doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Exploring-Space's-Types"},{"reference":"doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Persisting-Data-Across-Executions","projects":[{"reference":"doc:\/\/Space\/tutorials\/Space\/StoreValues","sections":[{"reference":"doc:\/\/Space\/tutorials\/Space\/StoreValues#Working-with-Storage-for-Single-Value-Persistence","kind":"task"},{"reference":"doc:\/\/Space\/tutorials\/Space\/StoreValues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage","kind":"task"}]}]},{"reference":"doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Retrieving-Information-from-the-Blockchain","projects":[{"reference":"doc:\/\/Space\/tutorials\/Space\/GetInfo","sections":[{"kind":"task","reference":"doc:\/\/Space\/tutorials\/Space\/GetInfo#Accessing-Transaction-Context-Data"},{"kind":"task","reference":"doc:\/\/Space\/tutorials\/Space\/GetInfo#Accessing-Blockchain-Context-Data"}]}]},{"reference":"doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Interact-with-Other-Contracts","projects":[{"reference":"doc:\/\/Space\/tutorials\/Space\/SyncCalls","sections":[{"reference":"doc:\/\/Space\/tutorials\/Space\/SyncCalls#Declare-the-Callee-Proxy","kind":"task"},{"reference":"doc:\/\/Space\/tutorials\/Space\/SyncCalls#Perform-a-Synchronous-Call","kind":"task"}]}]}],"paths":[["doc:\/\/Space\/tutorials\/Space","doc:\/\/Space\/tutorials\/Space\/Getting-Started","doc:\/\/Space\/tutorials\/Space\/Getting-Started\/Installing-the-Tools"]],"reference":"doc:\/\/Space\/tutorials\/Space"},"variants":[{"paths":["\/tutorials\/space\/installingtools"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[{"estimatedTimeInMinutes":10,"kind":"hero","title":"Install the Necessary Tools","chapter":"Installing the Tools","content":[{"inlineContent":[{"type":"text","text":"Before writing your first smart contract with Space, ensure you have the necessary tools installed."}],"type":"paragraph"}]},{"kind":"tasks","tasks":[{"title":"Installing Space's Dependencies","contentSection":[{"content":[{"inlineContent":[{"type":"text","text":"Space relies on several dependencies, which you need to install on your system."}],"type":"paragraph"}],"mediaPosition":"trailing","kind":"contentAndMedia"}],"anchor":"Installing-Spaces-Dependencies","stepsSection":[{"type":"step","caption":[],"media":"InstallingToolsSection1Step1.png","runtimePreview":null,"code":null,"content":[{"inlineContent":[{"type":"text","text":"Open a terminal to begin."}],"type":"paragraph"}]},{"media":"InstallingToolsSection1Step2.png","caption":[{"type":"paragraph","inlineContent":[{"text":"If necessary, install or update Swift by following the instructions on ","type":"text"},{"identifier":"https:\/\/www.swift.org\/install\/macos\/","type":"reference","isActive":true},{"text":".","type":"text"}]}],"runtimePreview":null,"content":[{"inlineContent":[{"text":"Check the Swift version by running ","type":"text"},{"type":"codeVoice","code":"swift --version"},{"text":". Space requires Swift 6 or later.","type":"text"}],"type":"paragraph"}],"type":"step","code":null},{"runtimePreview":null,"media":"InstallingToolsSection1Step3.png","code":null,"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If "},{"code":"git","type":"codeVoice"},{"type":"text","text":" is not installed, use your preferred method to install it."}]}],"type":"step","content":[{"inlineContent":[{"type":"text","text":"Ensure "},{"type":"codeVoice","code":"git"},{"text":" is installed. The Space CLI requires it to retrieve important files.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Ensure that Docker is installed and running. Docker is required by the Space CLI to compile smart contracts."}]}],"type":"step","runtimePreview":null,"caption":[{"inlineContent":[{"type":"text","text":"If Docker is not installed, you can download and install it by following the steps on "},{"identifier":"https:\/\/docs.docker.com\/get-started\/get-docker\/","isActive":true,"type":"reference"},{"text":".","type":"text"}],"type":"paragraph"}],"media":"InstallingToolsSection1Step4.png","code":null}]},{"stepsSection":[{"media":"InstallingToolsSection1Step1.png","type":"step","code":null,"runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"Open a terminal."}],"type":"paragraph"}],"caption":[]},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Run the installation command: ","type":"text"},{"type":"codeVoice","code":"curl -sSL https:\/\/raw.githubusercontent.com\/gfusee\/space-cli\/refs\/heads\/main\/install.sh | bash"}]}],"caption":[{"type":"paragraph","inlineContent":[{"text":"After the installation, please restart your terminal to reload your PATH environment variable.","type":"text"}]}],"media":"InstallingToolsSection2Step2.png","code":null,"runtimePreview":null},{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Verify the Space CLI installation by running "},{"type":"codeVoice","code":"space --help"},{"text":".","type":"text"}]}],"caption":[],"runtimePreview":null,"type":"step","media":"InstallingToolsSection2Step3.png"}],"title":"Setting Up the Space CLI","anchor":"Setting-Up-the-Space-CLI","contentSection":[{"mediaPosition":"trailing","content":[{"type":"paragraph","inlineContent":[{"text":"The Space CLI is your primary tool for using the Space framework. You’ll use it to initialize and compile your smart contracts.","type":"text"}]}],"kind":"contentAndMedia"}]},{"anchor":"Initializing-and-Compiling-Your-First-Smart-Contract","stepsSection":[{"code":null,"runtimePreview":null,"media":"InstallingToolsSection1Step1.png","caption":[],"type":"step","content":[{"inlineContent":[{"type":"text","text":"Open a terminal."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Navigate to the desired directory and run ","type":"text"},{"type":"codeVoice","code":"space init MyFirstSpaceProject"},{"text":".","type":"text"}]}],"code":null,"runtimePreview":null,"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This command creates a new project directory named "},{"type":"codeVoice","code":"MyFirstSpaceProject"},{"text":".","type":"text"}]}],"type":"step","media":"InstallingToolsSection3Step2.png"},{"code":null,"content":[{"inlineContent":[{"type":"text","text":"Navigate to the newly created "},{"code":"MyFirstSpaceProject","type":"codeVoice"},{"text":" directory.","type":"text"}],"type":"paragraph"}],"type":"step","media":"InstallingToolsSection3Step3.png","caption":[],"runtimePreview":null},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Build the smart contract by running "},{"type":"codeVoice","code":"space contract build"},{"type":"text","text":"."}]}],"type":"step","media":"InstallingToolsSection3Step4.png","caption":[{"type":"paragraph","inlineContent":[{"text":"Look for the “WASM output:” line, which indicates a successful compilation. The ","type":"text"},{"code":".wasm","type":"codeVoice"},{"type":"text","text":" file is your compiled contract."}]}],"code":null,"runtimePreview":null}],"title":"Initializing and Compiling Your First Smart Contract","contentSection":[{"content":[{"inlineContent":[{"text":"Now, use the Space CLI to create and compile your first smart contract project.","type":"text"}],"type":"paragraph"}],"mediaPosition":"trailing","kind":"contentAndMedia"}]}]},{"kind":"callToAction","action":{"overridingTitle":"Get started","type":"reference","isActive":true,"identifier":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract","overridingTitleInlineContent":[{"text":"Get started","type":"text"}]},"title":"Building Your First Smart Contract","abstract":[{"type":"text","text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user."}],"featuredEyebrow":"Tutorial"}],"kind":"project","references":{"InstallingToolsSection2Step3.png":{"alt":"Output of `space --help`.","type":"image","identifier":"InstallingToolsSection2Step3.png","variants":[{"url":"\/images\/Space\/InstallingToolsSection2Step3.png","traits":["1x","light"]}]},"InstallingToolsSection3Step3.png":{"identifier":"InstallingToolsSection3Step3.png","type":"image","alt":"Command output after navigating to the directory.","variants":[{"url":"\/images\/Space\/InstallingToolsSection3Step3.png","traits":["1x","light"]}]},"InstallingToolsSection1Step4.png":{"identifier":"InstallingToolsSection1Step4.png","type":"image","alt":"Terminal output showing Docker is running.","variants":[{"traits":["1x","light"],"url":"\/images\/Space\/InstallingToolsSection1Step4.png"}]},"doc://Space/tutorials/Space/StoreValues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage":{"type":"section","role":"pseudoSymbol","url":"\/tutorials\/space\/storevalues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage","title":"Leveraging @Mapping for Dynamic Key-Value Storage","abstract":[{"text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory.","type":"text"}],"kind":"section","identifier":"doc:\/\/Space\/tutorials\/Space\/StoreValues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage"},"doc://Space/tutorials/Space/InstallingTools#Installing-Spaces-Dependencies":{"identifier":"doc:\/\/Space\/tutorials\/Space\/InstallingTools#Installing-Spaces-Dependencies","type":"section","url":"\/tutorials\/space\/installingtools#Installing-Spaces-Dependencies","title":"Installing Space's Dependencies","abstract":[{"text":"Before writing your first smart contract with Space, ensure you have the necessary tools installed.","type":"text"}],"kind":"section","role":"pseudoSymbol"},"doc://Space/tutorials/Space":{"title":"Meet Space","kind":"overview","role":"overview","type":"topic","identifier":"doc:\/\/Space\/tutorials\/Space","url":"\/tutorials\/space","abstract":[{"text":"Discover how Space simplifies blockchain development using Swift. Dive into the world of Web3 with ease and efficiency.","type":"text"}]},"doc://Space/tutorials/Space/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract":{"title":"Initializing and Compiling Your First Smart Contract","kind":"section","role":"pseudoSymbol","type":"section","identifier":"doc:\/\/Space\/tutorials\/Space\/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract","url":"\/tutorials\/space\/installingtools#Initializing-and-Compiling-Your-First-Smart-Contract","abstract":[{"text":"Before writing your first smart contract with Space, ensure you have the necessary tools installed.","type":"text"}]},"doc://Space/tutorials/Space/Deep-Dive-into-Space-Concepts/Exploring-Space's-Types":{"type":"topic","role":"article","url":"\/tutorials\/space\/deep-dive-into-space-concepts\/exploring-space's-types","abstract":[],"title":"Exploring Space's Types","kind":"article","identifier":"doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Exploring-Space's-Types"},"doc://Space/tutorials/Space/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges":{"identifier":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges","abstract":[{"text":"Space provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}],"url":"\/tutorials\/space\/familiarizewithtypes#Handling-Heap-Allocation-Challenges","kind":"section","title":"Handling Heap Allocation Challenges","role":"pseudoSymbol","type":"section"},"doc://Space/tutorials/Space/FamiliarizeWithTypes#Understanding-the-Buffer-Type":{"identifier":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Understanding-the-Buffer-Type","title":"Understanding the Buffer Type","type":"section","role":"pseudoSymbol","abstract":[{"text":"Space provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}],"kind":"section","url":"\/tutorials\/space\/familiarizewithtypes#Understanding-the-Buffer-Type"},"doc://Space/tutorials/Space/CodingYourFirstContract#Writing-the-Contract-Code":{"title":"Writing the Contract Code","role":"pseudoSymbol","abstract":[{"text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user.","type":"text"}],"url":"\/tutorials\/space\/codingyourfirstcontract#Writing-the-Contract-Code","identifier":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract#Writing-the-Contract-Code","type":"section","kind":"section"},"doc://Space/tutorials/Space/GetInfo":{"title":"Retrieving Information from the Blockchain","abstract":[{"text":"Many smart contracts rely on contextual data to execute their operations effectively. This data can include input payments, the caller’s address, the current time, the balance of a specific account, or even the contract owner.","type":"text"}],"kind":"project","role":"project","url":"\/tutorials\/space\/getinfo","estimatedTime":"10min","identifier":"doc:\/\/Space\/tutorials\/Space\/GetInfo","type":"topic"},"doc://Space/tutorials/Space/FamiliarizeWithTypes#Working-with-the-BigUint-Type":{"abstract":[{"text":"Space provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}],"url":"\/tutorials\/space\/familiarizewithtypes#Working-with-the-BigUint-Type","title":"Working with the BigUint Type","type":"section","role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Working-with-the-BigUint-Type"},"doc://Space/tutorials/Space/Deep-Dive-into-Space-Concepts/Persisting-Data-Across-Executions":{"identifier":"doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Persisting-Data-Across-Executions","abstract":[],"url":"\/tutorials\/space\/deep-dive-into-space-concepts\/persisting-data-across-executions","kind":"article","title":"Persisting Data Across Executions","role":"article","type":"topic"},"InstallingToolsSection2Step2.png":{"identifier":"InstallingToolsSection2Step2.png","type":"image","alt":"Output of `space --help`.","variants":[{"url":"\/images\/Space\/InstallingToolsSection2Step2.png","traits":["1x","light"]}]},"doc://Space/tutorials/Space/Getting-Started/Building-Your-First-Smart-Contract":{"kind":"article","role":"article","url":"\/tutorials\/space\/getting-started\/building-your-first-smart-contract","type":"topic","abstract":[],"identifier":"doc:\/\/Space\/tutorials\/Space\/Getting-Started\/Building-Your-First-Smart-Contract","title":"Building Your First Smart Contract"},"InstallingToolsSection3Step4.png":{"identifier":"InstallingToolsSection3Step4.png","type":"image","alt":"Output of `space contract build`.","variants":[{"traits":["1x","light"],"url":"\/images\/Space\/InstallingToolsSection3Step4.png"}]},"doc://Space/tutorials/Space/FamiliarizeWithTypes":{"title":"Exploring Space's Types","role":"project","identifier":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes","kind":"project","type":"topic","estimatedTime":"20min","url":"\/tutorials\/space\/familiarizewithtypes","abstract":[{"text":"Space provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}]},"doc://Space/tutorials/Space/StoreValues#Working-with-Storage-for-Single-Value-Persistence":{"title":"Working with @Storage for Single Value Persistence","abstract":[{"text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory.","type":"text"}],"kind":"section","role":"pseudoSymbol","url":"\/tutorials\/space\/storevalues#Working-with-Storage-for-Single-Value-Persistence","identifier":"doc:\/\/Space\/tutorials\/Space\/StoreValues#Working-with-Storage-for-Single-Value-Persistence","type":"section"},"https://www.swift.org/install/macos/":{"url":"https:\/\/www.swift.org\/install\/macos\/","identifier":"https:\/\/www.swift.org\/install\/macos\/","type":"link","titleInlineContent":[{"type":"text","text":"the official Swift website"}],"title":"the official Swift website"},"doc://Space/tutorials/Space/InstallingTools#Setting-Up-the-Space-CLI":{"identifier":"doc:\/\/Space\/tutorials\/Space\/InstallingTools#Setting-Up-the-Space-CLI","abstract":[{"text":"Before writing your first smart contract with Space, ensure you have the necessary tools installed.","type":"text"}],"url":"\/tutorials\/space\/installingtools#Setting-Up-the-Space-CLI","kind":"section","title":"Setting Up the Space CLI","role":"pseudoSymbol","type":"section"},"InstallingToolsSection3Step2.png":{"alt":"Output of `space init MyFirstSpaceProject`.","type":"image","variants":[{"url":"\/images\/Space\/InstallingToolsSection3Step2.png","traits":["1x","light"]}],"identifier":"InstallingToolsSection3Step2.png"},"InstallingToolsSection1Step1.png":{"alt":"An empty terminal window.","identifier":"InstallingToolsSection1Step1.png","type":"image","variants":[{"url":"\/images\/Space\/InstallingToolsSection1Step1.png","traits":["1x","light"]}]},"doc://Space/tutorials/Space/FamiliarizeWithTypes#Working-with-the-Vector-Type":{"abstract":[{"text":"Space provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}],"url":"\/tutorials\/space\/familiarizewithtypes#Working-with-the-Vector-Type","title":"Working with the Vector Type","type":"section","role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Working-with-the-Vector-Type"},"doc://Space/tutorials/Space/CodingYourFirstContract":{"estimatedTime":"20min","title":"Building Your First Smart Contract","kind":"project","role":"project","type":"topic","identifier":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract","url":"\/tutorials\/space\/codingyourfirstcontract","abstract":[{"text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user.","type":"text"}]},"doc://Space/tutorials/Space/Deep-Dive-into-Space-Concepts/Interact-with-Other-Contracts":{"url":"\/tutorials\/space\/deep-dive-into-space-concepts\/interact-with-other-contracts","identifier":"doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Interact-with-Other-Contracts","abstract":[],"kind":"article","type":"topic","role":"article","title":"Interact with Other Contracts"},"doc://Space/tutorials/Space/StoreValues":{"abstract":[{"text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory.","type":"text"}],"title":"Persist Values Between Executions","identifier":"doc:\/\/Space\/tutorials\/Space\/StoreValues","type":"topic","role":"project","estimatedTime":"15min","kind":"project","url":"\/tutorials\/space\/storevalues"},"doc://Space/tutorials/Space/Getting-Started/Installing-the-Tools":{"identifier":"doc:\/\/Space\/tutorials\/Space\/Getting-Started\/Installing-the-Tools","type":"topic","url":"\/tutorials\/space\/getting-started\/installing-the-tools","title":"Installing the Tools","abstract":[],"kind":"article","role":"article"},"doc://Space/tutorials/Space/SyncCalls#Declare-the-Callee-Proxy":{"title":"Declare the Callee Proxy","role":"pseudoSymbol","identifier":"doc:\/\/Space\/tutorials\/Space\/SyncCalls#Declare-the-Callee-Proxy","kind":"section","type":"section","url":"\/tutorials\/space\/synccalls#Declare-the-Callee-Proxy","abstract":[{"text":"Smart contracts can interact not only with users but also with other smart contracts. This enables more advanced protocols by leveraging existing ones. For example, you could integrate a decentralized exchange directly into your contract to perform token swaps. Decentralized applications often involve multiple contracts, each with a dedicated role, working together to achieve complex functionality—similar to microservices in backend systems.","type":"text"}]},"InstallingToolsSection1Step2.png":{"alt":"Output of `swift --version`.","type":"image","identifier":"InstallingToolsSection1Step2.png","variants":[{"url":"\/images\/Space\/InstallingToolsSection1Step2.png","traits":["1x","light"]}]},"doc://Space/tutorials/Space/SyncCalls#Perform-a-Synchronous-Call":{"kind":"section","role":"pseudoSymbol","identifier":"doc:\/\/Space\/tutorials\/Space\/SyncCalls#Perform-a-Synchronous-Call","url":"\/tutorials\/space\/synccalls#Perform-a-Synchronous-Call","title":"Perform a Synchronous Call","type":"section","abstract":[{"text":"Smart contracts can interact not only with users but also with other smart contracts. This enables more advanced protocols by leveraging existing ones. For example, you could integrate a decentralized exchange directly into your contract to perform token swaps. Decentralized applications often involve multiple contracts, each with a dedicated role, working together to achieve complex functionality—similar to microservices in backend systems.","type":"text"}]},"InstallingToolsSection1Step3.png":{"alt":"Output of `git --version`.","identifier":"InstallingToolsSection1Step3.png","type":"image","variants":[{"url":"\/images\/Space\/InstallingToolsSection1Step3.png","traits":["1x","light"]}]},"doc://Space/tutorials/Space/CodingYourFirstContract#Testing-the-Contract":{"title":"Testing the Contract","kind":"section","role":"pseudoSymbol","type":"section","identifier":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract#Testing-the-Contract","url":"\/tutorials\/space\/codingyourfirstcontract#Testing-the-Contract","abstract":[{"text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user.","type":"text"}]},"doc://Space/tutorials/Space/CodingYourFirstContract#Initializing-the-Project":{"kind":"section","role":"pseudoSymbol","type":"section","url":"\/tutorials\/space\/codingyourfirstcontract#Initializing-the-Project","abstract":[{"type":"text","text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user."}],"title":"Initializing the Project","identifier":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract#Initializing-the-Project"},"doc://Space/tutorials/Space/SyncCalls":{"identifier":"doc:\/\/Space\/tutorials\/Space\/SyncCalls","abstract":[{"text":"Smart contracts can interact not only with users but also with other smart contracts. This enables more advanced protocols by leveraging existing ones. For example, you could integrate a decentralized exchange directly into your contract to perform token swaps. Decentralized applications often involve multiple contracts, each with a dedicated role, working together to achieve complex functionality—similar to microservices in backend systems.","type":"text"}],"url":"\/tutorials\/space\/synccalls","kind":"project","title":"Interact with Other Contracts","estimatedTime":"15min","role":"project","type":"topic"},"doc://Space/tutorials/Space/InstallingTools":{"estimatedTime":"10min","kind":"project","type":"topic","role":"project","abstract":[{"text":"Before writing your first smart contract with Space, ensure you have the necessary tools installed.","type":"text"}],"title":"Install the Necessary Tools","identifier":"doc:\/\/Space\/tutorials\/Space\/InstallingTools","url":"\/tutorials\/space\/installingtools"},"doc://Space/tutorials/Space/GetInfo#Accessing-Transaction-Context-Data":{"identifier":"doc:\/\/Space\/tutorials\/Space\/GetInfo#Accessing-Transaction-Context-Data","title":"Accessing Transaction Context Data","url":"\/tutorials\/space\/getinfo#Accessing-Transaction-Context-Data","kind":"section","role":"pseudoSymbol","abstract":[{"text":"Many smart contracts rely on contextual data to execute their operations effectively. This data can include input payments, the caller’s address, the current time, the balance of a specific account, or even the contract owner.","type":"text"}],"type":"section"},"https://docs.docker.com/get-started/get-docker/":{"url":"https:\/\/docs.docker.com\/get-started\/get-docker\/","title":"Docker’s official site","type":"link","identifier":"https:\/\/docs.docker.com\/get-started\/get-docker\/","titleInlineContent":[{"text":"Docker’s official site","type":"text"}]},"doc://Space/tutorials/Space/FamiliarizeWithTypes#Creating-Your-Own-Types":{"title":"Creating Your Own Types","role":"pseudoSymbol","abstract":[{"text":"Space provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}],"identifier":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Creating-Your-Own-Types","kind":"section","type":"section","url":"\/tutorials\/space\/familiarizewithtypes#Creating-Your-Own-Types"},"doc://Space/tutorials/Space/GetInfo#Accessing-Blockchain-Context-Data":{"title":"Accessing Blockchain Context Data","abstract":[{"text":"Many smart contracts rely on contextual data to execute their operations effectively. This data can include input payments, the caller’s address, the current time, the balance of a specific account, or even the contract owner.","type":"text"}],"kind":"section","role":"pseudoSymbol","url":"\/tutorials\/space\/getinfo#Accessing-Blockchain-Context-Data","identifier":"doc:\/\/Space\/tutorials\/Space\/GetInfo#Accessing-Blockchain-Context-Data","type":"section"},"doc://Space/tutorials/Space/Deep-Dive-into-Space-Concepts/Retrieving-Information-from-the-Blockchain":{"identifier":"doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Retrieving-Information-from-the-Blockchain","abstract":[],"url":"\/tutorials\/space\/deep-dive-into-space-concepts\/retrieving-information-from-the-blockchain","kind":"article","title":"Retrieving Information from the Blockchain","role":"article","type":"topic"}}}