{"schemaVersion":{"patch":0,"major":0,"minor":3},"kind":"project","sections":[{"title":"Exploring Space's Types","kind":"hero","estimatedTimeInMinutes":20,"content":[{"inlineContent":[{"type":"text","text":"Space provides types that allow you to leverage the full potential of the SpaceVM."}],"type":"paragraph"}],"chapter":"Exploring Space's Types"},{"tasks":[{"title":"Handling Heap Allocation Challenges","stepsSection":[{"type":"step","code":"FamiliarizeWithTypesSection1Step1.swift","runtimePreview":null,"media":null,"caption":[],"content":[{"type":"paragraph","inlineContent":[{"text":"Avoid using ","type":"text"},{"code":"String","type":"codeVoice"},{"text":" in Space, as it is prohibited due to memory restrictions.","type":"text"}]}]},{"runtimePreview":null,"code":"FamiliarizeWithTypesSection1Step2.swift","content":[{"inlineContent":[{"type":"text","text":"Use "},{"code":"Buffer","type":"codeVoice"},{"text":" as a fixed-size alternative for handling raw data and text.","type":"text"}],"type":"paragraph"}],"type":"step","caption":[],"media":null},{"caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Similarly, avoid using "},{"type":"codeVoice","code":"Array"},{"text":" since it leads to heap allocations and is not allowed.","type":"text"}]}],"media":null,"code":"FamiliarizeWithTypesSection1Step3.swift","runtimePreview":null,"type":"step"},{"code":"FamiliarizeWithTypesSection1Step4.swift","type":"step","runtimePreview":null,"media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Instead, leverage the "},{"type":"codeVoice","code":"Vector"},{"type":"text","text":" type as a memory-efficient alternative to "},{"type":"codeVoice","code":"Array"},{"type":"text","text":"."}]}],"caption":[]},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Integer types like "},{"type":"codeVoice","code":"Int"},{"text":", ","type":"text"},{"type":"codeVoice","code":"UInt"},{"text":", and ","type":"text"},{"code":"Bool","type":"codeVoice"},{"type":"text","text":" are fully supported and safe to use."}]}],"code":"FamiliarizeWithTypesSection1Step5.swift","runtimePreview":null,"caption":[],"media":null},{"code":"FamiliarizeWithTypesSection1Step6.swift","runtimePreview":null,"type":"step","media":null,"caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Ensure you only import the Space framework to keep the contract lightweight and efficient."}]}]}],"anchor":"Handling-Heap-Allocation-Challenges","contentSection":[{"content":[{"inlineContent":[{"type":"text","text":"Writing code for blockchain involves operating within strict resource constraints. To address this, Space uses Swift’s “embedded” mode, ensuring the compiled code is as lightweight and efficient as possible."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"SpaceVM, the engine running smart contracts, limits heap allocations. As a result, types with dynamic sizes, such as Strings, Arrays, or classes, and any structs or enums containing these, are not permitted."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Additionally, Swift’s existential types—such as "},{"type":"codeVoice","code":"any Protocol"},{"text":" where ","type":"text"},{"type":"codeVoice","code":"Protocol"},{"text":" is a protocol—are also forbidden. Existential types introduce runtime overhead, which is why they are not allowed in Space.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The allowed Swift types are:"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"StaticString","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Integer types: Int, UInt, UInt8, UInt16, etc."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Bool: treated as a UInt8"}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"text":"Space introduces specific types that serve as alternatives for those not allowed. This chapter introduces three key replacements:","type":"text"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"code":"Buffer","type":"codeVoice"},{"text":": A substitute for String and Data","type":"text"}]}]},{"content":[{"inlineContent":[{"code":"BigUint","type":"codeVoice"},{"text":": Capable of handling large unsigned integers","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"Vector","type":"codeVoice"},{"text":": An alternative to Array","type":"text"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"text":"For security, these types do not feature mutating methods. Instead, they use methods that return new instances. For example, the ","type":"text"},{"type":"codeVoice","code":"Buffer"},{"text":" type does not include ","type":"text"},{"type":"codeVoice","code":"append(_:) -> Void"},{"text":" but instead offers ","type":"text"},{"type":"codeVoice","code":"appending(_:) -> Buffer"},{"type":"text","text":"."}]}],"kind":"contentAndMedia","mediaPosition":"trailing"}]},{"stepsSection":[{"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Start by creating the basic structure for your contract."}]}],"code":"FamiliarizeWithTypesSection2Step1.swift","media":null,"type":"step","caption":[]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Initialize a "},{"code":"Buffer","type":"codeVoice"},{"type":"text","text":" variable using a string literal."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Important: Explicitly declare your variable as "},{"type":"codeVoice","code":"Buffer"},{"text":" to avoid being interpreted as ","type":"text"},{"code":"String","type":"codeVoice"},{"type":"text","text":"."}]}],"media":null,"code":"FamiliarizeWithTypesSection2Step2.swift","runtimePreview":null,"type":"step"},{"content":[{"inlineContent":[{"text":"Append another ","type":"text"},{"code":"Buffer","type":"codeVoice"},{"type":"text","text":" to your existing variable."}],"type":"paragraph"}],"caption":[],"runtimePreview":null,"media":null,"type":"step","code":"FamiliarizeWithTypesSection2Step3.swift"},{"type":"step","code":"FamiliarizeWithTypesSection2Step4.swift","content":[{"type":"paragraph","inlineContent":[{"text":"Compare two ","type":"text"},{"code":"Buffer","type":"codeVoice"},{"type":"text","text":" instances. If they don’t match, throw a smart contract error."}]}],"runtimePreview":null,"media":null,"caption":[{"inlineContent":[{"type":"text","text":"Note: The "},{"code":"smartContractError","type":"codeVoice"},{"type":"text","text":" function requires a "},{"type":"codeVoice","code":"Buffer"},{"type":"text","text":" parameter. This topic is covered in detail in a later chapter."}],"type":"paragraph"}]}],"title":"Understanding the Buffer Type","contentSection":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Buffer"},{"type":"text","text":" is a fundamental type in Space, designed to store raw data and strings."}]}],"mediaPosition":"trailing","kind":"contentAndMedia"}],"anchor":"Understanding-the-Buffer-Type"},{"title":"Working with the BigUint Type","stepsSection":[{"runtimePreview":null,"content":[{"inlineContent":[{"text":"Begin by structuring your contract.","type":"text"}],"type":"paragraph"}],"media":null,"type":"step","code":"FamiliarizeWithTypesSection3Step1.swift","caption":[]},{"type":"step","caption":[{"inlineContent":[{"text":"Important: You must specify the type explicitly as ","type":"text"},{"type":"codeVoice","code":"BigUint"},{"text":", or it will default to ","type":"text"},{"code":"Int","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}],"content":[{"type":"paragraph","inlineContent":[{"text":"Declare a ","type":"text"},{"code":"BigUint","type":"codeVoice"},{"type":"text","text":" constant with an integer literal."}]}],"runtimePreview":null,"media":null,"code":"FamiliarizeWithTypesSection3Step2.swift"},{"type":"step","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a new "},{"type":"codeVoice","code":"BigUint"},{"type":"text","text":" by adding 3 to the previous constant."}]}],"media":null,"caption":[],"code":"FamiliarizeWithTypesSection3Step3.swift"},{"type":"step","media":null,"code":"FamiliarizeWithTypesSection3Step4.swift","runtimePreview":null,"caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Multiply the new variable by 7."}]}]},{"content":[{"inlineContent":[{"text":"Add three times the initial constant to the new variable.","type":"text"}],"type":"paragraph"}],"media":null,"runtimePreview":null,"caption":[],"type":"step","code":"FamiliarizeWithTypesSection3Step5.swift"},{"code":"FamiliarizeWithTypesSection3Step6.swift","caption":[{"inlineContent":[{"text":"Note: A ","type":"text"},{"code":"BigUint","type":"codeVoice"},{"type":"text","text":" value cannot be negative. If the subtraction results in a value below zero, Space will trigger a smart contract error."}],"type":"paragraph"}],"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Subtract 21 from the variable."}]}],"runtimePreview":null,"media":null},{"type":"step","media":null,"content":[{"inlineContent":[{"type":"text","text":"Verify that the result is a multiple of 10, and throw a smart contract error if not."}],"type":"paragraph"}],"caption":[],"code":"FamiliarizeWithTypesSection3Step7.swift","runtimePreview":null},{"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Ensure the result is greater than zero, throwing an error if it isn’t.","type":"text"}]}],"media":null,"caption":[],"type":"step","code":"FamiliarizeWithTypesSection3Step8.swift"}],"anchor":"Working-with-the-BigUint-Type","contentSection":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Blockchains do not support decimal numbers. However, real-world applications often require decimal representation, such as in cryptocurrency amounts like 0.09281 Bitcoin."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To handle such cases, values are expressed as large numbers, where many tokens allocate the last 18 digits to represent the decimal portion. For instance: 1 EGLD equals 1 * 10^18, or 1,000,000,000,000,000,000."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Standard Swift types, such as "},{"code":"UInt64","type":"codeVoice"},{"type":"text","text":", can only store values up to 18,446,744,073,709,551,615 (20 digits), making it impossible to represent values exceeding approximately 18.446744 EGLD."}]},{"inlineContent":[{"type":"text","text":"Space provides the "},{"type":"codeVoice","code":"BigUint"},{"type":"text","text":" type to store arbitrarily large positive numbers."}],"type":"paragraph"}],"kind":"contentAndMedia","mediaPosition":"trailing"}]},{"contentSection":[{"mediaPosition":"trailing","kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"Array","type":"codeVoice"},{"type":"text","text":" type is often the default for storing dynamic-size data, but it is not permitted in Space. Fortunately, Space provides a suitable alternative: "},{"type":"codeVoice","code":"Vector"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"codeVoice","code":"Vector"},{"text":" can store any type compatible with Space, including user-defined structs and enums.","type":"text"}]}]}],"stepsSection":[{"caption":[],"content":[{"inlineContent":[{"type":"text","text":"Begin by setting up the basic structure of your contract."}],"type":"paragraph"}],"type":"step","media":null,"code":"FamiliarizeWithTypesSection4Step1.swift","runtimePreview":null},{"media":null,"runtimePreview":null,"caption":[{"inlineContent":[{"text":"Important: Currently, array literal assignment is disabled. The Space team is investigating its impact on memory management in smart contracts before enabling it.","type":"text"}],"type":"paragraph"}],"type":"step","content":[{"inlineContent":[{"type":"text","text":"Declare a "},{"type":"codeVoice","code":"Vector"},{"type":"text","text":" variable to hold "},{"code":"BigUint","type":"codeVoice"},{"text":" elements.","type":"text"}],"type":"paragraph"}],"code":"FamiliarizeWithTypesSection4Step2.swift"},{"code":"FamiliarizeWithTypesSection4Step3.swift","caption":[],"type":"step","runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"Add elements to the "},{"type":"codeVoice","code":"Vector"},{"type":"text","text":"."}],"type":"paragraph"}],"media":null},{"runtimePreview":null,"type":"step","code":"FamiliarizeWithTypesSection4Step4.swift","caption":[{"inlineContent":[{"type":"text","text":"Important: The "},{"type":"codeVoice","code":"for ... in"},{"type":"text","text":" loop for vectors is currently disabled. The Space team is evaluating its effect on smart contract memory before enabling it."}],"type":"paragraph"}],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Iterate over the "},{"code":"Vector","type":"codeVoice"},{"text":" to sum all the elements.","type":"text"}]}],"media":null},{"content":[{"inlineContent":[{"type":"text","text":"Ensure the sum equals 13. Throw a smart contract error if it doesn’t."}],"type":"paragraph"}],"caption":[],"code":"FamiliarizeWithTypesSection4Step5.swift","type":"step","media":null,"runtimePreview":null}],"title":"Working with the Vector Type","anchor":"Working-with-the-Vector-Type"},{"anchor":"Creating-Your-Own-Types","stepsSection":[{"caption":[],"media":null,"code":"FamiliarizeWithTypesSection5Step1.swift","type":"step","content":[{"inlineContent":[{"type":"text","text":"Start by creating a struct with fields that are compatible with Space."}],"type":"paragraph"}],"runtimePreview":null},{"code":"FamiliarizeWithTypesSection5Step2.swift","caption":[],"runtimePreview":null,"content":[{"inlineContent":[{"text":"Annotate your struct with ","type":"text"},{"type":"codeVoice","code":"@Codable"},{"type":"text","text":" to make it usable with Space’s encoding system."}],"type":"paragraph"}],"media":null,"type":"step"},{"media":null,"code":"FamiliarizeWithTypesSection5Step3.swift","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Use the ","type":"text"},{"type":"codeVoice","code":"@Codable"},{"text":"-annotated type within your smart contracts.","type":"text"}]}],"caption":[],"type":"step"},{"media":null,"type":"step","code":"FamiliarizeWithTypesSection5Step4.swift","runtimePreview":null,"caption":[],"content":[{"inlineContent":[{"type":"text","text":"Remember, a "},{"type":"codeVoice","code":"@Codable"},{"type":"text","text":" type can be used as a field in other "},{"code":"@Codable","type":"codeVoice"},{"type":"text","text":" types."}],"type":"paragraph"}]}],"title":"Creating Your Own Types","contentSection":[{"content":[{"inlineContent":[{"type":"text","text":"You can define your own structures and enumerations and make them compatible with Space using the "},{"type":"codeVoice","code":"@Codable"},{"type":"text","text":" annotation. When a type is marked with "},{"code":"@Codable","type":"codeVoice"},{"type":"text","text":", it becomes eligible to be used as input or output for endpoints, within arrays, and anywhere Space’s encoding system is applied."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"A type annotated with "},{"code":"@Codable","type":"codeVoice"},{"text":" must only contain fields of types compatible with Space, such as integers, ","type":"text"},{"type":"codeVoice","code":"Bool"},{"type":"text","text":", "},{"type":"codeVoice","code":"Buffer"},{"text":", ","type":"text"},{"type":"codeVoice","code":"BigUint"},{"text":", ","type":"text"},{"code":"Vector","type":"codeVoice"},{"text":", and other ","type":"text"},{"type":"codeVoice","code":"@Codable"},{"text":" types.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Additionally, the ","type":"text"},{"type":"codeVoice","code":"@Codable"},{"text":" annotation prevents the structure from having methods or initializers.","type":"text"}]}],"mediaPosition":"trailing","kind":"contentAndMedia"}]}],"kind":"tasks"},{"abstract":[{"text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory.","type":"text"}],"kind":"callToAction","action":{"overridingTitle":"Get started","identifier":"doc:\/\/Space\/tutorials\/Space\/StoreValues","type":"reference","isActive":true,"overridingTitleInlineContent":[{"text":"Get started","type":"text"}]},"title":"Persist Values Between Executions","featuredEyebrow":"Tutorial"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/tutorials\/space\/familiarizewithtypes"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes"},"hierarchy":{"paths":[["doc:\/\/Space\/tutorials\/Space","doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts","doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Exploring-Space's-Types"]],"modules":[{"reference":"doc:\/\/Space\/tutorials\/Space\/Getting-Started\/Installing-the-Tools","projects":[{"reference":"doc:\/\/Space\/tutorials\/Space\/InstallingTools","sections":[{"kind":"task","reference":"doc:\/\/Space\/tutorials\/Space\/InstallingTools#Installing-Spaces-Dependencies"},{"reference":"doc:\/\/Space\/tutorials\/Space\/InstallingTools#Setting-Up-the-Space-CLI","kind":"task"},{"reference":"doc:\/\/Space\/tutorials\/Space\/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract","kind":"task"}]}]},{"reference":"doc:\/\/Space\/tutorials\/Space\/Getting-Started\/Building-Your-First-Smart-Contract","projects":[{"reference":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract","sections":[{"kind":"task","reference":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract#Initializing-the-Project"},{"reference":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract#Writing-the-Contract-Code","kind":"task"},{"reference":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract#Testing-the-Contract","kind":"task"}]}]},{"projects":[{"reference":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes","sections":[{"reference":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges","kind":"task"},{"reference":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Understanding-the-Buffer-Type","kind":"task"},{"kind":"task","reference":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Working-with-the-BigUint-Type"},{"kind":"task","reference":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Working-with-the-Vector-Type"},{"reference":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Creating-Your-Own-Types","kind":"task"}]}],"reference":"doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Exploring-Space's-Types"},{"reference":"doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Persisting-Data-Across-Executions","projects":[{"sections":[{"kind":"task","reference":"doc:\/\/Space\/tutorials\/Space\/StoreValues#Working-with-Storage-for-Single-Value-Persistence"},{"kind":"task","reference":"doc:\/\/Space\/tutorials\/Space\/StoreValues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage"}],"reference":"doc:\/\/Space\/tutorials\/Space\/StoreValues"}]},{"reference":"doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Retrieving-Information-from-the-Blockchain","projects":[{"reference":"doc:\/\/Space\/tutorials\/Space\/GetInfo","sections":[{"reference":"doc:\/\/Space\/tutorials\/Space\/GetInfo#Accessing-Transaction-Context-Data","kind":"task"},{"kind":"task","reference":"doc:\/\/Space\/tutorials\/Space\/GetInfo#Accessing-Blockchain-Context-Data"}]}]},{"reference":"doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Interact-with-Other-Contracts","projects":[{"sections":[{"reference":"doc:\/\/Space\/tutorials\/Space\/SyncCalls#Declare-the-Callee-Proxy","kind":"task"},{"reference":"doc:\/\/Space\/tutorials\/Space\/SyncCalls#Perform-a-Synchronous-Call","kind":"task"}],"reference":"doc:\/\/Space\/tutorials\/Space\/SyncCalls"}]}],"reference":"doc:\/\/Space\/tutorials\/Space"},"metadata":{"title":"Exploring Space's Types","category":"Space","categoryPathComponent":"Space","role":"project"},"references":{"FamiliarizeWithTypesSection4Step4.swift":{"fileType":"swift","type":"file","content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        var myVector: Vector<BigUint> = Vector()","        myVector = myVector.appended(2)","        myVector = myVector.appended(10)","        myVector = myVector.appended(1)","        ","        var sum: BigUint = 0","        myVector.forEach { item in","            sum = sum + item","        }","    }","}"],"fileName":"lib.swift","identifier":"FamiliarizeWithTypesSection4Step4.swift","syntax":"swift","highlights":[{"line":9},{"line":10},{"line":11},{"line":12},{"line":13}]},"doc://Space/tutorials/Space/Deep-Dive-into-Space-Concepts/Exploring-Space's-Types":{"role":"article","identifier":"doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Exploring-Space's-Types","title":"Exploring Space's Types","url":"\/tutorials\/space\/deep-dive-into-space-concepts\/exploring-space's-types","type":"topic","kind":"article","abstract":[]},"FamiliarizeWithTypesSection3Step6.swift":{"highlights":[{"line":10}],"fileType":"swift","fileName":"lib.swift","content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        let initialNumber: BigUint = 5","        ","        var result = initialNumber + 3","        result = result * 7","        result = result + initialNumber * 3","        result = result - 21","    }","}"],"identifier":"FamiliarizeWithTypesSection3Step6.swift","syntax":"swift","type":"file"},"doc://Space/tutorials/Space/GetInfo":{"identifier":"doc:\/\/Space\/tutorials\/Space\/GetInfo","abstract":[{"type":"text","text":"Many smart contracts rely on contextual data to execute their operations effectively. This data can include input payments, the caller’s address, the current time, the balance of a specific account, or even the contract owner."}],"title":"Retrieving Information from the Blockchain","role":"project","estimatedTime":"10min","type":"topic","kind":"project","url":"\/tutorials\/space\/getinfo"},"doc://Space/tutorials/Space/InstallingTools#Setting-Up-the-Space-CLI":{"abstract":[{"type":"text","text":"Before writing your first smart contract with Space, ensure you have the necessary tools installed."}],"url":"\/tutorials\/space\/installingtools#Setting-Up-the-Space-CLI","role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/Space\/tutorials\/Space\/InstallingTools#Setting-Up-the-Space-CLI","type":"section","title":"Setting Up the Space CLI"},"FamiliarizeWithTypesSection3Step2.swift":{"type":"file","fileName":"lib.swift","fileType":"swift","identifier":"FamiliarizeWithTypesSection3Step2.swift","syntax":"swift","content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        let initialNumber: BigUint = 5","    }","}"],"highlights":[{"line":5}]},"doc://Space/tutorials/Space/FamiliarizeWithTypes":{"role":"project","identifier":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes","title":"Exploring Space's Types","url":"\/tutorials\/space\/familiarizewithtypes","type":"topic","kind":"project","estimatedTime":"20min","abstract":[{"type":"text","text":"Space provides types that allow you to leverage the full potential of the SpaceVM."}]},"FamiliarizeWithTypesSection1Step6.swift":{"highlights":[{"line":2}],"fileType":"swift","fileName":"lib.swift","content":["import Space","import Foundation \/\/ Don't do this ❌","","@Contract struct MyContract {","    public func myEndpoint() {","        let myString: String = \"Hey!\" \/\/ Won't compile! ❌","        let myBuffer: Buffer = \"Hey!\" \/\/ Fine ✅","        ","        let myArray: [UInt64] = [4, 8, 100] \/\/ Won't compile! ❌","        var myVector: Vector<UInt64> = Vector() \/\/ Fine ✅","            .appended(4)","            .appended(8)","            .appended(100)","        ","        let two = 2 \/\/ Fine ✅","        let ten: UInt64 = 10 \/\/ Fine ✅","        let isTwoEven = true \/\/ Fine ✅","    }","}"],"identifier":"FamiliarizeWithTypesSection1Step6.swift","syntax":"swift","type":"file"},"FamiliarizeWithTypesSection5Step1.swift":{"fileName":"struct.swift","content":["import Space","","struct MyStruct {","    let myBiguint: BigUint","    let myInteger: UInt64","    let myBuffer: Buffer","}"],"fileType":"swift","syntax":"swift","type":"file","identifier":"FamiliarizeWithTypesSection5Step1.swift","highlights":[]},"doc://Space/tutorials/Space/Deep-Dive-into-Space-Concepts/Retrieving-Information-from-the-Blockchain":{"identifier":"doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Retrieving-Information-from-the-Blockchain","title":"Retrieving Information from the Blockchain","abstract":[],"role":"article","kind":"article","url":"\/tutorials\/space\/deep-dive-into-space-concepts\/retrieving-information-from-the-blockchain","type":"topic"},"doc://Space/tutorials/Space/FamiliarizeWithTypes#Creating-Your-Own-Types":{"abstract":[{"type":"text","text":"Space provides types that allow you to leverage the full potential of the SpaceVM."}],"url":"\/tutorials\/space\/familiarizewithtypes#Creating-Your-Own-Types","role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Creating-Your-Own-Types","type":"section","title":"Creating Your Own Types"},"FamiliarizeWithTypesSection4Step5.swift":{"highlights":[{"line":14},{"line":15},{"line":16},{"line":17}],"fileType":"swift","fileName":"lib.swift","content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        var myVector: Vector<BigUint> = Vector()","        myVector = myVector.appended(2)","        myVector = myVector.appended(10)","        myVector = myVector.appended(1)","        ","        var sum: BigUint = 0","        myVector.forEach { item in","            sum = sum + item","        }","        ","        guard sum == 13 else {","            smartContractError(message: \"sum is not 13\")","        }","    }","}"],"identifier":"FamiliarizeWithTypesSection4Step5.swift","syntax":"swift","type":"file"},"FamiliarizeWithTypesSection1Step5.swift":{"identifier":"FamiliarizeWithTypesSection1Step5.swift","type":"file","fileType":"swift","syntax":"swift","highlights":[{"line":13},{"line":14},{"line":15},{"line":16}],"content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        let myString: String = \"Hey!\" \/\/ Won't compile! ❌","        let myBuffer: Buffer = \"Hey!\" \/\/ Fine ✅","        ","        let myArray: [UInt64] = [4, 8, 100] \/\/ Won't compile! ❌","        var myVector: Vector<UInt64> = Vector() \/\/ Fine ✅","            .appended(4)","            .appended(8)","            .appended(100)","        ","        let two = 2 \/\/ Fine ✅","        let ten: UInt64 = 10 \/\/ Fine ✅","        let isTwoEven = true \/\/ Fine ✅","    }","}"],"fileName":"lib.swift"},"FamiliarizeWithTypesSection5Step4.swift":{"highlights":[],"fileType":"swift","fileName":"struct.swift","content":["import Space","","@Codable enum MyEnum {","    case firstCase(BigUint)","}","","@Codable struct MyStruct {","    let myBiguint: BigUint","    let myInteger: UInt64","    let myBuffer: Buffer","    let myEnum: MyEnum","}"],"identifier":"FamiliarizeWithTypesSection5Step4.swift","syntax":"swift","type":"file"},"doc://Space/tutorials/Space/SyncCalls#Declare-the-Callee-Proxy":{"abstract":[{"type":"text","text":"Smart contracts can interact not only with users but also with other smart contracts. This enables more advanced protocols by leveraging existing ones. For example, you could integrate a decentralized exchange directly into your contract to perform token swaps. Decentralized applications often involve multiple contracts, each with a dedicated role, working together to achieve complex functionality—similar to microservices in backend systems."}],"url":"\/tutorials\/space\/synccalls#Declare-the-Callee-Proxy","role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/Space\/tutorials\/Space\/SyncCalls#Declare-the-Callee-Proxy","type":"section","title":"Declare the Callee Proxy"},"doc://Space/tutorials/Space/FamiliarizeWithTypes#Working-with-the-Vector-Type":{"abstract":[{"type":"text","text":"Space provides types that allow you to leverage the full potential of the SpaceVM."}],"url":"\/tutorials\/space\/familiarizewithtypes#Working-with-the-Vector-Type","role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Working-with-the-Vector-Type","type":"section","title":"Working with the Vector Type"},"FamiliarizeWithTypesSection4Step3.swift":{"identifier":"FamiliarizeWithTypesSection4Step3.swift","type":"file","fileType":"swift","syntax":"swift","highlights":[{"line":6},{"line":7},{"line":8}],"content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        var myVector: Vector<BigUint> = Vector()","        myVector = myVector.appended(2)","        myVector = myVector.appended(10)","        myVector = myVector.appended(1)","    }","}"],"fileName":"lib.swift"},"doc://Space/tutorials/Space/SyncCalls":{"identifier":"doc:\/\/Space\/tutorials\/Space\/SyncCalls","estimatedTime":"15min","title":"Interact with Other Contracts","abstract":[{"type":"text","text":"Smart contracts can interact not only with users but also with other smart contracts. This enables more advanced protocols by leveraging existing ones. For example, you could integrate a decentralized exchange directly into your contract to perform token swaps. Decentralized applications often involve multiple contracts, each with a dedicated role, working together to achieve complex functionality—similar to microservices in backend systems."}],"type":"topic","role":"project","kind":"project","url":"\/tutorials\/space\/synccalls"},"doc://Space/tutorials/Space/CodingYourFirstContract#Writing-the-Contract-Code":{"abstract":[{"type":"text","text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user."}],"url":"\/tutorials\/space\/codingyourfirstcontract#Writing-the-Contract-Code","role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract#Writing-the-Contract-Code","type":"section","title":"Writing the Contract Code"},"FamiliarizeWithTypesSection3Step1.swift":{"identifier":"FamiliarizeWithTypesSection3Step1.swift","fileType":"swift","highlights":[],"content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        ","    }","}"],"fileName":"lib.swift","type":"file","syntax":"swift"},"FamiliarizeWithTypesSection4Step1.swift":{"identifier":"FamiliarizeWithTypesSection4Step1.swift","type":"file","fileType":"swift","syntax":"swift","highlights":[],"content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        ","    }","}"],"fileName":"lib.swift"},"doc://Space/tutorials/Space/SyncCalls#Perform-a-Synchronous-Call":{"type":"section","url":"\/tutorials\/space\/synccalls#Perform-a-Synchronous-Call","abstract":[{"type":"text","text":"Smart contracts can interact not only with users but also with other smart contracts. This enables more advanced protocols by leveraging existing ones. For example, you could integrate a decentralized exchange directly into your contract to perform token swaps. Decentralized applications often involve multiple contracts, each with a dedicated role, working together to achieve complex functionality—similar to microservices in backend systems."}],"role":"pseudoSymbol","kind":"section","title":"Perform a Synchronous Call","identifier":"doc:\/\/Space\/tutorials\/Space\/SyncCalls#Perform-a-Synchronous-Call"},"FamiliarizeWithTypesSection1Step3.swift":{"identifier":"FamiliarizeWithTypesSection1Step3.swift","fileType":"swift","highlights":[{"line":7},{"line":8}],"content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        let myString: String = \"Hey!\" \/\/ Won't compile! ❌","        let myBuffer: Buffer = \"Hey!\" \/\/ Fine ✅","        ","        let myArray: [UInt64] = [4, 8, 100] \/\/ Won't compile! ❌","    }","}"],"fileName":"lib.swift","type":"file","syntax":"swift"},"doc://Space/tutorials/Space/Getting-Started/Installing-the-Tools":{"identifier":"doc:\/\/Space\/tutorials\/Space\/Getting-Started\/Installing-the-Tools","title":"Installing the Tools","abstract":[],"type":"topic","role":"article","kind":"article","url":"\/tutorials\/space\/getting-started\/installing-the-tools"},"doc://Space/tutorials/Space/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges":{"identifier":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges","title":"Handling Heap Allocation Challenges","abstract":[{"type":"text","text":"Space provides types that allow you to leverage the full potential of the SpaceVM."}],"type":"section","role":"pseudoSymbol","kind":"section","url":"\/tutorials\/space\/familiarizewithtypes#Handling-Heap-Allocation-Challenges"},"doc://Space/tutorials/Space/FamiliarizeWithTypes#Working-with-the-BigUint-Type":{"identifier":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Working-with-the-BigUint-Type","title":"Working with the BigUint Type","abstract":[{"type":"text","text":"Space provides types that allow you to leverage the full potential of the SpaceVM."}],"type":"section","role":"pseudoSymbol","kind":"section","url":"\/tutorials\/space\/familiarizewithtypes#Working-with-the-BigUint-Type"},"FamiliarizeWithTypesSection3Step7.swift":{"highlights":[{"line":11},{"line":12},{"line":13},{"line":14}],"fileType":"swift","fileName":"lib.swift","content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        let initialNumber: BigUint = 5","        ","        var result = initialNumber + 3","        result = result * 7","        result = result + initialNumber * 3","        result = result - 21","        ","        guard result % 10 == 0 else {","            smartContractError(message: \"result is not a multiple of 10\")","        }","    }","}"],"identifier":"FamiliarizeWithTypesSection3Step7.swift","syntax":"swift","type":"file"},"doc://Space/tutorials/Space/FamiliarizeWithTypes#Understanding-the-Buffer-Type":{"identifier":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Understanding-the-Buffer-Type","title":"Understanding the Buffer Type","abstract":[{"type":"text","text":"Space provides types that allow you to leverage the full potential of the SpaceVM."}],"role":"pseudoSymbol","kind":"section","url":"\/tutorials\/space\/familiarizewithtypes#Understanding-the-Buffer-Type","type":"section"},"doc://Space/tutorials/Space/StoreValues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage":{"type":"section","identifier":"doc:\/\/Space\/tutorials\/Space\/StoreValues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage","title":"Leveraging @Mapping for Dynamic Key-Value Storage","role":"pseudoSymbol","kind":"section","abstract":[{"type":"text","text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory."}],"url":"\/tutorials\/space\/storevalues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage"},"FamiliarizeWithTypesSection1Step4.swift":{"identifier":"FamiliarizeWithTypesSection1Step4.swift","fileType":"swift","highlights":[{"line":9},{"line":10},{"line":11},{"line":12}],"content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        let myString: String = \"Hey!\" \/\/ Won't compile! ❌","        let myBuffer: Buffer = \"Hey!\" \/\/ Fine ✅","        ","        let myArray: [UInt64] = [4, 8, 100] \/\/ Won't compile! ❌","        var myVector: Vector<UInt64> = Vector() \/\/ Fine ✅","            .appended(4)","            .appended(8)","            .appended(100)","    }","}"],"fileName":"lib.swift","type":"file","syntax":"swift"},"doc://Space/tutorials/Space/Deep-Dive-into-Space-Concepts/Interact-with-Other-Contracts":{"abstract":[],"identifier":"doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Interact-with-Other-Contracts","title":"Interact with Other Contracts","role":"article","type":"topic","kind":"article","url":"\/tutorials\/space\/deep-dive-into-space-concepts\/interact-with-other-contracts"},"FamiliarizeWithTypesSection1Step1.swift":{"highlights":[],"fileType":"swift","fileName":"lib.swift","content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        let myString: String = \"Hey!\" \/\/ Won't compile! ❌","    }","}"],"identifier":"FamiliarizeWithTypesSection1Step1.swift","syntax":"swift","type":"file"},"FamiliarizeWithTypesSection2Step1.swift":{"identifier":"FamiliarizeWithTypesSection2Step1.swift","fileType":"swift","highlights":[],"content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        ","    }","}"],"fileName":"lib.swift","type":"file","syntax":"swift"},"doc://Space/tutorials/Space/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract":{"type":"section","identifier":"doc:\/\/Space\/tutorials\/Space\/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract","title":"Initializing and Compiling Your First Smart Contract","role":"pseudoSymbol","kind":"section","abstract":[{"type":"text","text":"Before writing your first smart contract with Space, ensure you have the necessary tools installed."}],"url":"\/tutorials\/space\/installingtools#Initializing-and-Compiling-Your-First-Smart-Contract"},"FamiliarizeWithTypesSection5Step3.swift":{"highlights":[],"fileType":"swift","fileName":"lib.swift","content":["import Space","","@Contract struct MyContract {","    public func myEndpoint(myStruct: MyStruct) {","        \/\/ Do what you want here","    }","}"],"identifier":"FamiliarizeWithTypesSection5Step3.swift","syntax":"swift","type":"file"},"FamiliarizeWithTypesSection2Step4.swift":{"identifier":"FamiliarizeWithTypesSection2Step4.swift","fileType":"swift","highlights":[{"line":7},{"line":8},{"line":9},{"line":10}],"content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        var myBuffer: Buffer = \"Hello\"","        myBuffer = myBuffer.appended(\" World!\")","        ","        guard myBuffer != \"Hello World!\" else {","            smartContractError(message: \"myBuffer is not equal to Hello World!\")","        }","    }","}"],"fileName":"lib.swift","type":"file","syntax":"swift"},"doc://Space/tutorials/Space/GetInfo#Accessing-Blockchain-Context-Data":{"url":"\/tutorials\/space\/getinfo#Accessing-Blockchain-Context-Data","role":"pseudoSymbol","type":"section","identifier":"doc:\/\/Space\/tutorials\/Space\/GetInfo#Accessing-Blockchain-Context-Data","title":"Accessing Blockchain Context Data","abstract":[{"type":"text","text":"Many smart contracts rely on contextual data to execute their operations effectively. This data can include input payments, the caller’s address, the current time, the balance of a specific account, or even the contract owner."}],"kind":"section"},"FamiliarizeWithTypesSection4Step2.swift":{"highlights":[{"line":5}],"fileType":"swift","fileName":"lib.swift","content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        var myVector: Vector<BigUint> = Vector()","    }","}"],"identifier":"FamiliarizeWithTypesSection4Step2.swift","syntax":"swift","type":"file"},"FamiliarizeWithTypesSection3Step5.swift":{"identifier":"FamiliarizeWithTypesSection3Step5.swift","fileType":"swift","highlights":[{"line":9}],"content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        let initialNumber: BigUint = 5","        ","        var result = initialNumber + 3","        result = result * 7","        result = result + initialNumber * 3","    }","}"],"fileName":"lib.swift","type":"file","syntax":"swift"},"FamiliarizeWithTypesSection1Step2.swift":{"highlights":[{"line":6}],"fileType":"swift","fileName":"lib.swift","content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        let myString: String = \"Hey!\" \/\/ Won't compile! ❌","        let myBuffer: Buffer = \"Hey!\" \/\/ Fine ✅","    }","}"],"identifier":"FamiliarizeWithTypesSection1Step2.swift","syntax":"swift","type":"file"},"FamiliarizeWithTypesSection3Step4.swift":{"identifier":"FamiliarizeWithTypesSection3Step4.swift","fileType":"swift","highlights":[{"line":8}],"content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        let initialNumber: BigUint = 5","        ","        var result = initialNumber + 3","        result = result * 7","    }","}"],"fileName":"lib.swift","type":"file","syntax":"swift"},"doc://Space/tutorials/Space/StoreValues#Working-with-Storage-for-Single-Value-Persistence":{"type":"section","url":"\/tutorials\/space\/storevalues#Working-with-Storage-for-Single-Value-Persistence","abstract":[{"type":"text","text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory."}],"kind":"section","role":"pseudoSymbol","identifier":"doc:\/\/Space\/tutorials\/Space\/StoreValues#Working-with-Storage-for-Single-Value-Persistence","title":"Working with @Storage for Single Value Persistence"},"FamiliarizeWithTypesSection2Step2.swift":{"identifier":"FamiliarizeWithTypesSection2Step2.swift","type":"file","fileType":"swift","syntax":"swift","highlights":[{"line":5}],"content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        var myBuffer: Buffer = \"Hello\"","    }","}"],"fileName":"lib.swift"},"doc://Space/tutorials/Space/InstallingTools#Installing-Spaces-Dependencies":{"identifier":"doc:\/\/Space\/tutorials\/Space\/InstallingTools#Installing-Spaces-Dependencies","title":"Installing Space's Dependencies","abstract":[{"type":"text","text":"Before writing your first smart contract with Space, ensure you have the necessary tools installed."}],"type":"section","role":"pseudoSymbol","kind":"section","url":"\/tutorials\/space\/installingtools#Installing-Spaces-Dependencies"},"doc://Space/tutorials/Space":{"identifier":"doc:\/\/Space\/tutorials\/Space","title":"Meet Space","abstract":[{"type":"text","text":"Discover how Space simplifies blockchain development using Swift. Dive into the world of Web3 with ease and efficiency."}],"type":"topic","role":"overview","kind":"overview","url":"\/tutorials\/space"},"doc://Space/tutorials/Space/Deep-Dive-into-Space-Concepts/Persisting-Data-Across-Executions":{"identifier":"doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Persisting-Data-Across-Executions","title":"Persisting Data Across Executions","abstract":[],"type":"topic","role":"article","kind":"article","url":"\/tutorials\/space\/deep-dive-into-space-concepts\/persisting-data-across-executions"},"FamiliarizeWithTypesSection3Step3.swift":{"identifier":"FamiliarizeWithTypesSection3Step3.swift","fileType":"swift","highlights":[{"line":6},{"line":7}],"content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        let initialNumber: BigUint = 5","        ","        var result = initialNumber + 3","    }","}"],"fileName":"lib.swift","type":"file","syntax":"swift"},"doc://Space/tutorials/Space/CodingYourFirstContract#Testing-the-Contract":{"identifier":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract#Testing-the-Contract","kind":"section","type":"section","url":"\/tutorials\/space\/codingyourfirstcontract#Testing-the-Contract","title":"Testing the Contract","role":"pseudoSymbol","abstract":[{"type":"text","text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user."}]},"doc://Space/tutorials/Space/CodingYourFirstContract#Initializing-the-Project":{"abstract":[{"type":"text","text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user."}],"url":"\/tutorials\/space\/codingyourfirstcontract#Initializing-the-Project","role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract#Initializing-the-Project","type":"section","title":"Initializing the Project"},"doc://Space/tutorials/Space/StoreValues":{"role":"project","identifier":"doc:\/\/Space\/tutorials\/Space\/StoreValues","title":"Persist Values Between Executions","url":"\/tutorials\/space\/storevalues","type":"topic","kind":"project","estimatedTime":"15min","abstract":[{"text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory.","type":"text"}]},"FamiliarizeWithTypesSection3Step8.swift":{"identifier":"FamiliarizeWithTypesSection3Step8.swift","type":"file","highlights":[{"line":15},{"line":16},{"line":17},{"line":18}],"content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        let initialNumber: BigUint = 5","        ","        var result = initialNumber + 3","        result = result * 7","        result = result + initialNumber * 3","        result = result - 21","        ","        guard result % 10 == 0 else {","            smartContractError(message: \"result is not a multiple of 10\")","        }","        ","        guard result > 0 else {","            smartContractError(message: \"result is 0\")","        }","    }","}"],"fileType":"swift","fileName":"lib.swift","syntax":"swift"},"doc://Space/tutorials/Space/GetInfo#Accessing-Transaction-Context-Data":{"identifier":"doc:\/\/Space\/tutorials\/Space\/GetInfo#Accessing-Transaction-Context-Data","title":"Accessing Transaction Context Data","abstract":[{"text":"Many smart contracts rely on contextual data to execute their operations effectively. This data can include input payments, the caller’s address, the current time, the balance of a specific account, or even the contract owner.","type":"text"}],"type":"section","role":"pseudoSymbol","kind":"section","url":"\/tutorials\/space\/getinfo#Accessing-Transaction-Context-Data"},"doc://Space/tutorials/Space/Getting-Started/Building-Your-First-Smart-Contract":{"role":"article","identifier":"doc:\/\/Space\/tutorials\/Space\/Getting-Started\/Building-Your-First-Smart-Contract","title":"Building Your First Smart Contract","url":"\/tutorials\/space\/getting-started\/building-your-first-smart-contract","type":"topic","kind":"article","abstract":[]},"FamiliarizeWithTypesSection5Step2.swift":{"fileType":"swift","highlights":[{"line":3}],"content":["import Space","","@Codable struct MyStruct {","    let myBiguint: BigUint","    let myInteger: UInt64","    let myBuffer: Buffer","}"],"syntax":"swift","type":"file","identifier":"FamiliarizeWithTypesSection5Step2.swift","fileName":"struct.swift"},"FamiliarizeWithTypesSection2Step3.swift":{"highlights":[{"line":6}],"fileType":"swift","fileName":"lib.swift","content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        var myBuffer: Buffer = \"Hello\"","        myBuffer = myBuffer.appended(\" World!\")","    }","}"],"identifier":"FamiliarizeWithTypesSection2Step3.swift","syntax":"swift","type":"file"},"doc://Space/tutorials/Space/CodingYourFirstContract":{"identifier":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract","estimatedTime":"20min","title":"Building Your First Smart Contract","abstract":[{"type":"text","text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user."}],"type":"topic","role":"project","kind":"project","url":"\/tutorials\/space\/codingyourfirstcontract"},"doc://Space/tutorials/Space/InstallingTools":{"estimatedTime":"10min","url":"\/tutorials\/space\/installingtools","role":"project","type":"topic","identifier":"doc:\/\/Space\/tutorials\/Space\/InstallingTools","title":"Install the Necessary Tools","abstract":[{"type":"text","text":"Before writing your first smart contract with Space, ensure you have the necessary tools installed."}],"kind":"project"}}}