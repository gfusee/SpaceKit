{"hierarchy":{"paths":[["doc:\/\/Space\/tutorials\/Space","doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts","doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Exploring-Space's-Types"]],"reference":"doc:\/\/Space\/tutorials\/Space","modules":[{"projects":[{"reference":"doc:\/\/Space\/tutorials\/Space\/InstallingTools","sections":[{"reference":"doc:\/\/Space\/tutorials\/Space\/InstallingTools#Installing-Spaces-Dependencies","kind":"task"},{"kind":"task","reference":"doc:\/\/Space\/tutorials\/Space\/InstallingTools#Setting-Up-the-Space-CLI"},{"reference":"doc:\/\/Space\/tutorials\/Space\/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract","kind":"task"}]}],"reference":"doc:\/\/Space\/tutorials\/Space\/Getting-Started\/Installing-the-Tools"},{"projects":[{"sections":[{"reference":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract#Initializing-the-Project","kind":"task"},{"kind":"task","reference":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract#Writing-the-Contract-Code"},{"kind":"task","reference":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract#Testing-the-Contract"}],"reference":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract"}],"reference":"doc:\/\/Space\/tutorials\/Space\/Getting-Started\/Building-Your-First-Smart-Contract"},{"projects":[{"reference":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes","sections":[{"kind":"task","reference":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges"},{"kind":"task","reference":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Understanding-the-Buffer-Type"},{"kind":"task","reference":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Working-with-the-BigUint-Type"},{"kind":"task","reference":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Working-with-the-Vector-Type"},{"reference":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Creating-Your-Own-Types","kind":"task"}]}],"reference":"doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Exploring-Space's-Types"},{"reference":"doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Persisting-Data-Across-Executions","projects":[{"reference":"doc:\/\/Space\/tutorials\/Space\/StoreValues","sections":[{"kind":"task","reference":"doc:\/\/Space\/tutorials\/Space\/StoreValues#Working-with-Storage-for-Single-Value-Persistence"},{"reference":"doc:\/\/Space\/tutorials\/Space\/StoreValues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage","kind":"task"}]}]},{"reference":"doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Retrieving-Information-from-the-Blockchain","projects":[{"reference":"doc:\/\/Space\/tutorials\/Space\/GetInfo","sections":[{"reference":"doc:\/\/Space\/tutorials\/Space\/GetInfo#Accessing-Transaction-Context-Data","kind":"task"},{"kind":"task","reference":"doc:\/\/Space\/tutorials\/Space\/GetInfo#Accessing-Blockchain-Context-Data"}]}]},{"reference":"doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Interacting-with-Other-Contracts","projects":[{"sections":[{"kind":"task","reference":"doc:\/\/Space\/tutorials\/Space\/SyncCalls#Declare-the-Callee-Proxy"},{"kind":"task","reference":"doc:\/\/Space\/tutorials\/Space\/SyncCalls#Perform-a-Synchronous-Call"}],"reference":"doc:\/\/Space\/tutorials\/Space\/SyncCalls"}]},{"reference":"doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Calling-Contracts-Across-Shards","projects":[{"reference":"doc:\/\/Space\/tutorials\/Space\/AsyncCalls","sections":[{"reference":"doc:\/\/Space\/tutorials\/Space\/AsyncCalls#Declare-the-Callee-Proxy","kind":"task"},{"kind":"task","reference":"doc:\/\/Space\/tutorials\/Space\/AsyncCalls#Perform-an-Asynchronous-Call"}]}]}]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/tutorials\/space\/familiarizewithtypes"]}],"sections":[{"chapter":"Exploring Space's Types","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Space provides types that allow you to leverage the full potential of the SpaceVM."}]}],"title":"Exploring Space's Types","estimatedTimeInMinutes":20,"kind":"hero"},{"kind":"tasks","tasks":[{"contentSection":[{"kind":"contentAndMedia","content":[{"inlineContent":[{"type":"text","text":"Writing code for blockchain involves operating within strict resource constraints. To address this, Space uses Swift’s “embedded” mode, ensuring the compiled code is as lightweight and efficient as possible."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"SpaceVM, the engine running smart contracts, limits heap allocations. As a result, types with dynamic sizes, such as Strings, Arrays, or classes, and any structs or enums containing these, are not permitted."}]},{"type":"paragraph","inlineContent":[{"text":"Additionally, Swift’s existential types—such as ","type":"text"},{"type":"codeVoice","code":"any Protocol"},{"type":"text","text":" where "},{"type":"codeVoice","code":"Protocol"},{"text":" is a protocol—are also forbidden. Existential types introduce runtime overhead, which is why they are not allowed in Space.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"The allowed Swift types are:","type":"text"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"StaticString"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Integer types: Int, UInt, UInt8, UInt16, etc."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Bool: treated as a UInt8","type":"text"}]}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"Space introduces specific types that serve as alternatives for those not allowed. This chapter introduces three key replacements:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"code":"Buffer","type":"codeVoice"},{"text":": A substitute for String and Data","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"code":"BigUint","type":"codeVoice"},{"text":": Capable of handling large unsigned integers","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"code":"Vector","type":"codeVoice"},{"type":"text","text":": An alternative to Array"}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For security, these types do not feature mutating methods. Instead, they use methods that return new instances. For example, the "},{"code":"Buffer","type":"codeVoice"},{"type":"text","text":" type does not include "},{"type":"codeVoice","code":"append(_:) -> Void"},{"type":"text","text":" but instead offers "},{"type":"codeVoice","code":"appending(_:) -> Buffer"},{"type":"text","text":"."}]}],"mediaPosition":"trailing"}],"anchor":"Handling-Heap-Allocation-Challenges","stepsSection":[{"media":null,"runtimePreview":null,"caption":[],"type":"step","code":"FamiliarizeWithTypesSection1Step1.swift","content":[{"type":"paragraph","inlineContent":[{"text":"Avoid using ","type":"text"},{"code":"String","type":"codeVoice"},{"text":" in Space, as it is prohibited due to memory restrictions.","type":"text"}]}]},{"code":"FamiliarizeWithTypesSection1Step2.swift","caption":[],"type":"step","content":[{"inlineContent":[{"type":"text","text":"Use "},{"code":"Buffer","type":"codeVoice"},{"text":" as a fixed-size alternative for handling raw data and text.","type":"text"}],"type":"paragraph"}],"media":null,"runtimePreview":null},{"media":null,"code":"FamiliarizeWithTypesSection1Step3.swift","type":"step","runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"Similarly, avoid using "},{"type":"codeVoice","code":"Array"},{"text":" since it leads to heap allocations and is not allowed.","type":"text"}],"type":"paragraph"}],"caption":[]},{"code":"FamiliarizeWithTypesSection1Step4.swift","type":"step","runtimePreview":null,"caption":[],"media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Instead, leverage the "},{"type":"codeVoice","code":"Vector"},{"text":" type as a memory-efficient alternative to ","type":"text"},{"code":"Array","type":"codeVoice"},{"text":".","type":"text"}]}]},{"media":null,"code":"FamiliarizeWithTypesSection1Step5.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Integer types like "},{"code":"Int","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"UInt"},{"type":"text","text":", and "},{"code":"Bool","type":"codeVoice"},{"type":"text","text":" are fully supported and safe to use."}]}],"caption":[],"runtimePreview":null,"type":"step"},{"media":null,"code":"FamiliarizeWithTypesSection1Step6.swift","runtimePreview":null,"type":"step","caption":[],"content":[{"type":"paragraph","inlineContent":[{"text":"Ensure you only import the Space framework to keep the contract lightweight and efficient.","type":"text"}]}]}],"title":"Handling Heap Allocation Challenges"},{"stepsSection":[{"type":"step","media":null,"content":[{"inlineContent":[{"type":"text","text":"Start by creating the basic structure for your contract."}],"type":"paragraph"}],"code":"FamiliarizeWithTypesSection2Step1.swift","caption":[],"runtimePreview":null},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Initialize a "},{"code":"Buffer","type":"codeVoice"},{"type":"text","text":" variable using a string literal."}]}],"runtimePreview":null,"media":null,"code":"FamiliarizeWithTypesSection2Step2.swift","caption":[{"inlineContent":[{"type":"text","text":"Important: Explicitly declare your variable as "},{"type":"codeVoice","code":"Buffer"},{"text":" to avoid being interpreted as ","type":"text"},{"code":"String","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}],"type":"step"},{"type":"step","caption":[],"code":"FamiliarizeWithTypesSection2Step3.swift","runtimePreview":null,"media":null,"content":[{"inlineContent":[{"type":"text","text":"Append another "},{"type":"codeVoice","code":"Buffer"},{"type":"text","text":" to your existing variable."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Compare two "},{"type":"codeVoice","code":"Buffer"},{"text":" instances. If they don’t match, throw a smart contract error.","type":"text"}]}],"media":null,"runtimePreview":null,"code":"FamiliarizeWithTypesSection2Step4.swift","type":"step","caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Note: The "},{"code":"smartContractError","type":"codeVoice"},{"text":" function requires a ","type":"text"},{"type":"codeVoice","code":"Buffer"},{"type":"text","text":" parameter. This topic is covered in detail in a later chapter."}]}]}],"title":"Understanding the Buffer Type","anchor":"Understanding-the-Buffer-Type","contentSection":[{"mediaPosition":"trailing","content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Buffer"},{"type":"text","text":" is a fundamental type in Space, designed to store raw data and strings."}]}],"kind":"contentAndMedia"}]},{"anchor":"Working-with-the-BigUint-Type","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Blockchains do not support decimal numbers. However, real-world applications often require decimal representation, such as in cryptocurrency amounts like 0.09281 Bitcoin."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To handle such cases, values are expressed as large numbers, where many tokens allocate the last 18 digits to represent the decimal portion. For instance: 1 EGLD equals 1 * 10^18, or 1,000,000,000,000,000,000."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Standard Swift types, such as "},{"type":"codeVoice","code":"UInt64"},{"type":"text","text":", can only store values up to 18,446,744,073,709,551,615 (20 digits), making it impossible to represent values exceeding approximately 18.446744 EGLD."}]},{"inlineContent":[{"type":"text","text":"Space provides the "},{"type":"codeVoice","code":"BigUint"},{"text":" type to store arbitrarily large positive numbers.","type":"text"}],"type":"paragraph"}],"mediaPosition":"trailing"}],"stepsSection":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Begin by structuring your contract."}]}],"type":"step","runtimePreview":null,"caption":[],"media":null,"code":"FamiliarizeWithTypesSection3Step1.swift"},{"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Declare a ","type":"text"},{"type":"codeVoice","code":"BigUint"},{"type":"text","text":" constant with an integer literal."}]}],"code":"FamiliarizeWithTypesSection3Step2.swift","caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Important: You must specify the type explicitly as "},{"code":"BigUint","type":"codeVoice"},{"text":", or it will default to ","type":"text"},{"code":"Int","type":"codeVoice"},{"text":".","type":"text"}]}],"type":"step","media":null},{"caption":[],"code":"FamiliarizeWithTypesSection3Step3.swift","type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Create a new ","type":"text"},{"code":"BigUint","type":"codeVoice"},{"type":"text","text":" by adding 3 to the previous constant."}]}],"media":null,"runtimePreview":null},{"caption":[],"media":null,"code":"FamiliarizeWithTypesSection3Step4.swift","runtimePreview":null,"type":"step","content":[{"inlineContent":[{"text":"Multiply the new variable by 7.","type":"text"}],"type":"paragraph"}]},{"media":null,"caption":[],"code":"FamiliarizeWithTypesSection3Step5.swift","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Add three times the initial constant to the new variable.","type":"text"}]}],"type":"step"},{"type":"step","caption":[{"type":"paragraph","inlineContent":[{"text":"Note: A ","type":"text"},{"code":"BigUint","type":"codeVoice"},{"type":"text","text":" value cannot be negative. If the subtraction results in a value below zero, Space will trigger a smart contract error."}]}],"media":null,"runtimePreview":null,"content":[{"inlineContent":[{"text":"Subtract 21 from the variable.","type":"text"}],"type":"paragraph"}],"code":"FamiliarizeWithTypesSection3Step6.swift"},{"code":"FamiliarizeWithTypesSection3Step7.swift","media":null,"runtimePreview":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Verify that the result is a multiple of 10, and throw a smart contract error if not.","type":"text"}]}],"caption":[]},{"type":"step","runtimePreview":null,"code":"FamiliarizeWithTypesSection3Step8.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Ensure the result is greater than zero, throwing an error if it isn’t."}]}],"caption":[],"media":null}],"title":"Working with the BigUint Type"},{"title":"Working with the Vector Type","contentSection":[{"kind":"contentAndMedia","content":[{"inlineContent":[{"text":"The ","type":"text"},{"code":"Array","type":"codeVoice"},{"text":" type is often the default for storing dynamic-size data, but it is not permitted in Space. Fortunately, Space provides a suitable alternative: ","type":"text"},{"type":"codeVoice","code":"Vector"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"A ","type":"text"},{"code":"Vector","type":"codeVoice"},{"type":"text","text":" can store any type compatible with Space, including user-defined structs and enums."}]}],"mediaPosition":"trailing"}],"anchor":"Working-with-the-Vector-Type","stepsSection":[{"runtimePreview":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Begin by setting up the basic structure of your contract.","type":"text"}]}],"caption":[],"code":"FamiliarizeWithTypesSection4Step1.swift","media":null},{"content":[{"type":"paragraph","inlineContent":[{"text":"Declare a ","type":"text"},{"code":"Vector","type":"codeVoice"},{"type":"text","text":" variable to hold "},{"type":"codeVoice","code":"BigUint"},{"text":" elements.","type":"text"}]}],"type":"step","runtimePreview":null,"caption":[{"inlineContent":[{"text":"Important: Currently, array literal assignment is disabled. The Space team is investigating its impact on memory management in smart contracts before enabling it.","type":"text"}],"type":"paragraph"}],"code":"FamiliarizeWithTypesSection4Step2.swift","media":null},{"type":"step","content":[{"inlineContent":[{"text":"Add elements to the ","type":"text"},{"type":"codeVoice","code":"Vector"},{"text":".","type":"text"}],"type":"paragraph"}],"caption":[],"code":"FamiliarizeWithTypesSection4Step3.swift","runtimePreview":null,"media":null},{"content":[{"type":"paragraph","inlineContent":[{"text":"Iterate over the ","type":"text"},{"type":"codeVoice","code":"Vector"},{"type":"text","text":" to sum all the elements."}]}],"type":"step","caption":[{"inlineContent":[{"type":"text","text":"Important: The "},{"code":"for ... in","type":"codeVoice"},{"type":"text","text":" loop for vectors is currently disabled. The Space team is evaluating its effect on smart contract memory before enabling it."}],"type":"paragraph"}],"media":null,"code":"FamiliarizeWithTypesSection4Step4.swift","runtimePreview":null},{"type":"step","code":"FamiliarizeWithTypesSection4Step5.swift","media":null,"caption":[],"runtimePreview":null,"content":[{"inlineContent":[{"text":"Ensure the sum equals 13. Throw a smart contract error if it doesn’t.","type":"text"}],"type":"paragraph"}]}]},{"title":"Creating Your Own Types","stepsSection":[{"code":"FamiliarizeWithTypesSection5Step1.swift","type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Start by creating a struct with fields that are compatible with Space."}]}],"media":null,"runtimePreview":null,"caption":[]},{"caption":[],"code":"FamiliarizeWithTypesSection5Step2.swift","type":"step","runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"Annotate your struct with "},{"type":"codeVoice","code":"@Codable"},{"type":"text","text":" to make it usable with Space’s encoding system."}],"type":"paragraph"}],"media":null},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the "},{"code":"@Codable","type":"codeVoice"},{"type":"text","text":"-annotated type within your smart contracts."}]}],"runtimePreview":null,"code":"FamiliarizeWithTypesSection5Step3.swift","type":"step","media":null,"caption":[]},{"type":"step","caption":[],"content":[{"type":"paragraph","inlineContent":[{"text":"Remember, a ","type":"text"},{"type":"codeVoice","code":"@Codable"},{"text":" type can be used as a field in other ","type":"text"},{"code":"@Codable","type":"codeVoice"},{"type":"text","text":" types."}]}],"media":null,"code":"FamiliarizeWithTypesSection5Step4.swift","runtimePreview":null}],"contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"text":"You can define your own structures and enumerations and make them compatible with Space using the ","type":"text"},{"code":"@Codable","type":"codeVoice"},{"type":"text","text":" annotation. When a type is marked with "},{"type":"codeVoice","code":"@Codable"},{"type":"text","text":", it becomes eligible to be used as input or output for endpoints, within arrays, and anywhere Space’s encoding system is applied."}]},{"inlineContent":[{"type":"text","text":"A type annotated with "},{"type":"codeVoice","code":"@Codable"},{"text":" must only contain fields of types compatible with Space, such as integers, ","type":"text"},{"type":"codeVoice","code":"Bool"},{"type":"text","text":", "},{"type":"codeVoice","code":"Buffer"},{"text":", ","type":"text"},{"code":"BigUint","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"Vector"},{"type":"text","text":", and other "},{"type":"codeVoice","code":"@Codable"},{"type":"text","text":" types."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Additionally, the ","type":"text"},{"code":"@Codable","type":"codeVoice"},{"text":" annotation prevents the structure from having methods or initializers.","type":"text"}]}],"mediaPosition":"trailing"}],"anchor":"Creating-Your-Own-Types"}]},{"abstract":[{"type":"text","text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory."}],"featuredEyebrow":"Tutorial","action":{"isActive":true,"overridingTitle":"Get started","overridingTitleInlineContent":[{"type":"text","text":"Get started"}],"identifier":"doc:\/\/Space\/tutorials\/Space\/StoreValues","type":"reference"},"kind":"callToAction","title":"Persist Values Between Executions"}],"schemaVersion":{"major":0,"patch":0,"minor":3},"metadata":{"categoryPathComponent":"Space","title":"Exploring Space's Types","role":"project","category":"Space"},"kind":"project","identifier":{"url":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes","interfaceLanguage":"swift"},"references":{"FamiliarizeWithTypesSection3Step1.swift":{"syntax":"swift","highlights":[],"identifier":"FamiliarizeWithTypesSection3Step1.swift","type":"file","fileType":"swift","content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        ","    }","}"],"fileName":"lib.swift"},"FamiliarizeWithTypesSection1Step1.swift":{"fileName":"lib.swift","syntax":"swift","identifier":"FamiliarizeWithTypesSection1Step1.swift","type":"file","content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        let myString: String = \"Hey!\" \/\/ Won't compile! ❌","    }","}"],"fileType":"swift","highlights":[]},"FamiliarizeWithTypesSection4Step5.swift":{"fileName":"lib.swift","syntax":"swift","identifier":"FamiliarizeWithTypesSection4Step5.swift","content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        var myVector: Vector<BigUint> = Vector()","        myVector = myVector.appended(2)","        myVector = myVector.appended(10)","        myVector = myVector.appended(1)","        ","        var sum: BigUint = 0","        myVector.forEach { item in","            sum = sum + item","        }","        ","        guard sum == 13 else {","            smartContractError(message: \"sum is not 13\")","        }","    }","}"],"fileType":"swift","type":"file","highlights":[{"line":14},{"line":15},{"line":16},{"line":17}]},"doc://Space/tutorials/Space/Deep-Dive-into-Space-Concepts/Retrieving-Information-from-the-Blockchain":{"title":"Retrieving Information from the Blockchain","kind":"article","identifier":"doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Retrieving-Information-from-the-Blockchain","url":"\/tutorials\/space\/deep-dive-into-space-concepts\/retrieving-information-from-the-blockchain","role":"article","type":"topic","abstract":[]},"doc://Space/tutorials/Space/CodingYourFirstContract#Initializing-the-Project":{"role":"pseudoSymbol","identifier":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract#Initializing-the-Project","type":"section","url":"\/tutorials\/space\/codingyourfirstcontract#Initializing-the-Project","title":"Initializing the Project","kind":"section","abstract":[{"type":"text","text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user."}]},"doc://Space/tutorials/Space/SyncCalls#Declare-the-Callee-Proxy":{"abstract":[{"type":"text","text":"Smart contracts can interact not only with users but also with other smart contracts. This enables more advanced protocols by leveraging existing ones. For example, you could integrate a decentralized exchange directly into your contract to perform token swaps. Decentralized applications often involve multiple contracts, each with a dedicated role, working together to achieve complex functionality—similar to microservices in backend systems."}],"role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/Space\/tutorials\/Space\/SyncCalls#Declare-the-Callee-Proxy","type":"section","title":"Declare the Callee Proxy","url":"\/tutorials\/space\/synccalls#Declare-the-Callee-Proxy"},"doc://Space/tutorials/Space/InstallingTools":{"role":"project","identifier":"doc:\/\/Space\/tutorials\/Space\/InstallingTools","type":"topic","url":"\/tutorials\/space\/installingtools","estimatedTime":"10min","title":"Install the Necessary Tools","kind":"project","abstract":[{"type":"text","text":"Before writing your first smart contract with Space, ensure you have the necessary tools installed."}]},"doc://Space/tutorials/Space/StoreValues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage":{"abstract":[{"type":"text","text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory."}],"role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/Space\/tutorials\/Space\/StoreValues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage","type":"section","title":"Leveraging @Mapping for Dynamic Key-Value Storage","url":"\/tutorials\/space\/storevalues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage"},"FamiliarizeWithTypesSection5Step3.swift":{"syntax":"swift","fileName":"lib.swift","content":["import Space","","@Contract struct MyContract {","    public func myEndpoint(myStruct: MyStruct) {","        \/\/ Do what you want here","    }","}"],"identifier":"FamiliarizeWithTypesSection5Step3.swift","type":"file","fileType":"swift","highlights":[]},"FamiliarizeWithTypesSection3Step4.swift":{"fileName":"lib.swift","content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        let initialNumber: BigUint = 5","        ","        var result = initialNumber + 3","        result = result * 7","    }","}"],"identifier":"FamiliarizeWithTypesSection3Step4.swift","type":"file","highlights":[{"line":8}],"fileType":"swift","syntax":"swift"},"doc://Space/tutorials/Space/FamiliarizeWithTypes#Creating-Your-Own-Types":{"url":"\/tutorials\/space\/familiarizewithtypes#Creating-Your-Own-Types","abstract":[{"text":"Space provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}],"kind":"section","identifier":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Creating-Your-Own-Types","type":"section","title":"Creating Your Own Types","role":"pseudoSymbol"},"doc://Space/tutorials/Space/InstallingTools#Installing-Spaces-Dependencies":{"kind":"section","url":"\/tutorials\/space\/installingtools#Installing-Spaces-Dependencies","identifier":"doc:\/\/Space\/tutorials\/Space\/InstallingTools#Installing-Spaces-Dependencies","title":"Installing Space's Dependencies","type":"section","role":"pseudoSymbol","abstract":[{"text":"Before writing your first smart contract with Space, ensure you have the necessary tools installed.","type":"text"}]},"doc://Space/tutorials/Space/GetInfo#Accessing-Blockchain-Context-Data":{"url":"\/tutorials\/space\/getinfo#Accessing-Blockchain-Context-Data","abstract":[{"text":"Many smart contracts rely on contextual data to execute their operations effectively. This data can include input payments, the caller’s address, the current time, the balance of a specific account, or even the contract owner.","type":"text"}],"kind":"section","identifier":"doc:\/\/Space\/tutorials\/Space\/GetInfo#Accessing-Blockchain-Context-Data","type":"section","title":"Accessing Blockchain Context Data","role":"pseudoSymbol"},"doc://Space/tutorials/Space/CodingYourFirstContract":{"kind":"project","url":"\/tutorials\/space\/codingyourfirstcontract","identifier":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract","title":"Building Your First Smart Contract","type":"topic","role":"project","estimatedTime":"20min","abstract":[{"text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user.","type":"text"}]},"doc://Space/tutorials/Space/GetInfo#Accessing-Transaction-Context-Data":{"url":"\/tutorials\/space\/getinfo#Accessing-Transaction-Context-Data","kind":"section","identifier":"doc:\/\/Space\/tutorials\/Space\/GetInfo#Accessing-Transaction-Context-Data","title":"Accessing Transaction Context Data","role":"pseudoSymbol","type":"section","abstract":[{"text":"Many smart contracts rely on contextual data to execute their operations effectively. This data can include input payments, the caller’s address, the current time, the balance of a specific account, or even the contract owner.","type":"text"}]},"doc://Space/tutorials/Space/StoreValues":{"url":"\/tutorials\/space\/storevalues","abstract":[{"text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory.","type":"text"}],"kind":"project","identifier":"doc:\/\/Space\/tutorials\/Space\/StoreValues","type":"topic","title":"Persist Values Between Executions","role":"project","estimatedTime":"15min"},"FamiliarizeWithTypesSection1Step5.swift":{"highlights":[{"line":13},{"line":14},{"line":15},{"line":16}],"type":"file","fileType":"swift","content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        let myString: String = \"Hey!\" \/\/ Won't compile! ❌","        let myBuffer: Buffer = \"Hey!\" \/\/ Fine ✅","        ","        let myArray: [UInt64] = [4, 8, 100] \/\/ Won't compile! ❌","        var myVector: Vector<UInt64> = Vector() \/\/ Fine ✅","            .appended(4)","            .appended(8)","            .appended(100)","        ","        let two = 2 \/\/ Fine ✅","        let ten: UInt64 = 10 \/\/ Fine ✅","        let isTwoEven = true \/\/ Fine ✅","    }","}"],"syntax":"swift","identifier":"FamiliarizeWithTypesSection1Step5.swift","fileName":"lib.swift"},"doc://Space/tutorials/Space/FamiliarizeWithTypes#Working-with-the-BigUint-Type":{"identifier":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Working-with-the-BigUint-Type","role":"pseudoSymbol","kind":"section","url":"\/tutorials\/space\/familiarizewithtypes#Working-with-the-BigUint-Type","type":"section","title":"Working with the BigUint Type","abstract":[{"type":"text","text":"Space provides types that allow you to leverage the full potential of the SpaceVM."}]},"doc://Space/tutorials/Space/InstallingTools#Setting-Up-the-Space-CLI":{"type":"section","identifier":"doc:\/\/Space\/tutorials\/Space\/InstallingTools#Setting-Up-the-Space-CLI","title":"Setting Up the Space CLI","abstract":[{"type":"text","text":"Before writing your first smart contract with Space, ensure you have the necessary tools installed."}],"kind":"section","role":"pseudoSymbol","url":"\/tutorials\/space\/installingtools#Setting-Up-the-Space-CLI"},"FamiliarizeWithTypesSection2Step2.swift":{"type":"file","fileType":"swift","content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        var myBuffer: Buffer = \"Hello\"","    }","}"],"identifier":"FamiliarizeWithTypesSection2Step2.swift","syntax":"swift","fileName":"lib.swift","highlights":[{"line":5}]},"FamiliarizeWithTypesSection1Step4.swift":{"syntax":"swift","fileType":"swift","identifier":"FamiliarizeWithTypesSection1Step4.swift","fileName":"lib.swift","content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        let myString: String = \"Hey!\" \/\/ Won't compile! ❌","        let myBuffer: Buffer = \"Hey!\" \/\/ Fine ✅","        ","        let myArray: [UInt64] = [4, 8, 100] \/\/ Won't compile! ❌","        var myVector: Vector<UInt64> = Vector() \/\/ Fine ✅","            .appended(4)","            .appended(8)","            .appended(100)","    }","}"],"highlights":[{"line":9},{"line":10},{"line":11},{"line":12}],"type":"file"},"FamiliarizeWithTypesSection2Step4.swift":{"syntax":"swift","content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        var myBuffer: Buffer = \"Hello\"","        myBuffer = myBuffer.appended(\" World!\")","        ","        guard myBuffer != \"Hello World!\" else {","            smartContractError(message: \"myBuffer is not equal to Hello World!\")","        }","    }","}"],"fileType":"swift","fileName":"lib.swift","highlights":[{"line":7},{"line":8},{"line":9},{"line":10}],"identifier":"FamiliarizeWithTypesSection2Step4.swift","type":"file"},"FamiliarizeWithTypesSection5Step4.swift":{"content":["import Space","","@Codable enum MyEnum {","    case firstCase(BigUint)","}","","@Codable struct MyStruct {","    let myBiguint: BigUint","    let myInteger: UInt64","    let myBuffer: Buffer","    let myEnum: MyEnum","}"],"fileType":"swift","syntax":"swift","type":"file","highlights":[],"fileName":"struct.swift","identifier":"FamiliarizeWithTypesSection5Step4.swift"},"doc://Space/tutorials/Space":{"url":"\/tutorials\/space","identifier":"doc:\/\/Space\/tutorials\/Space","kind":"overview","title":"Meet Space","role":"overview","abstract":[{"type":"text","text":"Discover how Space simplifies blockchain development using Swift. Dive into the world of Web3 with ease and efficiency."}],"type":"topic"},"doc://Space/tutorials/Space/Deep-Dive-into-Space-Concepts/Exploring-Space's-Types":{"abstract":[],"identifier":"doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Exploring-Space's-Types","title":"Exploring Space's Types","kind":"article","role":"article","url":"\/tutorials\/space\/deep-dive-into-space-concepts\/exploring-space's-types","type":"topic"},"doc://Space/tutorials/Space/CodingYourFirstContract#Testing-the-Contract":{"url":"\/tutorials\/space\/codingyourfirstcontract#Testing-the-Contract","identifier":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract#Testing-the-Contract","kind":"section","title":"Testing the Contract","role":"pseudoSymbol","abstract":[{"type":"text","text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user."}],"type":"section"},"FamiliarizeWithTypesSection3Step6.swift":{"content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        let initialNumber: BigUint = 5","        ","        var result = initialNumber + 3","        result = result * 7","        result = result + initialNumber * 3","        result = result - 21","    }","}"],"syntax":"swift","identifier":"FamiliarizeWithTypesSection3Step6.swift","fileName":"lib.swift","highlights":[{"line":10}],"fileType":"swift","type":"file"},"doc://Space/tutorials/Space/GetInfo":{"estimatedTime":"10min","url":"\/tutorials\/space\/getinfo","identifier":"doc:\/\/Space\/tutorials\/Space\/GetInfo","kind":"project","title":"Retrieving Information from the Blockchain","role":"project","abstract":[{"type":"text","text":"Many smart contracts rely on contextual data to execute their operations effectively. This data can include input payments, the caller’s address, the current time, the balance of a specific account, or even the contract owner."}],"type":"topic"},"doc://Space/tutorials/Space/Deep-Dive-into-Space-Concepts/Calling-Contracts-Across-Shards":{"type":"topic","role":"article","kind":"article","title":"Calling Contracts Across Shards","url":"\/tutorials\/space\/deep-dive-into-space-concepts\/calling-contracts-across-shards","abstract":[],"identifier":"doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Calling-Contracts-Across-Shards"},"doc://Space/tutorials/Space/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract":{"url":"\/tutorials\/space\/installingtools#Initializing-and-Compiling-Your-First-Smart-Contract","identifier":"doc:\/\/Space\/tutorials\/Space\/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract","kind":"section","title":"Initializing and Compiling Your First Smart Contract","role":"pseudoSymbol","abstract":[{"type":"text","text":"Before writing your first smart contract with Space, ensure you have the necessary tools installed."}],"type":"section"},"FamiliarizeWithTypesSection4Step4.swift":{"content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        var myVector: Vector<BigUint> = Vector()","        myVector = myVector.appended(2)","        myVector = myVector.appended(10)","        myVector = myVector.appended(1)","        ","        var sum: BigUint = 0","        myVector.forEach { item in","            sum = sum + item","        }","    }","}"],"type":"file","fileName":"lib.swift","highlights":[{"line":9},{"line":10},{"line":11},{"line":12},{"line":13}],"syntax":"swift","fileType":"swift","identifier":"FamiliarizeWithTypesSection4Step4.swift"},"FamiliarizeWithTypesSection5Step2.swift":{"fileType":"swift","highlights":[{"line":3}],"type":"file","content":["import Space","","@Codable struct MyStruct {","    let myBiguint: BigUint","    let myInteger: UInt64","    let myBuffer: Buffer","}"],"syntax":"swift","identifier":"FamiliarizeWithTypesSection5Step2.swift","fileName":"struct.swift"},"doc://Space/tutorials/Space/AsyncCalls#Perform-an-Asynchronous-Call":{"type":"section","role":"pseudoSymbol","kind":"section","title":"Perform an Asynchronous Call","url":"\/tutorials\/space\/asynccalls#Perform-an-Asynchronous-Call","abstract":[{"type":"text","text":"Blockchain platforms using SpaceVM enable seamless execution within a sharded environment. Sharding divides a blockchain’s global state and validation workload into smaller, manageable units known as shards. This method enhances scalability without compromising decentralization, allowing nodes to operate without significant computational resources."}],"identifier":"doc:\/\/Space\/tutorials\/Space\/AsyncCalls#Perform-an-Asynchronous-Call"},"FamiliarizeWithTypesSection4Step3.swift":{"syntax":"swift","fileType":"swift","identifier":"FamiliarizeWithTypesSection4Step3.swift","fileName":"lib.swift","content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        var myVector: Vector<BigUint> = Vector()","        myVector = myVector.appended(2)","        myVector = myVector.appended(10)","        myVector = myVector.appended(1)","    }","}"],"highlights":[{"line":6},{"line":7},{"line":8}],"type":"file"},"FamiliarizeWithTypesSection4Step1.swift":{"content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        ","    }","}"],"type":"file","fileName":"lib.swift","highlights":[],"syntax":"swift","fileType":"swift","identifier":"FamiliarizeWithTypesSection4Step1.swift"},"FamiliarizeWithTypesSection3Step5.swift":{"type":"file","highlights":[{"line":9}],"fileName":"lib.swift","syntax":"swift","identifier":"FamiliarizeWithTypesSection3Step5.swift","content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        let initialNumber: BigUint = 5","        ","        var result = initialNumber + 3","        result = result * 7","        result = result + initialNumber * 3","    }","}"],"fileType":"swift"},"FamiliarizeWithTypesSection1Step2.swift":{"fileType":"swift","identifier":"FamiliarizeWithTypesSection1Step2.swift","syntax":"swift","content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        let myString: String = \"Hey!\" \/\/ Won't compile! ❌","        let myBuffer: Buffer = \"Hey!\" \/\/ Fine ✅","    }","}"],"type":"file","highlights":[{"line":6}],"fileName":"lib.swift"},"doc://Space/tutorials/Space/SyncCalls#Perform-a-Synchronous-Call":{"title":"Perform a Synchronous Call","url":"\/tutorials\/space\/synccalls#Perform-a-Synchronous-Call","kind":"section","identifier":"doc:\/\/Space\/tutorials\/Space\/SyncCalls#Perform-a-Synchronous-Call","role":"pseudoSymbol","abstract":[{"type":"text","text":"Smart contracts can interact not only with users but also with other smart contracts. This enables more advanced protocols by leveraging existing ones. For example, you could integrate a decentralized exchange directly into your contract to perform token swaps. Decentralized applications often involve multiple contracts, each with a dedicated role, working together to achieve complex functionality—similar to microservices in backend systems."}],"type":"section"},"FamiliarizeWithTypesSection3Step3.swift":{"content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        let initialNumber: BigUint = 5","        ","        var result = initialNumber + 3","    }","}"],"type":"file","identifier":"FamiliarizeWithTypesSection3Step3.swift","highlights":[{"line":6},{"line":7}],"fileType":"swift","fileName":"lib.swift","syntax":"swift"},"doc://Space/tutorials/Space/AsyncCalls":{"estimatedTime":"15min","abstract":[{"type":"text","text":"Blockchain platforms using SpaceVM enable seamless execution within a sharded environment. Sharding divides a blockchain’s global state and validation workload into smaller, manageable units known as shards. This method enhances scalability without compromising decentralization, allowing nodes to operate without significant computational resources."}],"type":"topic","title":"Interacting with Contracts Across Shards","role":"project","identifier":"doc:\/\/Space\/tutorials\/Space\/AsyncCalls","kind":"project","url":"\/tutorials\/space\/asynccalls"},"doc://Space/tutorials/Space/StoreValues#Working-with-Storage-for-Single-Value-Persistence":{"role":"pseudoSymbol","url":"\/tutorials\/space\/storevalues#Working-with-Storage-for-Single-Value-Persistence","type":"section","kind":"section","title":"Working with @Storage for Single Value Persistence","identifier":"doc:\/\/Space\/tutorials\/Space\/StoreValues#Working-with-Storage-for-Single-Value-Persistence","abstract":[{"type":"text","text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory."}]},"doc://Space/tutorials/Space/FamiliarizeWithTypes#Understanding-the-Buffer-Type":{"abstract":[{"type":"text","text":"Space provides types that allow you to leverage the full potential of the SpaceVM."}],"type":"section","role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Understanding-the-Buffer-Type","url":"\/tutorials\/space\/familiarizewithtypes#Understanding-the-Buffer-Type","title":"Understanding the Buffer Type"},"doc://Space/tutorials/Space/Getting-Started/Installing-the-Tools":{"abstract":[],"kind":"article","type":"topic","url":"\/tutorials\/space\/getting-started\/installing-the-tools","title":"Installing the Tools","identifier":"doc:\/\/Space\/tutorials\/Space\/Getting-Started\/Installing-the-Tools","role":"article"},"doc://Space/tutorials/Space/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges":{"abstract":[{"type":"text","text":"Space provides types that allow you to leverage the full potential of the SpaceVM."}],"kind":"section","role":"pseudoSymbol","identifier":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges","title":"Handling Heap Allocation Challenges","url":"\/tutorials\/space\/familiarizewithtypes#Handling-Heap-Allocation-Challenges","type":"section"},"FamiliarizeWithTypesSection3Step8.swift":{"syntax":"swift","type":"file","fileType":"swift","fileName":"lib.swift","identifier":"FamiliarizeWithTypesSection3Step8.swift","content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        let initialNumber: BigUint = 5","        ","        var result = initialNumber + 3","        result = result * 7","        result = result + initialNumber * 3","        result = result - 21","        ","        guard result % 10 == 0 else {","            smartContractError(message: \"result is not a multiple of 10\")","        }","        ","        guard result > 0 else {","            smartContractError(message: \"result is 0\")","        }","    }","}"],"highlights":[{"line":15},{"line":16},{"line":17},{"line":18}]},"doc://Space/tutorials/Space/Getting-Started/Building-Your-First-Smart-Contract":{"kind":"article","type":"topic","abstract":[],"role":"article","identifier":"doc:\/\/Space\/tutorials\/Space\/Getting-Started\/Building-Your-First-Smart-Contract","url":"\/tutorials\/space\/getting-started\/building-your-first-smart-contract","title":"Building Your First Smart Contract"},"doc://Space/tutorials/Space/SyncCalls":{"url":"\/tutorials\/space\/synccalls","estimatedTime":"15min","role":"project","type":"topic","title":"Interact with Other Contracts","identifier":"doc:\/\/Space\/tutorials\/Space\/SyncCalls","abstract":[{"text":"Smart contracts can interact not only with users but also with other smart contracts. This enables more advanced protocols by leveraging existing ones. For example, you could integrate a decentralized exchange directly into your contract to perform token swaps. Decentralized applications often involve multiple contracts, each with a dedicated role, working together to achieve complex functionality—similar to microservices in backend systems.","type":"text"}],"kind":"project"},"FamiliarizeWithTypesSection1Step6.swift":{"fileType":"swift","highlights":[{"line":2}],"syntax":"swift","type":"file","content":["import Space","import Foundation \/\/ Don't do this ❌","","@Contract struct MyContract {","    public func myEndpoint() {","        let myString: String = \"Hey!\" \/\/ Won't compile! ❌","        let myBuffer: Buffer = \"Hey!\" \/\/ Fine ✅","        ","        let myArray: [UInt64] = [4, 8, 100] \/\/ Won't compile! ❌","        var myVector: Vector<UInt64> = Vector() \/\/ Fine ✅","            .appended(4)","            .appended(8)","            .appended(100)","        ","        let two = 2 \/\/ Fine ✅","        let ten: UInt64 = 10 \/\/ Fine ✅","        let isTwoEven = true \/\/ Fine ✅","    }","}"],"fileName":"lib.swift","identifier":"FamiliarizeWithTypesSection1Step6.swift"},"FamiliarizeWithTypesSection3Step7.swift":{"content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        let initialNumber: BigUint = 5","        ","        var result = initialNumber + 3","        result = result * 7","        result = result + initialNumber * 3","        result = result - 21","        ","        guard result % 10 == 0 else {","            smartContractError(message: \"result is not a multiple of 10\")","        }","    }","}"],"fileName":"lib.swift","fileType":"swift","identifier":"FamiliarizeWithTypesSection3Step7.swift","highlights":[{"line":11},{"line":12},{"line":13},{"line":14}],"syntax":"swift","type":"file"},"doc://Space/tutorials/Space/CodingYourFirstContract#Writing-the-Contract-Code":{"abstract":[{"text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user.","type":"text"}],"type":"section","title":"Writing the Contract Code","role":"pseudoSymbol","identifier":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract#Writing-the-Contract-Code","kind":"section","url":"\/tutorials\/space\/codingyourfirstcontract#Writing-the-Contract-Code"},"FamiliarizeWithTypesSection2Step1.swift":{"identifier":"FamiliarizeWithTypesSection2Step1.swift","fileType":"swift","type":"file","highlights":[],"fileName":"lib.swift","content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        ","    }","}"],"syntax":"swift"},"FamiliarizeWithTypesSection3Step2.swift":{"content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        let initialNumber: BigUint = 5","    }","}"],"fileType":"swift","identifier":"FamiliarizeWithTypesSection3Step2.swift","highlights":[{"line":5}],"syntax":"swift","type":"file","fileName":"lib.swift"},"doc://Space/tutorials/Space/AsyncCalls#Declare-the-Callee-Proxy":{"kind":"section","type":"section","url":"\/tutorials\/space\/asynccalls#Declare-the-Callee-Proxy","role":"pseudoSymbol","title":"Declare the Callee Proxy","abstract":[{"type":"text","text":"Blockchain platforms using SpaceVM enable seamless execution within a sharded environment. Sharding divides a blockchain’s global state and validation workload into smaller, manageable units known as shards. This method enhances scalability without compromising decentralization, allowing nodes to operate without significant computational resources."}],"identifier":"doc:\/\/Space\/tutorials\/Space\/AsyncCalls#Declare-the-Callee-Proxy"},"FamiliarizeWithTypesSection4Step2.swift":{"fileName":"lib.swift","highlights":[{"line":5}],"identifier":"FamiliarizeWithTypesSection4Step2.swift","fileType":"swift","syntax":"swift","type":"file","content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        var myVector: Vector<BigUint> = Vector()","    }","}"]},"FamiliarizeWithTypesSection1Step3.swift":{"syntax":"swift","highlights":[{"line":7},{"line":8}],"fileName":"lib.swift","fileType":"swift","content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        let myString: String = \"Hey!\" \/\/ Won't compile! ❌","        let myBuffer: Buffer = \"Hey!\" \/\/ Fine ✅","        ","        let myArray: [UInt64] = [4, 8, 100] \/\/ Won't compile! ❌","    }","}"],"type":"file","identifier":"FamiliarizeWithTypesSection1Step3.swift"},"doc://Space/tutorials/Space/Deep-Dive-into-Space-Concepts/Interacting-with-Other-Contracts":{"role":"article","kind":"article","url":"\/tutorials\/space\/deep-dive-into-space-concepts\/interacting-with-other-contracts","type":"topic","identifier":"doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Interacting-with-Other-Contracts","abstract":[],"title":"Interacting with Other Contracts"},"FamiliarizeWithTypesSection2Step3.swift":{"highlights":[{"line":6}],"identifier":"FamiliarizeWithTypesSection2Step3.swift","fileName":"lib.swift","content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        var myBuffer: Buffer = \"Hello\"","        myBuffer = myBuffer.appended(\" World!\")","    }","}"],"syntax":"swift","fileType":"swift","type":"file"},"doc://Space/tutorials/Space/FamiliarizeWithTypes":{"role":"project","kind":"project","url":"\/tutorials\/space\/familiarizewithtypes","identifier":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes","type":"topic","abstract":[{"type":"text","text":"Space provides types that allow you to leverage the full potential of the SpaceVM."}],"title":"Exploring Space's Types","estimatedTime":"20min"},"doc://Space/tutorials/Space/Deep-Dive-into-Space-Concepts/Persisting-Data-Across-Executions":{"abstract":[],"kind":"article","role":"article","identifier":"doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Persisting-Data-Across-Executions","title":"Persisting Data Across Executions","url":"\/tutorials\/space\/deep-dive-into-space-concepts\/persisting-data-across-executions","type":"topic"},"FamiliarizeWithTypesSection5Step1.swift":{"content":["import Space","","struct MyStruct {","    let myBiguint: BigUint","    let myInteger: UInt64","    let myBuffer: Buffer","}"],"syntax":"swift","fileType":"swift","identifier":"FamiliarizeWithTypesSection5Step1.swift","type":"file","highlights":[],"fileName":"struct.swift"},"doc://Space/tutorials/Space/FamiliarizeWithTypes#Working-with-the-Vector-Type":{"abstract":[{"type":"text","text":"Space provides types that allow you to leverage the full potential of the SpaceVM."}],"kind":"section","role":"pseudoSymbol","identifier":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Working-with-the-Vector-Type","title":"Working with the Vector Type","url":"\/tutorials\/space\/familiarizewithtypes#Working-with-the-Vector-Type","type":"section"}}}