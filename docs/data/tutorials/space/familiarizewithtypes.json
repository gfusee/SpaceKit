{"sections":[{"title":"Exploring Space's Types","chapter":"Exploring Space's Types","estimatedTimeInMinutes":20,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Space provides types that allow you to leverage the full potential of the SpaceVM."}]}],"kind":"hero"},{"tasks":[{"contentSection":[{"kind":"contentAndMedia","content":[{"inlineContent":[{"type":"text","text":"Writing code for blockchain involves operating within strict resource constraints. To address this, Space uses Swift’s “embedded” mode, ensuring the compiled code is as lightweight and efficient as possible."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"SpaceVM, the engine running smart contracts, limits heap allocations. As a result, types with dynamic sizes, such as Strings, Arrays, or classes, and any structs or enums containing these, are not permitted."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Additionally, Swift’s existential types—such as ","type":"text"},{"type":"codeVoice","code":"any Protocol"},{"text":" where ","type":"text"},{"type":"codeVoice","code":"Protocol"},{"type":"text","text":" is a protocol—are also forbidden. Existential types introduce runtime overhead, which is why they are not allowed in Space."}]},{"type":"paragraph","inlineContent":[{"text":"The allowed Swift types are:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"StaticString","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Integer types: Int, UInt, UInt8, UInt16, etc."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Bool: treated as a UInt8"}],"type":"paragraph"}]}]},{"inlineContent":[{"type":"text","text":"Space introduces specific types that serve as alternatives for those not allowed. This chapter introduces three key replacements:"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Buffer"},{"type":"text","text":": A substitute for String and Data"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"BigUint"},{"type":"text","text":": Capable of handling large unsigned integers"}]}]},{"content":[{"inlineContent":[{"code":"Vector","type":"codeVoice"},{"text":": An alternative to Array","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"text":"For security, these types do not feature mutating methods. Instead, they use methods that return new instances. For example, the ","type":"text"},{"type":"codeVoice","code":"Buffer"},{"type":"text","text":" type does not include "},{"type":"codeVoice","code":"append(_:) -> Void"},{"type":"text","text":" but instead offers "},{"code":"appending(_:) -> Buffer","type":"codeVoice"},{"text":".","type":"text"}]}],"mediaPosition":"trailing"}],"title":"Handling Heap Allocation Challenges","stepsSection":[{"code":"FamiliarizeWithTypesSection1Step1.swift","media":null,"caption":[],"content":[{"inlineContent":[{"text":"Avoid using ","type":"text"},{"code":"String","type":"codeVoice"},{"type":"text","text":" in Space, as it is prohibited due to memory restrictions."}],"type":"paragraph"}],"type":"step","runtimePreview":null},{"media":null,"type":"step","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use "},{"type":"codeVoice","code":"Buffer"},{"text":" as a fixed-size alternative for handling raw data and text.","type":"text"}]}],"code":"FamiliarizeWithTypesSection1Step2.swift","caption":[]},{"type":"step","media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Similarly, avoid using "},{"code":"Array","type":"codeVoice"},{"text":" since it leads to heap allocations and is not allowed.","type":"text"}]}],"code":"FamiliarizeWithTypesSection1Step3.swift","runtimePreview":null,"caption":[]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Instead, leverage the ","type":"text"},{"code":"Vector","type":"codeVoice"},{"type":"text","text":" type as a memory-efficient alternative to "},{"code":"Array","type":"codeVoice"},{"text":".","type":"text"}]}],"type":"step","caption":[],"code":"FamiliarizeWithTypesSection1Step4.swift","runtimePreview":null,"media":null},{"code":"FamiliarizeWithTypesSection1Step5.swift","media":null,"runtimePreview":null,"caption":[],"type":"step","content":[{"inlineContent":[{"type":"text","text":"Integer types like "},{"type":"codeVoice","code":"Int"},{"text":", ","type":"text"},{"code":"UInt","type":"codeVoice"},{"type":"text","text":", and "},{"type":"codeVoice","code":"Bool"},{"type":"text","text":" are fully supported and safe to use."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Ensure you only import the Space framework to keep the contract lightweight and efficient.","type":"text"}]}],"code":"FamiliarizeWithTypesSection1Step6.swift","caption":[],"media":null,"type":"step","runtimePreview":null}],"anchor":"Handling-Heap-Allocation-Challenges"},{"anchor":"Understanding-the-Buffer-Type","title":"Understanding the Buffer Type","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"code":"Buffer","type":"codeVoice"},{"type":"text","text":" is a fundamental type in Space, designed to store raw data and strings."}]}],"mediaPosition":"trailing"}],"stepsSection":[{"media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Start by creating the basic structure for your contract."}]}],"code":"FamiliarizeWithTypesSection2Step1.swift","caption":[],"type":"step","runtimePreview":null},{"content":[{"inlineContent":[{"text":"Initialize a ","type":"text"},{"type":"codeVoice","code":"Buffer"},{"type":"text","text":" variable using a string literal."}],"type":"paragraph"}],"caption":[{"type":"paragraph","inlineContent":[{"text":"Important: Explicitly declare your variable as ","type":"text"},{"code":"Buffer","type":"codeVoice"},{"text":" to avoid being interpreted as ","type":"text"},{"code":"String","type":"codeVoice"},{"type":"text","text":"."}]}],"code":"FamiliarizeWithTypesSection2Step2.swift","media":null,"runtimePreview":null,"type":"step"},{"media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Append another ","type":"text"},{"code":"Buffer","type":"codeVoice"},{"type":"text","text":" to your existing variable."}]}],"caption":[],"code":"FamiliarizeWithTypesSection2Step3.swift","type":"step","runtimePreview":null},{"runtimePreview":null,"type":"step","media":null,"code":"FamiliarizeWithTypesSection2Step4.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Compare two "},{"code":"Buffer","type":"codeVoice"},{"type":"text","text":" instances. If they don’t match, throw a smart contract error."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Note: The "},{"type":"codeVoice","code":"smartContractError"},{"text":" function requires a ","type":"text"},{"code":"Buffer","type":"codeVoice"},{"text":" parameter. This topic is covered in detail in a later chapter.","type":"text"}]}]}]},{"title":"Working with the BigUint Type","contentSection":[{"mediaPosition":"trailing","content":[{"type":"paragraph","inlineContent":[{"text":"Blockchains do not support decimal numbers. However, real-world applications often require decimal representation, such as in cryptocurrency amounts like 0.09281 Bitcoin.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To handle such cases, values are expressed as large numbers, with most tokens treating the first 18 trailing digits as decimals. For instance: 1 EGLD equals 1 * 10^18, or 1,000,000,000,000,000,000."}]},{"type":"paragraph","inlineContent":[{"text":"Standard Swift types, such as ","type":"text"},{"code":"UInt64","type":"codeVoice"},{"type":"text","text":", can only store values up to 18,446,744,073,709,551,615 (20 digits), making it impossible to represent values exceeding approximately 18.446744 EGLD."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Space provides the "},{"code":"BigUint","type":"codeVoice"},{"type":"text","text":" type to store arbitrarily large positive numbers."}]}],"kind":"contentAndMedia"}],"stepsSection":[{"code":"FamiliarizeWithTypesSection3Step1.swift","runtimePreview":null,"type":"step","media":null,"content":[{"inlineContent":[{"type":"text","text":"Begin by structuring your contract."}],"type":"paragraph"}],"caption":[]},{"runtimePreview":null,"caption":[{"inlineContent":[{"type":"text","text":"Important: You must specify the type explicitly as "},{"code":"BigUint","type":"codeVoice"},{"text":", or it will default to ","type":"text"},{"type":"codeVoice","code":"Int"},{"type":"text","text":"."}],"type":"paragraph"}],"media":null,"type":"step","content":[{"inlineContent":[{"type":"text","text":"Declare a "},{"type":"codeVoice","code":"BigUint"},{"text":" constant with an integer literal.","type":"text"}],"type":"paragraph"}],"code":"FamiliarizeWithTypesSection3Step2.swift"},{"caption":[],"runtimePreview":null,"code":"FamiliarizeWithTypesSection3Step3.swift","type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a new "},{"type":"codeVoice","code":"BigUint"},{"text":" by adding 3 to the previous constant.","type":"text"}]}],"media":null},{"content":[{"type":"paragraph","inlineContent":[{"text":"Multiply the new variable by 7.","type":"text"}]}],"runtimePreview":null,"type":"step","caption":[],"code":"FamiliarizeWithTypesSection3Step4.swift","media":null},{"type":"step","media":null,"code":"FamiliarizeWithTypesSection3Step5.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add three times the initial constant to the new variable."}]}],"runtimePreview":null,"caption":[]},{"content":[{"inlineContent":[{"text":"Subtract 21 from the variable.","type":"text"}],"type":"paragraph"}],"type":"step","media":null,"caption":[{"type":"paragraph","inlineContent":[{"text":"Note: A ","type":"text"},{"code":"BigUint","type":"codeVoice"},{"type":"text","text":" value cannot be negative. If the subtraction results in a value below zero, Space will trigger a smart contract error."}]}],"runtimePreview":null,"code":"FamiliarizeWithTypesSection3Step6.swift"},{"code":"FamiliarizeWithTypesSection3Step7.swift","content":[{"inlineContent":[{"type":"text","text":"Verify that the result is a multiple of 10, and throw a smart contract error if not."}],"type":"paragraph"}],"runtimePreview":null,"media":null,"type":"step","caption":[]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Ensure the result is greater than zero, throwing an error if it isn’t."}]}],"type":"step","media":null,"code":"FamiliarizeWithTypesSection3Step8.swift","caption":[],"runtimePreview":null}],"anchor":"Working-with-the-BigUint-Type"},{"stepsSection":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Begin by setting up the basic structure of your contract.","type":"text"}]}],"runtimePreview":null,"media":null,"caption":[],"code":"FamiliarizeWithTypesSection4Step1.swift","type":"step"},{"type":"step","content":[{"inlineContent":[{"type":"text","text":"Declare a "},{"type":"codeVoice","code":"Vector"},{"text":" variable to hold ","type":"text"},{"type":"codeVoice","code":"BigUint"},{"type":"text","text":" elements."}],"type":"paragraph"}],"code":"FamiliarizeWithTypesSection4Step2.swift","media":null,"runtimePreview":null,"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Important: Currently, array literal assignment is disabled. The Space team is investigating its impact on memory management in smart contracts before enabling it."}]}]},{"caption":[],"type":"step","media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Add elements to the ","type":"text"},{"type":"codeVoice","code":"Vector"},{"type":"text","text":"."}]}],"code":"FamiliarizeWithTypesSection4Step3.swift","runtimePreview":null},{"code":"FamiliarizeWithTypesSection4Step4.swift","content":[{"inlineContent":[{"text":"Iterate over the ","type":"text"},{"type":"codeVoice","code":"Vector"},{"text":" to sum all the elements.","type":"text"}],"type":"paragraph"}],"runtimePreview":null,"caption":[{"inlineContent":[{"text":"Important: The ","type":"text"},{"code":"for ... in","type":"codeVoice"},{"text":" loop for vectors is currently disabled. The Space team is evaluating its effect on smart contract memory before enabling it.","type":"text"}],"type":"paragraph"}],"type":"step","media":null},{"caption":[],"code":"FamiliarizeWithTypesSection4Step5.swift","type":"step","content":[{"inlineContent":[{"text":"Ensure the sum equals 13. Throw a smart contract error if it doesn’t.","type":"text"}],"type":"paragraph"}],"media":null,"runtimePreview":null}],"anchor":"Working-with-the-Vector-Type","contentSection":[{"mediaPosition":"trailing","kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"Array"},{"type":"text","text":" type is often the default for storing dynamic-size data, but it is not permitted in Space. Fortunately, Space provides a suitable alternative: "},{"code":"Vector","type":"codeVoice"},{"text":".","type":"text"}]},{"inlineContent":[{"text":"A ","type":"text"},{"type":"codeVoice","code":"Vector"},{"type":"text","text":" can store any type compatible with Space, including user-defined structs and enums."}],"type":"paragraph"}]}],"title":"Working with the Vector Type"}],"kind":"tasks"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes"},"schemaVersion":{"major":0,"minor":3,"patch":0},"metadata":{"title":"Exploring Space's Types","role":"project","category":"Space","categoryPathComponent":"Space"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/tutorials\/space\/familiarizewithtypes"]}],"kind":"project","hierarchy":{"paths":[["doc:\/\/Space\/tutorials\/Space","doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts","doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Exploring-Space's-Types"]],"reference":"doc:\/\/Space\/tutorials\/Space","modules":[{"projects":[{"sections":[{"reference":"doc:\/\/Space\/tutorials\/Space\/InstallingTools#Installing-Spaces-Dependencies","kind":"task"},{"reference":"doc:\/\/Space\/tutorials\/Space\/InstallingTools#Setting-Up-the-Space-CLI","kind":"task"},{"reference":"doc:\/\/Space\/tutorials\/Space\/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract","kind":"task"}],"reference":"doc:\/\/Space\/tutorials\/Space\/InstallingTools"}],"reference":"doc:\/\/Space\/tutorials\/Space\/Getting-Started\/Installing-the-Tools"},{"reference":"doc:\/\/Space\/tutorials\/Space\/Getting-Started\/Building-Your-First-Smart-Contract","projects":[{"sections":[{"kind":"task","reference":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract#Initializing-the-Project"},{"reference":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract#Writing-the-Contract-Code","kind":"task"},{"reference":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract#Testing-the-Contract","kind":"task"}],"reference":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract"}]},{"reference":"doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Exploring-Space's-Types","projects":[{"reference":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes","sections":[{"kind":"task","reference":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges"},{"reference":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Understanding-the-Buffer-Type","kind":"task"},{"reference":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Working-with-the-BigUint-Type","kind":"task"},{"kind":"task","reference":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Working-with-the-Vector-Type"}]}]}]},"references":{"doc://Space/tutorials/Space/CodingYourFirstContract#Writing-the-Contract-Code":{"kind":"section","abstract":[{"text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user.","type":"text"}],"url":"\/tutorials\/space\/codingyourfirstcontract#Writing-the-Contract-Code","type":"section","identifier":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract#Writing-the-Contract-Code","role":"pseudoSymbol","title":"Writing the Contract Code"},"doc://Space/tutorials/Space/Getting-Started/Installing-the-Tools":{"kind":"article","type":"topic","identifier":"doc:\/\/Space\/tutorials\/Space\/Getting-Started\/Installing-the-Tools","role":"article","url":"\/tutorials\/space\/getting-started\/installing-the-tools","title":"Installing the Tools","abstract":[]},"FamiliarizeWithTypesSection3Step6.swift":{"content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        let initialNumber: BigUint = 5","        ","        var result = initialNumber + 3","        result = result * 7","        result = result + initialNumber * 3","        result = result - 21","    }","}"],"fileType":"swift","type":"file","fileName":"lib.swift","highlights":[{"line":10}],"identifier":"FamiliarizeWithTypesSection3Step6.swift","syntax":"swift"},"FamiliarizeWithTypesSection2Step4.swift":{"content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        var myBuffer: Buffer = \"Hello\"","        myBuffer = myBuffer.appended(\" World!\")","        ","        guard myBuffer != \"Hello World!\" else {","            smartContractError(message: \"myBuffer is not equal to Hello World!\")","        }","    }","}"],"identifier":"FamiliarizeWithTypesSection2Step4.swift","type":"file","syntax":"swift","fileType":"swift","fileName":"lib.swift","highlights":[{"line":7},{"line":8},{"line":9},{"line":10}]},"doc://Space/tutorials/Space/FamiliarizeWithTypes":{"abstract":[{"type":"text","text":"Space provides types that allow you to leverage the full potential of the SpaceVM."}],"kind":"project","identifier":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes","url":"\/tutorials\/space\/familiarizewithtypes","role":"project","title":"Exploring Space's Types","type":"topic","estimatedTime":"20min"},"doc://Space/tutorials/Space/FamiliarizeWithTypes#Working-with-the-BigUint-Type":{"kind":"section","url":"\/tutorials\/space\/familiarizewithtypes#Working-with-the-BigUint-Type","identifier":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Working-with-the-BigUint-Type","type":"section","abstract":[{"type":"text","text":"Space provides types that allow you to leverage the full potential of the SpaceVM."}],"title":"Working with the BigUint Type","role":"pseudoSymbol"},"FamiliarizeWithTypesSection1Step4.swift":{"identifier":"FamiliarizeWithTypesSection1Step4.swift","fileType":"swift","fileName":"lib.swift","highlights":[{"line":9},{"line":10},{"line":11},{"line":12}],"type":"file","syntax":"swift","content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        let myString: String = \"Hey!\" \/\/ Won't compile! ❌","        let myBuffer: Buffer = \"Hey!\" \/\/ Fine ✅","        ","        let myArray: [UInt64] = [4, 8, 100] \/\/ Won't compile! ❌","        var myVector: Vector<UInt64> = Vector() \/\/ Fine ✅","            .appended(4)","            .appended(8)","            .appended(100)","    }","}"]},"doc://Space/tutorials/Space/Deep-Dive-into-Space-Concepts/Exploring-Space's-Types":{"kind":"article","url":"\/tutorials\/space\/deep-dive-into-space-concepts\/exploring-space's-types","identifier":"doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Exploring-Space's-Types","type":"topic","abstract":[],"title":"Exploring Space's Types","role":"article"},"doc://Space/tutorials/Space/Getting-Started/Building-Your-First-Smart-Contract":{"abstract":[],"kind":"article","identifier":"doc:\/\/Space\/tutorials\/Space\/Getting-Started\/Building-Your-First-Smart-Contract","url":"\/tutorials\/space\/getting-started\/building-your-first-smart-contract","role":"article","title":"Building Your First Smart Contract","type":"topic"},"FamiliarizeWithTypesSection2Step2.swift":{"highlights":[{"line":5}],"content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        var myBuffer: Buffer = \"Hello\"","    }","}"],"identifier":"FamiliarizeWithTypesSection2Step2.swift","type":"file","fileName":"lib.swift","fileType":"swift","syntax":"swift"},"FamiliarizeWithTypesSection2Step1.swift":{"identifier":"FamiliarizeWithTypesSection2Step1.swift","fileType":"swift","fileName":"lib.swift","highlights":[],"type":"file","syntax":"swift","content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        ","    }","}"]},"FamiliarizeWithTypesSection3Step4.swift":{"highlights":[{"line":8}],"content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        let initialNumber: BigUint = 5","        ","        var result = initialNumber + 3","        result = result * 7","    }","}"],"identifier":"FamiliarizeWithTypesSection3Step4.swift","type":"file","fileName":"lib.swift","fileType":"swift","syntax":"swift"},"FamiliarizeWithTypesSection1Step2.swift":{"identifier":"FamiliarizeWithTypesSection1Step2.swift","fileType":"swift","fileName":"lib.swift","highlights":[{"line":6}],"type":"file","syntax":"swift","content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        let myString: String = \"Hey!\" \/\/ Won't compile! ❌","        let myBuffer: Buffer = \"Hey!\" \/\/ Fine ✅","    }","}"]},"doc://Space/tutorials/Space/FamiliarizeWithTypes#Working-with-the-Vector-Type":{"kind":"section","url":"\/tutorials\/space\/familiarizewithtypes#Working-with-the-Vector-Type","identifier":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Working-with-the-Vector-Type","type":"section","abstract":[{"type":"text","text":"Space provides types that allow you to leverage the full potential of the SpaceVM."}],"title":"Working with the Vector Type","role":"pseudoSymbol"},"doc://Space/tutorials/Space/InstallingTools#Installing-Spaces-Dependencies":{"abstract":[{"type":"text","text":"Before writing your first smart contract with Space, ensure you have the necessary tools installed."}],"kind":"section","identifier":"doc:\/\/Space\/tutorials\/Space\/InstallingTools#Installing-Spaces-Dependencies","url":"\/tutorials\/space\/installingtools#Installing-Spaces-Dependencies","role":"pseudoSymbol","title":"Installing Space's Dependencies","type":"section"},"FamiliarizeWithTypesSection4Step5.swift":{"highlights":[{"line":14},{"line":15},{"line":16},{"line":17}],"content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        var myVector: Vector<BigUint> = Vector()","        myVector = myVector.appended(2)","        myVector = myVector.appended(10)","        myVector = myVector.appended(1)","        ","        var sum: BigUint = 0","        myVector.forEach { item in","            sum = sum + item","        }","        ","        guard sum == 13 else {","            smartContractError(message: \"sum is not 13\")","        }","    }","}"],"identifier":"FamiliarizeWithTypesSection4Step5.swift","type":"file","fileName":"lib.swift","fileType":"swift","syntax":"swift"},"FamiliarizeWithTypesSection1Step5.swift":{"identifier":"FamiliarizeWithTypesSection1Step5.swift","fileType":"swift","fileName":"lib.swift","highlights":[{"line":13},{"line":14},{"line":15},{"line":16}],"type":"file","syntax":"swift","content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        let myString: String = \"Hey!\" \/\/ Won't compile! ❌","        let myBuffer: Buffer = \"Hey!\" \/\/ Fine ✅","        ","        let myArray: [UInt64] = [4, 8, 100] \/\/ Won't compile! ❌","        var myVector: Vector<UInt64> = Vector() \/\/ Fine ✅","            .appended(4)","            .appended(8)","            .appended(100)","        ","        let two = 2 \/\/ Fine ✅","        let ten: UInt64 = 10 \/\/ Fine ✅","        let isTwoEven = true \/\/ Fine ✅","    }","}"]},"FamiliarizeWithTypesSection3Step7.swift":{"identifier":"FamiliarizeWithTypesSection3Step7.swift","syntax":"swift","fileType":"swift","type":"file","content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        let initialNumber: BigUint = 5","        ","        var result = initialNumber + 3","        result = result * 7","        result = result + initialNumber * 3","        result = result - 21","        ","        guard result % 10 == 0 else {","            smartContractError(message: \"result is not a multiple of 10\")","        }","    }","}"],"highlights":[{"line":11},{"line":12},{"line":13},{"line":14}],"fileName":"lib.swift"},"FamiliarizeWithTypesSection4Step4.swift":{"identifier":"FamiliarizeWithTypesSection4Step4.swift","fileType":"swift","fileName":"lib.swift","highlights":[{"line":9},{"line":10},{"line":11},{"line":12},{"line":13}],"type":"file","syntax":"swift","content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        var myVector: Vector<BigUint> = Vector()","        myVector = myVector.appended(2)","        myVector = myVector.appended(10)","        myVector = myVector.appended(1)","        ","        var sum: BigUint = 0","        myVector.forEach { item in","            sum = sum + item","        }","    }","}"]},"FamiliarizeWithTypesSection3Step2.swift":{"identifier":"FamiliarizeWithTypesSection3Step2.swift","highlights":[{"line":5}],"type":"file","content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        let initialNumber: BigUint = 5","    }","}"],"fileType":"swift","fileName":"lib.swift","syntax":"swift"},"FamiliarizeWithTypesSection3Step3.swift":{"identifier":"FamiliarizeWithTypesSection3Step3.swift","type":"file","fileName":"lib.swift","syntax":"swift","highlights":[{"line":6},{"line":7}],"content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        let initialNumber: BigUint = 5","        ","        var result = initialNumber + 3","    }","}"],"fileType":"swift"},"doc://Space/tutorials/Space/InstallingTools":{"estimatedTime":"10min","abstract":[{"type":"text","text":"Before writing your first smart contract with Space, ensure you have the necessary tools installed."}],"type":"topic","kind":"project","title":"Install the Necessary Tools","url":"\/tutorials\/space\/installingtools","identifier":"doc:\/\/Space\/tutorials\/Space\/InstallingTools","role":"project"},"FamiliarizeWithTypesSection2Step3.swift":{"content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        var myBuffer: Buffer = \"Hello\"","        myBuffer = myBuffer.appended(\" World!\")","    }","}"],"fileName":"lib.swift","fileType":"swift","type":"file","highlights":[{"line":6}],"identifier":"FamiliarizeWithTypesSection2Step3.swift","syntax":"swift"},"doc://Space/tutorials/Space/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges":{"abstract":[{"type":"text","text":"Space provides types that allow you to leverage the full potential of the SpaceVM."}],"type":"section","kind":"section","title":"Handling Heap Allocation Challenges","url":"\/tutorials\/space\/familiarizewithtypes#Handling-Heap-Allocation-Challenges","identifier":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges","role":"pseudoSymbol"},"FamiliarizeWithTypesSection1Step3.swift":{"syntax":"swift","highlights":[{"line":7},{"line":8}],"fileType":"swift","content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        let myString: String = \"Hey!\" \/\/ Won't compile! ❌","        let myBuffer: Buffer = \"Hey!\" \/\/ Fine ✅","        ","        let myArray: [UInt64] = [4, 8, 100] \/\/ Won't compile! ❌","    }","}"],"identifier":"FamiliarizeWithTypesSection1Step3.swift","type":"file","fileName":"lib.swift"},"doc://Space/tutorials/Space/CodingYourFirstContract":{"role":"project","abstract":[{"type":"text","text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user."}],"title":"Building Your First Smart Contract","kind":"project","identifier":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract","estimatedTime":"20min","type":"topic","url":"\/tutorials\/space\/codingyourfirstcontract"},"FamiliarizeWithTypesSection4Step3.swift":{"highlights":[{"line":6},{"line":7},{"line":8}],"fileName":"lib.swift","syntax":"swift","type":"file","fileType":"swift","content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        var myVector: Vector<BigUint> = Vector()","        myVector = myVector.appended(2)","        myVector = myVector.appended(10)","        myVector = myVector.appended(1)","    }","}"],"identifier":"FamiliarizeWithTypesSection4Step3.swift"},"doc://Space/tutorials/Space":{"url":"\/tutorials\/space","type":"topic","kind":"overview","identifier":"doc:\/\/Space\/tutorials\/Space","title":"Meet Space","abstract":[{"type":"text","text":"Discover how Space simplifies blockchain development using Swift. Dive into the world of Web3 with ease and efficiency."}],"role":"overview"},"FamiliarizeWithTypesSection1Step6.swift":{"type":"file","identifier":"FamiliarizeWithTypesSection1Step6.swift","fileType":"swift","syntax":"swift","fileName":"lib.swift","content":["import Space","import Foundation \/\/ Don't do this ❌","","@Contract struct MyContract {","    public func myEndpoint() {","        let myString: String = \"Hey!\" \/\/ Won't compile! ❌","        let myBuffer: Buffer = \"Hey!\" \/\/ Fine ✅","        ","        let myArray: [UInt64] = [4, 8, 100] \/\/ Won't compile! ❌","        var myVector: Vector<UInt64> = Vector() \/\/ Fine ✅","            .appended(4)","            .appended(8)","            .appended(100)","        ","        let two = 2 \/\/ Fine ✅","        let ten: UInt64 = 10 \/\/ Fine ✅","        let isTwoEven = true \/\/ Fine ✅","    }","}"],"highlights":[{"line":2}]},"doc://Space/tutorials/Space/CodingYourFirstContract#Testing-the-Contract":{"identifier":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract#Testing-the-Contract","type":"section","title":"Testing the Contract","url":"\/tutorials\/space\/codingyourfirstcontract#Testing-the-Contract","abstract":[{"type":"text","text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user."}],"kind":"section","role":"pseudoSymbol"},"FamiliarizeWithTypesSection4Step1.swift":{"content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        ","    }","}"],"fileType":"swift","fileName":"lib.swift","type":"file","identifier":"FamiliarizeWithTypesSection4Step1.swift","highlights":[],"syntax":"swift"},"FamiliarizeWithTypesSection3Step8.swift":{"identifier":"FamiliarizeWithTypesSection3Step8.swift","type":"file","fileType":"swift","highlights":[{"line":15},{"line":16},{"line":17},{"line":18}],"fileName":"lib.swift","syntax":"swift","content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        let initialNumber: BigUint = 5","        ","        var result = initialNumber + 3","        result = result * 7","        result = result + initialNumber * 3","        result = result - 21","        ","        guard result % 10 == 0 else {","            smartContractError(message: \"result is not a multiple of 10\")","        }","        ","        guard result > 0 else {","            smartContractError(message: \"result is 0\")","        }","    }","}"]},"doc://Space/tutorials/Space/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract":{"role":"pseudoSymbol","kind":"section","title":"Initializing and Compiling Your First Smart Contract","type":"section","identifier":"doc:\/\/Space\/tutorials\/Space\/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract","abstract":[{"type":"text","text":"Before writing your first smart contract with Space, ensure you have the necessary tools installed."}],"url":"\/tutorials\/space\/installingtools#Initializing-and-Compiling-Your-First-Smart-Contract"},"FamiliarizeWithTypesSection3Step5.swift":{"highlights":[{"line":9}],"type":"file","syntax":"swift","fileName":"lib.swift","identifier":"FamiliarizeWithTypesSection3Step5.swift","fileType":"swift","content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        let initialNumber: BigUint = 5","        ","        var result = initialNumber + 3","        result = result * 7","        result = result + initialNumber * 3","    }","}"]},"FamiliarizeWithTypesSection3Step1.swift":{"content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        ","    }","}"],"fileType":"swift","fileName":"lib.swift","type":"file","identifier":"FamiliarizeWithTypesSection3Step1.swift","highlights":[],"syntax":"swift"},"FamiliarizeWithTypesSection4Step2.swift":{"highlights":[{"line":5}],"type":"file","syntax":"swift","fileName":"lib.swift","identifier":"FamiliarizeWithTypesSection4Step2.swift","fileType":"swift","content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        var myVector: Vector<BigUint> = Vector()","    }","}"]},"doc://Space/tutorials/Space/CodingYourFirstContract#Initializing-the-Project":{"role":"pseudoSymbol","kind":"section","title":"Initializing the Project","type":"section","identifier":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract#Initializing-the-Project","abstract":[{"type":"text","text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user."}],"url":"\/tutorials\/space\/codingyourfirstcontract#Initializing-the-Project"},"FamiliarizeWithTypesSection1Step1.swift":{"identifier":"FamiliarizeWithTypesSection1Step1.swift","content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        let myString: String = \"Hey!\" \/\/ Won't compile! ❌","    }","}"],"syntax":"swift","type":"file","fileName":"lib.swift","fileType":"swift","highlights":[]},"doc://Space/tutorials/Space/FamiliarizeWithTypes#Understanding-the-Buffer-Type":{"role":"pseudoSymbol","kind":"section","title":"Understanding the Buffer Type","type":"section","identifier":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Understanding-the-Buffer-Type","abstract":[{"type":"text","text":"Space provides types that allow you to leverage the full potential of the SpaceVM."}],"url":"\/tutorials\/space\/familiarizewithtypes#Understanding-the-Buffer-Type"},"doc://Space/tutorials/Space/InstallingTools#Setting-Up-the-Space-CLI":{"title":"Setting Up the Space CLI","type":"section","kind":"section","identifier":"doc:\/\/Space\/tutorials\/Space\/InstallingTools#Setting-Up-the-Space-CLI","role":"pseudoSymbol","abstract":[{"type":"text","text":"Before writing your first smart contract with Space, ensure you have the necessary tools installed."}],"url":"\/tutorials\/space\/installingtools#Setting-Up-the-Space-CLI"}}}