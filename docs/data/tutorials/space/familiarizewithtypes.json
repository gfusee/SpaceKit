{"variants":[{"paths":["\/tutorials\/space\/familiarizewithtypes"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"reference":"doc:\/\/Space\/tutorials\/Space","modules":[{"reference":"doc:\/\/Space\/tutorials\/Space\/Getting-Started\/Installing-the-Tools","projects":[{"sections":[{"reference":"doc:\/\/Space\/tutorials\/Space\/InstallingTools#Installing-Spaces-Dependencies","kind":"task"},{"reference":"doc:\/\/Space\/tutorials\/Space\/InstallingTools#Setting-Up-the-Space-CLI","kind":"task"},{"kind":"task","reference":"doc:\/\/Space\/tutorials\/Space\/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract"}],"reference":"doc:\/\/Space\/tutorials\/Space\/InstallingTools"}]},{"reference":"doc:\/\/Space\/tutorials\/Space\/Getting-Started\/Building-Your-First-Smart-Contract","projects":[{"reference":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract","sections":[{"reference":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract#Initializing-the-Project","kind":"task"},{"kind":"task","reference":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract#Writing-the-Contract-Code"},{"reference":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract#Testing-the-Contract","kind":"task"}]}]},{"reference":"doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Exploring-Space's-Types","projects":[{"sections":[{"reference":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges","kind":"task"},{"reference":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Understanding-the-Buffer-Type","kind":"task"},{"reference":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Working-with-the-BigUint-Type","kind":"task"},{"kind":"task","reference":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Working-with-the-Vector-Type"}],"reference":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes"}]}],"paths":[["doc:\/\/Space\/tutorials\/Space","doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts","doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Exploring-Space's-Types"]]},"identifier":{"url":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes","interfaceLanguage":"swift"},"metadata":{"category":"Space","role":"project","categoryPathComponent":"Space","title":"Exploring Space's Types"},"sections":[{"content":[{"inlineContent":[{"type":"text","text":"Space provides types that allow you to leverage the full potential of the SpaceVM."}],"type":"paragraph"}],"estimatedTimeInMinutes":20,"kind":"hero","chapter":"Exploring Space's Types","title":"Exploring Space's Types"},{"kind":"tasks","tasks":[{"stepsSection":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Avoid using types with dynamic sizes in Space, as they are not permitted due to strict memory constraints."}]}],"runtimePreview":null,"code":"FamiliarizeWithTypesSection1Step1.swift","type":"step","caption":[],"media":null},{"media":null,"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use fixed-size types whenever possible to ensure compatibility with Space."}]}],"code":"FamiliarizeWithTypesSection1Step2.swift","type":"step","caption":[]},{"media":null,"type":"step","code":"FamiliarizeWithTypesSection1Step3.swift","content":[{"type":"paragraph","inlineContent":[{"text":"Only import the Space framework to maintain the minimal footprint required by smart contracts.","type":"text"}]}],"runtimePreview":null,"caption":[]}],"contentSection":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Writing code for blockchain involves operating within strict resource constraints. To address this, Space uses Swift’s “embedded” mode, ensuring the compiled code is as lightweight and efficient as possible.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"SpaceVM, the engine running smart contracts, limits heap allocations. As a result, types with dynamic sizes, such as Strings, Arrays, or classes, and any structs or enums containing these, are not permitted."}]},{"inlineContent":[{"text":"Additionally, Swift’s existential types—such as ","type":"text"},{"code":"any Protocol","type":"codeVoice"},{"type":"text","text":" where "},{"type":"codeVoice","code":"Protocol"},{"text":" is a protocol—are also forbidden. Existential types introduce runtime overhead, which is why they are not allowed in Space.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The allowed Swift types are:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"StaticString"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Integer types: Int, UInt, UInt8, UInt16, etc.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Bool: treated as a UInt8"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Space introduces specific types that serve as alternatives for those not allowed. This chapter introduces three key replacements:"}]},{"items":[{"content":[{"inlineContent":[{"code":"Buffer","type":"codeVoice"},{"text":": A substitute for String and Data","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"BigUint","type":"codeVoice"},{"type":"text","text":": Capable of handling large unsigned integers"}]}]},{"content":[{"inlineContent":[{"code":"Vector","type":"codeVoice"},{"text":": An alternative to Array","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"text":"For security, these types do not feature mutating methods. Instead, they use methods that return new instances. For example, the ","type":"text"},{"type":"codeVoice","code":"Buffer"},{"type":"text","text":" type does not include "},{"type":"codeVoice","code":"append(_:) -> Void"},{"text":" but instead offers ","type":"text"},{"code":"appending(_:) -> Buffer","type":"codeVoice"},{"type":"text","text":"."}]}],"kind":"contentAndMedia","mediaPosition":"trailing"}],"title":"Handling Heap Allocation Challenges","anchor":"Handling-Heap-Allocation-Challenges"},{"title":"Understanding the Buffer Type","anchor":"Understanding-the-Buffer-Type","contentSection":[{"mediaPosition":"trailing","kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"code":"Buffer","type":"codeVoice"},{"type":"text","text":" is a fundamental type in Space, designed to store raw data and strings."}]}]}],"stepsSection":[{"media":null,"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Start by creating the basic structure for your contract.","type":"text"}]}],"code":"FamiliarizeWithTypesSection2Step1.swift","caption":[],"type":"step"},{"content":[{"type":"paragraph","inlineContent":[{"text":"Initialize a ","type":"text"},{"code":"Buffer","type":"codeVoice"},{"text":" variable using a string literal.","type":"text"}]}],"code":"FamiliarizeWithTypesSection2Step2.swift","media":null,"runtimePreview":null,"caption":[{"type":"paragraph","inlineContent":[{"text":"Important: Explicitly declare your variable as ","type":"text"},{"code":"Buffer","type":"codeVoice"},{"text":" to avoid being interpreted as ","type":"text"},{"code":"String","type":"codeVoice"},{"type":"text","text":"."}]}],"type":"step"},{"code":"FamiliarizeWithTypesSection2Step3.swift","runtimePreview":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Append another ","type":"text"},{"type":"codeVoice","code":"Buffer"},{"type":"text","text":" to your existing variable."}]}],"caption":[],"media":null},{"media":null,"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Note: The "},{"type":"codeVoice","code":"smartContractError"},{"type":"text","text":" function requires a "},{"type":"codeVoice","code":"Buffer"},{"type":"text","text":" parameter. This topic is covered in detail in a later chapter."}]}],"type":"step","code":"FamiliarizeWithTypesSection2Step4.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Compare two "},{"type":"codeVoice","code":"Buffer"},{"type":"text","text":" instances. If they don’t match, throw a smart contract error."}]}],"runtimePreview":null}]},{"contentSection":[{"mediaPosition":"trailing","kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"text":"Blockchains do not support decimal numbers. However, real-world applications often require decimal representation, such as in cryptocurrency amounts like 0.09281 Bitcoin.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To handle such cases, values are expressed as large numbers, with most tokens treating the first 18 trailing digits as decimals. For instance: 1 EGLD equals 1 * 10^18, or 1,000,000,000,000,000,000."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Standard Swift types, such as "},{"type":"codeVoice","code":"UInt64"},{"type":"text","text":", can only store values up to 18,446,744,073,709,551,615 (20 digits), making it impossible to represent values exceeding approximately 18.446744 EGLD."}]},{"type":"paragraph","inlineContent":[{"text":"Space provides the ","type":"text"},{"type":"codeVoice","code":"BigUint"},{"type":"text","text":" type to store arbitrarily large positive numbers."}]}]}],"stepsSection":[{"code":"FamiliarizeWithTypesSection3Step1.swift","caption":[],"content":[{"inlineContent":[{"text":"Begin by structuring your contract.","type":"text"}],"type":"paragraph"}],"type":"step","media":null,"runtimePreview":null},{"type":"step","runtimePreview":null,"code":"FamiliarizeWithTypesSection3Step2.swift","media":null,"caption":[{"type":"paragraph","inlineContent":[{"text":"Important: You must specify the type explicitly as ","type":"text"},{"type":"codeVoice","code":"BigUint"},{"text":", or it will default to ","type":"text"},{"code":"Int","type":"codeVoice"},{"type":"text","text":"."}]}],"content":[{"type":"paragraph","inlineContent":[{"text":"Declare a ","type":"text"},{"type":"codeVoice","code":"BigUint"},{"type":"text","text":" constant with an integer literal."}]}]},{"code":"FamiliarizeWithTypesSection3Step3.swift","runtimePreview":null,"caption":[],"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Create a new ","type":"text"},{"type":"codeVoice","code":"BigUint"},{"text":" by adding 3 to the previous constant.","type":"text"}]}],"media":null},{"media":null,"code":"FamiliarizeWithTypesSection3Step4.swift","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Multiply the new variable by 7.","type":"text"}]}],"caption":[],"type":"step"},{"media":null,"code":"FamiliarizeWithTypesSection3Step5.swift","runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"Add three times the initial constant to the new variable."}],"type":"paragraph"}],"caption":[],"type":"step"},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Subtract 21 from the variable."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Note: A "},{"type":"codeVoice","code":"BigUint"},{"text":" value cannot be negative. If the subtraction results in a value below zero, Space will trigger a smart contract error.","type":"text"}]}],"code":"FamiliarizeWithTypesSection3Step6.swift","runtimePreview":null,"media":null},{"runtimePreview":null,"media":null,"caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Verify that the result is a multiple of 10, and throw a smart contract error if not."}]}],"code":"FamiliarizeWithTypesSection3Step7.swift","type":"step"},{"media":null,"code":"FamiliarizeWithTypesSection3Step8.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Ensure the result is greater than zero, throwing an error if it isn’t."}]}],"runtimePreview":null,"type":"step","caption":[]}],"anchor":"Working-with-the-BigUint-Type","title":"Working with the BigUint Type"},{"contentSection":[{"kind":"contentAndMedia","mediaPosition":"trailing","content":[{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"Array"},{"type":"text","text":" type is often the default for storing dynamic-size data, but it is not permitted in Space. Fortunately, Space provides a suitable alternative: "},{"code":"Vector","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"A "},{"type":"codeVoice","code":"Vector"},{"type":"text","text":" can store any type compatible with Space, including user-defined structs and enums."}],"type":"paragraph"}]}],"title":"Working with the Vector Type","stepsSection":[{"code":"FamiliarizeWithTypesSection4Step1.swift","type":"step","runtimePreview":null,"caption":[],"media":null,"content":[{"inlineContent":[{"type":"text","text":"Begin by setting up the basic structure of your contract."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Declare a ","type":"text"},{"code":"Vector","type":"codeVoice"},{"text":" variable to hold ","type":"text"},{"type":"codeVoice","code":"BigUint"},{"text":" elements.","type":"text"}]}],"type":"step","media":null,"code":"FamiliarizeWithTypesSection4Step2.swift","runtimePreview":null,"caption":[{"type":"paragraph","inlineContent":[{"text":"Important: Currently, array literal assignment is disabled. The Space team is investigating its impact on memory management in smart contracts before enabling it.","type":"text"}]}]},{"runtimePreview":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add elements to the "},{"code":"Vector","type":"codeVoice"},{"type":"text","text":"."}]}],"code":"FamiliarizeWithTypesSection4Step3.swift","caption":[],"media":null},{"type":"step","caption":[{"type":"paragraph","inlineContent":[{"text":"Important: The ","type":"text"},{"type":"codeVoice","code":"for ... in"},{"type":"text","text":" loop for vectors is currently disabled. The Space team is evaluating its effect on smart contract memory before enabling it."}]}],"runtimePreview":null,"code":"FamiliarizeWithTypesSection4Step4.swift","media":null,"content":[{"inlineContent":[{"type":"text","text":"Iterate over the "},{"type":"codeVoice","code":"Vector"},{"type":"text","text":" to sum all the elements."}],"type":"paragraph"}]},{"code":"FamiliarizeWithTypesSection4Step5.swift","caption":[],"runtimePreview":null,"content":[{"inlineContent":[{"text":"Ensure the sum equals 13. Throw a smart contract error if it doesn’t.","type":"text"}],"type":"paragraph"}],"media":null,"type":"step"}],"anchor":"Working-with-the-Vector-Type"}]}],"schemaVersion":{"patch":0,"major":0,"minor":3},"kind":"project","references":{"doc://Space/tutorials/Space":{"url":"\/tutorials\/space","kind":"overview","abstract":[{"type":"text","text":"Discover how Space simplifies blockchain development using Swift. Dive into the world of Web3 with ease and efficiency."}],"identifier":"doc:\/\/Space\/tutorials\/Space","type":"topic","title":"Meet Space","role":"overview"},"doc://Space/tutorials/Space/FamiliarizeWithTypes":{"title":"Exploring Space's Types","abstract":[{"text":"Space provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}],"url":"\/tutorials\/space\/familiarizewithtypes","estimatedTime":"20min","identifier":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes","kind":"project","type":"topic","role":"project"},"FamiliarizeWithTypesSection4Step4.swift":{"content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        var myVector: Vector<BigUint> = Vector()","        myVector = myVector.appended(2)","        myVector = myVector.appended(10)","        myVector = myVector.appended(1)","        ","        var sum: BigUint = 0","        myVector.forEach { item in","            sum = sum + item","        }","    }","}"],"identifier":"FamiliarizeWithTypesSection4Step4.swift","fileName":"lib.swift","syntax":"swift","fileType":"swift","highlights":[{"line":9},{"line":10},{"line":11},{"line":12},{"line":13}],"type":"file"},"FamiliarizeWithTypesSection1Step3.swift":{"highlights":[{"line":2}],"identifier":"FamiliarizeWithTypesSection1Step3.swift","content":["import Space","import Foundation \/\/ Don't do this","","@Contract struct MyContract {","    public func myEndpoint() {","        let myString: String = \"Hey!\" \/\/ Won't compile! ❌","        let myArray: [Int] = [7, 8, 100] \/\/ Won't compile! ❌","        ","        let myInteger: UInt64 = 16 \/\/ Fine ✅","        let myBuffer: Buffer = \"Hey!\" \/\/ Fine ✅","    }","}"],"fileType":"swift","syntax":"swift","fileName":"lib.swift","type":"file"},"FamiliarizeWithTypesSection2Step1.swift":{"content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        ","    }","}"],"identifier":"FamiliarizeWithTypesSection2Step1.swift","fileName":"lib.swift","syntax":"swift","fileType":"swift","highlights":[],"type":"file"},"FamiliarizeWithTypesSection3Step3.swift":{"highlights":[{"line":6},{"line":7}],"identifier":"FamiliarizeWithTypesSection3Step3.swift","content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        let initialNumber: BigUint = 5","        ","        var result = initialNumber + 3","    }","}"],"fileType":"swift","syntax":"swift","fileName":"lib.swift","type":"file"},"FamiliarizeWithTypesSection1Step2.swift":{"content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        let myString: String = \"Hey!\" \/\/ Won't compile! ❌","        let myArray: [Int] = [7, 8, 100] \/\/ Won't compile! ❌","        ","        let myInteger: UInt64 = 16 \/\/ Fine ✅","        let myBuffer: Buffer = \"Hey!\" \/\/ Fine ✅","    }","}"],"identifier":"FamiliarizeWithTypesSection1Step2.swift","fileName":"lib.swift","syntax":"swift","fileType":"swift","highlights":[{"line":7},{"line":8},{"line":9}],"type":"file"},"doc://Space/tutorials/Space/FamiliarizeWithTypes#Working-with-the-Vector-Type":{"kind":"section","title":"Working with the Vector Type","abstract":[{"type":"text","text":"Space provides types that allow you to leverage the full potential of the SpaceVM."}],"url":"\/tutorials\/space\/familiarizewithtypes#Working-with-the-Vector-Type","role":"pseudoSymbol","identifier":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Working-with-the-Vector-Type","type":"section"},"FamiliarizeWithTypesSection3Step7.swift":{"fileName":"lib.swift","content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        let initialNumber: BigUint = 5","        ","        var result = initialNumber + 3","        result = result * 7","        result = result + initialNumber * 3","        result = result - 21","        ","        guard result % 10 == 0 else {","            smartContractError(message: \"result is not a multiple of 10\")","        }","    }","}"],"type":"file","highlights":[{"line":11},{"line":12},{"line":13},{"line":14}],"syntax":"swift","identifier":"FamiliarizeWithTypesSection3Step7.swift","fileType":"swift"},"doc://Space/tutorials/Space/FamiliarizeWithTypes#Working-with-the-BigUint-Type":{"title":"Working with the BigUint Type","abstract":[{"type":"text","text":"Space provides types that allow you to leverage the full potential of the SpaceVM."}],"url":"\/tutorials\/space\/familiarizewithtypes#Working-with-the-BigUint-Type","identifier":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Working-with-the-BigUint-Type","kind":"section","type":"section","role":"pseudoSymbol"},"doc://Space/tutorials/Space/Deep-Dive-into-Space-Concepts/Exploring-Space's-Types":{"abstract":[],"kind":"article","url":"\/tutorials\/space\/deep-dive-into-space-concepts\/exploring-space's-types","title":"Exploring Space's Types","identifier":"doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Exploring-Space's-Types","role":"article","type":"topic"},"doc://Space/tutorials/Space/InstallingTools#Setting-Up-the-Space-CLI":{"abstract":[{"text":"Before writing your first smart contract with Space, ensure you have the necessary tools installed.","type":"text"}],"title":"Setting Up the Space CLI","url":"\/tutorials\/space\/installingtools#Setting-Up-the-Space-CLI","identifier":"doc:\/\/Space\/tutorials\/Space\/InstallingTools#Setting-Up-the-Space-CLI","type":"section","kind":"section","role":"pseudoSymbol"},"doc://Space/tutorials/Space/CodingYourFirstContract#Writing-the-Contract-Code":{"title":"Writing the Contract Code","abstract":[{"text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user.","type":"text"}],"url":"\/tutorials\/space\/codingyourfirstcontract#Writing-the-Contract-Code","identifier":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract#Writing-the-Contract-Code","kind":"section","type":"section","role":"pseudoSymbol"},"doc://Space/tutorials/Space/CodingYourFirstContract":{"title":"Building Your First Smart Contract","abstract":[{"text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user.","type":"text"}],"url":"\/tutorials\/space\/codingyourfirstcontract","estimatedTime":"20min","identifier":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract","kind":"project","type":"topic","role":"project"},"doc://Space/tutorials/Space/InstallingTools":{"kind":"project","title":"Install the Necessary Tools","abstract":[{"text":"Before writing your first smart contract with Space, ensure you have the necessary tools installed.","type":"text"}],"url":"\/tutorials\/space\/installingtools","role":"project","estimatedTime":"10min","identifier":"doc:\/\/Space\/tutorials\/Space\/InstallingTools","type":"topic"},"doc://Space/tutorials/Space/CodingYourFirstContract#Testing-the-Contract":{"title":"Testing the Contract","abstract":[{"type":"text","text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user."}],"url":"\/tutorials\/space\/codingyourfirstcontract#Testing-the-Contract","identifier":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract#Testing-the-Contract","kind":"section","type":"section","role":"pseudoSymbol"},"FamiliarizeWithTypesSection1Step1.swift":{"syntax":"swift","content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        let myString: String = \"Hey!\" \/\/ Won't compile! ❌","        let myArray: [Int] = [7, 8, 100] \/\/ Won't compile! ❌","    }","}"],"highlights":[],"identifier":"FamiliarizeWithTypesSection1Step1.swift","fileName":"lib.swift","fileType":"swift","type":"file"},"FamiliarizeWithTypesSection3Step6.swift":{"fileType":"swift","fileName":"lib.swift","identifier":"FamiliarizeWithTypesSection3Step6.swift","type":"file","content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        let initialNumber: BigUint = 5","        ","        var result = initialNumber + 3","        result = result * 7","        result = result + initialNumber * 3","        result = result - 21","    }","}"],"syntax":"swift","highlights":[{"line":10}]},"FamiliarizeWithTypesSection4Step5.swift":{"type":"file","syntax":"swift","identifier":"FamiliarizeWithTypesSection4Step5.swift","highlights":[{"line":14},{"line":15},{"line":16},{"line":17}],"fileType":"swift","fileName":"lib.swift","content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        var myVector: Vector<BigUint> = Vector()","        myVector = myVector.appended(2)","        myVector = myVector.appended(10)","        myVector = myVector.appended(1)","        ","        var sum: BigUint = 0","        myVector.forEach { item in","            sum = sum + item","        }","        ","        guard sum == 13 else {","            smartContractError(message: \"sum is not 13\")","        }","    }","}"]},"FamiliarizeWithTypesSection2Step2.swift":{"syntax":"swift","highlights":[{"line":5}],"identifier":"FamiliarizeWithTypesSection2Step2.swift","content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        var myBuffer: Buffer = \"Hello\"","    }","}"],"fileName":"lib.swift","fileType":"swift","type":"file"},"FamiliarizeWithTypesSection4Step2.swift":{"type":"file","syntax":"swift","identifier":"FamiliarizeWithTypesSection4Step2.swift","highlights":[{"line":5}],"fileType":"swift","fileName":"lib.swift","content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        var myVector: Vector<BigUint> = Vector()","    }","}"]},"FamiliarizeWithTypesSection4Step1.swift":{"syntax":"swift","highlights":[],"identifier":"FamiliarizeWithTypesSection4Step1.swift","content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        ","    }","}"],"fileName":"lib.swift","fileType":"swift","type":"file"},"doc://Space/tutorials/Space/Getting-Started/Building-Your-First-Smart-Contract":{"title":"Building Your First Smart Contract","abstract":[],"url":"\/tutorials\/space\/getting-started\/building-your-first-smart-contract","identifier":"doc:\/\/Space\/tutorials\/Space\/Getting-Started\/Building-Your-First-Smart-Contract","kind":"article","type":"topic","role":"article"},"FamiliarizeWithTypesSection3Step2.swift":{"type":"file","syntax":"swift","identifier":"FamiliarizeWithTypesSection3Step2.swift","highlights":[{"line":5}],"fileType":"swift","fileName":"lib.swift","content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        let initialNumber: BigUint = 5","    }","}"]},"FamiliarizeWithTypesSection2Step3.swift":{"syntax":"swift","highlights":[{"line":6}],"identifier":"FamiliarizeWithTypesSection2Step3.swift","content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        var myBuffer: Buffer = \"Hello\"","        myBuffer = myBuffer.appended(\" World!\")","    }","}"],"fileName":"lib.swift","fileType":"swift","type":"file"},"FamiliarizeWithTypesSection3Step8.swift":{"type":"file","syntax":"swift","identifier":"FamiliarizeWithTypesSection3Step8.swift","highlights":[{"line":15},{"line":16},{"line":17},{"line":18}],"fileType":"swift","fileName":"lib.swift","content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        let initialNumber: BigUint = 5","        ","        var result = initialNumber + 3","        result = result * 7","        result = result + initialNumber * 3","        result = result - 21","        ","        guard result % 10 == 0 else {","            smartContractError(message: \"result is not a multiple of 10\")","        }","        ","        guard result > 0 else {","            smartContractError(message: \"result is 0\")","        }","    }","}"]},"FamiliarizeWithTypesSection3Step4.swift":{"fileName":"lib.swift","identifier":"FamiliarizeWithTypesSection3Step4.swift","fileType":"swift","syntax":"swift","type":"file","content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        let initialNumber: BigUint = 5","        ","        var result = initialNumber + 3","        result = result * 7","    }","}"],"highlights":[{"line":8}]},"FamiliarizeWithTypesSection2Step4.swift":{"syntax":"swift","fileType":"swift","highlights":[{"line":7},{"line":8},{"line":9},{"line":10}],"fileName":"lib.swift","type":"file","identifier":"FamiliarizeWithTypesSection2Step4.swift","content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        var myBuffer: Buffer = \"Hello\"","        myBuffer = myBuffer.appended(\" World!\")","        ","        guard myBuffer != \"Hello World!\" else {","            smartContractError(message: \"myBuffer is not equal to Hello World!\")","        }","    }","}"]},"doc://Space/tutorials/Space/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract":{"kind":"section","title":"Initializing and Compiling Your First Smart Contract","abstract":[{"text":"Before writing your first smart contract with Space, ensure you have the necessary tools installed.","type":"text"}],"url":"\/tutorials\/space\/installingtools#Initializing-and-Compiling-Your-First-Smart-Contract","role":"pseudoSymbol","identifier":"doc:\/\/Space\/tutorials\/Space\/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract","type":"section"},"doc://Space/tutorials/Space/CodingYourFirstContract#Initializing-the-Project":{"url":"\/tutorials\/space\/codingyourfirstcontract#Initializing-the-Project","role":"pseudoSymbol","kind":"section","abstract":[{"text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user.","type":"text"}],"identifier":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract#Initializing-the-Project","title":"Initializing the Project","type":"section"},"FamiliarizeWithTypesSection4Step3.swift":{"highlights":[{"line":6},{"line":7},{"line":8}],"identifier":"FamiliarizeWithTypesSection4Step3.swift","content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        var myVector: Vector<BigUint> = Vector()","        myVector = myVector.appended(2)","        myVector = myVector.appended(10)","        myVector = myVector.appended(1)","    }","}"],"fileType":"swift","syntax":"swift","fileName":"lib.swift","type":"file"},"FamiliarizeWithTypesSection3Step1.swift":{"type":"file","highlights":[],"syntax":"swift","fileType":"swift","fileName":"lib.swift","identifier":"FamiliarizeWithTypesSection3Step1.swift","content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        ","    }","}"]},"doc://Space/tutorials/Space/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges":{"kind":"section","title":"Handling Heap Allocation Challenges","abstract":[{"text":"Space provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}],"url":"\/tutorials\/space\/familiarizewithtypes#Handling-Heap-Allocation-Challenges","role":"pseudoSymbol","identifier":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges","type":"section"},"doc://Space/tutorials/Space/FamiliarizeWithTypes#Understanding-the-Buffer-Type":{"kind":"section","title":"Understanding the Buffer Type","abstract":[{"text":"Space provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}],"url":"\/tutorials\/space\/familiarizewithtypes#Understanding-the-Buffer-Type","role":"pseudoSymbol","identifier":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Understanding-the-Buffer-Type","type":"section"},"FamiliarizeWithTypesSection3Step5.swift":{"highlights":[{"line":9}],"identifier":"FamiliarizeWithTypesSection3Step5.swift","content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        let initialNumber: BigUint = 5","        ","        var result = initialNumber + 3","        result = result * 7","        result = result + initialNumber * 3","    }","}"],"fileType":"swift","syntax":"swift","fileName":"lib.swift","type":"file"},"doc://Space/tutorials/Space/Getting-Started/Installing-the-Tools":{"title":"Installing the Tools","abstract":[],"url":"\/tutorials\/space\/getting-started\/installing-the-tools","identifier":"doc:\/\/Space\/tutorials\/Space\/Getting-Started\/Installing-the-Tools","kind":"article","type":"topic","role":"article"},"doc://Space/tutorials/Space/InstallingTools#Installing-Spaces-Dependencies":{"title":"Installing Space's Dependencies","abstract":[{"type":"text","text":"Before writing your first smart contract with Space, ensure you have the necessary tools installed."}],"url":"\/tutorials\/space\/installingtools#Installing-Spaces-Dependencies","identifier":"doc:\/\/Space\/tutorials\/Space\/InstallingTools#Installing-Spaces-Dependencies","kind":"section","type":"section","role":"pseudoSymbol"}}}