{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/tutorials\/space\/familiarizewithtypes"]}],"sections":[{"title":"Exploring Space's Types","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Space provides types that allow you to leverage the full potential of the SpaceVM."}]}],"estimatedTimeInMinutes":20,"chapter":"Exploring Space's Types","kind":"hero"},{"tasks":[{"anchor":"Handling-Heap-Allocation-Challenges","title":"Handling Heap Allocation Challenges","stepsSection":[{"type":"step","content":[{"inlineContent":[{"type":"text","text":"Avoid using "},{"code":"String","type":"codeVoice"},{"text":" in Space, as it is prohibited due to memory restrictions.","type":"text"}],"type":"paragraph"}],"caption":[],"media":null,"runtimePreview":null,"code":"FamiliarizeWithTypesSection1Step1.swift"},{"type":"step","caption":[],"media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use "},{"code":"Buffer","type":"codeVoice"},{"text":" as a fixed-size alternative for handling raw data and text.","type":"text"}]}],"code":"FamiliarizeWithTypesSection1Step2.swift","runtimePreview":null},{"type":"step","media":null,"code":"FamiliarizeWithTypesSection1Step3.swift","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Similarly, avoid using ","type":"text"},{"type":"codeVoice","code":"Array"},{"text":" since it leads to heap allocations and is not allowed.","type":"text"}]}],"caption":[]},{"media":null,"type":"step","code":"FamiliarizeWithTypesSection1Step4.swift","content":[{"inlineContent":[{"text":"Instead, leverage the ","type":"text"},{"code":"Vector","type":"codeVoice"},{"type":"text","text":" type as a memory-efficient alternative to "},{"type":"codeVoice","code":"Array"},{"type":"text","text":"."}],"type":"paragraph"}],"caption":[],"runtimePreview":null},{"runtimePreview":null,"media":null,"code":"FamiliarizeWithTypesSection1Step5.swift","caption":[],"content":[{"inlineContent":[{"type":"text","text":"Integer types like "},{"code":"Int","type":"codeVoice"},{"type":"text","text":", "},{"code":"UInt","type":"codeVoice"},{"type":"text","text":", and "},{"type":"codeVoice","code":"Bool"},{"type":"text","text":" are fully supported and safe to use."}],"type":"paragraph"}],"type":"step"},{"code":"FamiliarizeWithTypesSection1Step6.swift","media":null,"runtimePreview":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Ensure you only import the Space framework to keep the contract lightweight and efficient.","type":"text"}]}],"caption":[]}],"contentSection":[{"content":[{"inlineContent":[{"type":"text","text":"Writing code for blockchain involves operating within strict resource constraints. To address this, Space uses Swift’s “embedded” mode, ensuring the compiled code is as lightweight and efficient as possible."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"SpaceVM, the engine running smart contracts, limits heap allocations. As a result, types with dynamic sizes, such as Strings, Arrays, or classes, and any structs or enums containing these, are not permitted.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Additionally, Swift’s existential types—such as "},{"code":"any Protocol","type":"codeVoice"},{"type":"text","text":" where "},{"type":"codeVoice","code":"Protocol"},{"text":" is a protocol—are also forbidden. Existential types introduce runtime overhead, which is why they are not allowed in Space.","type":"text"}]},{"inlineContent":[{"type":"text","text":"The allowed Swift types are:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"StaticString"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Integer types: Int, UInt, UInt8, UInt16, etc."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Bool: treated as a UInt8"}]}]}]},{"inlineContent":[{"type":"text","text":"Space introduces specific types that serve as alternatives for those not allowed. This chapter introduces three key replacements:"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"Buffer"},{"text":": A substitute for String and Data","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"code":"BigUint","type":"codeVoice"},{"type":"text","text":": Capable of handling large unsigned integers"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"Vector"},{"type":"text","text":": An alternative to Array"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For security, these types do not feature mutating methods. Instead, they use methods that return new instances. For example, the "},{"type":"codeVoice","code":"Buffer"},{"text":" type does not include ","type":"text"},{"code":"append(_:) -> Void","type":"codeVoice"},{"text":" but instead offers ","type":"text"},{"code":"appending(_:) -> Buffer","type":"codeVoice"},{"type":"text","text":"."}]}],"kind":"contentAndMedia","mediaPosition":"trailing"}]},{"contentSection":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Buffer"},{"text":" is a fundamental type in Space, designed to store raw data and strings.","type":"text"}]}],"mediaPosition":"trailing","kind":"contentAndMedia"}],"stepsSection":[{"caption":[],"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Start by creating the basic structure for your contract."}]}],"media":null,"code":"FamiliarizeWithTypesSection2Step1.swift","runtimePreview":null},{"code":"FamiliarizeWithTypesSection2Step2.swift","type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Initialize a "},{"type":"codeVoice","code":"Buffer"},{"text":" variable using a string literal.","type":"text"}]}],"runtimePreview":null,"caption":[{"inlineContent":[{"type":"text","text":"Important: Explicitly declare your variable as "},{"type":"codeVoice","code":"Buffer"},{"text":" to avoid being interpreted as ","type":"text"},{"type":"codeVoice","code":"String"},{"type":"text","text":"."}],"type":"paragraph"}],"media":null},{"caption":[],"type":"step","runtimePreview":null,"media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Append another ","type":"text"},{"code":"Buffer","type":"codeVoice"},{"type":"text","text":" to your existing variable."}]}],"code":"FamiliarizeWithTypesSection2Step3.swift"},{"type":"step","media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Compare two ","type":"text"},{"type":"codeVoice","code":"Buffer"},{"text":" instances. If they don’t match, throw a smart contract error.","type":"text"}]}],"code":"FamiliarizeWithTypesSection2Step4.swift","runtimePreview":null,"caption":[{"type":"paragraph","inlineContent":[{"text":"Note: The ","type":"text"},{"type":"codeVoice","code":"smartContractError"},{"type":"text","text":" function requires a "},{"code":"Buffer","type":"codeVoice"},{"text":" parameter. This topic is covered in detail in a later chapter.","type":"text"}]}]}],"title":"Understanding the Buffer Type","anchor":"Understanding-the-Buffer-Type"},{"contentSection":[{"kind":"contentAndMedia","mediaPosition":"trailing","content":[{"type":"paragraph","inlineContent":[{"text":"Blockchains do not support decimal numbers. However, real-world applications often require decimal representation, such as in cryptocurrency amounts like 0.09281 Bitcoin.","type":"text"}]},{"inlineContent":[{"text":"To handle such cases, values are expressed as large numbers, with most tokens treating the first 18 trailing digits as decimals. For instance: 1 EGLD equals 1 * 10^18, or 1,000,000,000,000,000,000.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Standard Swift types, such as "},{"type":"codeVoice","code":"UInt64"},{"type":"text","text":", can only store values up to 18,446,744,073,709,551,615 (20 digits), making it impossible to represent values exceeding approximately 18.446744 EGLD."}],"type":"paragraph"},{"inlineContent":[{"text":"Space provides the ","type":"text"},{"code":"BigUint","type":"codeVoice"},{"type":"text","text":" type to store arbitrarily large positive numbers."}],"type":"paragraph"}]}],"title":"Working with the BigUint Type","stepsSection":[{"code":"FamiliarizeWithTypesSection3Step1.swift","content":[{"type":"paragraph","inlineContent":[{"text":"Begin by structuring your contract.","type":"text"}]}],"type":"step","caption":[],"media":null,"runtimePreview":null},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Declare a "},{"type":"codeVoice","code":"BigUint"},{"text":" constant with an integer literal.","type":"text"}]}],"type":"step","caption":[{"inlineContent":[{"type":"text","text":"Important: You must specify the type explicitly as "},{"type":"codeVoice","code":"BigUint"},{"text":", or it will default to ","type":"text"},{"code":"Int","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}],"media":null,"code":"FamiliarizeWithTypesSection3Step2.swift","runtimePreview":null},{"code":"FamiliarizeWithTypesSection3Step3.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a new "},{"type":"codeVoice","code":"BigUint"},{"type":"text","text":" by adding 3 to the previous constant."}]}],"type":"step","media":null,"runtimePreview":null,"caption":[]},{"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Multiply the new variable by 7.","type":"text"}]}],"media":null,"code":"FamiliarizeWithTypesSection3Step4.swift","type":"step","caption":[]},{"media":null,"code":"FamiliarizeWithTypesSection3Step5.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add three times the initial constant to the new variable."}]}],"type":"step","runtimePreview":null,"caption":[]},{"code":"FamiliarizeWithTypesSection3Step6.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Subtract 21 from the variable."}]}],"type":"step","media":null,"runtimePreview":null,"caption":[{"inlineContent":[{"type":"text","text":"Note: A "},{"code":"BigUint","type":"codeVoice"},{"text":" value cannot be negative. If the subtraction results in a value below zero, Space will trigger a smart contract error.","type":"text"}],"type":"paragraph"}]},{"media":null,"code":"FamiliarizeWithTypesSection3Step7.swift","type":"step","runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"Verify that the result is a multiple of 10, and throw a smart contract error if not."}],"type":"paragraph"}],"caption":[]},{"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Ensure the result is greater than zero, throwing an error if it isn’t."}]}],"code":"FamiliarizeWithTypesSection3Step8.swift","type":"step","media":null,"caption":[]}],"anchor":"Working-with-the-BigUint-Type"},{"stepsSection":[{"caption":[],"content":[{"inlineContent":[{"text":"Begin by setting up the basic structure of your contract.","type":"text"}],"type":"paragraph"}],"media":null,"type":"step","code":"FamiliarizeWithTypesSection4Step1.swift","runtimePreview":null},{"type":"step","media":null,"caption":[{"inlineContent":[{"type":"text","text":"Important: Currently, array literal assignment is disabled. The Space team is investigating its impact on memory management in smart contracts before enabling it."}],"type":"paragraph"}],"content":[{"inlineContent":[{"text":"Declare a ","type":"text"},{"type":"codeVoice","code":"Vector"},{"type":"text","text":" variable to hold "},{"type":"codeVoice","code":"BigUint"},{"type":"text","text":" elements."}],"type":"paragraph"}],"code":"FamiliarizeWithTypesSection4Step2.swift","runtimePreview":null},{"content":[{"inlineContent":[{"type":"text","text":"Add elements to the "},{"code":"Vector","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}],"runtimePreview":null,"type":"step","code":"FamiliarizeWithTypesSection4Step3.swift","caption":[],"media":null},{"media":null,"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Important: The "},{"type":"codeVoice","code":"for ... in"},{"type":"text","text":" loop for vectors is currently disabled. The Space team is evaluating its effect on smart contract memory before enabling it."}]}],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Iterate over the "},{"code":"Vector","type":"codeVoice"},{"type":"text","text":" to sum all the elements."}]}],"code":"FamiliarizeWithTypesSection4Step4.swift","type":"step","runtimePreview":null},{"runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"Ensure the sum equals 13. Throw a smart contract error if it doesn’t."}],"type":"paragraph"}],"code":"FamiliarizeWithTypesSection4Step5.swift","media":null,"type":"step","caption":[]}],"title":"Working with the Vector Type","anchor":"Working-with-the-Vector-Type","contentSection":[{"mediaPosition":"trailing","kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"Array","type":"codeVoice"},{"text":" type is often the default for storing dynamic-size data, but it is not permitted in Space. Fortunately, Space provides a suitable alternative: ","type":"text"},{"code":"Vector","type":"codeVoice"},{"type":"text","text":"."}]},{"inlineContent":[{"type":"text","text":"A "},{"type":"codeVoice","code":"Vector"},{"type":"text","text":" can store any type compatible with Space, including user-defined structs and enums."}],"type":"paragraph"}]}]},{"title":"Creating Your Own Types","contentSection":[{"kind":"contentAndMedia","content":[{"inlineContent":[{"type":"text","text":"You can define your own structures and enumerations and make them compatible with Space using the "},{"code":"@Codable","type":"codeVoice"},{"type":"text","text":" annotation. When a type is marked with "},{"code":"@Codable","type":"codeVoice"},{"type":"text","text":", it becomes eligible to be used as input or output for endpoints, within arrays, and anywhere Space’s encoding system is applied."}],"type":"paragraph"},{"inlineContent":[{"text":"A type annotated with ","type":"text"},{"type":"codeVoice","code":"@Codable"},{"type":"text","text":" must only contain fields of types compatible with Space, such as integers, "},{"type":"codeVoice","code":"Bool"},{"type":"text","text":", "},{"code":"Buffer","type":"codeVoice"},{"type":"text","text":", "},{"code":"BigUint","type":"codeVoice"},{"text":", ","type":"text"},{"code":"Vector","type":"codeVoice"},{"text":", and other ","type":"text"},{"type":"codeVoice","code":"@Codable"},{"type":"text","text":" types."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Additionally, the "},{"type":"codeVoice","code":"@Codable"},{"type":"text","text":" annotation prevents the structure from having methods or initializers."}]}],"mediaPosition":"trailing"}],"stepsSection":[{"content":[{"inlineContent":[{"type":"text","text":"Start by creating a struct with fields that are compatible with Space."}],"type":"paragraph"}],"type":"step","media":null,"runtimePreview":null,"caption":[],"code":"FamiliarizeWithTypesSection5Step1.swift"},{"content":[{"inlineContent":[{"type":"text","text":"Annotate your struct with "},{"type":"codeVoice","code":"@Codable"},{"type":"text","text":" to make it usable with Space’s encoding system."}],"type":"paragraph"}],"media":null,"code":"FamiliarizeWithTypesSection5Step2.swift","runtimePreview":null,"caption":[],"type":"step"},{"type":"step","caption":[],"media":null,"runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"Use the "},{"type":"codeVoice","code":"@Codable"},{"type":"text","text":"-annotated type within your smart contracts."}],"type":"paragraph"}],"code":"FamiliarizeWithTypesSection5Step3.swift"},{"media":null,"code":"FamiliarizeWithTypesSection5Step4.swift","runtimePreview":null,"caption":[],"content":[{"type":"paragraph","inlineContent":[{"text":"Remember, a ","type":"text"},{"code":"@Codable","type":"codeVoice"},{"text":" type can be used as a field in other ","type":"text"},{"code":"@Codable","type":"codeVoice"},{"text":" types.","type":"text"}]}],"type":"step"}],"anchor":"Creating-Your-Own-Types"}],"kind":"tasks"},{"action":{"type":"reference","isActive":true,"identifier":"doc:\/\/Space\/tutorials\/Space\/StoreValues","overridingTitle":"Get started","overridingTitleInlineContent":[{"type":"text","text":"Get started"}]},"featuredEyebrow":"Tutorial","abstract":[{"text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory.","type":"text"}],"title":"Persist Values Between Executions","kind":"callToAction"}],"kind":"project","schemaVersion":{"minor":3,"major":0,"patch":0},"hierarchy":{"modules":[{"reference":"doc:\/\/Space\/tutorials\/Space\/Getting-Started\/Installing-the-Tools","projects":[{"sections":[{"kind":"task","reference":"doc:\/\/Space\/tutorials\/Space\/InstallingTools#Installing-Spaces-Dependencies"},{"reference":"doc:\/\/Space\/tutorials\/Space\/InstallingTools#Setting-Up-the-Space-CLI","kind":"task"},{"kind":"task","reference":"doc:\/\/Space\/tutorials\/Space\/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract"}],"reference":"doc:\/\/Space\/tutorials\/Space\/InstallingTools"}]},{"projects":[{"sections":[{"reference":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract#Initializing-the-Project","kind":"task"},{"reference":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract#Writing-the-Contract-Code","kind":"task"},{"reference":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract#Testing-the-Contract","kind":"task"}],"reference":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract"}],"reference":"doc:\/\/Space\/tutorials\/Space\/Getting-Started\/Building-Your-First-Smart-Contract"},{"reference":"doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Exploring-Space's-Types","projects":[{"reference":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes","sections":[{"reference":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges","kind":"task"},{"kind":"task","reference":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Understanding-the-Buffer-Type"},{"kind":"task","reference":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Working-with-the-BigUint-Type"},{"reference":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Working-with-the-Vector-Type","kind":"task"},{"kind":"task","reference":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Creating-Your-Own-Types"}]}]},{"projects":[{"sections":[{"reference":"doc:\/\/Space\/tutorials\/Space\/StoreValues#Working-with-Storage-for-Single-Value-Persistence","kind":"task"},{"reference":"doc:\/\/Space\/tutorials\/Space\/StoreValues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage","kind":"task"}],"reference":"doc:\/\/Space\/tutorials\/Space\/StoreValues"}],"reference":"doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Persisting-Data-Across-Executions"}],"paths":[["doc:\/\/Space\/tutorials\/Space","doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts","doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Exploring-Space's-Types"]],"reference":"doc:\/\/Space\/tutorials\/Space"},"identifier":{"url":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes","interfaceLanguage":"swift"},"metadata":{"categoryPathComponent":"Space","title":"Exploring Space's Types","category":"Space","role":"project"},"references":{"FamiliarizeWithTypesSection5Step4.swift":{"fileName":"struct.swift","fileType":"swift","content":["import Space","","@Codable enum MyEnum {","    case firstCase(BigUint)","}","","@Codable struct MyStruct {","    let myBiguint: BigUint","    let myInteger: UInt64","    let myBuffer: Buffer","    let myEnum: MyEnum","}"],"identifier":"FamiliarizeWithTypesSection5Step4.swift","highlights":[],"syntax":"swift","type":"file"},"doc://Space/tutorials/Space/CodingYourFirstContract#Testing-the-Contract":{"kind":"section","role":"pseudoSymbol","url":"\/tutorials\/space\/codingyourfirstcontract#Testing-the-Contract","title":"Testing the Contract","identifier":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract#Testing-the-Contract","type":"section","abstract":[{"type":"text","text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user."}]},"doc://Space/tutorials/Space/InstallingTools":{"kind":"project","role":"project","estimatedTime":"10min","url":"\/tutorials\/space\/installingtools","title":"Install the Necessary Tools","identifier":"doc:\/\/Space\/tutorials\/Space\/InstallingTools","type":"topic","abstract":[{"type":"text","text":"Before writing your first smart contract with Space, ensure you have the necessary tools installed."}]},"doc://Space/tutorials/Space/CodingYourFirstContract#Initializing-the-Project":{"url":"\/tutorials\/space\/codingyourfirstcontract#Initializing-the-Project","identifier":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract#Initializing-the-Project","role":"pseudoSymbol","abstract":[{"type":"text","text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user."}],"kind":"section","type":"section","title":"Initializing the Project"},"FamiliarizeWithTypesSection1Step4.swift":{"identifier":"FamiliarizeWithTypesSection1Step4.swift","highlights":[{"line":9},{"line":10},{"line":11},{"line":12}],"content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        let myString: String = \"Hey!\" \/\/ Won't compile! ❌","        let myBuffer: Buffer = \"Hey!\" \/\/ Fine ✅","        ","        let myArray: [UInt64] = [4, 8, 100] \/\/ Won't compile! ❌","        var myVector: Vector<UInt64> = Vector() \/\/ Fine ✅","            .appended(4)","            .appended(8)","            .appended(100)","    }","}"],"fileType":"swift","fileName":"lib.swift","type":"file","syntax":"swift"},"doc://Space/tutorials/Space/Getting-Started/Installing-the-Tools":{"type":"topic","identifier":"doc:\/\/Space\/tutorials\/Space\/Getting-Started\/Installing-the-Tools","kind":"article","title":"Installing the Tools","abstract":[],"url":"\/tutorials\/space\/getting-started\/installing-the-tools","role":"article"},"doc://Space/tutorials/Space/FamiliarizeWithTypes#Working-with-the-Vector-Type":{"url":"\/tutorials\/space\/familiarizewithtypes#Working-with-the-Vector-Type","identifier":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Working-with-the-Vector-Type","role":"pseudoSymbol","abstract":[{"type":"text","text":"Space provides types that allow you to leverage the full potential of the SpaceVM."}],"kind":"section","type":"section","title":"Working with the Vector Type"},"FamiliarizeWithTypesSection2Step4.swift":{"fileName":"lib.swift","content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        var myBuffer: Buffer = \"Hello\"","        myBuffer = myBuffer.appended(\" World!\")","        ","        guard myBuffer != \"Hello World!\" else {","            smartContractError(message: \"myBuffer is not equal to Hello World!\")","        }","    }","}"],"fileType":"swift","identifier":"FamiliarizeWithTypesSection2Step4.swift","highlights":[{"line":7},{"line":8},{"line":9},{"line":10}],"syntax":"swift","type":"file"},"FamiliarizeWithTypesSection3Step2.swift":{"identifier":"FamiliarizeWithTypesSection3Step2.swift","highlights":[{"line":5}],"content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        let initialNumber: BigUint = 5","    }","}"],"fileType":"swift","fileName":"lib.swift","type":"file","syntax":"swift"},"FamiliarizeWithTypesSection4Step2.swift":{"fileName":"lib.swift","content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        var myVector: Vector<BigUint> = Vector()","    }","}"],"fileType":"swift","identifier":"FamiliarizeWithTypesSection4Step2.swift","highlights":[{"line":5}],"syntax":"swift","type":"file"},"doc://Space/tutorials/Space/CodingYourFirstContract":{"type":"topic","abstract":[{"type":"text","text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user."}],"role":"project","estimatedTime":"20min","identifier":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract","kind":"project","title":"Building Your First Smart Contract","url":"\/tutorials\/space\/codingyourfirstcontract"},"FamiliarizeWithTypesSection1Step1.swift":{"identifier":"FamiliarizeWithTypesSection1Step1.swift","highlights":[],"fileType":"swift","content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        let myString: String = \"Hey!\" \/\/ Won't compile! ❌","    }","}"],"fileName":"lib.swift","type":"file","syntax":"swift"},"FamiliarizeWithTypesSection2Step1.swift":{"fileName":"lib.swift","content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        ","    }","}"],"fileType":"swift","identifier":"FamiliarizeWithTypesSection2Step1.swift","highlights":[],"syntax":"swift","type":"file"},"FamiliarizeWithTypesSection1Step5.swift":{"content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        let myString: String = \"Hey!\" \/\/ Won't compile! ❌","        let myBuffer: Buffer = \"Hey!\" \/\/ Fine ✅","        ","        let myArray: [UInt64] = [4, 8, 100] \/\/ Won't compile! ❌","        var myVector: Vector<UInt64> = Vector() \/\/ Fine ✅","            .appended(4)","            .appended(8)","            .appended(100)","        ","        let two = 2 \/\/ Fine ✅","        let ten: UInt64 = 10 \/\/ Fine ✅","        let isTwoEven = true \/\/ Fine ✅","    }","}"],"syntax":"swift","type":"file","fileType":"swift","fileName":"lib.swift","highlights":[{"line":13},{"line":14},{"line":15},{"line":16}],"identifier":"FamiliarizeWithTypesSection1Step5.swift"},"doc://Space/tutorials/Space/Getting-Started/Building-Your-First-Smart-Contract":{"url":"\/tutorials\/space\/getting-started\/building-your-first-smart-contract","identifier":"doc:\/\/Space\/tutorials\/Space\/Getting-Started\/Building-Your-First-Smart-Contract","role":"article","abstract":[],"kind":"article","type":"topic","title":"Building Your First Smart Contract"},"FamiliarizeWithTypesSection5Step3.swift":{"highlights":[],"identifier":"FamiliarizeWithTypesSection5Step3.swift","type":"file","fileName":"lib.swift","syntax":"swift","fileType":"swift","content":["import Space","","@Contract struct MyContract {","    public func myEndpoint(myStruct: MyStruct) {","        \/\/ Do what you want here","    }","}"]},"doc://Space/tutorials/Space/FamiliarizeWithTypes":{"kind":"project","role":"project","estimatedTime":"20min","url":"\/tutorials\/space\/familiarizewithtypes","title":"Exploring Space's Types","identifier":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes","type":"topic","abstract":[{"type":"text","text":"Space provides types that allow you to leverage the full potential of the SpaceVM."}]},"FamiliarizeWithTypesSection4Step3.swift":{"identifier":"FamiliarizeWithTypesSection4Step3.swift","type":"file","highlights":[{"line":6},{"line":7},{"line":8}],"fileName":"lib.swift","fileType":"swift","syntax":"swift","content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        var myVector: Vector<BigUint> = Vector()","        myVector = myVector.appended(2)","        myVector = myVector.appended(10)","        myVector = myVector.appended(1)","    }","}"]},"FamiliarizeWithTypesSection4Step4.swift":{"type":"file","highlights":[{"line":9},{"line":10},{"line":11},{"line":12},{"line":13}],"identifier":"FamiliarizeWithTypesSection4Step4.swift","fileName":"lib.swift","content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        var myVector: Vector<BigUint> = Vector()","        myVector = myVector.appended(2)","        myVector = myVector.appended(10)","        myVector = myVector.appended(1)","        ","        var sum: BigUint = 0","        myVector.forEach { item in","            sum = sum + item","        }","    }","}"],"syntax":"swift","fileType":"swift"},"doc://Space/tutorials/Space/CodingYourFirstContract#Writing-the-Contract-Code":{"identifier":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract#Writing-the-Contract-Code","title":"Writing the Contract Code","url":"\/tutorials\/space\/codingyourfirstcontract#Writing-the-Contract-Code","kind":"section","type":"section","abstract":[{"type":"text","text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user."}],"role":"pseudoSymbol"},"doc://Space/tutorials/Space/InstallingTools#Installing-Spaces-Dependencies":{"url":"\/tutorials\/space\/installingtools#Installing-Spaces-Dependencies","identifier":"doc:\/\/Space\/tutorials\/Space\/InstallingTools#Installing-Spaces-Dependencies","role":"pseudoSymbol","abstract":[{"type":"text","text":"Before writing your first smart contract with Space, ensure you have the necessary tools installed."}],"kind":"section","type":"section","title":"Installing Space's Dependencies"},"FamiliarizeWithTypesSection4Step5.swift":{"fileType":"swift","identifier":"FamiliarizeWithTypesSection4Step5.swift","type":"file","fileName":"lib.swift","syntax":"swift","highlights":[{"line":14},{"line":15},{"line":16},{"line":17}],"content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        var myVector: Vector<BigUint> = Vector()","        myVector = myVector.appended(2)","        myVector = myVector.appended(10)","        myVector = myVector.appended(1)","        ","        var sum: BigUint = 0","        myVector.forEach { item in","            sum = sum + item","        }","        ","        guard sum == 13 else {","            smartContractError(message: \"sum is not 13\")","        }","    }","}"]},"FamiliarizeWithTypesSection3Step8.swift":{"type":"file","highlights":[{"line":15},{"line":16},{"line":17},{"line":18}],"identifier":"FamiliarizeWithTypesSection3Step8.swift","fileName":"lib.swift","content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        let initialNumber: BigUint = 5","        ","        var result = initialNumber + 3","        result = result * 7","        result = result + initialNumber * 3","        result = result - 21","        ","        guard result % 10 == 0 else {","            smartContractError(message: \"result is not a multiple of 10\")","        }","        ","        guard result > 0 else {","            smartContractError(message: \"result is 0\")","        }","    }","}"],"syntax":"swift","fileType":"swift"},"FamiliarizeWithTypesSection3Step6.swift":{"type":"file","fileName":"lib.swift","syntax":"swift","fileType":"swift","highlights":[{"line":10}],"identifier":"FamiliarizeWithTypesSection3Step6.swift","content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        let initialNumber: BigUint = 5","        ","        var result = initialNumber + 3","        result = result * 7","        result = result + initialNumber * 3","        result = result - 21","    }","}"]},"doc://Space/tutorials/Space/FamiliarizeWithTypes#Understanding-the-Buffer-Type":{"kind":"section","role":"pseudoSymbol","url":"\/tutorials\/space\/familiarizewithtypes#Understanding-the-Buffer-Type","title":"Understanding the Buffer Type","identifier":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Understanding-the-Buffer-Type","type":"section","abstract":[{"type":"text","text":"Space provides types that allow you to leverage the full potential of the SpaceVM."}]},"doc://Space/tutorials/Space/Deep-Dive-into-Space-Concepts/Exploring-Space's-Types":{"type":"topic","title":"Exploring Space's Types","abstract":[],"kind":"article","identifier":"doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Exploring-Space's-Types","url":"\/tutorials\/space\/deep-dive-into-space-concepts\/exploring-space's-types","role":"article"},"FamiliarizeWithTypesSection3Step5.swift":{"type":"file","highlights":[{"line":9}],"identifier":"FamiliarizeWithTypesSection3Step5.swift","fileName":"lib.swift","content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        let initialNumber: BigUint = 5","        ","        var result = initialNumber + 3","        result = result * 7","        result = result + initialNumber * 3","    }","}"],"syntax":"swift","fileType":"swift"},"FamiliarizeWithTypesSection5Step2.swift":{"type":"file","identifier":"FamiliarizeWithTypesSection5Step2.swift","content":["import Space","","@Codable struct MyStruct {","    let myBiguint: BigUint","    let myInteger: UInt64","    let myBuffer: Buffer","}"],"syntax":"swift","fileName":"struct.swift","fileType":"swift","highlights":[{"line":3}]},"doc://Space/tutorials/Space/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract":{"type":"section","abstract":[{"type":"text","text":"Before writing your first smart contract with Space, ensure you have the necessary tools installed."}],"identifier":"doc:\/\/Space\/tutorials\/Space\/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract","kind":"section","title":"Initializing and Compiling Your First Smart Contract","url":"\/tutorials\/space\/installingtools#Initializing-and-Compiling-Your-First-Smart-Contract","role":"pseudoSymbol"},"doc://Space/tutorials/Space/StoreValues#Working-with-Storage-for-Single-Value-Persistence":{"role":"pseudoSymbol","type":"section","identifier":"doc:\/\/Space\/tutorials\/Space\/StoreValues#Working-with-Storage-for-Single-Value-Persistence","abstract":[{"type":"text","text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory."}],"kind":"section","title":"Working with @Storage for Single Value Persistence","url":"\/tutorials\/space\/storevalues#Working-with-Storage-for-Single-Value-Persistence"},"FamiliarizeWithTypesSection2Step3.swift":{"type":"file","identifier":"FamiliarizeWithTypesSection2Step3.swift","content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        var myBuffer: Buffer = \"Hello\"","        myBuffer = myBuffer.appended(\" World!\")","    }","}"],"syntax":"swift","fileName":"lib.swift","fileType":"swift","highlights":[{"line":6}]},"doc://Space/tutorials/Space/StoreValues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage":{"url":"\/tutorials\/space\/storevalues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage","identifier":"doc:\/\/Space\/tutorials\/Space\/StoreValues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage","role":"pseudoSymbol","abstract":[{"type":"text","text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory."}],"kind":"section","type":"section","title":"Leveraging @Mapping for Dynamic Key-Value Storage"},"FamiliarizeWithTypesSection3Step4.swift":{"type":"file","identifier":"FamiliarizeWithTypesSection3Step4.swift","content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        let initialNumber: BigUint = 5","        ","        var result = initialNumber + 3","        result = result * 7","    }","}"],"syntax":"swift","fileName":"lib.swift","fileType":"swift","highlights":[{"line":8}]},"doc://Space/tutorials/Space/StoreValues":{"url":"\/tutorials\/space\/storevalues","abstract":[{"type":"text","text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory."}],"title":"Persist Values Between Executions","kind":"project","role":"project","estimatedTime":"15min","type":"topic","identifier":"doc:\/\/Space\/tutorials\/Space\/StoreValues"},"FamiliarizeWithTypesSection4Step1.swift":{"type":"file","highlights":[],"identifier":"FamiliarizeWithTypesSection4Step1.swift","fileName":"lib.swift","content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        ","    }","}"],"syntax":"swift","fileType":"swift"},"doc://Space/tutorials/Space/FamiliarizeWithTypes#Creating-Your-Own-Types":{"kind":"section","role":"pseudoSymbol","url":"\/tutorials\/space\/familiarizewithtypes#Creating-Your-Own-Types","title":"Creating Your Own Types","identifier":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Creating-Your-Own-Types","type":"section","abstract":[{"type":"text","text":"Space provides types that allow you to leverage the full potential of the SpaceVM."}]},"FamiliarizeWithTypesSection1Step3.swift":{"fileName":"lib.swift","fileType":"swift","syntax":"swift","identifier":"FamiliarizeWithTypesSection1Step3.swift","content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        let myString: String = \"Hey!\" \/\/ Won't compile! ❌","        let myBuffer: Buffer = \"Hey!\" \/\/ Fine ✅","        ","        let myArray: [UInt64] = [4, 8, 100] \/\/ Won't compile! ❌","    }","}"],"type":"file","highlights":[{"line":7},{"line":8}]},"FamiliarizeWithTypesSection3Step7.swift":{"highlights":[{"line":11},{"line":12},{"line":13},{"line":14}],"fileType":"swift","identifier":"FamiliarizeWithTypesSection3Step7.swift","content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        let initialNumber: BigUint = 5","        ","        var result = initialNumber + 3","        result = result * 7","        result = result + initialNumber * 3","        result = result - 21","        ","        guard result % 10 == 0 else {","            smartContractError(message: \"result is not a multiple of 10\")","        }","    }","}"],"type":"file","fileName":"lib.swift","syntax":"swift"},"doc://Space/tutorials/Space/InstallingTools#Setting-Up-the-Space-CLI":{"type":"section","abstract":[{"type":"text","text":"Before writing your first smart contract with Space, ensure you have the necessary tools installed."}],"role":"pseudoSymbol","identifier":"doc:\/\/Space\/tutorials\/Space\/InstallingTools#Setting-Up-the-Space-CLI","kind":"section","title":"Setting Up the Space CLI","url":"\/tutorials\/space\/installingtools#Setting-Up-the-Space-CLI"},"FamiliarizeWithTypesSection3Step3.swift":{"fileName":"lib.swift","fileType":"swift","identifier":"FamiliarizeWithTypesSection3Step3.swift","syntax":"swift","content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        let initialNumber: BigUint = 5","        ","        var result = initialNumber + 3","    }","}"],"type":"file","highlights":[{"line":6},{"line":7}]},"doc://Space/tutorials/Space/Deep-Dive-into-Space-Concepts/Persisting-Data-Across-Executions":{"kind":"article","role":"article","url":"\/tutorials\/space\/deep-dive-into-space-concepts\/persisting-data-across-executions","title":"Persisting Data Across Executions","identifier":"doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Persisting-Data-Across-Executions","type":"topic","abstract":[]},"doc://Space/tutorials/Space/FamiliarizeWithTypes#Working-with-the-BigUint-Type":{"abstract":[{"type":"text","text":"Space provides types that allow you to leverage the full potential of the SpaceVM."}],"kind":"section","type":"section","url":"\/tutorials\/space\/familiarizewithtypes#Working-with-the-BigUint-Type","identifier":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Working-with-the-BigUint-Type","title":"Working with the BigUint Type","role":"pseudoSymbol"},"doc://Space/tutorials/Space":{"role":"overview","title":"Meet Space","kind":"overview","abstract":[{"type":"text","text":"Discover how Space simplifies blockchain development using Swift. Dive into the world of Web3 with ease and efficiency."}],"identifier":"doc:\/\/Space\/tutorials\/Space","type":"topic","url":"\/tutorials\/space"},"FamiliarizeWithTypesSection1Step6.swift":{"highlights":[{"line":2}],"fileType":"swift","identifier":"FamiliarizeWithTypesSection1Step6.swift","content":["import Space","import Foundation \/\/ Don't do this ❌","","@Contract struct MyContract {","    public func myEndpoint() {","        let myString: String = \"Hey!\" \/\/ Won't compile! ❌","        let myBuffer: Buffer = \"Hey!\" \/\/ Fine ✅","        ","        let myArray: [UInt64] = [4, 8, 100] \/\/ Won't compile! ❌","        var myVector: Vector<UInt64> = Vector() \/\/ Fine ✅","            .appended(4)","            .appended(8)","            .appended(100)","        ","        let two = 2 \/\/ Fine ✅","        let ten: UInt64 = 10 \/\/ Fine ✅","        let isTwoEven = true \/\/ Fine ✅","    }","}"],"type":"file","fileName":"lib.swift","syntax":"swift"},"FamiliarizeWithTypesSection2Step2.swift":{"fileName":"lib.swift","fileType":"swift","identifier":"FamiliarizeWithTypesSection2Step2.swift","syntax":"swift","content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        var myBuffer: Buffer = \"Hello\"","    }","}"],"type":"file","highlights":[{"line":5}]},"FamiliarizeWithTypesSection5Step1.swift":{"highlights":[],"fileType":"swift","identifier":"FamiliarizeWithTypesSection5Step1.swift","content":["import Space","","struct MyStruct {","    let myBiguint: BigUint","    let myInteger: UInt64","    let myBuffer: Buffer","}"],"type":"file","fileName":"struct.swift","syntax":"swift"},"FamiliarizeWithTypesSection1Step2.swift":{"type":"file","highlights":[{"line":6}],"identifier":"FamiliarizeWithTypesSection1Step2.swift","fileName":"lib.swift","content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        let myString: String = \"Hey!\" \/\/ Won't compile! ❌","        let myBuffer: Buffer = \"Hey!\" \/\/ Fine ✅","    }","}"],"syntax":"swift","fileType":"swift"},"doc://Space/tutorials/Space/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges":{"kind":"section","role":"pseudoSymbol","url":"\/tutorials\/space\/familiarizewithtypes#Handling-Heap-Allocation-Challenges","title":"Handling Heap Allocation Challenges","identifier":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges","type":"section","abstract":[{"type":"text","text":"Space provides types that allow you to leverage the full potential of the SpaceVM."}]},"FamiliarizeWithTypesSection3Step1.swift":{"fileName":"lib.swift","fileType":"swift","identifier":"FamiliarizeWithTypesSection3Step1.swift","syntax":"swift","content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        ","    }","}"],"type":"file","highlights":[]}}}