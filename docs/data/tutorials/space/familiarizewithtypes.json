{"sections":[{"chapter":"Exploring Space's Types","estimatedTimeInMinutes":20,"content":[{"type":"paragraph","inlineContent":[{"text":"Space provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}]}],"kind":"hero","title":"Exploring Space's Types"},{"kind":"tasks","tasks":[{"title":"Handling Heap Allocation Challenges","anchor":"Handling-Heap-Allocation-Challenges","contentSection":[{"kind":"contentAndMedia","mediaPosition":"trailing","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Writing code for blockchain involves operating within strict resource constraints. To address this, Space uses Swift’s “embedded” mode, ensuring the compiled code is as lightweight and efficient as possible."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"SpaceVM, the engine running smart contracts, limits heap allocations. As a result, types with dynamic sizes, such as Strings, Arrays, or classes, and any structs or enums containing these, are not permitted."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Additionally, Swift’s existential types—such as "},{"type":"codeVoice","code":"any Protocol"},{"text":" where ","type":"text"},{"type":"codeVoice","code":"Protocol"},{"type":"text","text":" is a protocol—are also forbidden. Existential types introduce runtime overhead, which is why they are not allowed in Space."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The allowed Swift types are:"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"StaticString","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Integer types: Int, UInt, UInt8, UInt16, etc.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Bool: treated as a UInt8"}]}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"Space introduces specific types that serve as alternatives for those not allowed. This chapter introduces three key replacements:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"code":"Buffer","type":"codeVoice"},{"text":": A substitute for String and Data","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"BigUint"},{"text":": Capable of handling large unsigned integers","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"Vector","type":"codeVoice"},{"text":": An alternative to Array","type":"text"}]}]}]},{"inlineContent":[{"text":"For security, these types do not feature mutating methods. Instead, they use methods that return new instances. For example, the ","type":"text"},{"code":"Buffer","type":"codeVoice"},{"type":"text","text":" type does not include "},{"type":"codeVoice","code":"append(_:) -> Void"},{"type":"text","text":" but instead offers "},{"code":"appending(_:) -> Buffer","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}]}],"stepsSection":[{"content":[{"inlineContent":[{"text":"Avoid using ","type":"text"},{"type":"codeVoice","code":"String"},{"text":" in Space, as it is prohibited due to memory restrictions.","type":"text"}],"type":"paragraph"}],"media":null,"type":"step","caption":[],"code":"FamiliarizeWithTypesSection1Step1.swift","runtimePreview":null},{"code":"FamiliarizeWithTypesSection1Step2.swift","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use "},{"code":"Buffer","type":"codeVoice"},{"type":"text","text":" as a fixed-size alternative for handling raw data and text."}]}],"caption":[],"type":"step","media":null},{"runtimePreview":null,"code":"FamiliarizeWithTypesSection1Step3.swift","caption":[],"content":[{"type":"paragraph","inlineContent":[{"text":"Similarly, avoid using ","type":"text"},{"type":"codeVoice","code":"Array"},{"text":" since it leads to heap allocations and is not allowed.","type":"text"}]}],"type":"step","media":null},{"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Instead, leverage the ","type":"text"},{"code":"Vector","type":"codeVoice"},{"text":" type as a memory-efficient alternative to ","type":"text"},{"type":"codeVoice","code":"Array"},{"type":"text","text":"."}]}],"media":null,"code":"FamiliarizeWithTypesSection1Step4.swift","type":"step","caption":[]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Integer types like "},{"type":"codeVoice","code":"Int"},{"type":"text","text":", "},{"type":"codeVoice","code":"UInt"},{"type":"text","text":", and "},{"code":"Bool","type":"codeVoice"},{"text":" are fully supported and safe to use.","type":"text"}]}],"runtimePreview":null,"caption":[],"type":"step","media":null,"code":"FamiliarizeWithTypesSection1Step5.swift"},{"content":[{"type":"paragraph","inlineContent":[{"text":"Ensure you only import the Space framework to keep the contract lightweight and efficient.","type":"text"}]}],"caption":[],"media":null,"code":"FamiliarizeWithTypesSection1Step6.swift","type":"step","runtimePreview":null}]},{"title":"Understanding the Buffer Type","anchor":"Understanding-the-Buffer-Type","stepsSection":[{"code":"FamiliarizeWithTypesSection2Step1.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Start by creating the basic structure for your contract."}]}],"media":null,"runtimePreview":null,"type":"step","caption":[]},{"type":"step","media":null,"code":"FamiliarizeWithTypesSection2Step2.swift","content":[{"inlineContent":[{"type":"text","text":"Initialize a "},{"type":"codeVoice","code":"Buffer"},{"type":"text","text":" variable using a string literal."}],"type":"paragraph"}],"runtimePreview":null,"caption":[{"type":"paragraph","inlineContent":[{"text":"Important: Explicitly declare your variable as ","type":"text"},{"code":"Buffer","type":"codeVoice"},{"type":"text","text":" to avoid being interpreted as "},{"code":"String","type":"codeVoice"},{"type":"text","text":"."}]}]},{"runtimePreview":null,"code":"FamiliarizeWithTypesSection2Step3.swift","type":"step","caption":[],"content":[{"inlineContent":[{"type":"text","text":"Append another "},{"type":"codeVoice","code":"Buffer"},{"type":"text","text":" to your existing variable."}],"type":"paragraph"}],"media":null},{"code":"FamiliarizeWithTypesSection2Step4.swift","caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Note: The "},{"type":"codeVoice","code":"smartContractError"},{"text":" function requires a ","type":"text"},{"code":"Buffer","type":"codeVoice"},{"text":" parameter. This topic is covered in detail in a later chapter.","type":"text"}]}],"content":[{"inlineContent":[{"type":"text","text":"Compare two "},{"type":"codeVoice","code":"Buffer"},{"type":"text","text":" instances. If they don’t match, throw a smart contract error."}],"type":"paragraph"}],"media":null,"type":"step","runtimePreview":null}],"contentSection":[{"mediaPosition":"trailing","kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Buffer"},{"text":" is a fundamental type in Space, designed to store raw data and strings.","type":"text"}]}]}]},{"anchor":"Working-with-the-BigUint-Type","stepsSection":[{"code":"FamiliarizeWithTypesSection3Step1.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Begin by structuring your contract."}]}],"caption":[],"type":"step","media":null,"runtimePreview":null},{"type":"step","media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Declare a "},{"type":"codeVoice","code":"BigUint"},{"type":"text","text":" constant with an integer literal."}]}],"code":"FamiliarizeWithTypesSection3Step2.swift","caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Important: You must specify the type explicitly as "},{"type":"codeVoice","code":"BigUint"},{"type":"text","text":", or it will default to "},{"type":"codeVoice","code":"Int"},{"type":"text","text":"."}]}],"runtimePreview":null},{"caption":[],"code":"FamiliarizeWithTypesSection3Step3.swift","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Create a new ","type":"text"},{"code":"BigUint","type":"codeVoice"},{"type":"text","text":" by adding 3 to the previous constant."}]}],"type":"step","media":null},{"runtimePreview":null,"code":"FamiliarizeWithTypesSection3Step4.swift","media":null,"content":[{"inlineContent":[{"type":"text","text":"Multiply the new variable by 7."}],"type":"paragraph"}],"type":"step","caption":[]},{"code":"FamiliarizeWithTypesSection3Step5.swift","caption":[],"runtimePreview":null,"type":"step","content":[{"inlineContent":[{"type":"text","text":"Add three times the initial constant to the new variable."}],"type":"paragraph"}],"media":null},{"caption":[{"type":"paragraph","inlineContent":[{"text":"Note: A ","type":"text"},{"type":"codeVoice","code":"BigUint"},{"type":"text","text":" value cannot be negative. If the subtraction results in a value below zero, Space will trigger a smart contract error."}]}],"type":"step","code":"FamiliarizeWithTypesSection3Step6.swift","content":[{"inlineContent":[{"text":"Subtract 21 from the variable.","type":"text"}],"type":"paragraph"}],"runtimePreview":null,"media":null},{"type":"step","caption":[],"code":"FamiliarizeWithTypesSection3Step7.swift","content":[{"inlineContent":[{"text":"Verify that the result is a multiple of 10, and throw a smart contract error if not.","type":"text"}],"type":"paragraph"}],"runtimePreview":null,"media":null},{"caption":[],"media":null,"code":"FamiliarizeWithTypesSection3Step8.swift","content":[{"inlineContent":[{"type":"text","text":"Ensure the result is greater than zero, throwing an error if it isn’t."}],"type":"paragraph"}],"runtimePreview":null,"type":"step"}],"title":"Working with the BigUint Type","contentSection":[{"kind":"contentAndMedia","content":[{"inlineContent":[{"type":"text","text":"Blockchains do not support decimal numbers. However, real-world applications often require decimal representation, such as in cryptocurrency amounts like 0.09281 Bitcoin."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"To handle such cases, values are expressed as large numbers, with most tokens treating the first 18 trailing digits as decimals. For instance: 1 EGLD equals 1 * 10^18, or 1,000,000,000,000,000,000."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Standard Swift types, such as "},{"code":"UInt64","type":"codeVoice"},{"type":"text","text":", can only store values up to 18,446,744,073,709,551,615 (20 digits), making it impossible to represent values exceeding approximately 18.446744 EGLD."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Space provides the "},{"type":"codeVoice","code":"BigUint"},{"text":" type to store arbitrarily large positive numbers.","type":"text"}]}],"mediaPosition":"trailing"}]},{"anchor":"Working-with-the-Vector-Type","title":"Working with the Vector Type","stepsSection":[{"caption":[],"type":"step","media":null,"code":"FamiliarizeWithTypesSection4Step1.swift","content":[{"type":"paragraph","inlineContent":[{"text":"Begin by setting up the basic structure of your contract.","type":"text"}]}],"runtimePreview":null},{"code":"FamiliarizeWithTypesSection4Step2.swift","runtimePreview":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Declare a ","type":"text"},{"code":"Vector","type":"codeVoice"},{"text":" variable to hold ","type":"text"},{"type":"codeVoice","code":"BigUint"},{"type":"text","text":" elements."}]}],"media":null,"caption":[{"type":"paragraph","inlineContent":[{"text":"Important: Currently, array literal assignment is disabled. The Space team is investigating its impact on memory management in smart contracts before enabling it.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Add elements to the ","type":"text"},{"code":"Vector","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}],"media":null,"type":"step","runtimePreview":null,"caption":[],"code":"FamiliarizeWithTypesSection4Step3.swift"},{"media":null,"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Iterate over the "},{"type":"codeVoice","code":"Vector"},{"type":"text","text":" to sum all the elements."}]}],"type":"step","code":"FamiliarizeWithTypesSection4Step4.swift","caption":[{"type":"paragraph","inlineContent":[{"text":"Important: The ","type":"text"},{"type":"codeVoice","code":"for ... in"},{"type":"text","text":" loop for vectors is currently disabled. The Space team is evaluating its effect on smart contract memory before enabling it."}]}]},{"runtimePreview":null,"type":"step","caption":[],"code":"FamiliarizeWithTypesSection4Step5.swift","media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Ensure the sum equals 13. Throw a smart contract error if it doesn’t."}]}]}],"contentSection":[{"content":[{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"Array"},{"text":" type is often the default for storing dynamic-size data, but it is not permitted in Space. Fortunately, Space provides a suitable alternative: ","type":"text"},{"type":"codeVoice","code":"Vector"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"code":"Vector","type":"codeVoice"},{"text":" can store any type compatible with Space, including user-defined structs and enums.","type":"text"}]}],"kind":"contentAndMedia","mediaPosition":"trailing"}]}]}],"hierarchy":{"reference":"doc:\/\/Space\/tutorials\/Space","modules":[{"projects":[{"sections":[{"reference":"doc:\/\/Space\/tutorials\/Space\/InstallingTools#Installing-Spaces-Dependencies","kind":"task"},{"kind":"task","reference":"doc:\/\/Space\/tutorials\/Space\/InstallingTools#Setting-Up-the-Space-CLI"},{"kind":"task","reference":"doc:\/\/Space\/tutorials\/Space\/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract"}],"reference":"doc:\/\/Space\/tutorials\/Space\/InstallingTools"}],"reference":"doc:\/\/Space\/tutorials\/Space\/Getting-Started\/Installing-the-Tools"},{"projects":[{"reference":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract","sections":[{"reference":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract#Initializing-the-Project","kind":"task"},{"kind":"task","reference":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract#Writing-the-Contract-Code"},{"kind":"task","reference":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract#Testing-the-Contract"}]}],"reference":"doc:\/\/Space\/tutorials\/Space\/Getting-Started\/Building-Your-First-Smart-Contract"},{"projects":[{"sections":[{"reference":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges","kind":"task"},{"reference":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Understanding-the-Buffer-Type","kind":"task"},{"reference":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Working-with-the-BigUint-Type","kind":"task"},{"reference":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Working-with-the-Vector-Type","kind":"task"}],"reference":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes"}],"reference":"doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Exploring-Space's-Types"}],"paths":[["doc:\/\/Space\/tutorials\/Space","doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts","doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Exploring-Space's-Types"]]},"identifier":{"url":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes","interfaceLanguage":"swift"},"metadata":{"categoryPathComponent":"Space","title":"Exploring Space's Types","category":"Space","role":"project"},"schemaVersion":{"minor":3,"patch":0,"major":0},"kind":"project","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/tutorials\/space\/familiarizewithtypes"]}],"references":{"doc://Space/tutorials/Space/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges":{"identifier":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges","url":"\/tutorials\/space\/familiarizewithtypes#Handling-Heap-Allocation-Challenges","kind":"section","title":"Handling Heap Allocation Challenges","abstract":[{"text":"Space provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}],"type":"section","role":"pseudoSymbol"},"FamiliarizeWithTypesSection4Step4.swift":{"content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        var myVector: Vector<BigUint> = Vector()","        myVector = myVector.appended(2)","        myVector = myVector.appended(10)","        myVector = myVector.appended(1)","        ","        var sum: BigUint = 0","        myVector.forEach { item in","            sum = sum + item","        }","    }","}"],"highlights":[{"line":9},{"line":10},{"line":11},{"line":12},{"line":13}],"identifier":"FamiliarizeWithTypesSection4Step4.swift","syntax":"swift","fileType":"swift","fileName":"lib.swift","type":"file"},"doc://Space/tutorials/Space/FamiliarizeWithTypes#Understanding-the-Buffer-Type":{"abstract":[{"text":"Space provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}],"role":"pseudoSymbol","title":"Understanding the Buffer Type","type":"section","kind":"section","identifier":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Understanding-the-Buffer-Type","url":"\/tutorials\/space\/familiarizewithtypes#Understanding-the-Buffer-Type"},"doc://Space/tutorials/Space/Deep-Dive-into-Space-Concepts/Exploring-Space's-Types":{"title":"Exploring Space's Types","abstract":[],"identifier":"doc:\/\/Space\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Exploring-Space's-Types","kind":"article","role":"article","url":"\/tutorials\/space\/deep-dive-into-space-concepts\/exploring-space's-types","type":"topic"},"doc://Space/tutorials/Space/Getting-Started/Building-Your-First-Smart-Contract":{"abstract":[],"role":"article","title":"Building Your First Smart Contract","type":"topic","kind":"article","identifier":"doc:\/\/Space\/tutorials\/Space\/Getting-Started\/Building-Your-First-Smart-Contract","url":"\/tutorials\/space\/getting-started\/building-your-first-smart-contract"},"FamiliarizeWithTypesSection1Step4.swift":{"type":"file","highlights":[{"line":9},{"line":10},{"line":11},{"line":12}],"identifier":"FamiliarizeWithTypesSection1Step4.swift","syntax":"swift","fileType":"swift","fileName":"lib.swift","content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        let myString: String = \"Hey!\" \/\/ Won't compile! ❌","        let myBuffer: Buffer = \"Hey!\" \/\/ Fine ✅","        ","        let myArray: [UInt64] = [4, 8, 100] \/\/ Won't compile! ❌","        var myVector: Vector<UInt64> = Vector() \/\/ Fine ✅","            .appended(4)","            .appended(8)","            .appended(100)","    }","}"]},"doc://Space/tutorials/Space/InstallingTools#Setting-Up-the-Space-CLI":{"abstract":[{"text":"Before writing your first smart contract with Space, ensure you have the necessary tools installed.","type":"text"}],"role":"pseudoSymbol","title":"Setting Up the Space CLI","type":"section","kind":"section","identifier":"doc:\/\/Space\/tutorials\/Space\/InstallingTools#Setting-Up-the-Space-CLI","url":"\/tutorials\/space\/installingtools#Setting-Up-the-Space-CLI"},"FamiliarizeWithTypesSection2Step2.swift":{"fileName":"lib.swift","identifier":"FamiliarizeWithTypesSection2Step2.swift","syntax":"swift","fileType":"swift","content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        var myBuffer: Buffer = \"Hello\"","    }","}"],"highlights":[{"line":5}],"type":"file"},"doc://Space/tutorials/Space":{"url":"\/tutorials\/space","identifier":"doc:\/\/Space\/tutorials\/Space","title":"Meet Space","kind":"overview","role":"overview","type":"topic","abstract":[{"type":"text","text":"Discover how Space simplifies blockchain development using Swift. Dive into the world of Web3 with ease and efficiency."}]},"doc://Space/tutorials/Space/InstallingTools":{"kind":"project","type":"topic","identifier":"doc:\/\/Space\/tutorials\/Space\/InstallingTools","title":"Install the Necessary Tools","url":"\/tutorials\/space\/installingtools","abstract":[{"type":"text","text":"Before writing your first smart contract with Space, ensure you have the necessary tools installed."}],"role":"project","estimatedTime":"10min"},"FamiliarizeWithTypesSection3Step6.swift":{"type":"file","content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        let initialNumber: BigUint = 5","        ","        var result = initialNumber + 3","        result = result * 7","        result = result + initialNumber * 3","        result = result - 21","    }","}"],"fileName":"lib.swift","syntax":"swift","highlights":[{"line":10}],"fileType":"swift","identifier":"FamiliarizeWithTypesSection3Step6.swift"},"doc://Space/tutorials/Space/InstallingTools#Installing-Spaces-Dependencies":{"kind":"section","type":"section","identifier":"doc:\/\/Space\/tutorials\/Space\/InstallingTools#Installing-Spaces-Dependencies","title":"Installing Space's Dependencies","url":"\/tutorials\/space\/installingtools#Installing-Spaces-Dependencies","abstract":[{"type":"text","text":"Before writing your first smart contract with Space, ensure you have the necessary tools installed."}],"role":"pseudoSymbol"},"doc://Space/tutorials/Space/CodingYourFirstContract#Initializing-the-Project":{"title":"Initializing the Project","kind":"section","type":"section","url":"\/tutorials\/space\/codingyourfirstcontract#Initializing-the-Project","role":"pseudoSymbol","abstract":[{"type":"text","text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user."}],"identifier":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract#Initializing-the-Project"},"doc://Space/tutorials/Space/CodingYourFirstContract#Testing-the-Contract":{"kind":"section","type":"section","identifier":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract#Testing-the-Contract","title":"Testing the Contract","url":"\/tutorials\/space\/codingyourfirstcontract#Testing-the-Contract","abstract":[{"type":"text","text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user."}],"role":"pseudoSymbol"},"doc://Space/tutorials/Space/CodingYourFirstContract":{"title":"Building Your First Smart Contract","kind":"project","type":"topic","url":"\/tutorials\/space\/codingyourfirstcontract","estimatedTime":"20min","role":"project","abstract":[{"type":"text","text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user."}],"identifier":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract"},"FamiliarizeWithTypesSection2Step1.swift":{"fileName":"lib.swift","type":"file","fileType":"swift","identifier":"FamiliarizeWithTypesSection2Step1.swift","content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        ","    }","}"],"highlights":[],"syntax":"swift"},"FamiliarizeWithTypesSection3Step3.swift":{"type":"file","content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        let initialNumber: BigUint = 5","        ","        var result = initialNumber + 3","    }","}"],"fileName":"lib.swift","syntax":"swift","highlights":[{"line":6},{"line":7}],"fileType":"swift","identifier":"FamiliarizeWithTypesSection3Step3.swift"},"FamiliarizeWithTypesSection1Step6.swift":{"fileName":"lib.swift","fileType":"swift","identifier":"FamiliarizeWithTypesSection1Step6.swift","content":["import Space","import Foundation \/\/ Don't do this ❌","","@Contract struct MyContract {","    public func myEndpoint() {","        let myString: String = \"Hey!\" \/\/ Won't compile! ❌","        let myBuffer: Buffer = \"Hey!\" \/\/ Fine ✅","        ","        let myArray: [UInt64] = [4, 8, 100] \/\/ Won't compile! ❌","        var myVector: Vector<UInt64> = Vector() \/\/ Fine ✅","            .appended(4)","            .appended(8)","            .appended(100)","        ","        let two = 2 \/\/ Fine ✅","        let ten: UInt64 = 10 \/\/ Fine ✅","        let isTwoEven = false \/\/ Fine ✅","    }","}"],"type":"file","highlights":[{"line":2}],"syntax":"swift"},"FamiliarizeWithTypesSection3Step5.swift":{"type":"file","content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        let initialNumber: BigUint = 5","        ","        var result = initialNumber + 3","        result = result * 7","        result = result + initialNumber * 3","    }","}"],"fileName":"lib.swift","syntax":"swift","highlights":[{"line":9}],"fileType":"swift","identifier":"FamiliarizeWithTypesSection3Step5.swift"},"FamiliarizeWithTypesSection4Step5.swift":{"fileName":"lib.swift","fileType":"swift","identifier":"FamiliarizeWithTypesSection4Step5.swift","content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        var myVector: Vector<BigUint> = Vector()","        myVector = myVector.appended(2)","        myVector = myVector.appended(10)","        myVector = myVector.appended(1)","        ","        var sum: BigUint = 0","        myVector.forEach { item in","            sum = sum + item","        }","        ","        guard sum == 13 else {","            smartContractError(message: \"sum is not 13\")","        }","    }","}"],"type":"file","highlights":[{"line":14},{"line":15},{"line":16},{"line":17}],"syntax":"swift"},"doc://Space/tutorials/Space/FamiliarizeWithTypes#Working-with-the-BigUint-Type":{"title":"Working with the BigUint Type","kind":"section","url":"\/tutorials\/space\/familiarizewithtypes#Working-with-the-BigUint-Type","type":"section","role":"pseudoSymbol","abstract":[{"type":"text","text":"Space provides types that allow you to leverage the full potential of the SpaceVM."}],"identifier":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Working-with-the-BigUint-Type"},"FamiliarizeWithTypesSection3Step4.swift":{"fileName":"lib.swift","fileType":"swift","identifier":"FamiliarizeWithTypesSection3Step4.swift","content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        let initialNumber: BigUint = 5","        ","        var result = initialNumber + 3","        result = result * 7","    }","}"],"type":"file","highlights":[{"line":8}],"syntax":"swift"},"FamiliarizeWithTypesSection3Step7.swift":{"type":"file","content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        let initialNumber: BigUint = 5","        ","        var result = initialNumber + 3","        result = result * 7","        result = result + initialNumber * 3","        result = result - 21","        ","        guard result % 10 == 0 else {","            smartContractError(message: \"result is not a multiple of 10\")","        }","    }","}"],"fileName":"lib.swift","syntax":"swift","highlights":[{"line":11},{"line":12},{"line":13},{"line":14}],"fileType":"swift","identifier":"FamiliarizeWithTypesSection3Step7.swift"},"doc://Space/tutorials/Space/FamiliarizeWithTypes#Working-with-the-Vector-Type":{"kind":"section","identifier":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes#Working-with-the-Vector-Type","abstract":[{"type":"text","text":"Space provides types that allow you to leverage the full potential of the SpaceVM."}],"title":"Working with the Vector Type","url":"\/tutorials\/space\/familiarizewithtypes#Working-with-the-Vector-Type","type":"section","role":"pseudoSymbol"},"FamiliarizeWithTypesSection2Step4.swift":{"type":"file","content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        var myBuffer: Buffer = \"Hello\"","        myBuffer = myBuffer.appended(\" World!\")","        ","        guard myBuffer != \"Hello World!\" else {","            smartContractError(message: \"myBuffer is not equal to Hello World!\")","        }","    }","}"],"fileName":"lib.swift","syntax":"swift","highlights":[{"line":7},{"line":8},{"line":9},{"line":10}],"fileType":"swift","identifier":"FamiliarizeWithTypesSection2Step4.swift"},"FamiliarizeWithTypesSection4Step3.swift":{"fileName":"lib.swift","fileType":"swift","identifier":"FamiliarizeWithTypesSection4Step3.swift","content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        var myVector: Vector<BigUint> = Vector()","        myVector = myVector.appended(2)","        myVector = myVector.appended(10)","        myVector = myVector.appended(1)","    }","}"],"type":"file","highlights":[{"line":6},{"line":7},{"line":8}],"syntax":"swift"},"FamiliarizeWithTypesSection3Step1.swift":{"type":"file","content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        ","    }","}"],"fileName":"lib.swift","syntax":"swift","highlights":[],"fileType":"swift","identifier":"FamiliarizeWithTypesSection3Step1.swift"},"doc://Space/tutorials/Space/Getting-Started/Installing-the-Tools":{"kind":"article","identifier":"doc:\/\/Space\/tutorials\/Space\/Getting-Started\/Installing-the-Tools","abstract":[],"title":"Installing the Tools","url":"\/tutorials\/space\/getting-started\/installing-the-tools","type":"topic","role":"article"},"FamiliarizeWithTypesSection2Step3.swift":{"type":"file","content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        var myBuffer: Buffer = \"Hello\"","        myBuffer = myBuffer.appended(\" World!\")","    }","}"],"fileName":"lib.swift","syntax":"swift","highlights":[{"line":6}],"fileType":"swift","identifier":"FamiliarizeWithTypesSection2Step3.swift"},"FamiliarizeWithTypesSection3Step2.swift":{"fileName":"lib.swift","type":"file","fileType":"swift","identifier":"FamiliarizeWithTypesSection3Step2.swift","content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        let initialNumber: BigUint = 5","    }","}"],"highlights":[{"line":5}],"syntax":"swift"},"doc://Space/tutorials/Space/FamiliarizeWithTypes":{"title":"Exploring Space's Types","kind":"project","type":"topic","url":"\/tutorials\/space\/familiarizewithtypes","estimatedTime":"20min","role":"project","abstract":[{"text":"Space provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}],"identifier":"doc:\/\/Space\/tutorials\/Space\/FamiliarizeWithTypes"},"FamiliarizeWithTypesSection4Step1.swift":{"fileName":"lib.swift","type":"file","fileType":"swift","identifier":"FamiliarizeWithTypesSection4Step1.swift","content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        ","    }","}"],"highlights":[],"syntax":"swift"},"doc://Space/tutorials/Space/CodingYourFirstContract#Writing-the-Contract-Code":{"title":"Writing the Contract Code","kind":"section","type":"section","url":"\/tutorials\/space\/codingyourfirstcontract#Writing-the-Contract-Code","role":"pseudoSymbol","abstract":[{"text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user.","type":"text"}],"identifier":"doc:\/\/Space\/tutorials\/Space\/CodingYourFirstContract#Writing-the-Contract-Code"},"FamiliarizeWithTypesSection1Step1.swift":{"fileName":"lib.swift","type":"file","fileType":"swift","identifier":"FamiliarizeWithTypesSection1Step1.swift","content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        let myString: String = \"Hey!\" \/\/ Won't compile! ❌","    }","}"],"highlights":[],"syntax":"swift"},"FamiliarizeWithTypesSection1Step5.swift":{"type":"file","content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        let myString: String = \"Hey!\" \/\/ Won't compile! ❌","        let myBuffer: Buffer = \"Hey!\" \/\/ Fine ✅","        ","        let myArray: [UInt64] = [4, 8, 100] \/\/ Won't compile! ❌","        var myVector: Vector<UInt64> = Vector() \/\/ Fine ✅","            .appended(4)","            .appended(8)","            .appended(100)","        ","        let two = 2 \/\/ Fine ✅","        let ten: UInt64 = 10 \/\/ Fine ✅","        let isTwoEven = false \/\/ Fine ✅","    }","}"],"fileName":"lib.swift","syntax":"swift","highlights":[{"line":13},{"line":14},{"line":15},{"line":16}],"fileType":"swift","identifier":"FamiliarizeWithTypesSection1Step5.swift"},"FamiliarizeWithTypesSection1Step3.swift":{"fileName":"lib.swift","type":"file","fileType":"swift","identifier":"FamiliarizeWithTypesSection1Step3.swift","content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        let myString: String = \"Hey!\" \/\/ Won't compile! ❌","        let myBuffer: Buffer = \"Hey!\" \/\/ Fine ✅","        ","        let myArray: [UInt64] = [4, 8, 100] \/\/ Won't compile! ❌","    }","}"],"highlights":[{"line":7},{"line":8}],"syntax":"swift"},"FamiliarizeWithTypesSection1Step2.swift":{"type":"file","content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        let myString: String = \"Hey!\" \/\/ Won't compile! ❌","        let myBuffer: Buffer = \"Hey!\" \/\/ Fine ✅","    }","}"],"fileName":"lib.swift","syntax":"swift","highlights":[{"line":6}],"fileType":"swift","identifier":"FamiliarizeWithTypesSection1Step2.swift"},"FamiliarizeWithTypesSection3Step8.swift":{"fileName":"lib.swift","type":"file","fileType":"swift","identifier":"FamiliarizeWithTypesSection3Step8.swift","content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        let initialNumber: BigUint = 5","        ","        var result = initialNumber + 3","        result = result * 7","        result = result + initialNumber * 3","        result = result - 21","        ","        guard result % 10 == 0 else {","            smartContractError(message: \"result is not a multiple of 10\")","        }","        ","        guard result > 0 else {","            smartContractError(message: \"result is 0\")","        }","    }","}"],"highlights":[{"line":15},{"line":16},{"line":17},{"line":18}],"syntax":"swift"},"FamiliarizeWithTypesSection4Step2.swift":{"type":"file","content":["import Space","","@Contract struct MyContract {","    public func myEndpoint() {","        var myVector: Vector<BigUint> = Vector()","    }","}"],"fileName":"lib.swift","syntax":"swift","highlights":[{"line":5}],"fileType":"swift","identifier":"FamiliarizeWithTypesSection4Step2.swift"},"doc://Space/tutorials/Space/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract":{"kind":"section","type":"section","identifier":"doc:\/\/Space\/tutorials\/Space\/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract","title":"Initializing and Compiling Your First Smart Contract","url":"\/tutorials\/space\/installingtools#Initializing-and-Compiling-Your-First-Smart-Contract","abstract":[{"text":"Before writing your first smart contract with Space, ensure you have the necessary tools installed.","type":"text"}],"role":"pseudoSymbol"}}}