{"metadata":{"categoryPathComponent":"SpaceKit","title":"Add Administrative Endpoints to the Flip Contract","category":"SpaceKit","role":"project"},"sections":[{"content":[{"inlineContent":[{"type":"text","text":"Now that your storage is fully set up, it’s time to define the administrative endpoints that allow the contract owner to manage critical values and assets."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"In this section, you’ll implement endpoints to:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Set the required number of blocks before a flip can be bountied."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Update the owner and bounty fee percentages."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Increase the contract’s reserve with new funds."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Withdraw reserve funds back to the owner."}]}]}]}],"kind":"hero","title":"Add Administrative Endpoints to the Flip Contract","chapter":"Add Administrative Endpoints to the Flip Contract","estimatedTimeInMinutes":20},{"kind":"tasks","tasks":[{"title":"Set the Minimum Block Bounty Delay","stepsSection":[{"media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Create a new file named ","type":"text"},{"type":"codeVoice","code":"AdminController.swift"},{"text":" inside the ","type":"text"},{"code":"Contracts\/Flip\/Source","type":"codeVoice"},{"type":"text","text":" folder."}]}],"code":"FlipContractWriteAdminSection1Step1.swift","runtimePreview":null,"type":"step","caption":[]},{"media":null,"type":"step","content":[{"inlineContent":[{"type":"text","text":"Import the "},{"code":"SpaceKit","type":"codeVoice"},{"text":" framework.","type":"text"}],"type":"paragraph"}],"caption":[],"runtimePreview":null,"code":"FlipContractWriteAdminSection1Step2.swift"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Declare a controller named "},{"type":"codeVoice","code":"AdminController"},{"type":"text","text":"."}]}],"media":null,"type":"step","code":"FlipContractWriteAdminSection1Step3.swift","runtimePreview":null,"caption":[]},{"type":"step","media":null,"runtimePreview":null,"code":"FlipContractWriteAdminSection1Step4.swift","caption":[],"content":[{"inlineContent":[{"text":"Define the ","type":"text"},{"type":"codeVoice","code":"setMinimumBlockBounty"},{"type":"text","text":" endpoint, accepting a single parameter called "},{"code":"value","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}]},{"type":"step","content":[{"inlineContent":[{"type":"text","text":"Restrict access to the contract owner only."}],"type":"paragraph"}],"runtimePreview":null,"media":null,"code":"FlipContractWriteAdminSection1Step5.swift","caption":[]},{"media":null,"code":"FlipContractWriteAdminSection1Step6.swift","type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Validate that the value is strictly greater than zero."}]}],"runtimePreview":null,"caption":[]},{"code":"FlipContractWriteAdminSection1Step7.swift","media":null,"runtimePreview":null,"caption":[],"type":"step","content":[{"inlineContent":[{"type":"text","text":"Instantiate a mutable instance of "},{"type":"codeVoice","code":"StorageController"},{"type":"text","text":"."}],"type":"paragraph"}]},{"caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Update the "},{"type":"codeVoice","code":"minimumBlockBounty"},{"type":"text","text":" storage with the new value."}]}],"media":null,"code":"FlipContractWriteAdminSection1Step8.swift","type":"step","runtimePreview":null}],"anchor":"Set-the-Minimum-Block-Bounty-Delay","contentSection":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This endpoint allows the contract owner to update the minimum number of blocks that must pass before a flip is eligible to be bountied. Adjusting this value enables adaptation to the characteristics of different blockchains."}]}],"mediaPosition":"trailing","kind":"contentAndMedia"}]},{"anchor":"Set-Maximum-Bet-Limits","stepsSection":[{"caption":[],"content":[{"inlineContent":[{"type":"text","text":"Continue working in "},{"code":"AdminController.swift","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}],"media":null,"code":"FlipContractWriteAdminSection1Step8.swift","runtimePreview":null,"type":"step"},{"type":"step","caption":[{"inlineContent":[{"text":"It accepts three parameters: the token identifier, the token nonce, and the maximum amount allowed per bet.","type":"text"}],"type":"paragraph"}],"media":null,"code":"FlipContractWriteAdminSection2Step2.swift","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Declare the "},{"code":"setMaximumBet","type":"codeVoice"},{"type":"text","text":" endpoint."}]}]},{"code":"FlipContractWriteAdminSection2Step3.swift","content":[{"type":"paragraph","inlineContent":[{"text":"Limit this endpoint to calls from the contract owner.","type":"text"}]}],"media":null,"caption":[],"runtimePreview":null,"type":"step"},{"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Check that the provided amount is strictly greater than zero."}]}],"type":"step","caption":[],"code":"FlipContractWriteAdminSection2Step4.swift","media":null},{"media":null,"type":"step","caption":[],"code":"FlipContractWriteAdminSection2Step5.swift","runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"Store the maximum bet amount in the contract’s storage."}],"type":"paragraph"}]},{"caption":[],"type":"step","media":null,"runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"Create a "},{"code":"setMaximumBetPercent","type":"codeVoice"},{"type":"text","text":" endpoint using a similar structure."}],"type":"paragraph"}],"code":"FlipContractWriteAdminSection2Step6.swift"}],"title":"Set Maximum Bet Limits","contentSection":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"These endpoints allow the owner to define bet limits in absolute value and as a percentage of the contract’s reserve for a given token and nonce. This ensures controlled risk exposure for the contract."}]}],"mediaPosition":"trailing","kind":"contentAndMedia"}]},{"contentSection":[{"kind":"contentAndMedia","content":[{"inlineContent":[{"type":"text","text":"This endpoint allows the owner to deposit tokens into the contract’s internal reserve. These tokens will be used to pay out successful flips. The reserve must be manually tracked to account for locked bounties."}],"type":"paragraph"}],"mediaPosition":"trailing"}],"anchor":"Increase-Contract-Reserves","title":"Increase Contract Reserves","stepsSection":[{"runtimePreview":null,"type":"step","caption":[],"media":null,"code":"FlipContractWriteAdminSection2Step6.swift","content":[{"inlineContent":[{"text":"Continue building on the previous code.","type":"text"}],"type":"paragraph"}]},{"type":"step","media":null,"code":"FlipContractWriteAdminSection3Step2.swift","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Declare the ","type":"text"},{"type":"codeVoice","code":"increaseReserve"},{"type":"text","text":" endpoint."}]}],"caption":[]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Restrict the endpoint to the contract’s owner."}]}],"caption":[],"type":"step","media":null,"code":"FlipContractWriteAdminSection3Step3.swift","runtimePreview":null},{"code":"FlipContractWriteAdminSection3Step4.swift","runtimePreview":null,"caption":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Note:"}]},{"type":"text","text":" "},{"code":"Message.egldOrSingleEsdtTransfer","type":"codeVoice"},{"text":" automatically validates that exactly one payment was made.","type":"text"}],"type":"paragraph"}],"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Retrieve the single payment sent with the call.","type":"text"}]}],"media":null},{"caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Ensure the payment amount is greater than zero."}]}],"code":"FlipContractWriteAdminSection3Step5.swift","runtimePreview":null,"type":"step","media":null},{"runtimePreview":null,"type":"step","caption":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Important:"}]},{"type":"text","text":" Be sure to reassign the closure’s parameter to apply changes."}]}],"content":[{"inlineContent":[{"type":"text","text":"Increase the reserve storage by the received amount."}],"type":"paragraph"}],"media":null,"code":"FlipContractWriteAdminSection3Step6.swift"}]},{"contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This endpoint allows the owner to withdraw part of the reserve for a given token and nonce. Before sending tokens out, it checks that the reserve holds enough funds to fulfill the request."}]}],"mediaPosition":"trailing"}],"stepsSection":[{"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Continue working in the same file."}]}],"caption":[],"media":null,"code":"FlipContractWriteAdminSection3Step6.swift","runtimePreview":null},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Declare the "},{"type":"codeVoice","code":"withdrawReserve"},{"text":" endpoint.","type":"text"}]}],"type":"step","media":null,"caption":[{"inlineContent":[{"text":"It accepts the token identifier, token nonce, and the amount to withdraw.","type":"text"}],"type":"paragraph"}],"code":"FlipContractWriteAdminSection4Step2.swift","runtimePreview":null},{"content":[{"inlineContent":[{"type":"text","text":"Make this endpoint owner-only."}],"type":"paragraph"}],"media":null,"type":"step","runtimePreview":null,"code":"FlipContractWriteAdminSection4Step3.swift","caption":[]},{"type":"step","code":"FlipContractWriteAdminSection4Step4.swift","runtimePreview":null,"caption":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Important:","type":"text"}]},{"text":" The reserve must be reassigned for the mutation to persist.","type":"text"}],"type":"paragraph"}],"media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Decrease the reserve by the specified amount and ensure sufficient balance exists."}]}]},{"code":"FlipContractWriteAdminSection4Step5.swift","caption":[],"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Transfer the tokens to the contract owner.","type":"text"}]}],"runtimePreview":null,"media":null}],"anchor":"Withdraw-Contract-Reserves","title":"Withdraw Contract Reserves"}]},{"abstract":[{"type":"text","text":"With the storage and administrative endpoints complete, it’s time to build the core gameplay mechanics."}],"title":"Implement the Game Logic for the Flip Contract","kind":"callToAction","action":{"type":"reference","isActive":true,"overridingTitleInlineContent":[{"type":"text","text":"Get started"}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteTheGame","overridingTitle":"Get started"},"featuredEyebrow":"Tutorial"}],"hierarchy":{"modules":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Getting-Started\/Installing-the-Tools","projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools","sections":[{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Installing-SpaceKits-Dependencies"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Setting-Up-the-SpaceKit-CLI"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract"}]}]},{"projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract","sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Initializing-the-Project","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Writing-the-Contract-Code","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Testing-the-Contract"}]}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Getting-Started\/Building-Your-First-Smart-Contract"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Exploring-SpaceKit's-Types","projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes","sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Understanding-the-Buffer-Type"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Working-with-the-BigUint-Type"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Working-with-the-Vector-Type"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Creating-Your-Own-Types"}]}]},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Persisting-Data-Across-Executions","projects":[{"sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues#Working-with-Storage-for-Single-Value-Persistence","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues"}]},{"projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo","sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo#Accessing-Transaction-Context-Data","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo#Accessing-Blockchain-Context-Data"}]}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Retrieving-Information-from-the-Blockchain"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Interacting-with-Other-Contracts","projects":[{"sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls#Declare-the-Callee-Proxy","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls#Perform-a-Synchronous-Call"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls"}]},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Calling-Contracts-Across-Shards","projects":[{"sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls#Declare-the-Callee-Proxy","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls#Perform-an-Asynchronous-Call","kind":"task"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls"}]},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Create-and-Manage-Tokens\/Creating-and-Understanding-Tokens","projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/UnderstandTokens","sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/UnderstandTokens#Issuing-a-Fungible-Token-from-Your-Contract","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/UnderstandTokens#Issuing-a-Non-Fungible-Token-from-Your-Contract"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/UnderstandTokens#Issuing-a-Semi-Fungible-Token-from-Your-Contract","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/UnderstandTokens#Issuing-a-Meta-ESDT-from-Your-Contract","kind":"task"}]}]},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Create-and-Manage-Tokens\/Managing-Fungible-Tokens","projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnFungibleTokens","sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnFungibleTokens#Assign-Mint-and-Burn-Roles","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnFungibleTokens#Mint-New-Tokens","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnFungibleTokens#Burn-Tokens"}]}]},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Create-and-Manage-Tokens\/Managing-Non-Fungible-Tokens","projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnNonFungibleTokens","sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnNonFungibleTokens#Assign-Create-AddQuantity-and-Burn-Roles","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnNonFungibleTokens#Create-a-New-Nonce"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnNonFungibleTokens#Add-Quantity-to-an-Existing-Nonce"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnNonFungibleTokens#Burn-Tokens","kind":"task"}]}]},{"projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/TokenAttributes","sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/TokenAttributes#Implementing-the-lockFunds-Endpoint","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/TokenAttributes#Implementing-the-unlockFunds-Endpoint","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/TokenAttributes#Implementing-the-changeTokenLockDuration-Endpoint"}]}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Create-and-Manage-Tokens\/Enhancing-Contracts-with-Token-Attributes"},{"projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractIntro","sections":[{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractIntro#Set-Up-the-Project"}]}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Build-a-Coin-Flip-Contract\/Build-a-Coin-Flip-Smart-Contract"},{"projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteTheStorage","sections":[{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteTheStorage#Define-the-Flip-Structure"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteTheStorage#Implement-Contract-Storage","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteTheStorage#Define-the-Contract-Init","kind":"task"}]}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Build-a-Coin-Flip-Contract\/Define-the-Storage-for-the-Flip-Contract"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Build-a-Coin-Flip-Contract\/Add-Administrative-Endpoints-to-the-Flip-Contract","projects":[{"sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteAdmin#Set-the-Minimum-Block-Bounty-Delay","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteAdmin#Set-Maximum-Bet-Limits","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteAdmin#Increase-Contract-Reserves"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteAdmin#Withdraw-Contract-Reserves","kind":"task"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteAdmin"}]},{"projects":[{"sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteTheGame#Implement-the-flip-Endpoint","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteTheGame#Implement-the-makeFlip-Function"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteTheGame#Define-the-bounty-Endpoint","kind":"task"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteTheGame"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Build-a-Coin-Flip-Contract\/Implement-the-Game-Logic-for-the-Flip-Contract"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Build-a-Coin-Flip-Contract\/Set-Up-Testing-in-the-SwiftVM","projects":[{"sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractInitTests#Set-Up-the-Test-Project","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractInitTests#Declare-Constants-for-the-Test-Environment","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractInitTests#Configure-the-Initial-Blockchain-State"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractInitTests#Create-Helper-Functions-to-Deploy-and-Configure-the-Contract"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractInitTests#Write-Tests-for-the-Setup-Helpers"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractInitTests"}]},{"projects":[{"sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractTestAdmin#Verify-That-Only-the-Owner-Can-Access-Admin-Endpoints","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractTestAdmin#Verify-the-Maximum-Bet-Configuration-Endpoints"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractTestAdmin#Test-the-increaseReserve-Endpoint"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractTestAdmin#Test-the-withdrawReserve-Endpoint","kind":"task"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractTestAdmin"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Build-a-Coin-Flip-Contract\/Test-the-Admin-Endpoints"},{"projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractTestTheGame","sections":[{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractTestTheGame#Create-Utility-Functions-for-flip-and-bounty"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractTestTheGame#Test-Failure-Cases-for-the-flip-Endpoint","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractTestTheGame#Test-Successful-Calls-to-the-flip-Endpoint"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractTestTheGame#Test-Failure-Case-for-the-bounty-Endpoint"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractTestTheGame#Test-the-bounty-Endpoint"}]}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Build-a-Coin-Flip-Contract\/Test-the-Game-Logic-for-the-Flip-Contract"}],"paths":[["doc:\/\/SpaceKit\/tutorials\/SpaceKit","doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Build-a-Coin-Flip-Contract","doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Build-a-Coin-Flip-Contract\/Add-Administrative-Endpoints-to-the-Flip-Contract"]],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit"},"variants":[{"paths":["\/tutorials\/spacekit\/flipcontractwriteadmin"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteAdmin","interfaceLanguage":"swift"},"schemaVersion":{"major":0,"minor":3,"patch":0},"kind":"project","references":{"doc://SpaceKit/tutorials/SpaceKit/CodingYourFirstContract#Initializing-the-Project":{"url":"\/tutorials\/spacekit\/codingyourfirstcontract#Initializing-the-Project","role":"pseudoSymbol","kind":"section","title":"Initializing the Project","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Initializing-the-Project","type":"section","abstract":[{"type":"text","text":"In this tutorial, you’ll create a simple smart contract that manages a counter. Users can increment or decrement the counter, and the changes are persisted across contract executions."}]},"FlipContractWriteAdminSection4Step2.swift":{"content":["import SpaceKit","","@Controller public struct AdminController {","    public func setMinimumBlockBounty(","        value: UInt64","    ) {","        assertOwner()","        ","        require(","            value > 0,","            \"Minimum block bounty should be greater than zero.\"","        )","        ","        var storageController = StorageController()","        storageController.minimumBlockBounty = value","    }","    ","    public func setMaximumBet(","        tokenIdentifier: TokenIdentifier,","        nonce: UInt64,","        amount: BigUint","    ) {","        assertOwner()","        ","        require(","            amount > 0,","            \"Amount should be greater than zero.\"","        )","        ","        StorageController()","            .getMaximumBet(","                tokenIdentifier: tokenIdentifier,","                tokenNonce: nonce","            )","            .set(amount)","    }","    ","    public func setMaximumBetPercent(","        tokenIdentifier: TokenIdentifier,","        nonce: UInt64,","        percent: UInt64","    ) {","        assertOwner()","        ","        require(","            percent > 0,","            \"Percent should be greater than zero.\"","        )","        ","        StorageController()","            .getMaximumBetPercent(","                tokenIdentifier: tokenIdentifier,","                tokenNonce: nonce","            )","            .set(percent)","    }","    ","    public func increaseReserve() {","        assertOwner()","        ","        let payment = Message.egldOrSingleEsdtTransfer","        ","        require(","            payment.amount > 0,","            \"No payment received.\"","        )","        ","        StorageController()","            .getTokenReserve(","                tokenIdentifier: payment.tokenIdentifier,","                tokenNonce: payment.nonce","            )","            .update { $0 = $0 + payment.amount }","    }","    ","    public func withdrawReserve(","        tokenIdentifier: TokenIdentifier,","        nonce: UInt64,","        amount: BigUint","    ) {","    }","}"],"syntax":"swift","identifier":"FlipContractWriteAdminSection4Step2.swift","fileType":"swift","type":"file","fileName":"AdminController.swift","highlights":[{"line":75},{"line":76},{"line":77},{"line":78},{"line":79},{"line":80},{"line":81}]},"doc://SpaceKit/tutorials/SpaceKit/Build-a-Coin-Flip-Contract/Add-Administrative-Endpoints-to-the-Flip-Contract":{"url":"\/tutorials\/spacekit\/build-a-coin-flip-contract\/add-administrative-endpoints-to-the-flip-contract","type":"topic","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Build-a-Coin-Flip-Contract\/Add-Administrative-Endpoints-to-the-Flip-Contract","kind":"article","abstract":[],"role":"article","title":"Add Administrative Endpoints to the Flip Contract"},"doc://SpaceKit/tutorials/SpaceKit/TokenAttributes":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/TokenAttributes","url":"\/tutorials\/spacekit\/tokenattributes","role":"project","type":"topic","kind":"project","abstract":[{"type":"text","text":"The ESDT standard enables embedding custom data within non-fungible tokens, allowing developers to extend the functionality of their smart contracts. This additional data, referred to as “attributes,” is tied to the token and transfers along with it between wallets."}],"estimatedTime":"15min","title":"Enhance Your Contracts with Token Attributes"},"FlipContractWriteAdminSection2Step4.swift":{"content":["import SpaceKit","","@Controller public struct AdminController {","    public func setMinimumBlockBounty(","        value: UInt64","    ) {","        assertOwner()","        ","        require(","            value > 0,","            \"Minimum block bounty should be greater than zero.\"","        )","        ","        var storageController = StorageController()","        storageController.minimumBlockBounty = value","    }","    ","    public func setMaximumBet(","        tokenIdentifier: TokenIdentifier,","        nonce: UInt64,","        amount: BigUint","    ) {","        assertOwner()","        ","        require(","            amount > 0,","            \"Amount should be greater than zero.\"","        )","    }","}"],"type":"file","identifier":"FlipContractWriteAdminSection2Step4.swift","highlights":[{"line":25},{"line":26},{"line":27},{"line":28}],"fileType":"swift","fileName":"AdminController.swift","syntax":"swift"},"doc://SpaceKit/tutorials/SpaceKit/Create-and-Manage-Tokens/Managing-Non-Fungible-Tokens":{"url":"\/tutorials\/spacekit\/create-and-manage-tokens\/managing-non-fungible-tokens","kind":"article","type":"topic","role":"article","title":"Managing Non-Fungible Tokens","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Create-and-Manage-Tokens\/Managing-Non-Fungible-Tokens","abstract":[]},"doc://SpaceKit/tutorials/SpaceKit/TokenAttributes#Implementing-the-changeTokenLockDuration-Endpoint":{"abstract":[{"type":"text","text":"The ESDT standard enables embedding custom data within non-fungible tokens, allowing developers to extend the functionality of their smart contracts. This additional data, referred to as “attributes,” is tied to the token and transfers along with it between wallets."}],"role":"pseudoSymbol","kind":"section","url":"\/tutorials\/spacekit\/tokenattributes#Implementing-the-changeTokenLockDuration-Endpoint","type":"section","title":"Implementing the changeTokenLockDuration Endpoint","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/TokenAttributes#Implementing-the-changeTokenLockDuration-Endpoint"},"doc://SpaceKit/tutorials/SpaceKit/OperationsOnFungibleTokens#Mint-New-Tokens":{"url":"\/tutorials\/spacekit\/operationsonfungibletokens#Mint-New-Tokens","role":"pseudoSymbol","abstract":[{"type":"text","text":"Fungible tokens function similarly to traditional currencies, making them the simplest type of token to work with."}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnFungibleTokens#Mint-New-Tokens","type":"section","title":"Mint New Tokens","kind":"section"},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Understanding-the-Buffer-Type":{"title":"Understanding the Buffer Type","role":"pseudoSymbol","kind":"section","abstract":[{"type":"text","text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM."}],"type":"section","url":"\/tutorials\/spacekit\/familiarizewithtypes#Understanding-the-Buffer-Type","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Understanding-the-Buffer-Type"},"FlipContractWriteAdminSection4Step5.swift":{"content":["import SpaceKit","","@Controller public struct AdminController {","    public func setMinimumBlockBounty(","        value: UInt64","    ) {","        assertOwner()","        ","        require(","            value > 0,","            \"Minimum block bounty should be greater than zero.\"","        )","        ","        var storageController = StorageController()","        storageController.minimumBlockBounty = value","    }","    ","    public func setMaximumBet(","        tokenIdentifier: TokenIdentifier,","        nonce: UInt64,","        amount: BigUint","    ) {","        assertOwner()","        ","        require(","            amount > 0,","            \"Amount should be greater than zero.\"","        )","        ","        StorageController()","            .getMaximumBet(","                tokenIdentifier: tokenIdentifier,","                tokenNonce: nonce","            )","            .set(amount)","    }","    ","    public func setMaximumBetPercent(","        tokenIdentifier: TokenIdentifier,","        nonce: UInt64,","        percent: UInt64","    ) {","        assertOwner()","        ","        require(","            percent > 0,","            \"Percent should be greater than zero.\"","        )","        ","        StorageController()","            .getMaximumBetPercent(","                tokenIdentifier: tokenIdentifier,","                tokenNonce: nonce","            )","            .set(percent)","    }","    ","    public func increaseReserve() {","        assertOwner()","        ","        let payment = Message.egldOrSingleEsdtTransfer","        ","        require(","            payment.amount > 0,","            \"No payment received.\"","        )","        ","        StorageController()","            .getTokenReserve(","                tokenIdentifier: payment.tokenIdentifier,","                tokenNonce: payment.nonce","            )","            .update { $0 = $0 + payment.amount }","    }","    ","    public func withdrawReserve(","        tokenIdentifier: TokenIdentifier,","        nonce: UInt64,","        amount: BigUint","    ) {","        assertOwner()","        ","        StorageController()","            .getTokenReserve(","                tokenIdentifier: tokenIdentifier,","                tokenNonce: nonce","            )","            .update { tokenReserve in","                require(","                    tokenReserve > amount,","                    \"Amount too high\"","                )","                ","                tokenReserve = tokenReserve - amount","            }","        ","        Blockchain","            .getOwner()","            .send(","                tokenIdentifier: tokenIdentifier,","                nonce: nonce,","                amount: amount","            )","    }","}"],"syntax":"swift","identifier":"FlipContractWriteAdminSection4Step5.swift","fileType":"swift","type":"file","fileName":"AdminController.swift","highlights":[{"line":96},{"line":97},{"line":98},{"line":99},{"line":100},{"line":101},{"line":102},{"line":103}]},"doc://SpaceKit/tutorials/SpaceKit/FlipContractInitTests":{"url":"\/tutorials\/spacekit\/flipcontractinittests","type":"topic","kind":"project","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractInitTests","estimatedTime":"20min","abstract":[{"text":"Smart contracts are permissionless programs that often manage valuable assets. Because of this, writing comprehensive tests for both successful and failure scenarios is essential.","type":"text"}],"title":"Set Up Testing in the SwiftVM","role":"project"},"FlipContractWriteAdminSection1Step8.swift":{"content":["import SpaceKit","","@Controller public struct AdminController {","    public func setMinimumBlockBounty(","        value: UInt64","    ) {","        assertOwner()","        ","        require(","            value > 0,","            \"Minimum block bounty should be greater than zero.\"","        )","        ","        var storageController = StorageController()","        storageController.minimumBlockBounty = value","    }","}"],"type":"file","identifier":"FlipContractWriteAdminSection1Step8.swift","highlights":[],"fileType":"swift","fileName":"AdminController.swift","syntax":"swift"},"doc://SpaceKit/tutorials/SpaceKit/UnderstandTokens#Issuing-a-Fungible-Token-from-Your-Contract":{"url":"\/tutorials\/spacekit\/understandtokens#Issuing-a-Fungible-Token-from-Your-Contract","role":"pseudoSymbol","abstract":[{"type":"text","text":"Learn about the ESDT standard used in the SpaceKit framework, a token model that supports fungible tokens, non-fungible tokens (NFTs), semi-fungible tokens, and meta-esdt tokens."},{"type":"text","text":" "},{"text":"The SpaceKit framework uses a token standard called ESDT. This standard defines four types of tokens: fungible, non-fungible (NFT), semi-fungible, and meta-esdt.","type":"text"}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/UnderstandTokens#Issuing-a-Fungible-Token-from-Your-Contract","type":"section","title":"Issuing a Fungible Token from Your Contract","kind":"section"},"doc://SpaceKit/tutorials/SpaceKit/FlipContractTestTheGame#Test-Successful-Calls-to-the-flip-Endpoint":{"title":"Test Successful Calls to the flip Endpoint","role":"pseudoSymbol","kind":"section","abstract":[{"text":"This final chapter of the testing tutorial focuses on validating the core game logic implemented in the ","type":"text"},{"type":"codeVoice","code":"GameController"},{"type":"text","text":"."}],"type":"section","url":"\/tutorials\/spacekit\/flipcontracttestthegame#Test-Successful-Calls-to-the-flip-Endpoint","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractTestTheGame#Test-Successful-Calls-to-the-flip-Endpoint"},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes":{"type":"topic","url":"\/tutorials\/spacekit\/familiarizewithtypes","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes","estimatedTime":"20min","role":"project","kind":"project","title":"Exploring SpaceKit's Types","abstract":[{"text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}]},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges":{"title":"Handling Heap Allocation Challenges","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges","abstract":[{"text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}],"kind":"section","role":"pseudoSymbol","type":"section","url":"\/tutorials\/spacekit\/familiarizewithtypes#Handling-Heap-Allocation-Challenges"},"doc://SpaceKit/tutorials/SpaceKit/GetInfo#Accessing-Blockchain-Context-Data":{"abstract":[{"type":"text","text":"Many smart contracts rely on contextual data to execute their operations effectively. This data can include input payments, the caller’s address, the current time, the balance of a specific account, or even the contract owner."}],"url":"\/tutorials\/spacekit\/getinfo#Accessing-Blockchain-Context-Data","role":"pseudoSymbol","title":"Accessing Blockchain Context Data","kind":"section","type":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo#Accessing-Blockchain-Context-Data"},"doc://SpaceKit/tutorials/SpaceKit/OperationsOnFungibleTokens#Burn-Tokens":{"url":"\/tutorials\/spacekit\/operationsonfungibletokens#Burn-Tokens","kind":"section","type":"section","role":"pseudoSymbol","title":"Burn Tokens","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnFungibleTokens#Burn-Tokens","abstract":[{"text":"Fungible tokens function similarly to traditional currencies, making them the simplest type of token to work with.","type":"text"}]},"FlipContractWriteAdminSection1Step5.swift":{"content":["import SpaceKit","","@Controller public struct AdminController {","    public func setMinimumBlockBounty(","        value: UInt64","    ) {","        assertOwner()","    }","}"],"identifier":"FlipContractWriteAdminSection1Step5.swift","syntax":"swift","fileType":"swift","fileName":"AdminController.swift","highlights":[{"line":7}],"type":"file"},"doc://SpaceKit/tutorials/SpaceKit/StoreValues#Working-with-Storage-for-Single-Value-Persistence":{"title":"Working with @Storage for Single Value Persistence","role":"pseudoSymbol","abstract":[{"type":"text","text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory."}],"kind":"section","url":"\/tutorials\/spacekit\/storevalues#Working-with-Storage-for-Single-Value-Persistence","type":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues#Working-with-Storage-for-Single-Value-Persistence"},"doc://SpaceKit/tutorials/SpaceKit/InstallingTools#Setting-Up-the-SpaceKit-CLI":{"url":"\/tutorials\/spacekit\/installingtools#Setting-Up-the-SpaceKit-CLI","type":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Setting-Up-the-SpaceKit-CLI","kind":"section","abstract":[{"type":"text","text":"Before writing your first smart contract with SpaceKit, ensure you have the necessary tools installed."}],"role":"pseudoSymbol","title":"Setting Up the SpaceKit CLI"},"doc://SpaceKit/tutorials/SpaceKit/InstallingTools#Installing-SpaceKits-Dependencies":{"url":"\/tutorials\/spacekit\/installingtools#Installing-SpaceKits-Dependencies","role":"pseudoSymbol","kind":"section","title":"Installing SpaceKit's Dependencies","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Installing-SpaceKits-Dependencies","type":"section","abstract":[{"type":"text","text":"Before writing your first smart contract with SpaceKit, ensure you have the necessary tools installed."}]},"doc://SpaceKit/tutorials/SpaceKit/OperationsOnNonFungibleTokens#Assign-Create-AddQuantity-and-Burn-Roles":{"url":"\/tutorials\/spacekit\/operationsonnonfungibletokens#Assign-Create-AddQuantity-and-Burn-Roles","kind":"section","type":"section","role":"pseudoSymbol","title":"Assign Create, AddQuantity, and Burn Roles","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnNonFungibleTokens#Assign-Create-AddQuantity-and-Burn-Roles","abstract":[{"text":"Non-fungible tokens (NFTs) are unique digital assets that cannot be interchanged. Each NFT is associated with a unique identifier, known as a nonce. You can think of it like an airline ticket—each ticket is assigned to a specific passenger, with individual preferences and details.","type":"text"}]},"FlipContractWriteAdminSection2Step6.swift":{"content":["import SpaceKit","","@Controller public struct AdminController {","    public func setMinimumBlockBounty(","        value: UInt64","    ) {","        assertOwner()","        ","        require(","            value > 0,","            \"Minimum block bounty should be greater than zero.\"","        )","        ","        var storageController = StorageController()","        storageController.minimumBlockBounty = value","    }","    ","    public func setMaximumBet(","        tokenIdentifier: TokenIdentifier,","        nonce: UInt64,","        amount: BigUint","    ) {","        assertOwner()","        ","        require(","            amount > 0,","            \"Amount should be greater than zero.\"","        )","        ","        StorageController()","            .getMaximumBet(","                tokenIdentifier: tokenIdentifier,","                tokenNonce: nonce","            )","            .set(amount)","    }","    ","    public func setMaximumBetPercent(","        tokenIdentifier: TokenIdentifier,","        nonce: UInt64,","        percent: UInt64","    ) {","        assertOwner()","        ","        require(","            percent > 0,","            \"Percent should be greater than zero.\"","        )","        ","        StorageController()","            .getMaximumBetPercent(","                tokenIdentifier: tokenIdentifier,","                tokenNonce: nonce","            )","            .set(percent)","    }","}"],"type":"file","identifier":"FlipContractWriteAdminSection2Step6.swift","highlights":[],"fileType":"swift","fileName":"AdminController.swift","syntax":"swift"},"doc://SpaceKit/tutorials/SpaceKit/FlipContractInitTests#Configure-the-Initial-Blockchain-State":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractInitTests#Configure-the-Initial-Blockchain-State","role":"pseudoSymbol","url":"\/tutorials\/spacekit\/flipcontractinittests#Configure-the-Initial-Blockchain-State","type":"section","title":"Configure the Initial Blockchain State","abstract":[{"type":"text","text":"Smart contracts are permissionless programs that often manage valuable assets. Because of this, writing comprehensive tests for both successful and failure scenarios is essential."}],"kind":"section"},"doc://SpaceKit/tutorials/SpaceKit/FlipContractInitTests#Set-Up-the-Test-Project":{"title":"Set Up the Test Project","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractInitTests#Set-Up-the-Test-Project","abstract":[{"type":"text","text":"Smart contracts are permissionless programs that often manage valuable assets. Because of this, writing comprehensive tests for both successful and failure scenarios is essential."}],"url":"\/tutorials\/spacekit\/flipcontractinittests#Set-Up-the-Test-Project","type":"section","kind":"section","role":"pseudoSymbol"},"doc://SpaceKit/tutorials/SpaceKit/Create-and-Manage-Tokens/Creating-and-Understanding-Tokens":{"url":"\/tutorials\/spacekit\/create-and-manage-tokens\/creating-and-understanding-tokens","kind":"article","type":"topic","role":"article","title":"Creating and Understanding Tokens","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Create-and-Manage-Tokens\/Creating-and-Understanding-Tokens","abstract":[]},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Working-with-the-Vector-Type":{"url":"\/tutorials\/spacekit\/familiarizewithtypes#Working-with-the-Vector-Type","type":"section","kind":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Working-with-the-Vector-Type","abstract":[{"text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}],"title":"Working with the Vector Type","role":"pseudoSymbol"},"doc://SpaceKit/tutorials/SpaceKit/FlipContractTestTheGame#Test-Failure-Case-for-the-bounty-Endpoint":{"url":"\/tutorials\/spacekit\/flipcontracttestthegame#Test-Failure-Case-for-the-bounty-Endpoint","role":"pseudoSymbol","kind":"section","title":"Test Failure Case for the bounty Endpoint","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractTestTheGame#Test-Failure-Case-for-the-bounty-Endpoint","type":"section","abstract":[{"type":"text","text":"This final chapter of the testing tutorial focuses on validating the core game logic implemented in the "},{"type":"codeVoice","code":"GameController"},{"text":".","type":"text"}]},"doc://SpaceKit/tutorials/SpaceKit/CodingYourFirstContract":{"url":"\/tutorials\/spacekit\/codingyourfirstcontract","kind":"project","estimatedTime":"20min","type":"topic","role":"project","title":"Building Your First Smart Contract","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract","abstract":[{"text":"In this tutorial, you’ll create a simple smart contract that manages a counter. Users can increment or decrement the counter, and the changes are persisted across contract executions.","type":"text"}]},"doc://SpaceKit/tutorials/SpaceKit/InstallingTools":{"title":"Install the Necessary Tools","estimatedTime":"10min","url":"\/tutorials\/spacekit\/installingtools","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools","abstract":[{"text":"Before writing your first smart contract with SpaceKit, ensure you have the necessary tools installed.","type":"text"}],"role":"project","kind":"project","type":"topic"},"doc://SpaceKit/tutorials/SpaceKit/FlipContractWriteTheGame#Implement-the-makeFlip-Function":{"url":"\/tutorials\/spacekit\/flipcontractwritethegame#Implement-the-makeFlip-Function","type":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteTheGame#Implement-the-makeFlip-Function","kind":"section","abstract":[{"type":"text","text":"With the storage and administrative endpoints complete, it’s time to build the core gameplay mechanics."}],"role":"pseudoSymbol","title":"Implement the makeFlip Function"},"doc://SpaceKit/tutorials/SpaceKit/FlipContractTestTheGame#Create-Utility-Functions-for-flip-and-bounty":{"url":"\/tutorials\/spacekit\/flipcontracttestthegame#Create-Utility-Functions-for-flip-and-bounty","type":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractTestTheGame#Create-Utility-Functions-for-flip-and-bounty","kind":"section","abstract":[{"type":"text","text":"This final chapter of the testing tutorial focuses on validating the core game logic implemented in the "},{"type":"codeVoice","code":"GameController"},{"text":".","type":"text"}],"role":"pseudoSymbol","title":"Create Utility Functions for flip and bounty"},"doc://SpaceKit/tutorials/SpaceKit/FlipContractWriteTheStorage":{"title":"Define the Storage for the Flip Contract","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteTheStorage","abstract":[{"type":"text","text":"With your Flip project initialized, you’re ready to begin implementing the smart contract. The contract is composed of the following components:"}],"kind":"project","role":"project","estimatedTime":"20min","type":"topic","url":"\/tutorials\/spacekit\/flipcontractwritethestorage"},"doc://SpaceKit/tutorials/SpaceKit/FlipContractTestTheGame":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractTestTheGame","title":"Test the Game Logic for the Flip Contract","kind":"project","estimatedTime":"20min","url":"\/tutorials\/spacekit\/flipcontracttestthegame","abstract":[{"type":"text","text":"This final chapter of the testing tutorial focuses on validating the core game logic implemented in the "},{"type":"codeVoice","code":"GameController"},{"type":"text","text":"."}],"type":"topic","role":"project"},"doc://SpaceKit/tutorials/SpaceKit/Create-and-Manage-Tokens/Managing-Fungible-Tokens":{"url":"\/tutorials\/spacekit\/create-and-manage-tokens\/managing-fungible-tokens","type":"topic","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Create-and-Manage-Tokens\/Managing-Fungible-Tokens","kind":"article","abstract":[],"role":"article","title":"Managing Fungible Tokens"},"doc://SpaceKit/tutorials/SpaceKit/SyncCalls#Declare-the-Callee-Proxy":{"type":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls#Declare-the-Callee-Proxy","url":"\/tutorials\/spacekit\/synccalls#Declare-the-Callee-Proxy","title":"Declare the Callee Proxy","kind":"section","abstract":[{"text":"Smart contracts can interact not only with users but also with other smart contracts. This enables more advanced protocols by leveraging existing ones. For example, you could integrate a decentralized exchange directly into your contract to perform token swaps. Decentralized applications often involve multiple contracts, each with a dedicated role, working together to achieve complex functionality—similar to microservices in backend systems.","type":"text"}],"role":"pseudoSymbol"},"doc://SpaceKit/tutorials/SpaceKit/UnderstandTokens":{"url":"\/tutorials\/spacekit\/understandtokens","estimatedTime":"15min","role":"project","kind":"project","title":"Understand the ESDT Standard","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/UnderstandTokens","type":"topic","abstract":[{"text":"Learn about the ESDT standard used in the SpaceKit framework, a token model that supports fungible tokens, non-fungible tokens (NFTs), semi-fungible tokens, and meta-esdt tokens.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The SpaceKit framework uses a token standard called ESDT. This standard defines four types of tokens: fungible, non-fungible (NFT), semi-fungible, and meta-esdt."}]},"doc://SpaceKit/tutorials/SpaceKit/UnderstandTokens#Issuing-a-Semi-Fungible-Token-from-Your-Contract":{"title":"Issuing a Semi-Fungible Token from Your Contract","type":"section","role":"pseudoSymbol","abstract":[{"text":"Learn about the ESDT standard used in the SpaceKit framework, a token model that supports fungible tokens, non-fungible tokens (NFTs), semi-fungible tokens, and meta-esdt tokens.","type":"text"},{"text":" ","type":"text"},{"text":"The SpaceKit framework uses a token standard called ESDT. This standard defines four types of tokens: fungible, non-fungible (NFT), semi-fungible, and meta-esdt.","type":"text"}],"kind":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/UnderstandTokens#Issuing-a-Semi-Fungible-Token-from-Your-Contract","url":"\/tutorials\/spacekit\/understandtokens#Issuing-a-Semi-Fungible-Token-from-Your-Contract"},"doc://SpaceKit/tutorials/SpaceKit/FlipContractWriteTheStorage#Define-the-Flip-Structure":{"abstract":[{"type":"text","text":"With your Flip project initialized, you’re ready to begin implementing the smart contract. The contract is composed of the following components:"}],"url":"\/tutorials\/spacekit\/flipcontractwritethestorage#Define-the-Flip-Structure","role":"pseudoSymbol","title":"Define the Flip Structure","kind":"section","type":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteTheStorage#Define-the-Flip-Structure"},"doc://SpaceKit/tutorials/SpaceKit/Build-a-Coin-Flip-Contract/Test-the-Admin-Endpoints":{"type":"topic","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Build-a-Coin-Flip-Contract\/Test-the-Admin-Endpoints","role":"article","abstract":[],"url":"\/tutorials\/spacekit\/build-a-coin-flip-contract\/test-the-admin-endpoints","kind":"article","title":"Test the Admin Endpoints"},"doc://SpaceKit/tutorials/SpaceKit/FlipContractWriteTheGame#Implement-the-flip-Endpoint":{"kind":"section","abstract":[{"type":"text","text":"With the storage and administrative endpoints complete, it’s time to build the core gameplay mechanics."}],"type":"section","url":"\/tutorials\/spacekit\/flipcontractwritethegame#Implement-the-flip-Endpoint","role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteTheGame#Implement-the-flip-Endpoint","title":"Implement the flip Endpoint"},"FlipContractWriteAdminSection1Step2.swift":{"fileType":"swift","highlights":[{"line":1}],"type":"file","syntax":"swift","fileName":"AdminController.swift","content":["import SpaceKit"],"identifier":"FlipContractWriteAdminSection1Step2.swift"},"FlipContractWriteAdminSection3Step5.swift":{"type":"file","fileType":"swift","content":["import SpaceKit","","@Controller public struct AdminController {","    public func setMinimumBlockBounty(","        value: UInt64","    ) {","        assertOwner()","        ","        require(","            value > 0,","            \"Minimum block bounty should be greater than zero.\"","        )","        ","        var storageController = StorageController()","        storageController.minimumBlockBounty = value","    }","    ","    public func setMaximumBet(","        tokenIdentifier: TokenIdentifier,","        nonce: UInt64,","        amount: BigUint","    ) {","        assertOwner()","        ","        require(","            amount > 0,","            \"Amount should be greater than zero.\"","        )","        ","        StorageController()","            .getMaximumBet(","                tokenIdentifier: tokenIdentifier,","                tokenNonce: nonce","            )","            .set(amount)","    }","    ","    public func setMaximumBetPercent(","        tokenIdentifier: TokenIdentifier,","        nonce: UInt64,","        percent: UInt64","    ) {","        assertOwner()","        ","        require(","            percent > 0,","            \"Percent should be greater than zero.\"","        )","        ","        StorageController()","            .getMaximumBetPercent(","                tokenIdentifier: tokenIdentifier,","                tokenNonce: nonce","            )","            .set(percent)","    }","    ","    public func increaseReserve() {","        assertOwner()","        ","        let payment = Message.egldOrSingleEsdtTransfer","        ","        require(","            payment.amount > 0,","            \"No payment received.\"","        )","    }","}"],"syntax":"swift","highlights":[{"line":62},{"line":63},{"line":64},{"line":65},{"line":66}],"fileName":"AdminController.swift","identifier":"FlipContractWriteAdminSection3Step5.swift"},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Creating-Your-Own-Types":{"title":"Creating Your Own Types","role":"pseudoSymbol","abstract":[{"text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}],"kind":"section","url":"\/tutorials\/spacekit\/familiarizewithtypes#Creating-Your-Own-Types","type":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Creating-Your-Own-Types"},"doc://SpaceKit/tutorials/SpaceKit/FlipContractTestAdmin#Test-the-withdrawReserve-Endpoint":{"type":"section","kind":"section","abstract":[{"type":"text","text":"Admin endpoints are critical to the contract’s integrity. They not only control configuration parameters, but also grant access to withdraw the contract’s token reserves."}],"title":"Test the withdrawReserve Endpoint","role":"pseudoSymbol","url":"\/tutorials\/spacekit\/flipcontracttestadmin#Test-the-withdrawReserve-Endpoint","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractTestAdmin#Test-the-withdrawReserve-Endpoint"},"doc://SpaceKit/tutorials/SpaceKit/SyncCalls#Perform-a-Synchronous-Call":{"kind":"section","abstract":[{"text":"Smart contracts can interact not only with users but also with other smart contracts. This enables more advanced protocols by leveraging existing ones. For example, you could integrate a decentralized exchange directly into your contract to perform token swaps. Decentralized applications often involve multiple contracts, each with a dedicated role, working together to achieve complex functionality—similar to microservices in backend systems.","type":"text"}],"type":"section","url":"\/tutorials\/spacekit\/synccalls#Perform-a-Synchronous-Call","role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls#Perform-a-Synchronous-Call","title":"Perform a Synchronous Call"},"doc://SpaceKit/tutorials/SpaceKit/UnderstandTokens#Issuing-a-Non-Fungible-Token-from-Your-Contract":{"title":"Issuing a Non-Fungible Token from Your Contract","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/UnderstandTokens#Issuing-a-Non-Fungible-Token-from-Your-Contract","type":"section","abstract":[{"type":"text","text":"Learn about the ESDT standard used in the SpaceKit framework, a token model that supports fungible tokens, non-fungible tokens (NFTs), semi-fungible tokens, and meta-esdt tokens."},{"type":"text","text":" "},{"type":"text","text":"The SpaceKit framework uses a token standard called ESDT. This standard defines four types of tokens: fungible, non-fungible (NFT), semi-fungible, and meta-esdt."}],"kind":"section","role":"pseudoSymbol","url":"\/tutorials\/spacekit\/understandtokens#Issuing-a-Non-Fungible-Token-from-Your-Contract"},"doc://SpaceKit/tutorials/SpaceKit/FlipContractWriteTheGame":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteTheGame","estimatedTime":"20min","abstract":[{"type":"text","text":"With the storage and administrative endpoints complete, it’s time to build the core gameplay mechanics."}],"role":"project","title":"Implement the Game Logic for the Flip Contract","kind":"project","url":"\/tutorials\/spacekit\/flipcontractwritethegame","type":"topic"},"doc://SpaceKit/tutorials/SpaceKit/GetInfo":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo","role":"project","url":"\/tutorials\/spacekit\/getinfo","abstract":[{"type":"text","text":"Many smart contracts rely on contextual data to execute their operations effectively. This data can include input payments, the caller’s address, the current time, the balance of a specific account, or even the contract owner."}],"title":"Retrieving Information from the Blockchain","type":"topic","estimatedTime":"10min","kind":"project"},"FlipContractWriteAdminSection3Step2.swift":{"fileType":"swift","highlights":[{"line":57},{"line":58},{"line":59}],"type":"file","syntax":"swift","fileName":"AdminController.swift","content":["import SpaceKit","","@Controller public struct AdminController {","    public func setMinimumBlockBounty(","        value: UInt64","    ) {","        assertOwner()","        ","        require(","            value > 0,","            \"Minimum block bounty should be greater than zero.\"","        )","        ","        var storageController = StorageController()","        storageController.minimumBlockBounty = value","    }","    ","    public func setMaximumBet(","        tokenIdentifier: TokenIdentifier,","        nonce: UInt64,","        amount: BigUint","    ) {","        assertOwner()","        ","        require(","            amount > 0,","            \"Amount should be greater than zero.\"","        )","        ","        StorageController()","            .getMaximumBet(","                tokenIdentifier: tokenIdentifier,","                tokenNonce: nonce","            )","            .set(amount)","    }","    ","    public func setMaximumBetPercent(","        tokenIdentifier: TokenIdentifier,","        nonce: UInt64,","        percent: UInt64","    ) {","        assertOwner()","        ","        require(","            percent > 0,","            \"Percent should be greater than zero.\"","        )","        ","        StorageController()","            .getMaximumBetPercent(","                tokenIdentifier: tokenIdentifier,","                tokenNonce: nonce","            )","            .set(percent)","    }","    ","    public func increaseReserve() {","    }","}"],"identifier":"FlipContractWriteAdminSection3Step2.swift"},"doc://SpaceKit/tutorials/SpaceKit/Deep-Dive-into-SpaceKit-Concepts/Exploring-SpaceKit's-Types":{"abstract":[],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Exploring-SpaceKit's-Types","title":"Exploring SpaceKit's Types","type":"topic","url":"\/tutorials\/spacekit\/deep-dive-into-spacekit-concepts\/exploring-spacekit's-types","kind":"article","role":"article"},"FlipContractWriteAdminSection1Step3.swift":{"type":"file","syntax":"swift","fileType":"swift","fileName":"AdminController.swift","content":["import SpaceKit","","@Controller public struct AdminController {","}"],"highlights":[{"line":2},{"line":3},{"line":4}],"identifier":"FlipContractWriteAdminSection1Step3.swift"},"doc://SpaceKit/tutorials/SpaceKit/Getting-Started/Building-Your-First-Smart-Contract":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Getting-Started\/Building-Your-First-Smart-Contract","title":"Building Your First Smart Contract","kind":"article","url":"\/tutorials\/spacekit\/getting-started\/building-your-first-smart-contract","abstract":[],"type":"topic","role":"article"},"doc://SpaceKit/tutorials/SpaceKit/FlipContractTestAdmin#Verify-the-Maximum-Bet-Configuration-Endpoints":{"url":"\/tutorials\/spacekit\/flipcontracttestadmin#Verify-the-Maximum-Bet-Configuration-Endpoints","type":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractTestAdmin#Verify-the-Maximum-Bet-Configuration-Endpoints","kind":"section","abstract":[{"type":"text","text":"Admin endpoints are critical to the contract’s integrity. They not only control configuration parameters, but also grant access to withdraw the contract’s token reserves."}],"role":"pseudoSymbol","title":"Verify the Maximum Bet Configuration Endpoints"},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Working-with-the-BigUint-Type":{"url":"\/tutorials\/spacekit\/familiarizewithtypes#Working-with-the-BigUint-Type","type":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Working-with-the-BigUint-Type","kind":"section","abstract":[{"text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}],"role":"pseudoSymbol","title":"Working with the BigUint Type"},"doc://SpaceKit/tutorials/SpaceKit/FlipContractWriteTheStorage#Define-the-Contract-Init":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteTheStorage#Define-the-Contract-Init","role":"pseudoSymbol","url":"\/tutorials\/spacekit\/flipcontractwritethestorage#Define-the-Contract-Init","abstract":[{"type":"text","text":"With your Flip project initialized, you’re ready to begin implementing the smart contract. The contract is composed of the following components:"}],"title":"Define the Contract Init","type":"section","kind":"section"},"doc://SpaceKit/tutorials/SpaceKit/AsyncCalls#Perform-an-Asynchronous-Call":{"url":"\/tutorials\/spacekit\/asynccalls#Perform-an-Asynchronous-Call","kind":"section","type":"section","role":"pseudoSymbol","title":"Perform an Asynchronous Call","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls#Perform-an-Asynchronous-Call","abstract":[{"type":"text","text":"Blockchain platforms using SpaceVM enable seamless execution within a sharded environment. Sharding divides a blockchain’s global state and validation workload into smaller, manageable units known as shards. This method enhances scalability without compromising decentralization, allowing nodes to operate without significant computational resources."}]},"doc://SpaceKit/tutorials/SpaceKit/StoreValues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage","url":"\/tutorials\/spacekit\/storevalues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage","role":"pseudoSymbol","type":"section","kind":"section","abstract":[{"text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory.","type":"text"}],"title":"Leveraging @Mapping for Dynamic Key-Value Storage"},"FlipContractWriteAdminSection1Step6.swift":{"highlights":[{"line":8},{"line":9},{"line":10},{"line":11},{"line":12}],"fileName":"AdminController.swift","content":["import SpaceKit","","@Controller public struct AdminController {","    public func setMinimumBlockBounty(","        value: UInt64","    ) {","        assertOwner()","        ","        require(","            value > 0,","            \"Minimum block bounty should be greater than zero.\"","        )","    }","}"],"fileType":"swift","type":"file","syntax":"swift","identifier":"FlipContractWriteAdminSection1Step6.swift"},"doc://SpaceKit/tutorials/SpaceKit/FlipContractWriteAdmin#Set-Maximum-Bet-Limits":{"kind":"section","abstract":[{"type":"text","text":"Now that your storage is fully set up, it’s time to define the administrative endpoints that allow the contract owner to manage critical values and assets."}],"type":"section","url":"\/tutorials\/spacekit\/flipcontractwriteadmin#Set-Maximum-Bet-Limits","role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteAdmin#Set-Maximum-Bet-Limits","title":"Set Maximum Bet Limits"},"FlipContractWriteAdminSection1Step7.swift":{"syntax":"swift","fileType":"swift","content":["import SpaceKit","","@Controller public struct AdminController {","    public func setMinimumBlockBounty(","        value: UInt64","    ) {","        assertOwner()","        ","        require(","            value > 0,","            \"Minimum block bounty should be greater than zero.\"","        )","        ","        var storageController = StorageController()","    }","}"],"identifier":"FlipContractWriteAdminSection1Step7.swift","highlights":[{"line":13},{"line":14}],"fileName":"AdminController.swift","type":"file"},"doc://SpaceKit/tutorials/SpaceKit/Build-a-Coin-Flip-Contract/Define-the-Storage-for-the-Flip-Contract":{"title":"Define the Storage for the Flip Contract","role":"article","kind":"article","abstract":[],"type":"topic","url":"\/tutorials\/spacekit\/build-a-coin-flip-contract\/define-the-storage-for-the-flip-contract","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Build-a-Coin-Flip-Contract\/Define-the-Storage-for-the-Flip-Contract"},"doc://SpaceKit/tutorials/SpaceKit/Build-a-Coin-Flip-Contract/Test-the-Game-Logic-for-the-Flip-Contract":{"url":"\/tutorials\/spacekit\/build-a-coin-flip-contract\/test-the-game-logic-for-the-flip-contract","type":"topic","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Build-a-Coin-Flip-Contract\/Test-the-Game-Logic-for-the-Flip-Contract","kind":"article","abstract":[],"role":"article","title":"Test the Game Logic for the Flip Contract"},"doc://SpaceKit/tutorials/SpaceKit/FlipContractIntro#Set-Up-the-Project":{"url":"\/tutorials\/spacekit\/flipcontractintro#Set-Up-the-Project","kind":"section","type":"section","role":"pseudoSymbol","title":"Set Up the Project","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractIntro#Set-Up-the-Project","abstract":[{"type":"text","text":"In this tutorial, you’ll write and test a complete smart contract that relies on random number generation to implement a coin flip mechanic. Players wager a chosen amount of any token and face a 50% chance of doubling their bet—or losing it. A small fee is deducted from each wager and sent to the developer’s wallet."}]},"doc://SpaceKit/tutorials/SpaceKit/FlipContractTestTheGame#Test-the-bounty-Endpoint":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractTestTheGame#Test-the-bounty-Endpoint","abstract":[{"type":"text","text":"This final chapter of the testing tutorial focuses on validating the core game logic implemented in the "},{"type":"codeVoice","code":"GameController"},{"text":".","type":"text"}],"role":"pseudoSymbol","title":"Test the bounty Endpoint","kind":"section","url":"\/tutorials\/spacekit\/flipcontracttestthegame#Test-the-bounty-Endpoint","type":"section"},"doc://SpaceKit/tutorials/SpaceKit/FlipContractTestAdmin#Test-the-increaseReserve-Endpoint":{"kind":"section","abstract":[{"text":"Admin endpoints are critical to the contract’s integrity. They not only control configuration parameters, but also grant access to withdraw the contract’s token reserves.","type":"text"}],"type":"section","url":"\/tutorials\/spacekit\/flipcontracttestadmin#Test-the-increaseReserve-Endpoint","role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractTestAdmin#Test-the-increaseReserve-Endpoint","title":"Test the increaseReserve Endpoint"},"doc://SpaceKit/tutorials/SpaceKit/Deep-Dive-into-SpaceKit-Concepts/Persisting-Data-Across-Executions":{"title":"Persisting Data Across Executions","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Persisting-Data-Across-Executions","type":"topic","abstract":[],"kind":"article","role":"article","url":"\/tutorials\/spacekit\/deep-dive-into-spacekit-concepts\/persisting-data-across-executions"},"doc://SpaceKit/tutorials/SpaceKit/Build-a-Coin-Flip-Contract/Set-Up-Testing-in-the-SwiftVM":{"url":"\/tutorials\/spacekit\/build-a-coin-flip-contract\/set-up-testing-in-the-swiftvm","type":"topic","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Build-a-Coin-Flip-Contract\/Set-Up-Testing-in-the-SwiftVM","kind":"article","abstract":[],"role":"article","title":"Set Up Testing in the SwiftVM"},"doc://SpaceKit/tutorials/SpaceKit/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract":{"type":"section","kind":"section","url":"\/tutorials\/spacekit\/installingtools#Initializing-and-Compiling-Your-First-Smart-Contract","abstract":[{"text":"Before writing your first smart contract with SpaceKit, ensure you have the necessary tools installed.","type":"text"}],"title":"Initializing and Compiling Your First Smart Contract","role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract"},"doc://SpaceKit/tutorials/SpaceKit/TokenAttributes#Implementing-the-unlockFunds-Endpoint":{"type":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/TokenAttributes#Implementing-the-unlockFunds-Endpoint","url":"\/tutorials\/spacekit\/tokenattributes#Implementing-the-unlockFunds-Endpoint","title":"Implementing the unlockFunds Endpoint","kind":"section","abstract":[{"text":"The ESDT standard enables embedding custom data within non-fungible tokens, allowing developers to extend the functionality of their smart contracts. This additional data, referred to as “attributes,” is tied to the token and transfers along with it between wallets.","type":"text"}],"role":"pseudoSymbol"},"doc://SpaceKit/tutorials/SpaceKit/FlipContractWriteAdmin#Withdraw-Contract-Reserves":{"url":"\/tutorials\/spacekit\/flipcontractwriteadmin#Withdraw-Contract-Reserves","role":"pseudoSymbol","kind":"section","title":"Withdraw Contract Reserves","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteAdmin#Withdraw-Contract-Reserves","type":"section","abstract":[{"type":"text","text":"Now that your storage is fully set up, it’s time to define the administrative endpoints that allow the contract owner to manage critical values and assets."}]},"doc://SpaceKit/tutorials/SpaceKit/FlipContractTestTheGame#Test-Failure-Cases-for-the-flip-Endpoint":{"url":"\/tutorials\/spacekit\/flipcontracttestthegame#Test-Failure-Cases-for-the-flip-Endpoint","type":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractTestTheGame#Test-Failure-Cases-for-the-flip-Endpoint","abstract":[{"type":"text","text":"This final chapter of the testing tutorial focuses on validating the core game logic implemented in the "},{"code":"GameController","type":"codeVoice"},{"text":".","type":"text"}],"kind":"section","title":"Test Failure Cases for the flip Endpoint","role":"pseudoSymbol"},"doc://SpaceKit/tutorials/SpaceKit/FlipContractInitTests#Write-Tests-for-the-Setup-Helpers":{"type":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractInitTests#Write-Tests-for-the-Setup-Helpers","role":"pseudoSymbol","abstract":[{"type":"text","text":"Smart contracts are permissionless programs that often manage valuable assets. Because of this, writing comprehensive tests for both successful and failure scenarios is essential."}],"url":"\/tutorials\/spacekit\/flipcontractinittests#Write-Tests-for-the-Setup-Helpers","kind":"section","title":"Write Tests for the Setup Helpers"},"doc://SpaceKit/tutorials/SpaceKit/FlipContractIntro":{"type":"topic","url":"\/tutorials\/spacekit\/flipcontractintro","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractIntro","estimatedTime":"20min","role":"project","kind":"project","title":"Build a Coin Flip Smart Contract","abstract":[{"text":"In this tutorial, you’ll write and test a complete smart contract that relies on random number generation to implement a coin flip mechanic. Players wager a chosen amount of any token and face a 50% chance of doubling their bet—or losing it. A small fee is deducted from each wager and sent to the developer’s wallet.","type":"text"}]},"doc://SpaceKit/tutorials/SpaceKit/OperationsOnNonFungibleTokens":{"estimatedTime":"15min","type":"topic","title":"Managing Non-Fungible Tokens","role":"project","url":"\/tutorials\/spacekit\/operationsonnonfungibletokens","abstract":[{"type":"text","text":"Non-fungible tokens (NFTs) are unique digital assets that cannot be interchanged. Each NFT is associated with a unique identifier, known as a nonce. You can think of it like an airline ticket—each ticket is assigned to a specific passenger, with individual preferences and details."}],"kind":"project","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnNonFungibleTokens"},"doc://SpaceKit/tutorials/SpaceKit/AsyncCalls":{"title":"Interacting with Contracts Across Shards","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls","abstract":[{"type":"text","text":"Blockchain platforms using SpaceVM enable seamless execution within a sharded environment. Sharding divides a blockchain’s global state and validation workload into smaller, manageable units known as shards. This method enhances scalability without compromising decentralization, allowing nodes to operate without significant computational resources."}],"kind":"project","role":"project","estimatedTime":"15min","type":"topic","url":"\/tutorials\/spacekit\/asynccalls"},"doc://SpaceKit/tutorials/SpaceKit/FlipContractWriteAdmin#Increase-Contract-Reserves":{"url":"\/tutorials\/spacekit\/flipcontractwriteadmin#Increase-Contract-Reserves","type":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteAdmin#Increase-Contract-Reserves","kind":"section","abstract":[{"type":"text","text":"Now that your storage is fully set up, it’s time to define the administrative endpoints that allow the contract owner to manage critical values and assets."}],"role":"pseudoSymbol","title":"Increase Contract Reserves"},"FlipContractWriteAdminSection2Step3.swift":{"highlights":[{"line":23},{"line":24}],"fileName":"AdminController.swift","content":["import SpaceKit","","@Controller public struct AdminController {","    public func setMinimumBlockBounty(","        value: UInt64","    ) {","        assertOwner()","        ","        require(","            value > 0,","            \"Minimum block bounty should be greater than zero.\"","        )","        ","        var storageController = StorageController()","        storageController.minimumBlockBounty = value","    }","    ","    public func setMaximumBet(","        tokenIdentifier: TokenIdentifier,","        nonce: UInt64,","        amount: BigUint","    ) {","        assertOwner()","        ","    }","}"],"fileType":"swift","type":"file","syntax":"swift","identifier":"FlipContractWriteAdminSection2Step3.swift"},"doc://SpaceKit/tutorials/SpaceKit":{"title":"Meet SpaceKit","abstract":[{"type":"text","text":"Discover how SpaceKit simplifies blockchain development using Swift. Dive into the world of Web3 with ease and efficiency."}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit","url":"\/tutorials\/spacekit","role":"overview","kind":"overview","type":"topic"},"doc://SpaceKit/tutorials/SpaceKit/FlipContractInitTests#Create-Helper-Functions-to-Deploy-and-Configure-the-Contract":{"url":"\/tutorials\/spacekit\/flipcontractinittests#Create-Helper-Functions-to-Deploy-and-Configure-the-Contract","role":"pseudoSymbol","kind":"section","title":"Create Helper Functions to Deploy and Configure the Contract","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractInitTests#Create-Helper-Functions-to-Deploy-and-Configure-the-Contract","type":"section","abstract":[{"type":"text","text":"Smart contracts are permissionless programs that often manage valuable assets. Because of this, writing comprehensive tests for both successful and failure scenarios is essential."}]},"doc://SpaceKit/tutorials/SpaceKit/FlipContractTestAdmin":{"title":"Test the Admin Endpoints","type":"topic","role":"project","abstract":[{"type":"text","text":"Admin endpoints are critical to the contract’s integrity. They not only control configuration parameters, but also grant access to withdraw the contract’s token reserves."}],"kind":"project","estimatedTime":"20min","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractTestAdmin","url":"\/tutorials\/spacekit\/flipcontracttestadmin"},"FlipContractWriteAdminSection2Step5.swift":{"type":"file","syntax":"swift","fileType":"swift","fileName":"AdminController.swift","content":["import SpaceKit","","@Controller public struct AdminController {","    public func setMinimumBlockBounty(","        value: UInt64","    ) {","        assertOwner()","        ","        require(","            value > 0,","            \"Minimum block bounty should be greater than zero.\"","        )","        ","        var storageController = StorageController()","        storageController.minimumBlockBounty = value","    }","    ","    public func setMaximumBet(","        tokenIdentifier: TokenIdentifier,","        nonce: UInt64,","        amount: BigUint","    ) {","        assertOwner()","        ","        require(","            amount > 0,","            \"Amount should be greater than zero.\"","        )","        ","        StorageController()","            .getMaximumBet(","                tokenIdentifier: tokenIdentifier,","                tokenNonce: nonce","            )","            .set(amount)","    }","}"],"highlights":[{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35}],"identifier":"FlipContractWriteAdminSection2Step5.swift"},"doc://SpaceKit/tutorials/SpaceKit/CodingYourFirstContract#Writing-the-Contract-Code":{"url":"\/tutorials\/spacekit\/codingyourfirstcontract#Writing-the-Contract-Code","role":"pseudoSymbol","abstract":[{"type":"text","text":"In this tutorial, you’ll create a simple smart contract that manages a counter. Users can increment or decrement the counter, and the changes are persisted across contract executions."}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Writing-the-Contract-Code","type":"section","title":"Writing the Contract Code","kind":"section"},"doc://SpaceKit/tutorials/SpaceKit/OperationsOnFungibleTokens#Assign-Mint-and-Burn-Roles":{"abstract":[{"type":"text","text":"Fungible tokens function similarly to traditional currencies, making them the simplest type of token to work with."}],"role":"pseudoSymbol","url":"\/tutorials\/spacekit\/operationsonfungibletokens#Assign-Mint-and-Burn-Roles","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnFungibleTokens#Assign-Mint-and-Burn-Roles","kind":"section","type":"section","title":"Assign Mint and Burn Roles"},"doc://SpaceKit/tutorials/SpaceKit/OperationsOnNonFungibleTokens#Burn-Tokens":{"title":"Burn Tokens","role":"pseudoSymbol","kind":"section","abstract":[{"text":"Non-fungible tokens (NFTs) are unique digital assets that cannot be interchanged. Each NFT is associated with a unique identifier, known as a nonce. You can think of it like an airline ticket—each ticket is assigned to a specific passenger, with individual preferences and details.","type":"text"}],"type":"section","url":"\/tutorials\/spacekit\/operationsonnonfungibletokens#Burn-Tokens","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnNonFungibleTokens#Burn-Tokens"},"doc://SpaceKit/tutorials/SpaceKit/Build-a-Coin-Flip-Contract/Build-a-Coin-Flip-Smart-Contract":{"url":"\/tutorials\/spacekit\/build-a-coin-flip-contract\/build-a-coin-flip-smart-contract","type":"topic","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Build-a-Coin-Flip-Contract\/Build-a-Coin-Flip-Smart-Contract","kind":"article","abstract":[],"role":"article","title":"Build a Coin Flip Smart Contract"},"doc://SpaceKit/tutorials/SpaceKit/FlipContractTestAdmin#Verify-That-Only-the-Owner-Can-Access-Admin-Endpoints":{"url":"\/tutorials\/spacekit\/flipcontracttestadmin#Verify-That-Only-the-Owner-Can-Access-Admin-Endpoints","kind":"section","type":"section","role":"pseudoSymbol","title":"Verify That Only the Owner Can Access Admin Endpoints","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractTestAdmin#Verify-That-Only-the-Owner-Can-Access-Admin-Endpoints","abstract":[{"type":"text","text":"Admin endpoints are critical to the contract’s integrity. They not only control configuration parameters, but also grant access to withdraw the contract’s token reserves."}]},"FlipContractWriteAdminSection1Step1.swift":{"highlights":[],"fileName":"AdminController.swift","content":[""],"fileType":"swift","type":"file","syntax":"swift","identifier":"FlipContractWriteAdminSection1Step1.swift"},"FlipContractWriteAdminSection4Step4.swift":{"fileName":"AdminController.swift","identifier":"FlipContractWriteAdminSection4Step4.swift","highlights":[{"line":82},{"line":83},{"line":84},{"line":85},{"line":86},{"line":87},{"line":88},{"line":89},{"line":90},{"line":91},{"line":92},{"line":93},{"line":94},{"line":95}],"type":"file","fileType":"swift","content":["import SpaceKit","","@Controller public struct AdminController {","    public func setMinimumBlockBounty(","        value: UInt64","    ) {","        assertOwner()","        ","        require(","            value > 0,","            \"Minimum block bounty should be greater than zero.\"","        )","        ","        var storageController = StorageController()","        storageController.minimumBlockBounty = value","    }","    ","    public func setMaximumBet(","        tokenIdentifier: TokenIdentifier,","        nonce: UInt64,","        amount: BigUint","    ) {","        assertOwner()","        ","        require(","            amount > 0,","            \"Amount should be greater than zero.\"","        )","        ","        StorageController()","            .getMaximumBet(","                tokenIdentifier: tokenIdentifier,","                tokenNonce: nonce","            )","            .set(amount)","    }","    ","    public func setMaximumBetPercent(","        tokenIdentifier: TokenIdentifier,","        nonce: UInt64,","        percent: UInt64","    ) {","        assertOwner()","        ","        require(","            percent > 0,","            \"Percent should be greater than zero.\"","        )","        ","        StorageController()","            .getMaximumBetPercent(","                tokenIdentifier: tokenIdentifier,","                tokenNonce: nonce","            )","            .set(percent)","    }","    ","    public func increaseReserve() {","        assertOwner()","        ","        let payment = Message.egldOrSingleEsdtTransfer","        ","        require(","            payment.amount > 0,","            \"No payment received.\"","        )","        ","        StorageController()","            .getTokenReserve(","                tokenIdentifier: payment.tokenIdentifier,","                tokenNonce: payment.nonce","            )","            .update { $0 = $0 + payment.amount }","    }","    ","    public func withdrawReserve(","        tokenIdentifier: TokenIdentifier,","        nonce: UInt64,","        amount: BigUint","    ) {","        assertOwner()","        ","        StorageController()","            .getTokenReserve(","                tokenIdentifier: tokenIdentifier,","                tokenNonce: nonce","            )","            .update { tokenReserve in","                require(","                    tokenReserve > amount,","                    \"Amount too high\"","                )","                ","                tokenReserve = tokenReserve - amount","            }","    }","}"],"syntax":"swift"},"FlipContractWriteAdminSection3Step3.swift":{"type":"file","syntax":"swift","highlights":[{"line":59}],"fileType":"swift","fileName":"AdminController.swift","content":["import SpaceKit","","@Controller public struct AdminController {","    public func setMinimumBlockBounty(","        value: UInt64","    ) {","        assertOwner()","        ","        require(","            value > 0,","            \"Minimum block bounty should be greater than zero.\"","        )","        ","        var storageController = StorageController()","        storageController.minimumBlockBounty = value","    }","    ","    public func setMaximumBet(","        tokenIdentifier: TokenIdentifier,","        nonce: UInt64,","        amount: BigUint","    ) {","        assertOwner()","        ","        require(","            amount > 0,","            \"Amount should be greater than zero.\"","        )","        ","        StorageController()","            .getMaximumBet(","                tokenIdentifier: tokenIdentifier,","                tokenNonce: nonce","            )","            .set(amount)","    }","    ","    public func setMaximumBetPercent(","        tokenIdentifier: TokenIdentifier,","        nonce: UInt64,","        percent: UInt64","    ) {","        assertOwner()","        ","        require(","            percent > 0,","            \"Percent should be greater than zero.\"","        )","        ","        StorageController()","            .getMaximumBetPercent(","                tokenIdentifier: tokenIdentifier,","                tokenNonce: nonce","            )","            .set(percent)","    }","    ","    public func increaseReserve() {","        assertOwner()","    }","}"],"identifier":"FlipContractWriteAdminSection3Step3.swift"},"doc://SpaceKit/tutorials/SpaceKit/FlipContractWriteTheStorage#Implement-Contract-Storage":{"url":"\/tutorials\/spacekit\/flipcontractwritethestorage#Implement-Contract-Storage","kind":"section","type":"section","role":"pseudoSymbol","title":"Implement Contract Storage","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteTheStorage#Implement-Contract-Storage","abstract":[{"type":"text","text":"With your Flip project initialized, you’re ready to begin implementing the smart contract. The contract is composed of the following components:"}]},"doc://SpaceKit/tutorials/SpaceKit/TokenAttributes#Implementing-the-lockFunds-Endpoint":{"url":"\/tutorials\/spacekit\/tokenattributes#Implementing-the-lockFunds-Endpoint","type":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/TokenAttributes#Implementing-the-lockFunds-Endpoint","kind":"section","abstract":[{"text":"The ESDT standard enables embedding custom data within non-fungible tokens, allowing developers to extend the functionality of their smart contracts. This additional data, referred to as “attributes,” is tied to the token and transfers along with it between wallets.","type":"text"}],"role":"pseudoSymbol","title":"Implementing the lockFunds Endpoint"},"FlipContractWriteAdminSection3Step6.swift":{"identifier":"FlipContractWriteAdminSection3Step6.swift","fileType":"swift","syntax":"swift","highlights":[],"type":"file","fileName":"AdminController.swift","content":["import SpaceKit","","@Controller public struct AdminController {","    public func setMinimumBlockBounty(","        value: UInt64","    ) {","        assertOwner()","        ","        require(","            value > 0,","            \"Minimum block bounty should be greater than zero.\"","        )","        ","        var storageController = StorageController()","        storageController.minimumBlockBounty = value","    }","    ","    public func setMaximumBet(","        tokenIdentifier: TokenIdentifier,","        nonce: UInt64,","        amount: BigUint","    ) {","        assertOwner()","        ","        require(","            amount > 0,","            \"Amount should be greater than zero.\"","        )","        ","        StorageController()","            .getMaximumBet(","                tokenIdentifier: tokenIdentifier,","                tokenNonce: nonce","            )","            .set(amount)","    }","    ","    public func setMaximumBetPercent(","        tokenIdentifier: TokenIdentifier,","        nonce: UInt64,","        percent: UInt64","    ) {","        assertOwner()","        ","        require(","            percent > 0,","            \"Percent should be greater than zero.\"","        )","        ","        StorageController()","            .getMaximumBetPercent(","                tokenIdentifier: tokenIdentifier,","                tokenNonce: nonce","            )","            .set(percent)","    }","    ","    public func increaseReserve() {","        assertOwner()","        ","        let payment = Message.egldOrSingleEsdtTransfer","        ","        require(","            payment.amount > 0,","            \"No payment received.\"","        )","        ","        StorageController()","            .getTokenReserve(","                tokenIdentifier: payment.tokenIdentifier,","                tokenNonce: payment.nonce","            )","            .update { $0 = $0 + payment.amount }","    }","}"]},"FlipContractWriteAdminSection4Step3.swift":{"content":["import SpaceKit","","@Controller public struct AdminController {","    public func setMinimumBlockBounty(","        value: UInt64","    ) {","        assertOwner()","        ","        require(","            value > 0,","            \"Minimum block bounty should be greater than zero.\"","        )","        ","        var storageController = StorageController()","        storageController.minimumBlockBounty = value","    }","    ","    public func setMaximumBet(","        tokenIdentifier: TokenIdentifier,","        nonce: UInt64,","        amount: BigUint","    ) {","        assertOwner()","        ","        require(","            amount > 0,","            \"Amount should be greater than zero.\"","        )","        ","        StorageController()","            .getMaximumBet(","                tokenIdentifier: tokenIdentifier,","                tokenNonce: nonce","            )","            .set(amount)","    }","    ","    public func setMaximumBetPercent(","        tokenIdentifier: TokenIdentifier,","        nonce: UInt64,","        percent: UInt64","    ) {","        assertOwner()","        ","        require(","            percent > 0,","            \"Percent should be greater than zero.\"","        )","        ","        StorageController()","            .getMaximumBetPercent(","                tokenIdentifier: tokenIdentifier,","                tokenNonce: nonce","            )","            .set(percent)","    }","    ","    public func increaseReserve() {","        assertOwner()","        ","        let payment = Message.egldOrSingleEsdtTransfer","        ","        require(","            payment.amount > 0,","            \"No payment received.\"","        )","        ","        StorageController()","            .getTokenReserve(","                tokenIdentifier: payment.tokenIdentifier,","                tokenNonce: payment.nonce","            )","            .update { $0 = $0 + payment.amount }","    }","    ","    public func withdrawReserve(","        tokenIdentifier: TokenIdentifier,","        nonce: UInt64,","        amount: BigUint","    ) {","        assertOwner()","    }","}"],"identifier":"FlipContractWriteAdminSection4Step3.swift","fileName":"AdminController.swift","syntax":"swift","highlights":[{"line":81}],"fileType":"swift","type":"file"},"doc://SpaceKit/tutorials/SpaceKit/GetInfo#Accessing-Transaction-Context-Data":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo#Accessing-Transaction-Context-Data","role":"pseudoSymbol","url":"\/tutorials\/spacekit\/getinfo#Accessing-Transaction-Context-Data","abstract":[{"type":"text","text":"Many smart contracts rely on contextual data to execute their operations effectively. This data can include input payments, the caller’s address, the current time, the balance of a specific account, or even the contract owner."}],"title":"Accessing Transaction Context Data","type":"section","kind":"section"},"doc://SpaceKit/tutorials/SpaceKit/FlipContractWriteTheGame#Define-the-bounty-Endpoint":{"abstract":[{"text":"With the storage and administrative endpoints complete, it’s time to build the core gameplay mechanics.","type":"text"}],"kind":"section","role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteTheGame#Define-the-bounty-Endpoint","type":"section","title":"Define the bounty Endpoint","url":"\/tutorials\/spacekit\/flipcontractwritethegame#Define-the-bounty-Endpoint"},"FlipContractWriteAdminSection1Step4.swift":{"fileType":"swift","type":"file","syntax":"swift","identifier":"FlipContractWriteAdminSection1Step4.swift","fileName":"AdminController.swift","highlights":[{"line":4},{"line":5},{"line":6},{"line":7}],"content":["import SpaceKit","","@Controller public struct AdminController {","    public func setMinimumBlockBounty(","        value: UInt64","    ) {","    }","}"]},"doc://SpaceKit/tutorials/SpaceKit/Deep-Dive-into-SpaceKit-Concepts/Retrieving-Information-from-the-Blockchain":{"type":"topic","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Retrieving-Information-from-the-Blockchain","role":"article","abstract":[],"url":"\/tutorials\/spacekit\/deep-dive-into-spacekit-concepts\/retrieving-information-from-the-blockchain","kind":"article","title":"Retrieving Information from the Blockchain"},"doc://SpaceKit/tutorials/SpaceKit/AsyncCalls#Declare-the-Callee-Proxy":{"url":"\/tutorials\/spacekit\/asynccalls#Declare-the-Callee-Proxy","kind":"section","type":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls#Declare-the-Callee-Proxy","abstract":[{"type":"text","text":"Blockchain platforms using SpaceVM enable seamless execution within a sharded environment. Sharding divides a blockchain’s global state and validation workload into smaller, manageable units known as shards. This method enhances scalability without compromising decentralization, allowing nodes to operate without significant computational resources."}],"title":"Declare the Callee Proxy","role":"pseudoSymbol"},"doc://SpaceKit/tutorials/SpaceKit/Create-and-Manage-Tokens/Enhancing-Contracts-with-Token-Attributes":{"abstract":[],"role":"article","kind":"article","url":"\/tutorials\/spacekit\/create-and-manage-tokens\/enhancing-contracts-with-token-attributes","type":"topic","title":"Enhancing Contracts with Token Attributes","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Create-and-Manage-Tokens\/Enhancing-Contracts-with-Token-Attributes"},"doc://SpaceKit/tutorials/SpaceKit/SyncCalls":{"title":"Interact with Other Contracts","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls","abstract":[{"type":"text","text":"Smart contracts can interact not only with users but also with other smart contracts. This enables more advanced protocols by leveraging existing ones. For example, you could integrate a decentralized exchange directly into your contract to perform token swaps. Decentralized applications often involve multiple contracts, each with a dedicated role, working together to achieve complex functionality—similar to microservices in backend systems."}],"kind":"project","role":"project","estimatedTime":"15min","type":"topic","url":"\/tutorials\/spacekit\/synccalls"},"FlipContractWriteAdminSection2Step2.swift":{"highlights":[{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23}],"type":"file","identifier":"FlipContractWriteAdminSection2Step2.swift","fileName":"AdminController.swift","fileType":"swift","content":["import SpaceKit","","@Controller public struct AdminController {","    public func setMinimumBlockBounty(","        value: UInt64","    ) {","        assertOwner()","        ","        require(","            value > 0,","            \"Minimum block bounty should be greater than zero.\"","        )","        ","        var storageController = StorageController()","        storageController.minimumBlockBounty = value","    }","    ","    public func setMaximumBet(","        tokenIdentifier: TokenIdentifier,","        nonce: UInt64,","        amount: BigUint","    ) {","    }","}"],"syntax":"swift"},"doc://SpaceKit/tutorials/SpaceKit/StoreValues":{"abstract":[{"type":"text","text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory."}],"role":"project","estimatedTime":"15min","kind":"project","url":"\/tutorials\/spacekit\/storevalues","type":"topic","title":"Persist Values Between Executions","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues"},"doc://SpaceKit/tutorials/SpaceKit/Getting-Started/Installing-the-Tools":{"abstract":[],"role":"article","kind":"article","url":"\/tutorials\/spacekit\/getting-started\/installing-the-tools","type":"topic","title":"Installing the Tools","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Getting-Started\/Installing-the-Tools"},"doc://SpaceKit/tutorials/SpaceKit/UnderstandTokens#Issuing-a-Meta-ESDT-from-Your-Contract":{"title":"Issuing a Meta ESDT from Your Contract","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/UnderstandTokens#Issuing-a-Meta-ESDT-from-Your-Contract","abstract":[{"type":"text","text":"Learn about the ESDT standard used in the SpaceKit framework, a token model that supports fungible tokens, non-fungible tokens (NFTs), semi-fungible tokens, and meta-esdt tokens."},{"type":"text","text":" "},{"type":"text","text":"The SpaceKit framework uses a token standard called ESDT. This standard defines four types of tokens: fungible, non-fungible (NFT), semi-fungible, and meta-esdt."}],"kind":"section","role":"pseudoSymbol","type":"section","url":"\/tutorials\/spacekit\/understandtokens#Issuing-a-Meta-ESDT-from-Your-Contract"},"doc://SpaceKit/tutorials/SpaceKit/FlipContractWriteAdmin":{"estimatedTime":"20min","url":"\/tutorials\/spacekit\/flipcontractwriteadmin","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteAdmin","type":"topic","kind":"project","title":"Add Administrative Endpoints to the Flip Contract","role":"project","abstract":[{"text":"Now that your storage is fully set up, it’s time to define the administrative endpoints that allow the contract owner to manage critical values and assets.","type":"text"}]},"doc://SpaceKit/tutorials/SpaceKit/OperationsOnNonFungibleTokens#Create-a-New-Nonce":{"abstract":[{"type":"text","text":"Non-fungible tokens (NFTs) are unique digital assets that cannot be interchanged. Each NFT is associated with a unique identifier, known as a nonce. You can think of it like an airline ticket—each ticket is assigned to a specific passenger, with individual preferences and details."}],"role":"pseudoSymbol","kind":"section","url":"\/tutorials\/spacekit\/operationsonnonfungibletokens#Create-a-New-Nonce","type":"section","title":"Create a New Nonce","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnNonFungibleTokens#Create-a-New-Nonce"},"doc://SpaceKit/tutorials/SpaceKit/FlipContractWriteAdmin#Set-the-Minimum-Block-Bounty-Delay":{"url":"\/tutorials\/spacekit\/flipcontractwriteadmin#Set-the-Minimum-Block-Bounty-Delay","role":"pseudoSymbol","kind":"section","title":"Set the Minimum Block Bounty Delay","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteAdmin#Set-the-Minimum-Block-Bounty-Delay","type":"section","abstract":[{"text":"Now that your storage is fully set up, it’s time to define the administrative endpoints that allow the contract owner to manage critical values and assets.","type":"text"}]},"doc://SpaceKit/tutorials/SpaceKit/Deep-Dive-into-SpaceKit-Concepts/Calling-Contracts-Across-Shards":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Calling-Contracts-Across-Shards","title":"Calling Contracts Across Shards","kind":"article","url":"\/tutorials\/spacekit\/deep-dive-into-spacekit-concepts\/calling-contracts-across-shards","abstract":[],"type":"topic","role":"article"},"doc://SpaceKit/tutorials/SpaceKit/OperationsOnFungibleTokens":{"type":"topic","estimatedTime":"15min","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnFungibleTokens","role":"project","abstract":[{"type":"text","text":"Fungible tokens function similarly to traditional currencies, making them the simplest type of token to work with."}],"url":"\/tutorials\/spacekit\/operationsonfungibletokens","kind":"project","title":"Managing Fungible Tokens"},"doc://SpaceKit/tutorials/SpaceKit/FlipContractInitTests#Declare-Constants-for-the-Test-Environment":{"title":"Declare Constants for the Test Environment","role":"pseudoSymbol","kind":"section","abstract":[{"text":"Smart contracts are permissionless programs that often manage valuable assets. Because of this, writing comprehensive tests for both successful and failure scenarios is essential.","type":"text"}],"type":"section","url":"\/tutorials\/spacekit\/flipcontractinittests#Declare-Constants-for-the-Test-Environment","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractInitTests#Declare-Constants-for-the-Test-Environment"},"doc://SpaceKit/tutorials/SpaceKit/Deep-Dive-into-SpaceKit-Concepts/Interacting-with-Other-Contracts":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Interacting-with-Other-Contracts","title":"Interacting with Other Contracts","kind":"article","url":"\/tutorials\/spacekit\/deep-dive-into-spacekit-concepts\/interacting-with-other-contracts","abstract":[],"type":"topic","role":"article"},"doc://SpaceKit/tutorials/SpaceKit/CodingYourFirstContract#Testing-the-Contract":{"url":"\/tutorials\/spacekit\/codingyourfirstcontract#Testing-the-Contract","role":"pseudoSymbol","kind":"section","title":"Testing the Contract","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Testing-the-Contract","type":"section","abstract":[{"type":"text","text":"In this tutorial, you’ll create a simple smart contract that manages a counter. Users can increment or decrement the counter, and the changes are persisted across contract executions."}]},"doc://SpaceKit/tutorials/SpaceKit/Build-a-Coin-Flip-Contract/Implement-the-Game-Logic-for-the-Flip-Contract":{"title":"Implement the Game Logic for the Flip Contract","role":"article","kind":"article","abstract":[],"type":"topic","url":"\/tutorials\/spacekit\/build-a-coin-flip-contract\/implement-the-game-logic-for-the-flip-contract","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Build-a-Coin-Flip-Contract\/Implement-the-Game-Logic-for-the-Flip-Contract"},"doc://SpaceKit/tutorials/SpaceKit/OperationsOnNonFungibleTokens#Add-Quantity-to-an-Existing-Nonce":{"title":"Add Quantity to an Existing Nonce","role":"pseudoSymbol","kind":"section","abstract":[{"text":"Non-fungible tokens (NFTs) are unique digital assets that cannot be interchanged. Each NFT is associated with a unique identifier, known as a nonce. You can think of it like an airline ticket—each ticket is assigned to a specific passenger, with individual preferences and details.","type":"text"}],"type":"section","url":"\/tutorials\/spacekit\/operationsonnonfungibletokens#Add-Quantity-to-an-Existing-Nonce","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnNonFungibleTokens#Add-Quantity-to-an-Existing-Nonce"},"FlipContractWriteAdminSection3Step4.swift":{"type":"file","identifier":"FlipContractWriteAdminSection3Step4.swift","fileName":"AdminController.swift","fileType":"swift","highlights":[{"line":60},{"line":61}],"syntax":"swift","content":["import SpaceKit","","@Controller public struct AdminController {","    public func setMinimumBlockBounty(","        value: UInt64","    ) {","        assertOwner()","        ","        require(","            value > 0,","            \"Minimum block bounty should be greater than zero.\"","        )","        ","        var storageController = StorageController()","        storageController.minimumBlockBounty = value","    }","    ","    public func setMaximumBet(","        tokenIdentifier: TokenIdentifier,","        nonce: UInt64,","        amount: BigUint","    ) {","        assertOwner()","        ","        require(","            amount > 0,","            \"Amount should be greater than zero.\"","        )","        ","        StorageController()","            .getMaximumBet(","                tokenIdentifier: tokenIdentifier,","                tokenNonce: nonce","            )","            .set(amount)","    }","    ","    public func setMaximumBetPercent(","        tokenIdentifier: TokenIdentifier,","        nonce: UInt64,","        percent: UInt64","    ) {","        assertOwner()","        ","        require(","            percent > 0,","            \"Percent should be greater than zero.\"","        )","        ","        StorageController()","            .getMaximumBetPercent(","                tokenIdentifier: tokenIdentifier,","                tokenNonce: nonce","            )","            .set(percent)","    }","    ","    public func increaseReserve() {","        assertOwner()","        ","        let payment = Message.egldOrSingleEsdtTransfer","    }","}"]}}}