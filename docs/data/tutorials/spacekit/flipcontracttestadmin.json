{"metadata":{"category":"SpaceKit","role":"project","title":"Test the Admin Endpoints","categoryPathComponent":"SpaceKit"},"schemaVersion":{"patch":0,"major":0,"minor":3},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractTestAdmin"},"sections":[{"kind":"hero","title":"Test the Admin Endpoints","estimatedTimeInMinutes":20,"chapter":"Test the Admin Endpoints","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Admin endpoints are critical to the contract’s integrity. They not only control configuration parameters, but also grant access to withdraw the contract’s token reserves."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"It’s important to verify that these endpoints behave as intended and enforce the correct access restrictions."}]}]},{"tasks":[{"contentSection":[{"mediaPosition":"trailing","kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"text":"Admin endpoints are restricted by design and should only be accessible by the contract owner. In the contract implementation, this restriction is enforced using the ","type":"text"},{"code":"assertOwner()","type":"codeVoice"},{"type":"text","text":" function."}]},{"inlineContent":[{"type":"text","text":"In this section, you’ll write tests that ensure these endpoints fail when invoked by a non-owner address."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"You’ll also learn how to handle failed transactions in the SwiftVM and assert against the expected errors.","type":"text"}]}]}],"stepsSection":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Start with the code from the previous chapter."}]}],"media":null,"caption":[],"type":"step","runtimePreview":null,"code":"FlipContractInitTestsSection5Step5.swift"},{"code":"FlipContractTestAdminSection1Step2.swift","media":null,"runtimePreview":null,"caption":[],"type":"step","content":[{"inlineContent":[{"type":"text","text":"Write a test function to confirm that the "},{"type":"codeVoice","code":"setMaximumBet"},{"type":"text","text":" endpoint can only be called by the contract owner."}],"type":"paragraph"}]},{"code":"FlipContractTestAdminSection1Step3.swift","type":"step","media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Call the "},{"type":"codeVoice","code":"initContract"},{"type":"text","text":" helper to deploy the Flip contract."}]}],"caption":[],"runtimePreview":null},{"media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create an instance of the "},{"code":"AdminController","type":"codeVoice"},{"type":"text","text":"."}]}],"caption":[],"runtimePreview":null,"code":"FlipContractTestAdminSection1Step4.swift","type":"step"},{"content":[{"inlineContent":[{"text":"Declare a ","type":"text"},{"code":"do","type":"codeVoice"},{"type":"text","text":"…"},{"code":"catch","type":"codeVoice"},{"type":"text","text":" block to capture errors thrown by restricted access."}],"type":"paragraph"}],"media":null,"code":"FlipContractTestAdminSection1Step5.swift","runtimePreview":null,"type":"step","caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The transaction is expected to fail, and the error will be checked in the "},{"type":"codeVoice","code":"catch"},{"type":"text","text":" block."}]}]},{"code":"FlipContractTestAdminSection1Step6.swift","content":[{"type":"paragraph","inlineContent":[{"text":"Call the ","type":"text"},{"type":"codeVoice","code":"setMaximumBet"},{"text":" endpoint without providing a caller address.","type":"text"}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"By default, the SwiftVM uses the contract’s address as the caller, which is not the owner in this context."}]}],"runtimePreview":null,"type":"step","media":null},{"runtimePreview":null,"code":"FlipContractTestAdminSection1Step7.swift","type":"step","caption":[{"inlineContent":[{"type":"text","text":"This line should never run because the transaction is expected to fail."}],"type":"paragraph"}],"content":[{"type":"paragraph","inlineContent":[{"text":"Insert a call to ","type":"text"},{"code":"XCTFail()","type":"codeVoice"},{"type":"text","text":" after the endpoint call."}]}],"media":null},{"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In the "},{"type":"codeVoice","code":"catch"},{"type":"text","text":" block, confirm that the caught error matches the expected error for unauthorized access."}]}],"media":null,"code":"FlipContractTestAdminSection1Step8.swift","caption":[],"type":"step"},{"type":"step","content":[{"inlineContent":[{"type":"text","text":"Add a similar test for the "},{"type":"codeVoice","code":"setMaximumBetPercent"},{"type":"text","text":" endpoint."}],"type":"paragraph"}],"caption":[],"media":null,"code":"FlipContractTestAdminSection1Step9.swift","runtimePreview":null},{"media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add a similar test for the "},{"type":"codeVoice","code":"increaseReserve"},{"type":"text","text":" endpoint."}]}],"code":"FlipContractTestAdminSection1Step10.swift","runtimePreview":null,"caption":[],"type":"step"},{"type":"step","caption":[],"media":null,"code":"FlipContractTestAdminSection1Step11.swift","runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"Add a similar test for the "},{"type":"codeVoice","code":"withdrawReserve"},{"type":"text","text":" endpoint."}],"type":"paragraph"}]}],"anchor":"Verify-That-Only-the-Owner-Can-Access-Admin-Endpoints","title":"Verify That Only the Owner Can Access Admin Endpoints"},{"contentSection":[{"kind":"contentAndMedia","mediaPosition":"trailing","content":[{"type":"paragraph","inlineContent":[{"text":"In this section, you’ll test the ","type":"text"},{"code":"setMaximumBet","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"setMaximumBetPercent"},{"text":" admin endpoints to ensure they correctly update the contract’s configuration.","type":"text"}]},{"inlineContent":[{"type":"text","text":"These tests are straightforward: you’ll call each endpoint and verify that the corresponding storage values were updated."}],"type":"paragraph"}]}],"stepsSection":[{"caption":[],"media":null,"code":"FlipContractTestAdminSection1Step11.swift","content":[{"inlineContent":[{"text":"Start with the code from the previous section.","type":"text"}],"type":"paragraph"}],"type":"step","runtimePreview":null},{"media":null,"runtimePreview":null,"code":"FlipContractTestAdminSection2Step2.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Write a test to verify that the "},{"type":"codeVoice","code":"setMaximumBet"},{"type":"text","text":" endpoint sets the expected value."}]}],"type":"step","caption":[]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Deploy the contract and instantiate both the "},{"code":"AdminController","type":"codeVoice"},{"type":"text","text":" and the "},{"code":"StorageController","type":"codeVoice"},{"type":"text","text":"."}]}],"code":"FlipContractTestAdminSection2Step3.swift","runtimePreview":null,"media":null,"caption":[],"type":"step"},{"caption":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Reminder:","type":"text"}]},{"type":"text","text":" Make sure to set the owner as the caller of the transaction."}]}],"type":"step","media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Call the "},{"code":"setMaximumBet","type":"codeVoice"},{"text":" endpoint, passing ","type":"text"},{"code":"100","type":"codeVoice"},{"text":" as the new maximum value.","type":"text"}]}],"code":"FlipContractTestAdminSection2Step4.swift","runtimePreview":null},{"type":"step","runtimePreview":null,"content":[{"inlineContent":[{"text":"Read the updated maximum bet value from the storage.","type":"text"}],"type":"paragraph"}],"caption":[],"code":"FlipContractTestAdminSection2Step5.swift","media":null},{"caption":[],"media":null,"runtimePreview":null,"type":"step","code":"FlipContractTestAdminSection2Step6.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Assert that the maximum bet amount is equal to "},{"code":"100","type":"codeVoice"},{"text":".","type":"text"}]}]},{"runtimePreview":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Write a similar test to verify the "},{"code":"setMaximumBetPercent","type":"codeVoice"},{"type":"text","text":" endpoint."}]}],"caption":[],"code":"FlipContractTestAdminSection2Step7.swift","media":null}],"anchor":"Verify-the-Maximum-Bet-Configuration-Endpoints","title":"Verify the Maximum Bet Configuration Endpoints"},{"title":"Test the increaseReserve Endpoint","anchor":"Test-the-increaseReserve-Endpoint","stepsSection":[{"code":"FlipContractTestAdminSection2Step7.swift","runtimePreview":null,"caption":[],"type":"step","media":null,"content":[{"inlineContent":[{"text":"Start with the code from the previous section.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Create a test that confirms ","type":"text"},{"type":"codeVoice","code":"increaseReserve"},{"text":" works as expected for EGLD.","type":"text"}]}],"code":"FlipContractTestAdminSection3Step2.swift","runtimePreview":null,"type":"step","caption":[],"media":null},{"caption":[],"content":[{"inlineContent":[{"type":"text","text":"Deploy the contract and instantiate both the "},{"code":"AdminController","type":"codeVoice"},{"type":"text","text":" and the "},{"code":"StorageController","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}],"media":null,"code":"FlipContractTestAdminSection3Step3.swift","type":"step","runtimePreview":null},{"media":null,"code":"FlipContractTestAdminSection3Step4.swift","runtimePreview":null,"caption":[],"type":"step","content":[{"inlineContent":[{"type":"text","text":"Call the "},{"code":"increaseReserve","type":"codeVoice"},{"type":"text","text":" endpoint, attaching a transfer of "},{"type":"codeVoice","code":"1_000"},{"text":" EGLD.","type":"text"}],"type":"paragraph"}]},{"runtimePreview":null,"caption":[],"media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Read the updated token reserve from contract storage."}]}],"type":"step","code":"FlipContractTestAdminSection3Step5.swift"},{"type":"step","caption":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Important:","type":"text"}]},{"text":" This method returns the account’s state at the moment it is called. Call it again after any transaction to retrieve the most up-to-date values.","type":"text"}],"type":"paragraph"}],"runtimePreview":null,"media":null,"code":"FlipContractTestAdminSection3Step6.swift","content":[{"type":"paragraph","inlineContent":[{"text":"Retrieve the Flip contract’s EGLD balance using the ","type":"text"},{"code":"self.getAccount","type":"codeVoice"},{"type":"text","text":" method."}]}]},{"media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Verify that both the stored token reserve and the contract’s balance equal "},{"code":"1_000","type":"codeVoice"},{"text":".","type":"text"}]}],"runtimePreview":null,"code":"FlipContractTestAdminSection3Step7.swift","caption":[],"type":"step"},{"code":"FlipContractTestAdminSection3Step8.swift","runtimePreview":null,"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Focus on how the USDC token is transferred and how the contract’s USDC balance is retrieved."}]}],"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a similar test to verify the "},{"code":"increaseReserve","type":"codeVoice"},{"text":" behavior for USDC.","type":"text"}]}],"media":null}],"contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"text":"In this section, you’ll verify that the ","type":"text"},{"code":"increaseReserve","type":"codeVoice"},{"type":"text","text":" endpoint functions correctly."}]},{"type":"paragraph","inlineContent":[{"text":"Specifically, you’ll check that after calling this endpoint, both the contract’s internal token reserve and its on-chain balance reflect the increase.","type":"text"}]},{"inlineContent":[{"type":"text","text":"You’ll test this behavior for both EGLD and USDC tokens."}],"type":"paragraph"}],"mediaPosition":"trailing"}]},{"stepsSection":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Begin with the code from the previous section.","type":"text"}]}],"runtimePreview":null,"media":null,"code":"FlipContractTestAdminSection3Step8.swift","type":"step","caption":[]},{"media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Write a test to confirm that the ","type":"text"},{"code":"withdrawReserve","type":"codeVoice"},{"text":" endpoint functions correctly for EGLD.","type":"text"}]}],"caption":[],"type":"step","code":"FlipContractTestAdminSection4Step2.swift","runtimePreview":null},{"runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"Deploy the contract and configure it using "},{"code":"initContract","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"setupEgld"},{"type":"text","text":"."}],"type":"paragraph"}],"caption":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Reminder:"}]},{"text":" The ","type":"text"},{"type":"codeVoice","code":"setupEgld"},{"type":"text","text":" helper funds the EGLD reserve with "},{"type":"codeVoice","code":"100_000_000"},{"type":"text","text":"."}],"type":"paragraph"}],"type":"step","media":null,"code":"FlipContractTestAdminSection4Step3.swift"},{"caption":[],"media":null,"code":"FlipContractTestAdminSection4Step4.swift","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Instantiate both the ","type":"text"},{"code":"AdminController","type":"codeVoice"},{"type":"text","text":" and the "},{"code":"StorageController","type":"codeVoice"},{"type":"text","text":"."}]}],"type":"step"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Call the "},{"type":"codeVoice","code":"withdrawReserve"},{"type":"text","text":" endpoint to withdraw "},{"code":"10_000_000","type":"codeVoice"},{"text":" EGLD from the reserve.","type":"text"}]}],"type":"step","code":"FlipContractTestAdminSection4Step5.swift","media":null,"caption":[],"runtimePreview":null},{"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Retrieve the updated EGLD token reserve, and the EGLD balances of both the contract and the owner.","type":"text"}]}],"caption":[],"type":"step","media":null,"code":"FlipContractTestAdminSection4Step6.swift"},{"media":null,"code":"FlipContractTestAdminSection4Step7.swift","content":[{"inlineContent":[{"text":"Verify that the token reserve and contract EGLD balance are now ","type":"text"},{"type":"codeVoice","code":"90_000_000"},{"text":", and the owner’s EGLD balance is ","type":"text"},{"type":"codeVoice","code":"10_000_000"}],"type":"paragraph"}],"runtimePreview":null,"type":"step","caption":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"Note:"}],"type":"strong"},{"text":" The owner was initially funded with ","type":"text"},{"type":"codeVoice","code":"100_000_000"},{"type":"text","text":" EGLD. During "},{"code":"setupEgld","type":"codeVoice"},{"type":"text","text":", that full amount was transferred to the contract, reducing the owner’s balance to "},{"code":"0","type":"codeVoice"},{"type":"text","text":". After the "},{"type":"codeVoice","code":"withdrawReserve"},{"type":"text","text":" call, the owner regains "},{"type":"codeVoice","code":"10_000_000"},{"text":".","type":"text"}],"type":"paragraph"}]},{"type":"step","runtimePreview":null,"media":null,"code":"FlipContractTestAdminSection4Step8.swift","caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Write a similar test to verify the "},{"type":"codeVoice","code":"withdrawReserve"},{"type":"text","text":" endpoint works with USDC."}]}]}],"title":"Test the withdrawReserve Endpoint","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"text":"In this section, you’ll verify the behavior of the ","type":"text"},{"code":"withdrawReserve","type":"codeVoice"},{"text":" endpoint.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Specifically, you’ll ensure that after calling the endpoint, both the contract’s internal token reserve and its actual balance decrease appropriately.","type":"text"}]},{"inlineContent":[{"text":"You’ll perform this verification for both EGLD and USDC tokens.","type":"text"}],"type":"paragraph"}],"mediaPosition":"trailing"}],"anchor":"Test-the-withdrawReserve-Endpoint"}],"kind":"tasks"},{"featuredEyebrow":"Tutorial","title":"Test the Game Logic for the Flip Contract","abstract":[{"text":"This final chapter of the testing tutorial focuses on validating the core game logic implemented in the ","type":"text"},{"code":"GameController","type":"codeVoice"},{"text":".","type":"text"}],"kind":"callToAction","action":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractTestTheGame","overridingTitle":"Get started","overridingTitleInlineContent":[{"text":"Get started","type":"text"}],"isActive":true,"type":"reference"}}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/tutorials\/spacekit\/flipcontracttestadmin"]}],"hierarchy":{"paths":[["doc:\/\/SpaceKit\/tutorials\/SpaceKit","doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Build-a-Coin-Flip-Contract","doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Build-a-Coin-Flip-Contract\/Test-the-Admin-Endpoints"]],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit","modules":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Getting-Started\/Installing-the-Tools","projects":[{"sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Installing-SpaceKits-Dependencies","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Setting-Up-the-SpaceKit-CLI","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract","kind":"task"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools"}]},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Getting-Started\/Building-Your-First-Smart-Contract","projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract","sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Initializing-the-Project","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Writing-the-Contract-Code"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Testing-the-Contract","kind":"task"}]}]},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Exploring-SpaceKit's-Types","projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes","sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Understanding-the-Buffer-Type"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Working-with-the-BigUint-Type"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Working-with-the-Vector-Type","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Creating-Your-Own-Types","kind":"task"}]}]},{"projects":[{"sections":[{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues#Working-with-Storage-for-Single-Value-Persistence"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Persisting-Data-Across-Executions"},{"projects":[{"sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo#Accessing-Transaction-Context-Data","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo#Accessing-Blockchain-Context-Data","kind":"task"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Retrieving-Information-from-the-Blockchain"},{"projects":[{"sections":[{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls#Declare-the-Callee-Proxy"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls#Perform-a-Synchronous-Call"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Interacting-with-Other-Contracts"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Calling-Contracts-Across-Shards","projects":[{"sections":[{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls#Declare-the-Callee-Proxy"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls#Perform-an-Asynchronous-Call"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls"}]},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Create-and-Manage-Tokens\/Creating-and-Understanding-Tokens","projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/UnderstandTokens","sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/UnderstandTokens#Issuing-a-Fungible-Token-from-Your-Contract","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/UnderstandTokens#Issuing-a-Non-Fungible-Token-from-Your-Contract","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/UnderstandTokens#Issuing-a-Semi-Fungible-Token-from-Your-Contract"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/UnderstandTokens#Issuing-a-Meta-ESDT-from-Your-Contract","kind":"task"}]}]},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Create-and-Manage-Tokens\/Managing-Fungible-Tokens","projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnFungibleTokens","sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnFungibleTokens#Assign-Mint-and-Burn-Roles","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnFungibleTokens#Mint-New-Tokens"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnFungibleTokens#Burn-Tokens","kind":"task"}]}]},{"projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnNonFungibleTokens","sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnNonFungibleTokens#Assign-Create-AddQuantity-and-Burn-Roles","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnNonFungibleTokens#Create-a-New-Nonce"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnNonFungibleTokens#Add-Quantity-to-an-Existing-Nonce","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnNonFungibleTokens#Burn-Tokens"}]}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Create-and-Manage-Tokens\/Managing-Non-Fungible-Tokens"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Create-and-Manage-Tokens\/Enhancing-Contracts-with-Token-Attributes","projects":[{"sections":[{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/TokenAttributes#Implementing-the-lockFunds-Endpoint"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/TokenAttributes#Implementing-the-unlockFunds-Endpoint"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/TokenAttributes#Implementing-the-changeTokenLockDuration-Endpoint"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/TokenAttributes"}]},{"projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractIntro","sections":[{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractIntro#Set-Up-the-Project"}]}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Build-a-Coin-Flip-Contract\/Build-a-Coin-Flip-Smart-Contract"},{"projects":[{"sections":[{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteTheStorage#Define-the-Flip-Structure"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteTheStorage#Implement-Contract-Storage","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteTheStorage#Define-the-Contract-Init"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteTheStorage"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Build-a-Coin-Flip-Contract\/Define-the-Storage-for-the-Flip-Contract"},{"projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteAdmin","sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteAdmin#Set-the-Minimum-Block-Bounty-Delay","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteAdmin#Set-Maximum-Bet-Limits","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteAdmin#Increase-Contract-Reserves","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteAdmin#Withdraw-Contract-Reserves","kind":"task"}]}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Build-a-Coin-Flip-Contract\/Add-Administrative-Endpoints-to-the-Flip-Contract"},{"projects":[{"sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteTheGame#Implement-the-flip-Endpoint","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteTheGame#Implement-the-makeFlip-Function","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteTheGame#Define-the-bounty-Endpoint"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteTheGame"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Build-a-Coin-Flip-Contract\/Implement-the-Game-Logic-for-the-Flip-Contract"},{"projects":[{"sections":[{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractInitTests#Set-Up-the-Test-Project"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractInitTests#Declare-Constants-for-the-Test-Environment"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractInitTests#Configure-the-Initial-Blockchain-State","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractInitTests#Create-Helper-Functions-to-Deploy-and-Configure-the-Contract","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractInitTests#Write-Tests-for-the-Setup-Helpers","kind":"task"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractInitTests"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Build-a-Coin-Flip-Contract\/Set-Up-Testing-in-the-SwiftVM"},{"projects":[{"sections":[{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractTestAdmin#Verify-That-Only-the-Owner-Can-Access-Admin-Endpoints"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractTestAdmin#Verify-the-Maximum-Bet-Configuration-Endpoints"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractTestAdmin#Test-the-increaseReserve-Endpoint"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractTestAdmin#Test-the-withdrawReserve-Endpoint"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractTestAdmin"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Build-a-Coin-Flip-Contract\/Test-the-Admin-Endpoints"},{"projects":[{"sections":[{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractTestTheGame#Create-Utility-Functions-for-flip-and-bounty"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractTestTheGame#Test-Failure-Cases-for-the-flip-Endpoint","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractTestTheGame#Test-Successful-Calls-to-the-flip-Endpoint","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractTestTheGame#Test-Failure-Case-for-the-bounty-Endpoint"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractTestTheGame#Test-the-bounty-Endpoint"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractTestTheGame"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Build-a-Coin-Flip-Contract\/Test-the-Game-Logic-for-the-Flip-Contract"}]},"kind":"project","references":{"doc://SpaceKit/tutorials/SpaceKit/FlipContractWriteTheStorage":{"title":"Define the Storage for the Flip Contract","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteTheStorage","abstract":[{"type":"text","text":"With your Flip project initialized, you’re ready to begin implementing the smart contract. The contract is composed of the following components:"}],"kind":"project","role":"project","estimatedTime":"20min","type":"topic","url":"\/tutorials\/spacekit\/flipcontractwritethestorage"},"doc://SpaceKit/tutorials/SpaceKit/CodingYourFirstContract#Testing-the-Contract":{"url":"\/tutorials\/spacekit\/codingyourfirstcontract#Testing-the-Contract","role":"pseudoSymbol","kind":"section","title":"Testing the Contract","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Testing-the-Contract","type":"section","abstract":[{"type":"text","text":"In this tutorial, you’ll create a simple smart contract that manages a counter. Users can increment or decrement the counter, and the changes are persisted across contract executions."}]},"doc://SpaceKit/tutorials/SpaceKit/FlipContractIntro":{"type":"topic","url":"\/tutorials\/spacekit\/flipcontractintro","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractIntro","estimatedTime":"20min","role":"project","kind":"project","title":"Build a Coin Flip Smart Contract","abstract":[{"text":"In this tutorial, you’ll write and test a complete smart contract that relies on random number generation to implement a coin flip mechanic. Players wager a chosen amount of any token and face a 50% chance of doubling their bet—or losing it. A small fee is deducted from each wager and sent to the developer’s wallet.","type":"text"}]},"doc://SpaceKit/tutorials/SpaceKit/FlipContractWriteTheStorage#Define-the-Contract-Init":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteTheStorage#Define-the-Contract-Init","role":"pseudoSymbol","url":"\/tutorials\/spacekit\/flipcontractwritethestorage#Define-the-Contract-Init","abstract":[{"type":"text","text":"With your Flip project initialized, you’re ready to begin implementing the smart contract. The contract is composed of the following components:"}],"title":"Define the Contract Init","type":"section","kind":"section"},"FlipContractTestAdminSection2Step5.swift":{"highlights":[{"line":79},{"line":80},{"line":81},{"line":82},{"line":83}],"fileType":"swift","syntax":"swift","content":["import SpaceKitTesting","import Flip","","private let PLAYER_ADDRESS = \"player\"","private let BOUNTY_ADDRESS = \"bounty\"","private let OWNER_ADDRESS = \"owner\"","private let CONTRACT_ADDRESS = \"contract\"","private let USDC_TOKEN_IDENTIFIER_STRING = \"USDC-abcdef\"","private var USDC_TOKEN_IDENTIFIER: TokenIdentifier {","    \"\\(USDC_TOKEN_IDENTIFIER_STRING)\"","}","","final class FlipTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: PLAYER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: BOUNTY_ADDRESS,","                balance: 0","            ),","            WorldAccount(","                address: OWNER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: CONTRACT_ADDRESS,","                balance: 0,","                controllers: [","                    AdminController.self,","                    GameController.self,","                    StorageController.self","                ]","            )","        ]","    }","    ","    func testInitEgld() throws {","        try self.initContract()","        try self.setupEgld()","    }","    ","    func testInitUsdc() throws {","        try self.initContract()","        try self.setupUsdc()","    }","    ","    func testSetMaximumBet() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBet = try storageController.getMaximumBet(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","    }","    ","    func testSetMaximumBetNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBet(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testSetMaximumBetPercentNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBetPercent(","                tokenIdentifier: .egld,","                nonce: 0,","                percent: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testIncreaseReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.increaseReserve()","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testWithdrawReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.withdrawReserve(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 100","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    private func initContract() throws {","        try self.deployContract(","            at: CONTRACT_ADDRESS,","            arguments: [","               500,","               100,","               1","            ],","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","    }","    ","    private func setupEgld() throws {","        let adminController = self.instantiateController(","            AdminController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 100_000_000","            )","        )","    }","    ","    private func setupUsdc() throws {","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 100_000_000","                    )","                ]","            )","        )","    }","}"],"identifier":"FlipContractTestAdminSection2Step5.swift","fileName":"FlipTest.swift","type":"file"},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Understanding-the-Buffer-Type":{"title":"Understanding the Buffer Type","role":"pseudoSymbol","kind":"section","abstract":[{"type":"text","text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM."}],"type":"section","url":"\/tutorials\/spacekit\/familiarizewithtypes#Understanding-the-Buffer-Type","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Understanding-the-Buffer-Type"},"doc://SpaceKit/tutorials/SpaceKit/SyncCalls#Perform-a-Synchronous-Call":{"kind":"section","abstract":[{"text":"Smart contracts can interact not only with users but also with other smart contracts. This enables more advanced protocols by leveraging existing ones. For example, you could integrate a decentralized exchange directly into your contract to perform token swaps. Decentralized applications often involve multiple contracts, each with a dedicated role, working together to achieve complex functionality—similar to microservices in backend systems.","type":"text"}],"type":"section","url":"\/tutorials\/spacekit\/synccalls#Perform-a-Synchronous-Call","role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls#Perform-a-Synchronous-Call","title":"Perform a Synchronous Call"},"doc://SpaceKit/tutorials/SpaceKit/Deep-Dive-into-SpaceKit-Concepts/Persisting-Data-Across-Executions":{"title":"Persisting Data Across Executions","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Persisting-Data-Across-Executions","type":"topic","abstract":[],"kind":"article","role":"article","url":"\/tutorials\/spacekit\/deep-dive-into-spacekit-concepts\/persisting-data-across-executions"},"doc://SpaceKit/tutorials/SpaceKit/Create-and-Manage-Tokens/Managing-Fungible-Tokens":{"url":"\/tutorials\/spacekit\/create-and-manage-tokens\/managing-fungible-tokens","type":"topic","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Create-and-Manage-Tokens\/Managing-Fungible-Tokens","kind":"article","abstract":[],"role":"article","title":"Managing Fungible Tokens"},"doc://SpaceKit/tutorials/SpaceKit/FlipContractWriteAdmin#Increase-Contract-Reserves":{"url":"\/tutorials\/spacekit\/flipcontractwriteadmin#Increase-Contract-Reserves","type":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteAdmin#Increase-Contract-Reserves","kind":"section","abstract":[{"type":"text","text":"Now that your storage is fully set up, it’s time to define the administrative endpoints that allow the contract owner to manage critical values and assets."}],"role":"pseudoSymbol","title":"Increase Contract Reserves"},"doc://SpaceKit/tutorials/SpaceKit/InstallingTools":{"title":"Install the Necessary Tools","estimatedTime":"10min","url":"\/tutorials\/spacekit\/installingtools","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools","abstract":[{"text":"Before writing your first smart contract with SpaceKit, ensure you have the necessary tools installed.","type":"text"}],"role":"project","kind":"project","type":"topic"},"doc://SpaceKit/tutorials/SpaceKit/FlipContractWriteTheGame#Define-the-bounty-Endpoint":{"abstract":[{"text":"With the storage and administrative endpoints complete, it’s time to build the core gameplay mechanics.","type":"text"}],"kind":"section","role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteTheGame#Define-the-bounty-Endpoint","type":"section","title":"Define the bounty Endpoint","url":"\/tutorials\/spacekit\/flipcontractwritethegame#Define-the-bounty-Endpoint"},"doc://SpaceKit/tutorials/SpaceKit/StoreValues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage","url":"\/tutorials\/spacekit\/storevalues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage","role":"pseudoSymbol","type":"section","kind":"section","abstract":[{"text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory.","type":"text"}],"title":"Leveraging @Mapping for Dynamic Key-Value Storage"},"doc://SpaceKit/tutorials/SpaceKit/SyncCalls":{"title":"Interact with Other Contracts","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls","abstract":[{"type":"text","text":"Smart contracts can interact not only with users but also with other smart contracts. This enables more advanced protocols by leveraging existing ones. For example, you could integrate a decentralized exchange directly into your contract to perform token swaps. Decentralized applications often involve multiple contracts, each with a dedicated role, working together to achieve complex functionality—similar to microservices in backend systems."}],"kind":"project","role":"project","estimatedTime":"15min","type":"topic","url":"\/tutorials\/spacekit\/synccalls"},"doc://SpaceKit/tutorials/SpaceKit/GetInfo#Accessing-Blockchain-Context-Data":{"abstract":[{"type":"text","text":"Many smart contracts rely on contextual data to execute their operations effectively. This data can include input payments, the caller’s address, the current time, the balance of a specific account, or even the contract owner."}],"url":"\/tutorials\/spacekit\/getinfo#Accessing-Blockchain-Context-Data","role":"pseudoSymbol","title":"Accessing Blockchain Context Data","kind":"section","type":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo#Accessing-Blockchain-Context-Data"},"doc://SpaceKit/tutorials/SpaceKit/FlipContractWriteTheGame#Implement-the-flip-Endpoint":{"kind":"section","abstract":[{"type":"text","text":"With the storage and administrative endpoints complete, it’s time to build the core gameplay mechanics."}],"type":"section","url":"\/tutorials\/spacekit\/flipcontractwritethegame#Implement-the-flip-Endpoint","role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteTheGame#Implement-the-flip-Endpoint","title":"Implement the flip Endpoint"},"doc://SpaceKit/tutorials/SpaceKit/GetInfo":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo","role":"project","url":"\/tutorials\/spacekit\/getinfo","abstract":[{"type":"text","text":"Many smart contracts rely on contextual data to execute their operations effectively. This data can include input payments, the caller’s address, the current time, the balance of a specific account, or even the contract owner."}],"title":"Retrieving Information from the Blockchain","type":"topic","estimatedTime":"10min","kind":"project"},"doc://SpaceKit/tutorials/SpaceKit/Create-and-Manage-Tokens/Creating-and-Understanding-Tokens":{"url":"\/tutorials\/spacekit\/create-and-manage-tokens\/creating-and-understanding-tokens","kind":"article","type":"topic","role":"article","title":"Creating and Understanding Tokens","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Create-and-Manage-Tokens\/Creating-and-Understanding-Tokens","abstract":[]},"doc://SpaceKit/tutorials/SpaceKit/Deep-Dive-into-SpaceKit-Concepts/Interacting-with-Other-Contracts":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Interacting-with-Other-Contracts","title":"Interacting with Other Contracts","kind":"article","url":"\/tutorials\/spacekit\/deep-dive-into-spacekit-concepts\/interacting-with-other-contracts","abstract":[],"type":"topic","role":"article"},"doc://SpaceKit/tutorials/SpaceKit/Create-and-Manage-Tokens/Managing-Non-Fungible-Tokens":{"url":"\/tutorials\/spacekit\/create-and-manage-tokens\/managing-non-fungible-tokens","kind":"article","type":"topic","role":"article","title":"Managing Non-Fungible Tokens","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Create-and-Manage-Tokens\/Managing-Non-Fungible-Tokens","abstract":[]},"doc://SpaceKit/tutorials/SpaceKit/GetInfo#Accessing-Transaction-Context-Data":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo#Accessing-Transaction-Context-Data","role":"pseudoSymbol","url":"\/tutorials\/spacekit\/getinfo#Accessing-Transaction-Context-Data","abstract":[{"type":"text","text":"Many smart contracts rely on contextual data to execute their operations effectively. This data can include input payments, the caller’s address, the current time, the balance of a specific account, or even the contract owner."}],"title":"Accessing Transaction Context Data","type":"section","kind":"section"},"doc://SpaceKit/tutorials/SpaceKit/FlipContractWriteTheStorage#Define-the-Flip-Structure":{"abstract":[{"type":"text","text":"With your Flip project initialized, you’re ready to begin implementing the smart contract. The contract is composed of the following components:"}],"url":"\/tutorials\/spacekit\/flipcontractwritethestorage#Define-the-Flip-Structure","role":"pseudoSymbol","title":"Define the Flip Structure","kind":"section","type":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteTheStorage#Define-the-Flip-Structure"},"doc://SpaceKit/tutorials/SpaceKit/FlipContractInitTests#Declare-Constants-for-the-Test-Environment":{"title":"Declare Constants for the Test Environment","role":"pseudoSymbol","kind":"section","abstract":[{"text":"Smart contracts are permissionless programs that often manage valuable assets. Because of this, writing comprehensive tests for both successful and failure scenarios is essential.","type":"text"}],"type":"section","url":"\/tutorials\/spacekit\/flipcontractinittests#Declare-Constants-for-the-Test-Environment","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractInitTests#Declare-Constants-for-the-Test-Environment"},"FlipContractTestAdminSection3Step2.swift":{"type":"file","content":["import SpaceKitTesting","import Flip","","private let PLAYER_ADDRESS = \"player\"","private let BOUNTY_ADDRESS = \"bounty\"","private let OWNER_ADDRESS = \"owner\"","private let CONTRACT_ADDRESS = \"contract\"","private let USDC_TOKEN_IDENTIFIER_STRING = \"USDC-abcdef\"","private var USDC_TOKEN_IDENTIFIER: TokenIdentifier {","    \"\\(USDC_TOKEN_IDENTIFIER_STRING)\"","}","","final class FlipTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: PLAYER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: BOUNTY_ADDRESS,","                balance: 0","            ),","            WorldAccount(","                address: OWNER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: CONTRACT_ADDRESS,","                balance: 0,","                controllers: [","                    AdminController.self,","                    GameController.self,","                    StorageController.self","                ]","            )","        ]","    }","    ","    func testInitEgld() throws {","        try self.initContract()","        try self.setupEgld()","    }","    ","    func testInitUsdc() throws {","        try self.initContract()","        try self.setupUsdc()","    }","    ","    func testSetMaximumBet() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBet = try storageController.getMaximumBet(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBet, 100)","    }","    ","    func testSetMaximumBetPercent() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBetPercent = try storageController.getMaximumBetPercent(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBetPercent, 100)","    }","    ","    func testIncreaseEgldReserve() throws {","    }","    ","    func testSetMaximumBetNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBet(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testSetMaximumBetPercentNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBetPercent(","                tokenIdentifier: .egld,","                nonce: 0,","                percent: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testIncreaseReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.increaseReserve()","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testWithdrawReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.withdrawReserve(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 100","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    private func initContract() throws {","        try self.deployContract(","            at: CONTRACT_ADDRESS,","            arguments: [","               500,","               100,","               1","            ],","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","    }","    ","    private func setupEgld() throws {","        let adminController = self.instantiateController(","            AdminController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 100_000_000","            )","        )","    }","    ","    private func setupUsdc() throws {","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 100_000_000","                    )","                ]","            )","        )","    }","}"],"syntax":"swift","fileName":"FlipTest.swift","fileType":"swift","identifier":"FlipContractTestAdminSection3Step2.swift","highlights":[{"line":110},{"line":111},{"line":112}]},"doc://SpaceKit/tutorials/SpaceKit/UnderstandTokens#Issuing-a-Fungible-Token-from-Your-Contract":{"url":"\/tutorials\/spacekit\/understandtokens#Issuing-a-Fungible-Token-from-Your-Contract","role":"pseudoSymbol","abstract":[{"type":"text","text":"Learn about the ESDT standard used in the SpaceKit framework, a token model that supports fungible tokens, non-fungible tokens (NFTs), semi-fungible tokens, and meta-esdt tokens."},{"type":"text","text":" "},{"text":"The SpaceKit framework uses a token standard called ESDT. This standard defines four types of tokens: fungible, non-fungible (NFT), semi-fungible, and meta-esdt.","type":"text"}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/UnderstandTokens#Issuing-a-Fungible-Token-from-Your-Contract","type":"section","title":"Issuing a Fungible Token from Your Contract","kind":"section"},"doc://SpaceKit/tutorials/SpaceKit/Build-a-Coin-Flip-Contract/Add-Administrative-Endpoints-to-the-Flip-Contract":{"url":"\/tutorials\/spacekit\/build-a-coin-flip-contract\/add-administrative-endpoints-to-the-flip-contract","type":"topic","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Build-a-Coin-Flip-Contract\/Add-Administrative-Endpoints-to-the-Flip-Contract","kind":"article","abstract":[],"role":"article","title":"Add Administrative Endpoints to the Flip Contract"},"doc://SpaceKit/tutorials/SpaceKit/FlipContractWriteTheGame":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteTheGame","estimatedTime":"20min","abstract":[{"type":"text","text":"With the storage and administrative endpoints complete, it’s time to build the core gameplay mechanics."}],"role":"project","title":"Implement the Game Logic for the Flip Contract","kind":"project","url":"\/tutorials\/spacekit\/flipcontractwritethegame","type":"topic"},"doc://SpaceKit/tutorials/SpaceKit/OperationsOnFungibleTokens#Burn-Tokens":{"url":"\/tutorials\/spacekit\/operationsonfungibletokens#Burn-Tokens","kind":"section","type":"section","role":"pseudoSymbol","title":"Burn Tokens","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnFungibleTokens#Burn-Tokens","abstract":[{"text":"Fungible tokens function similarly to traditional currencies, making them the simplest type of token to work with.","type":"text"}]},"FlipContractTestAdminSection1Step8.swift":{"highlights":[{"line":79}],"fileType":"swift","syntax":"swift","content":["import SpaceKitTesting","import Flip","","private let PLAYER_ADDRESS = \"player\"","private let BOUNTY_ADDRESS = \"bounty\"","private let OWNER_ADDRESS = \"owner\"","private let CONTRACT_ADDRESS = \"contract\"","private let USDC_TOKEN_IDENTIFIER_STRING = \"USDC-abcdef\"","private var USDC_TOKEN_IDENTIFIER: TokenIdentifier {","    \"\\(USDC_TOKEN_IDENTIFIER_STRING)\"","}","","final class FlipTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: PLAYER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: BOUNTY_ADDRESS,","                balance: 0","            ),","            WorldAccount(","                address: OWNER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: CONTRACT_ADDRESS,","                balance: 0,","                controllers: [","                    AdminController.self,","                    GameController.self,","                    StorageController.self","                ]","            )","        ]","    }","    ","    func testInitEgld() throws {","        try self.initContract()","        try self.setupEgld()","    }","    ","    func testInitUsdc() throws {","        try self.initContract()","        try self.setupUsdc()","    }","    ","    func testSetMaximumBetNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBet(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    private func initContract() throws {","        try self.deployContract(","            at: CONTRACT_ADDRESS,","            arguments: [","               500,","               100,","               1","            ],","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","    }","    ","    private func setupEgld() throws {","        let adminController = self.instantiateController(","            AdminController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 100_000_000","            )","        )","    }","    ","    private func setupUsdc() throws {","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 100_000_000","                    )","                ]","            )","        )","    }","}"],"identifier":"FlipContractTestAdminSection1Step8.swift","fileName":"FlipTest.swift","type":"file"},"doc://SpaceKit/tutorials/SpaceKit/FlipContractTestTheGame#Test-Failure-Cases-for-the-flip-Endpoint":{"url":"\/tutorials\/spacekit\/flipcontracttestthegame#Test-Failure-Cases-for-the-flip-Endpoint","type":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractTestTheGame#Test-Failure-Cases-for-the-flip-Endpoint","abstract":[{"type":"text","text":"This final chapter of the testing tutorial focuses on validating the core game logic implemented in the "},{"code":"GameController","type":"codeVoice"},{"text":".","type":"text"}],"kind":"section","title":"Test Failure Cases for the flip Endpoint","role":"pseudoSymbol"},"doc://SpaceKit/tutorials/SpaceKit/FlipContractInitTests#Write-Tests-for-the-Setup-Helpers":{"type":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractInitTests#Write-Tests-for-the-Setup-Helpers","role":"pseudoSymbol","abstract":[{"type":"text","text":"Smart contracts are permissionless programs that often manage valuable assets. Because of this, writing comprehensive tests for both successful and failure scenarios is essential."}],"url":"\/tutorials\/spacekit\/flipcontractinittests#Write-Tests-for-the-Setup-Helpers","kind":"section","title":"Write Tests for the Setup Helpers"},"FlipContractTestAdminSection4Step2.swift":{"type":"file","content":["import SpaceKitTesting","import Flip","","private let PLAYER_ADDRESS = \"player\"","private let BOUNTY_ADDRESS = \"bounty\"","private let OWNER_ADDRESS = \"owner\"","private let CONTRACT_ADDRESS = \"contract\"","private let USDC_TOKEN_IDENTIFIER_STRING = \"USDC-abcdef\"","private var USDC_TOKEN_IDENTIFIER: TokenIdentifier {","    \"\\(USDC_TOKEN_IDENTIFIER_STRING)\"","}","","final class FlipTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: PLAYER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: BOUNTY_ADDRESS,","                balance: 0","            ),","            WorldAccount(","                address: OWNER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: CONTRACT_ADDRESS,","                balance: 0,","                controllers: [","                    AdminController.self,","                    GameController.self,","                    StorageController.self","                ]","            )","        ]","    }","    ","    func testInitEgld() throws {","        try self.initContract()","        try self.setupEgld()","    }","    ","    func testInitUsdc() throws {","        try self.initContract()","        try self.setupUsdc()","    }","    ","    func testSetMaximumBet() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBet = try storageController.getMaximumBet(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBet, 100)","    }","    ","    func testSetMaximumBetPercent() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBetPercent = try storageController.getMaximumBetPercent(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBetPercent, 100)","    }","    ","    func testIncreaseEgldReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 1_000","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        ","        XCTAssertEqual(tokenReserve, 1_000)","        XCTAssertEqual(contractBalance, 1_000)","    }","    ","    func testIncreaseUsdcReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 1_000","                    )","                ]","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        ","        XCTAssertEqual(tokenReserve, 1_000)","        XCTAssertEqual(contractBalance, 1_000)","    }","    ","    func testWithdrawEgldReserve() throws {","    }","    ","    func testSetMaximumBetNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBet(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testSetMaximumBetPercentNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBetPercent(","                tokenIdentifier: .egld,","                nonce: 0,","                percent: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testIncreaseReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.increaseReserve()","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testWithdrawReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.withdrawReserve(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 100","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    private func initContract() throws {","        try self.deployContract(","            at: CONTRACT_ADDRESS,","            arguments: [","               500,","               100,","               1","            ],","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","    }","    ","    private func setupEgld() throws {","        let adminController = self.instantiateController(","            AdminController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 100_000_000","            )","        )","    }","    ","    private func setupUsdc() throws {","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 100_000_000","                    )","                ]","            )","        )","    }","}"],"syntax":"swift","fileName":"FlipTest.swift","fileType":"swift","identifier":"FlipContractTestAdminSection4Step2.swift","highlights":[{"line":164},{"line":165},{"line":166}]},"doc://SpaceKit/tutorials/SpaceKit/TokenAttributes#Implementing-the-unlockFunds-Endpoint":{"type":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/TokenAttributes#Implementing-the-unlockFunds-Endpoint","url":"\/tutorials\/spacekit\/tokenattributes#Implementing-the-unlockFunds-Endpoint","title":"Implementing the unlockFunds Endpoint","kind":"section","abstract":[{"text":"The ESDT standard enables embedding custom data within non-fungible tokens, allowing developers to extend the functionality of their smart contracts. This additional data, referred to as “attributes,” is tied to the token and transfers along with it between wallets.","type":"text"}],"role":"pseudoSymbol"},"FlipContractInitTestsSection5Step5.swift":{"type":"file","content":["import SpaceKitTesting","import Flip","","private let PLAYER_ADDRESS = \"player\"","private let BOUNTY_ADDRESS = \"bounty\"","private let OWNER_ADDRESS = \"owner\"","private let CONTRACT_ADDRESS = \"contract\"","private let USDC_TOKEN_IDENTIFIER_STRING = \"USDC-abcdef\"","private var USDC_TOKEN_IDENTIFIER: TokenIdentifier {","    \"\\(USDC_TOKEN_IDENTIFIER_STRING)\"","}","","final class FlipTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: PLAYER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: BOUNTY_ADDRESS,","                balance: 0","            ),","            WorldAccount(","                address: OWNER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: CONTRACT_ADDRESS,","                balance: 0,","                controllers: [","                    AdminController.self,","                    GameController.self,","                    StorageController.self","                ]","            )","        ]","    }","    ","    func testInitEgld() throws {","        try self.initContract()","        try self.setupEgld()","    }","    ","    func testInitUsdc() throws {","        try self.initContract()","        try self.setupUsdc()","    }","    ","    private func initContract() throws {","        try self.deployContract(","            at: CONTRACT_ADDRESS,","            arguments: [","               500,","               100,","               1","            ],","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","    }","    ","    private func setupEgld() throws {","        let adminController = self.instantiateController(","            AdminController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 100_000_000","            )","        )","    }","    ","    private func setupUsdc() throws {","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 100_000_000","                    )","                ]","            )","        )","    }","}"],"syntax":"swift","fileName":"FlipTest.swift","identifier":"FlipContractInitTestsSection5Step5.swift","fileType":"swift","highlights":[]},"doc://SpaceKit/tutorials/SpaceKit/AsyncCalls#Perform-an-Asynchronous-Call":{"url":"\/tutorials\/spacekit\/asynccalls#Perform-an-Asynchronous-Call","kind":"section","type":"section","role":"pseudoSymbol","title":"Perform an Asynchronous Call","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls#Perform-an-Asynchronous-Call","abstract":[{"type":"text","text":"Blockchain platforms using SpaceVM enable seamless execution within a sharded environment. Sharding divides a blockchain’s global state and validation workload into smaller, manageable units known as shards. This method enhances scalability without compromising decentralization, allowing nodes to operate without significant computational resources."}]},"doc://SpaceKit/tutorials/SpaceKit/FlipContractTestTheGame#Create-Utility-Functions-for-flip-and-bounty":{"url":"\/tutorials\/spacekit\/flipcontracttestthegame#Create-Utility-Functions-for-flip-and-bounty","type":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractTestTheGame#Create-Utility-Functions-for-flip-and-bounty","kind":"section","abstract":[{"type":"text","text":"This final chapter of the testing tutorial focuses on validating the core game logic implemented in the "},{"type":"codeVoice","code":"GameController"},{"text":".","type":"text"}],"role":"pseudoSymbol","title":"Create Utility Functions for flip and bounty"},"doc://SpaceKit/tutorials/SpaceKit/FlipContractIntro#Set-Up-the-Project":{"url":"\/tutorials\/spacekit\/flipcontractintro#Set-Up-the-Project","kind":"section","type":"section","role":"pseudoSymbol","title":"Set Up the Project","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractIntro#Set-Up-the-Project","abstract":[{"type":"text","text":"In this tutorial, you’ll write and test a complete smart contract that relies on random number generation to implement a coin flip mechanic. Players wager a chosen amount of any token and face a 50% chance of doubling their bet—or losing it. A small fee is deducted from each wager and sent to the developer’s wallet."}]},"doc://SpaceKit/tutorials/SpaceKit/CodingYourFirstContract#Writing-the-Contract-Code":{"url":"\/tutorials\/spacekit\/codingyourfirstcontract#Writing-the-Contract-Code","role":"pseudoSymbol","abstract":[{"type":"text","text":"In this tutorial, you’ll create a simple smart contract that manages a counter. Users can increment or decrement the counter, and the changes are persisted across contract executions."}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Writing-the-Contract-Code","type":"section","title":"Writing the Contract Code","kind":"section"},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Creating-Your-Own-Types":{"title":"Creating Your Own Types","role":"pseudoSymbol","abstract":[{"text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}],"kind":"section","url":"\/tutorials\/spacekit\/familiarizewithtypes#Creating-Your-Own-Types","type":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Creating-Your-Own-Types"},"doc://SpaceKit/tutorials/SpaceKit/UnderstandTokens#Issuing-a-Semi-Fungible-Token-from-Your-Contract":{"title":"Issuing a Semi-Fungible Token from Your Contract","type":"section","role":"pseudoSymbol","abstract":[{"text":"Learn about the ESDT standard used in the SpaceKit framework, a token model that supports fungible tokens, non-fungible tokens (NFTs), semi-fungible tokens, and meta-esdt tokens.","type":"text"},{"text":" ","type":"text"},{"text":"The SpaceKit framework uses a token standard called ESDT. This standard defines four types of tokens: fungible, non-fungible (NFT), semi-fungible, and meta-esdt.","type":"text"}],"kind":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/UnderstandTokens#Issuing-a-Semi-Fungible-Token-from-Your-Contract","url":"\/tutorials\/spacekit\/understandtokens#Issuing-a-Semi-Fungible-Token-from-Your-Contract"},"doc://SpaceKit/tutorials/SpaceKit/TokenAttributes#Implementing-the-lockFunds-Endpoint":{"url":"\/tutorials\/spacekit\/tokenattributes#Implementing-the-lockFunds-Endpoint","type":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/TokenAttributes#Implementing-the-lockFunds-Endpoint","kind":"section","abstract":[{"text":"The ESDT standard enables embedding custom data within non-fungible tokens, allowing developers to extend the functionality of their smart contracts. This additional data, referred to as “attributes,” is tied to the token and transfers along with it between wallets.","type":"text"}],"role":"pseudoSymbol","title":"Implementing the lockFunds Endpoint"},"doc://SpaceKit/tutorials/SpaceKit/InstallingTools#Setting-Up-the-SpaceKit-CLI":{"url":"\/tutorials\/spacekit\/installingtools#Setting-Up-the-SpaceKit-CLI","type":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Setting-Up-the-SpaceKit-CLI","kind":"section","abstract":[{"type":"text","text":"Before writing your first smart contract with SpaceKit, ensure you have the necessary tools installed."}],"role":"pseudoSymbol","title":"Setting Up the SpaceKit CLI"},"doc://SpaceKit/tutorials/SpaceKit/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract":{"type":"section","kind":"section","url":"\/tutorials\/spacekit\/installingtools#Initializing-and-Compiling-Your-First-Smart-Contract","abstract":[{"text":"Before writing your first smart contract with SpaceKit, ensure you have the necessary tools installed.","type":"text"}],"title":"Initializing and Compiling Your First Smart Contract","role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract"},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Working-with-the-Vector-Type":{"url":"\/tutorials\/spacekit\/familiarizewithtypes#Working-with-the-Vector-Type","type":"section","kind":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Working-with-the-Vector-Type","abstract":[{"text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}],"title":"Working with the Vector Type","role":"pseudoSymbol"},"FlipContractTestAdminSection3Step5.swift":{"highlights":[{"line":121},{"line":122},{"line":123},{"line":124},{"line":125}],"fileType":"swift","syntax":"swift","content":["import SpaceKitTesting","import Flip","","private let PLAYER_ADDRESS = \"player\"","private let BOUNTY_ADDRESS = \"bounty\"","private let OWNER_ADDRESS = \"owner\"","private let CONTRACT_ADDRESS = \"contract\"","private let USDC_TOKEN_IDENTIFIER_STRING = \"USDC-abcdef\"","private var USDC_TOKEN_IDENTIFIER: TokenIdentifier {","    \"\\(USDC_TOKEN_IDENTIFIER_STRING)\"","}","","final class FlipTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: PLAYER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: BOUNTY_ADDRESS,","                balance: 0","            ),","            WorldAccount(","                address: OWNER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: CONTRACT_ADDRESS,","                balance: 0,","                controllers: [","                    AdminController.self,","                    GameController.self,","                    StorageController.self","                ]","            )","        ]","    }","    ","    func testInitEgld() throws {","        try self.initContract()","        try self.setupEgld()","    }","    ","    func testInitUsdc() throws {","        try self.initContract()","        try self.setupUsdc()","    }","    ","    func testSetMaximumBet() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBet = try storageController.getMaximumBet(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBet, 100)","    }","    ","    func testSetMaximumBetPercent() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBetPercent = try storageController.getMaximumBetPercent(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBetPercent, 100)","    }","    ","    func testIncreaseEgldReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 1_000","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","    }","    ","    func testSetMaximumBetNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBet(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testSetMaximumBetPercentNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBetPercent(","                tokenIdentifier: .egld,","                nonce: 0,","                percent: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testIncreaseReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.increaseReserve()","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testWithdrawReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.withdrawReserve(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 100","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    private func initContract() throws {","        try self.deployContract(","            at: CONTRACT_ADDRESS,","            arguments: [","               500,","               100,","               1","            ],","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","    }","    ","    private func setupEgld() throws {","        let adminController = self.instantiateController(","            AdminController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 100_000_000","            )","        )","    }","    ","    private func setupUsdc() throws {","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 100_000_000","                    )","                ]","            )","        )","    }","}"],"identifier":"FlipContractTestAdminSection3Step5.swift","fileName":"FlipTest.swift","type":"file"},"doc://SpaceKit/tutorials/SpaceKit/CodingYourFirstContract":{"url":"\/tutorials\/spacekit\/codingyourfirstcontract","kind":"project","estimatedTime":"20min","type":"topic","role":"project","title":"Building Your First Smart Contract","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract","abstract":[{"text":"In this tutorial, you’ll create a simple smart contract that manages a counter. Users can increment or decrement the counter, and the changes are persisted across contract executions.","type":"text"}]},"FlipContractTestAdminSection3Step8.swift":{"type":"file","content":["import SpaceKitTesting","import Flip","","private let PLAYER_ADDRESS = \"player\"","private let BOUNTY_ADDRESS = \"bounty\"","private let OWNER_ADDRESS = \"owner\"","private let CONTRACT_ADDRESS = \"contract\"","private let USDC_TOKEN_IDENTIFIER_STRING = \"USDC-abcdef\"","private var USDC_TOKEN_IDENTIFIER: TokenIdentifier {","    \"\\(USDC_TOKEN_IDENTIFIER_STRING)\"","}","","final class FlipTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: PLAYER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: BOUNTY_ADDRESS,","                balance: 0","            ),","            WorldAccount(","                address: OWNER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: CONTRACT_ADDRESS,","                balance: 0,","                controllers: [","                    AdminController.self,","                    GameController.self,","                    StorageController.self","                ]","            )","        ]","    }","    ","    func testInitEgld() throws {","        try self.initContract()","        try self.setupEgld()","    }","    ","    func testInitUsdc() throws {","        try self.initContract()","        try self.setupUsdc()","    }","    ","    func testSetMaximumBet() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBet = try storageController.getMaximumBet(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBet, 100)","    }","    ","    func testSetMaximumBetPercent() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBetPercent = try storageController.getMaximumBetPercent(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBetPercent, 100)","    }","    ","    func testIncreaseEgldReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 1_000","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        ","        XCTAssertEqual(tokenReserve, 1_000)","        XCTAssertEqual(contractBalance, 1_000)","    }","    ","    func testIncreaseUsdcReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 1_000","                    )","                ]","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        ","        XCTAssertEqual(tokenReserve, 1_000)","        XCTAssertEqual(contractBalance, 1_000)","    }","    ","    func testSetMaximumBetNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBet(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testSetMaximumBetPercentNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBetPercent(","                tokenIdentifier: .egld,","                nonce: 0,","                percent: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testIncreaseReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.increaseReserve()","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testWithdrawReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.withdrawReserve(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 100","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    private func initContract() throws {","        try self.deployContract(","            at: CONTRACT_ADDRESS,","            arguments: [","               500,","               100,","               1","            ],","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","    }","    ","    private func setupEgld() throws {","        let adminController = self.instantiateController(","            AdminController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 100_000_000","            )","        )","    }","    ","    private func setupUsdc() throws {","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 100_000_000","                    )","                ]","            )","        )","    }","}"],"syntax":"swift","fileName":"FlipTest.swift","fileType":"swift","identifier":"FlipContractTestAdminSection3Step8.swift","highlights":[]},"doc://SpaceKit/tutorials/SpaceKit/SyncCalls#Declare-the-Callee-Proxy":{"type":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls#Declare-the-Callee-Proxy","url":"\/tutorials\/spacekit\/synccalls#Declare-the-Callee-Proxy","title":"Declare the Callee Proxy","kind":"section","abstract":[{"text":"Smart contracts can interact not only with users but also with other smart contracts. This enables more advanced protocols by leveraging existing ones. For example, you could integrate a decentralized exchange directly into your contract to perform token swaps. Decentralized applications often involve multiple contracts, each with a dedicated role, working together to achieve complex functionality—similar to microservices in backend systems.","type":"text"}],"role":"pseudoSymbol"},"FlipContractTestAdminSection4Step4.swift":{"highlights":[{"line":167},{"line":168},{"line":169}],"fileType":"swift","syntax":"swift","content":["import SpaceKitTesting","import Flip","","private let PLAYER_ADDRESS = \"player\"","private let BOUNTY_ADDRESS = \"bounty\"","private let OWNER_ADDRESS = \"owner\"","private let CONTRACT_ADDRESS = \"contract\"","private let USDC_TOKEN_IDENTIFIER_STRING = \"USDC-abcdef\"","private var USDC_TOKEN_IDENTIFIER: TokenIdentifier {","    \"\\(USDC_TOKEN_IDENTIFIER_STRING)\"","}","","final class FlipTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: PLAYER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: BOUNTY_ADDRESS,","                balance: 0","            ),","            WorldAccount(","                address: OWNER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: CONTRACT_ADDRESS,","                balance: 0,","                controllers: [","                    AdminController.self,","                    GameController.self,","                    StorageController.self","                ]","            )","        ]","    }","    ","    func testInitEgld() throws {","        try self.initContract()","        try self.setupEgld()","    }","    ","    func testInitUsdc() throws {","        try self.initContract()","        try self.setupUsdc()","    }","    ","    func testSetMaximumBet() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBet = try storageController.getMaximumBet(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBet, 100)","    }","    ","    func testSetMaximumBetPercent() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBetPercent = try storageController.getMaximumBetPercent(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBetPercent, 100)","    }","    ","    func testIncreaseEgldReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 1_000","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        ","        XCTAssertEqual(tokenReserve, 1_000)","        XCTAssertEqual(contractBalance, 1_000)","    }","    ","    func testIncreaseUsdcReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 1_000","                    )","                ]","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        ","        XCTAssertEqual(tokenReserve, 1_000)","        XCTAssertEqual(contractBalance, 1_000)","    }","    ","    func testWithdrawEgldReserve() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","    }","    ","    func testSetMaximumBetNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBet(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testSetMaximumBetPercentNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBetPercent(","                tokenIdentifier: .egld,","                nonce: 0,","                percent: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testIncreaseReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.increaseReserve()","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testWithdrawReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.withdrawReserve(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 100","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    private func initContract() throws {","        try self.deployContract(","            at: CONTRACT_ADDRESS,","            arguments: [","               500,","               100,","               1","            ],","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","    }","    ","    private func setupEgld() throws {","        let adminController = self.instantiateController(","            AdminController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 100_000_000","            )","        )","    }","    ","    private func setupUsdc() throws {","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 100_000_000","                    )","                ]","            )","        )","    }","}"],"identifier":"FlipContractTestAdminSection4Step4.swift","fileName":"FlipTest.swift","type":"file"},"FlipContractTestAdminSection2Step2.swift":{"type":"file","content":["import SpaceKitTesting","import Flip","","private let PLAYER_ADDRESS = \"player\"","private let BOUNTY_ADDRESS = \"bounty\"","private let OWNER_ADDRESS = \"owner\"","private let CONTRACT_ADDRESS = \"contract\"","private let USDC_TOKEN_IDENTIFIER_STRING = \"USDC-abcdef\"","private var USDC_TOKEN_IDENTIFIER: TokenIdentifier {","    \"\\(USDC_TOKEN_IDENTIFIER_STRING)\"","}","","final class FlipTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: PLAYER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: BOUNTY_ADDRESS,","                balance: 0","            ),","            WorldAccount(","                address: OWNER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: CONTRACT_ADDRESS,","                balance: 0,","                controllers: [","                    AdminController.self,","                    GameController.self,","                    StorageController.self","                ]","            )","        ]","    }","    ","    func testInitEgld() throws {","        try self.initContract()","        try self.setupEgld()","    }","    ","    func testInitUsdc() throws {","        try self.initContract()","        try self.setupUsdc()","    }","    ","    func testSetMaximumBet() throws {","    }","    ","    func testSetMaximumBetNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBet(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testSetMaximumBetPercentNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBetPercent(","                tokenIdentifier: .egld,","                nonce: 0,","                percent: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testIncreaseReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.increaseReserve()","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testWithdrawReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.withdrawReserve(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 100","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    private func initContract() throws {","        try self.deployContract(","            at: CONTRACT_ADDRESS,","            arguments: [","               500,","               100,","               1","            ],","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","    }","    ","    private func setupEgld() throws {","        let adminController = self.instantiateController(","            AdminController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 100_000_000","            )","        )","    }","    ","    private func setupUsdc() throws {","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 100_000_000","                    )","                ]","            )","        )","    }","}"],"syntax":"swift","fileName":"FlipTest.swift","fileType":"swift","identifier":"FlipContractTestAdminSection2Step2.swift","highlights":[{"line":66},{"line":67},{"line":68}]},"doc://SpaceKit/tutorials/SpaceKit/FlipContractTestTheGame#Test-the-bounty-Endpoint":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractTestTheGame#Test-the-bounty-Endpoint","abstract":[{"type":"text","text":"This final chapter of the testing tutorial focuses on validating the core game logic implemented in the "},{"type":"codeVoice","code":"GameController"},{"text":".","type":"text"}],"role":"pseudoSymbol","title":"Test the bounty Endpoint","kind":"section","url":"\/tutorials\/spacekit\/flipcontracttestthegame#Test-the-bounty-Endpoint","type":"section"},"doc://SpaceKit/tutorials/SpaceKit/FlipContractTestTheGame":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractTestTheGame","title":"Test the Game Logic for the Flip Contract","kind":"project","estimatedTime":"20min","url":"\/tutorials\/spacekit\/flipcontracttestthegame","abstract":[{"type":"text","text":"This final chapter of the testing tutorial focuses on validating the core game logic implemented in the "},{"type":"codeVoice","code":"GameController"},{"type":"text","text":"."}],"type":"topic","role":"project"},"doc://SpaceKit/tutorials/SpaceKit/Deep-Dive-into-SpaceKit-Concepts/Exploring-SpaceKit's-Types":{"abstract":[],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Exploring-SpaceKit's-Types","title":"Exploring SpaceKit's Types","type":"topic","url":"\/tutorials\/spacekit\/deep-dive-into-spacekit-concepts\/exploring-spacekit's-types","kind":"article","role":"article"},"FlipContractTestAdminSection4Step8.swift":{"identifier":"FlipContractTestAdminSection4Step8.swift","fileType":"swift","content":["import SpaceKitTesting","import Flip","","private let PLAYER_ADDRESS = \"player\"","private let BOUNTY_ADDRESS = \"bounty\"","private let OWNER_ADDRESS = \"owner\"","private let CONTRACT_ADDRESS = \"contract\"","private let USDC_TOKEN_IDENTIFIER_STRING = \"USDC-abcdef\"","private var USDC_TOKEN_IDENTIFIER: TokenIdentifier {","    \"\\(USDC_TOKEN_IDENTIFIER_STRING)\"","}","","final class FlipTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: PLAYER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: BOUNTY_ADDRESS,","                balance: 0","            ),","            WorldAccount(","                address: OWNER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: CONTRACT_ADDRESS,","                balance: 0,","                controllers: [","                    AdminController.self,","                    GameController.self,","                    StorageController.self","                ]","            )","        ]","    }","    ","    func testInitEgld() throws {","        try self.initContract()","        try self.setupEgld()","    }","    ","    func testInitUsdc() throws {","        try self.initContract()","        try self.setupUsdc()","    }","    ","    func testSetMaximumBet() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBet = try storageController.getMaximumBet(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBet, 100)","    }","    ","    func testSetMaximumBetPercent() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBetPercent = try storageController.getMaximumBetPercent(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBetPercent, 100)","    }","    ","    func testIncreaseEgldReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 1_000","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        ","        XCTAssertEqual(tokenReserve, 1_000)","        XCTAssertEqual(contractBalance, 1_000)","    }","    ","    func testIncreaseUsdcReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 1_000","                    )","                ]","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        ","        XCTAssertEqual(tokenReserve, 1_000)","        XCTAssertEqual(contractBalance, 1_000)","    }","    ","    func testWithdrawEgldReserve() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.withdrawReserve(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 10_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        let ownerBalance = self.getAccount(address: OWNER_ADDRESS)!.balance","        ","        XCTAssertEqual(tokenReserve, 90_000_000)","        XCTAssertEqual(contractBalance, 90_000_000)","        XCTAssertEqual(ownerBalance, 10_000_000)","    }","    ","    func testWithdrawUsdcReserve() throws {","        try self.initContract()","        try self.setupUsdc()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.withdrawReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 10_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        let ownerBalance = self.getAccount(address: OWNER_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        ","        XCTAssertEqual(tokenReserve, 90_000_000)","        XCTAssertEqual(contractBalance, 90_000_000)","        XCTAssertEqual(ownerBalance, 10_000_000)","    }","","    ","    func testSetMaximumBetNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBet(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testSetMaximumBetPercentNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBetPercent(","                tokenIdentifier: .egld,","                nonce: 0,","                percent: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testIncreaseReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.increaseReserve()","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testWithdrawReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.withdrawReserve(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 100","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    private func initContract() throws {","        try self.deployContract(","            at: CONTRACT_ADDRESS,","            arguments: [","               500,","               100,","               1","            ],","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","    }","    ","    private func setupEgld() throws {","        let adminController = self.instantiateController(","            AdminController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 100_000_000","            )","        )","    }","    ","    private func setupUsdc() throws {","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 100_000_000","                    )","                ]","            )","        )","    }","}"],"type":"file","highlights":[{"line":192},{"line":193},{"line":194},{"line":195},{"line":196},{"line":197},{"line":198},{"line":199},{"line":200},{"line":201},{"line":202},{"line":203},{"line":204},{"line":205},{"line":206},{"line":207},{"line":208},{"line":209},{"line":210},{"line":211},{"line":212},{"line":213},{"line":214},{"line":215},{"line":216},{"line":217},{"line":218},{"line":219},{"line":220},{"line":221},{"line":222},{"line":223},{"line":224},{"line":225},{"line":226},{"line":227},{"line":228}],"syntax":"swift","fileName":"FlipTest.swift"},"FlipContractTestAdminSection1Step11.swift":{"type":"file","content":["import SpaceKitTesting","import Flip","","private let PLAYER_ADDRESS = \"player\"","private let BOUNTY_ADDRESS = \"bounty\"","private let OWNER_ADDRESS = \"owner\"","private let CONTRACT_ADDRESS = \"contract\"","private let USDC_TOKEN_IDENTIFIER_STRING = \"USDC-abcdef\"","private var USDC_TOKEN_IDENTIFIER: TokenIdentifier {","    \"\\(USDC_TOKEN_IDENTIFIER_STRING)\"","}","","final class FlipTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: PLAYER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: BOUNTY_ADDRESS,","                balance: 0","            ),","            WorldAccount(","                address: OWNER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: CONTRACT_ADDRESS,","                balance: 0,","                controllers: [","                    AdminController.self,","                    GameController.self,","                    StorageController.self","                ]","            )","        ]","    }","    ","    func testInitEgld() throws {","        try self.initContract()","        try self.setupEgld()","    }","    ","    func testInitUsdc() throws {","        try self.initContract()","        try self.setupUsdc()","    }","    ","    func testSetMaximumBetNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBet(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testSetMaximumBetPercentNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBetPercent(","                tokenIdentifier: .egld,","                nonce: 0,","                percent: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testIncreaseReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.increaseReserve()","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testWithdrawReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.withdrawReserve(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 100","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    private func initContract() throws {","        try self.deployContract(","            at: CONTRACT_ADDRESS,","            arguments: [","               500,","               100,","               1","            ],","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","    }","    ","    private func setupEgld() throws {","        let adminController = self.instantiateController(","            AdminController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 100_000_000","            )","        )","    }","    ","    private func setupUsdc() throws {","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 100_000_000","                    )","                ]","            )","        )","    }","}"],"highlights":[],"fileType":"swift","fileName":"FlipTest.swift","syntax":"swift","identifier":"FlipContractTestAdminSection1Step11.swift"},"FlipContractTestAdminSection2Step4.swift":{"identifier":"FlipContractTestAdminSection2Step4.swift","fileType":"swift","type":"file","content":["import SpaceKitTesting","import Flip","","private let PLAYER_ADDRESS = \"player\"","private let BOUNTY_ADDRESS = \"bounty\"","private let OWNER_ADDRESS = \"owner\"","private let CONTRACT_ADDRESS = \"contract\"","private let USDC_TOKEN_IDENTIFIER_STRING = \"USDC-abcdef\"","private var USDC_TOKEN_IDENTIFIER: TokenIdentifier {","    \"\\(USDC_TOKEN_IDENTIFIER_STRING)\"","}","","final class FlipTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: PLAYER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: BOUNTY_ADDRESS,","                balance: 0","            ),","            WorldAccount(","                address: OWNER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: CONTRACT_ADDRESS,","                balance: 0,","                controllers: [","                    AdminController.self,","                    GameController.self,","                    StorageController.self","                ]","            )","        ]","    }","    ","    func testInitEgld() throws {","        try self.initContract()","        try self.setupEgld()","    }","    ","    func testInitUsdc() throws {","        try self.initContract()","        try self.setupUsdc()","    }","    ","    func testSetMaximumBet() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","    }","    ","    func testSetMaximumBetNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBet(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testSetMaximumBetPercentNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBetPercent(","                tokenIdentifier: .egld,","                nonce: 0,","                percent: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testIncreaseReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.increaseReserve()","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testWithdrawReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.withdrawReserve(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 100","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    private func initContract() throws {","        try self.deployContract(","            at: CONTRACT_ADDRESS,","            arguments: [","               500,","               100,","               1","            ],","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","    }","    ","    private func setupEgld() throws {","        let adminController = self.instantiateController(","            AdminController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 100_000_000","            )","        )","    }","    ","    private func setupUsdc() throws {","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 100_000_000","                    )","                ]","            )","        )","    }","}"],"highlights":[{"line":70},{"line":71},{"line":72},{"line":73},{"line":74},{"line":75},{"line":76},{"line":77},{"line":78}],"fileName":"FlipTest.swift","syntax":"swift"},"FlipContractTestAdminSection3Step4.swift":{"content":["import SpaceKitTesting","import Flip","","private let PLAYER_ADDRESS = \"player\"","private let BOUNTY_ADDRESS = \"bounty\"","private let OWNER_ADDRESS = \"owner\"","private let CONTRACT_ADDRESS = \"contract\"","private let USDC_TOKEN_IDENTIFIER_STRING = \"USDC-abcdef\"","private var USDC_TOKEN_IDENTIFIER: TokenIdentifier {","    \"\\(USDC_TOKEN_IDENTIFIER_STRING)\"","}","","final class FlipTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: PLAYER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: BOUNTY_ADDRESS,","                balance: 0","            ),","            WorldAccount(","                address: OWNER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: CONTRACT_ADDRESS,","                balance: 0,","                controllers: [","                    AdminController.self,","                    GameController.self,","                    StorageController.self","                ]","            )","        ]","    }","    ","    func testInitEgld() throws {","        try self.initContract()","        try self.setupEgld()","    }","    ","    func testInitUsdc() throws {","        try self.initContract()","        try self.setupUsdc()","    }","    ","    func testSetMaximumBet() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBet = try storageController.getMaximumBet(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBet, 100)","    }","    ","    func testSetMaximumBetPercent() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBetPercent = try storageController.getMaximumBetPercent(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBetPercent, 100)","    }","    ","    func testIncreaseEgldReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 1_000","            )","        )","    }","    ","    func testSetMaximumBetNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBet(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testSetMaximumBetPercentNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBetPercent(","                tokenIdentifier: .egld,","                nonce: 0,","                percent: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testIncreaseReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.increaseReserve()","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testWithdrawReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.withdrawReserve(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 100","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    private func initContract() throws {","        try self.deployContract(","            at: CONTRACT_ADDRESS,","            arguments: [","               500,","               100,","               1","            ],","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","    }","    ","    private func setupEgld() throws {","        let adminController = self.instantiateController(","            AdminController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 100_000_000","            )","        )","    }","    ","    private func setupUsdc() throws {","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 100_000_000","                    )","                ]","            )","        )","    }","}"],"syntax":"swift","fileType":"swift","fileName":"FlipTest.swift","type":"file","identifier":"FlipContractTestAdminSection3Step4.swift","highlights":[{"line":114},{"line":115},{"line":116},{"line":117},{"line":118},{"line":119},{"line":120}]},"FlipContractTestAdminSection3Step6.swift":{"identifier":"FlipContractTestAdminSection3Step6.swift","fileType":"swift","content":["import SpaceKitTesting","import Flip","","private let PLAYER_ADDRESS = \"player\"","private let BOUNTY_ADDRESS = \"bounty\"","private let OWNER_ADDRESS = \"owner\"","private let CONTRACT_ADDRESS = \"contract\"","private let USDC_TOKEN_IDENTIFIER_STRING = \"USDC-abcdef\"","private var USDC_TOKEN_IDENTIFIER: TokenIdentifier {","    \"\\(USDC_TOKEN_IDENTIFIER_STRING)\"","}","","final class FlipTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: PLAYER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: BOUNTY_ADDRESS,","                balance: 0","            ),","            WorldAccount(","                address: OWNER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: CONTRACT_ADDRESS,","                balance: 0,","                controllers: [","                    AdminController.self,","                    GameController.self,","                    StorageController.self","                ]","            )","        ]","    }","    ","    func testInitEgld() throws {","        try self.initContract()","        try self.setupEgld()","    }","    ","    func testInitUsdc() throws {","        try self.initContract()","        try self.setupUsdc()","    }","    ","    func testSetMaximumBet() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBet = try storageController.getMaximumBet(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBet, 100)","    }","    ","    func testSetMaximumBetPercent() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBetPercent = try storageController.getMaximumBetPercent(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBetPercent, 100)","    }","    ","    func testIncreaseEgldReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 1_000","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","    }","    ","    func testSetMaximumBetNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBet(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testSetMaximumBetPercentNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBetPercent(","                tokenIdentifier: .egld,","                nonce: 0,","                percent: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testIncreaseReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.increaseReserve()","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testWithdrawReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.withdrawReserve(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 100","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    private func initContract() throws {","        try self.deployContract(","            at: CONTRACT_ADDRESS,","            arguments: [","               500,","               100,","               1","            ],","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","    }","    ","    private func setupEgld() throws {","        let adminController = self.instantiateController(","            AdminController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 100_000_000","            )","        )","    }","    ","    private func setupUsdc() throws {","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 100_000_000","                    )","                ]","            )","        )","    }","}"],"type":"file","highlights":[{"line":126}],"syntax":"swift","fileName":"FlipTest.swift"},"doc://SpaceKit/tutorials/SpaceKit/Build-a-Coin-Flip-Contract/Set-Up-Testing-in-the-SwiftVM":{"url":"\/tutorials\/spacekit\/build-a-coin-flip-contract\/set-up-testing-in-the-swiftvm","type":"topic","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Build-a-Coin-Flip-Contract\/Set-Up-Testing-in-the-SwiftVM","kind":"article","abstract":[],"role":"article","title":"Set Up Testing in the SwiftVM"},"FlipContractTestAdminSection3Step3.swift":{"identifier":"FlipContractTestAdminSection3Step3.swift","fileName":"FlipTest.swift","type":"file","syntax":"swift","fileType":"swift","content":["import SpaceKitTesting","import Flip","","private let PLAYER_ADDRESS = \"player\"","private let BOUNTY_ADDRESS = \"bounty\"","private let OWNER_ADDRESS = \"owner\"","private let CONTRACT_ADDRESS = \"contract\"","private let USDC_TOKEN_IDENTIFIER_STRING = \"USDC-abcdef\"","private var USDC_TOKEN_IDENTIFIER: TokenIdentifier {","    \"\\(USDC_TOKEN_IDENTIFIER_STRING)\"","}","","final class FlipTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: PLAYER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: BOUNTY_ADDRESS,","                balance: 0","            ),","            WorldAccount(","                address: OWNER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: CONTRACT_ADDRESS,","                balance: 0,","                controllers: [","                    AdminController.self,","                    GameController.self,","                    StorageController.self","                ]","            )","        ]","    }","    ","    func testInitEgld() throws {","        try self.initContract()","        try self.setupEgld()","    }","    ","    func testInitUsdc() throws {","        try self.initContract()","        try self.setupUsdc()","    }","    ","    func testSetMaximumBet() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBet = try storageController.getMaximumBet(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBet, 100)","    }","    ","    func testSetMaximumBetPercent() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBetPercent = try storageController.getMaximumBetPercent(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBetPercent, 100)","    }","    ","    func testIncreaseEgldReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","    }","    ","    func testSetMaximumBetNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBet(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testSetMaximumBetPercentNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBetPercent(","                tokenIdentifier: .egld,","                nonce: 0,","                percent: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testIncreaseReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.increaseReserve()","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testWithdrawReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.withdrawReserve(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 100","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    private func initContract() throws {","        try self.deployContract(","            at: CONTRACT_ADDRESS,","            arguments: [","               500,","               100,","               1","            ],","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","    }","    ","    private func setupEgld() throws {","        let adminController = self.instantiateController(","            AdminController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 100_000_000","            )","        )","    }","    ","    private func setupUsdc() throws {","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 100_000_000","                    )","                ]","            )","        )","    }","}"],"highlights":[{"line":111},{"line":112},{"line":113}]},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes":{"type":"topic","url":"\/tutorials\/spacekit\/familiarizewithtypes","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes","estimatedTime":"20min","role":"project","kind":"project","title":"Exploring SpaceKit's Types","abstract":[{"text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}]},"doc://SpaceKit/tutorials/SpaceKit/UnderstandTokens#Issuing-a-Meta-ESDT-from-Your-Contract":{"title":"Issuing a Meta ESDT from Your Contract","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/UnderstandTokens#Issuing-a-Meta-ESDT-from-Your-Contract","abstract":[{"type":"text","text":"Learn about the ESDT standard used in the SpaceKit framework, a token model that supports fungible tokens, non-fungible tokens (NFTs), semi-fungible tokens, and meta-esdt tokens."},{"type":"text","text":" "},{"type":"text","text":"The SpaceKit framework uses a token standard called ESDT. This standard defines four types of tokens: fungible, non-fungible (NFT), semi-fungible, and meta-esdt."}],"kind":"section","role":"pseudoSymbol","type":"section","url":"\/tutorials\/spacekit\/understandtokens#Issuing-a-Meta-ESDT-from-Your-Contract"},"doc://SpaceKit/tutorials/SpaceKit/TokenAttributes#Implementing-the-changeTokenLockDuration-Endpoint":{"abstract":[{"type":"text","text":"The ESDT standard enables embedding custom data within non-fungible tokens, allowing developers to extend the functionality of their smart contracts. This additional data, referred to as “attributes,” is tied to the token and transfers along with it between wallets."}],"role":"pseudoSymbol","kind":"section","url":"\/tutorials\/spacekit\/tokenattributes#Implementing-the-changeTokenLockDuration-Endpoint","type":"section","title":"Implementing the changeTokenLockDuration Endpoint","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/TokenAttributes#Implementing-the-changeTokenLockDuration-Endpoint"},"doc://SpaceKit/tutorials/SpaceKit/OperationsOnNonFungibleTokens#Assign-Create-AddQuantity-and-Burn-Roles":{"url":"\/tutorials\/spacekit\/operationsonnonfungibletokens#Assign-Create-AddQuantity-and-Burn-Roles","kind":"section","type":"section","role":"pseudoSymbol","title":"Assign Create, AddQuantity, and Burn Roles","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnNonFungibleTokens#Assign-Create-AddQuantity-and-Burn-Roles","abstract":[{"text":"Non-fungible tokens (NFTs) are unique digital assets that cannot be interchanged. Each NFT is associated with a unique identifier, known as a nonce. You can think of it like an airline ticket—each ticket is assigned to a specific passenger, with individual preferences and details.","type":"text"}]},"doc://SpaceKit/tutorials/SpaceKit/FlipContractTestTheGame#Test-Failure-Case-for-the-bounty-Endpoint":{"url":"\/tutorials\/spacekit\/flipcontracttestthegame#Test-Failure-Case-for-the-bounty-Endpoint","role":"pseudoSymbol","kind":"section","title":"Test Failure Case for the bounty Endpoint","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractTestTheGame#Test-Failure-Case-for-the-bounty-Endpoint","type":"section","abstract":[{"type":"text","text":"This final chapter of the testing tutorial focuses on validating the core game logic implemented in the "},{"type":"codeVoice","code":"GameController"},{"text":".","type":"text"}]},"doc://SpaceKit/tutorials/SpaceKit/FlipContractTestAdmin#Test-the-withdrawReserve-Endpoint":{"type":"section","kind":"section","abstract":[{"type":"text","text":"Admin endpoints are critical to the contract’s integrity. They not only control configuration parameters, but also grant access to withdraw the contract’s token reserves."}],"title":"Test the withdrawReserve Endpoint","role":"pseudoSymbol","url":"\/tutorials\/spacekit\/flipcontracttestadmin#Test-the-withdrawReserve-Endpoint","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractTestAdmin#Test-the-withdrawReserve-Endpoint"},"doc://SpaceKit/tutorials/SpaceKit":{"title":"Meet SpaceKit","abstract":[{"type":"text","text":"Discover how SpaceKit simplifies blockchain development using Swift. Dive into the world of Web3 with ease and efficiency."}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit","url":"\/tutorials\/spacekit","role":"overview","kind":"overview","type":"topic"},"doc://SpaceKit/tutorials/SpaceKit/OperationsOnNonFungibleTokens#Create-a-New-Nonce":{"abstract":[{"type":"text","text":"Non-fungible tokens (NFTs) are unique digital assets that cannot be interchanged. Each NFT is associated with a unique identifier, known as a nonce. You can think of it like an airline ticket—each ticket is assigned to a specific passenger, with individual preferences and details."}],"role":"pseudoSymbol","kind":"section","url":"\/tutorials\/spacekit\/operationsonnonfungibletokens#Create-a-New-Nonce","type":"section","title":"Create a New Nonce","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnNonFungibleTokens#Create-a-New-Nonce"},"FlipContractTestAdminSection4Step3.swift":{"identifier":"FlipContractTestAdminSection4Step3.swift","fileType":"swift","type":"file","content":["import SpaceKitTesting","import Flip","","private let PLAYER_ADDRESS = \"player\"","private let BOUNTY_ADDRESS = \"bounty\"","private let OWNER_ADDRESS = \"owner\"","private let CONTRACT_ADDRESS = \"contract\"","private let USDC_TOKEN_IDENTIFIER_STRING = \"USDC-abcdef\"","private var USDC_TOKEN_IDENTIFIER: TokenIdentifier {","    \"\\(USDC_TOKEN_IDENTIFIER_STRING)\"","}","","final class FlipTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: PLAYER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: BOUNTY_ADDRESS,","                balance: 0","            ),","            WorldAccount(","                address: OWNER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: CONTRACT_ADDRESS,","                balance: 0,","                controllers: [","                    AdminController.self,","                    GameController.self,","                    StorageController.self","                ]","            )","        ]","    }","    ","    func testInitEgld() throws {","        try self.initContract()","        try self.setupEgld()","    }","    ","    func testInitUsdc() throws {","        try self.initContract()","        try self.setupUsdc()","    }","    ","    func testSetMaximumBet() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBet = try storageController.getMaximumBet(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBet, 100)","    }","    ","    func testSetMaximumBetPercent() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBetPercent = try storageController.getMaximumBetPercent(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBetPercent, 100)","    }","    ","    func testIncreaseEgldReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 1_000","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        ","        XCTAssertEqual(tokenReserve, 1_000)","        XCTAssertEqual(contractBalance, 1_000)","    }","    ","    func testIncreaseUsdcReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 1_000","                    )","                ]","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        ","        XCTAssertEqual(tokenReserve, 1_000)","        XCTAssertEqual(contractBalance, 1_000)","    }","    ","    func testWithdrawEgldReserve() throws {","        try self.initContract()","        try self.setupEgld()","    }","    ","    func testSetMaximumBetNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBet(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testSetMaximumBetPercentNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBetPercent(","                tokenIdentifier: .egld,","                nonce: 0,","                percent: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testIncreaseReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.increaseReserve()","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testWithdrawReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.withdrawReserve(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 100","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    private func initContract() throws {","        try self.deployContract(","            at: CONTRACT_ADDRESS,","            arguments: [","               500,","               100,","               1","            ],","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","    }","    ","    private func setupEgld() throws {","        let adminController = self.instantiateController(","            AdminController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 100_000_000","            )","        )","    }","    ","    private func setupUsdc() throws {","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 100_000_000","                    )","                ]","            )","        )","    }","}"],"highlights":[{"line":165},{"line":166}],"fileName":"FlipTest.swift","syntax":"swift"},"doc://SpaceKit/tutorials/SpaceKit/OperationsOnFungibleTokens#Assign-Mint-and-Burn-Roles":{"abstract":[{"type":"text","text":"Fungible tokens function similarly to traditional currencies, making them the simplest type of token to work with."}],"role":"pseudoSymbol","url":"\/tutorials\/spacekit\/operationsonfungibletokens#Assign-Mint-and-Burn-Roles","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnFungibleTokens#Assign-Mint-and-Burn-Roles","kind":"section","type":"section","title":"Assign Mint and Burn Roles"},"doc://SpaceKit/tutorials/SpaceKit/StoreValues":{"abstract":[{"type":"text","text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory."}],"role":"project","estimatedTime":"15min","kind":"project","url":"\/tutorials\/spacekit\/storevalues","type":"topic","title":"Persist Values Between Executions","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues"},"FlipContractTestAdminSection2Step6.swift":{"highlights":[{"line":84},{"line":85}],"fileType":"swift","content":["import SpaceKitTesting","import Flip","","private let PLAYER_ADDRESS = \"player\"","private let BOUNTY_ADDRESS = \"bounty\"","private let OWNER_ADDRESS = \"owner\"","private let CONTRACT_ADDRESS = \"contract\"","private let USDC_TOKEN_IDENTIFIER_STRING = \"USDC-abcdef\"","private var USDC_TOKEN_IDENTIFIER: TokenIdentifier {","    \"\\(USDC_TOKEN_IDENTIFIER_STRING)\"","}","","final class FlipTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: PLAYER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: BOUNTY_ADDRESS,","                balance: 0","            ),","            WorldAccount(","                address: OWNER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: CONTRACT_ADDRESS,","                balance: 0,","                controllers: [","                    AdminController.self,","                    GameController.self,","                    StorageController.self","                ]","            )","        ]","    }","    ","    func testInitEgld() throws {","        try self.initContract()","        try self.setupEgld()","    }","    ","    func testInitUsdc() throws {","        try self.initContract()","        try self.setupUsdc()","    }","    ","    func testSetMaximumBet() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBet = try storageController.getMaximumBet(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBet, 100)","    }","    ","    func testSetMaximumBetNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBet(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testSetMaximumBetPercentNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBetPercent(","                tokenIdentifier: .egld,","                nonce: 0,","                percent: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testIncreaseReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.increaseReserve()","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testWithdrawReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.withdrawReserve(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 100","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    private func initContract() throws {","        try self.deployContract(","            at: CONTRACT_ADDRESS,","            arguments: [","               500,","               100,","               1","            ],","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","    }","    ","    private func setupEgld() throws {","        let adminController = self.instantiateController(","            AdminController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 100_000_000","            )","        )","    }","    ","    private func setupUsdc() throws {","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 100_000_000","                    )","                ]","            )","        )","    }","}"],"identifier":"FlipContractTestAdminSection2Step6.swift","type":"file","fileName":"FlipTest.swift","syntax":"swift"},"doc://SpaceKit/tutorials/SpaceKit/FlipContractInitTests#Configure-the-Initial-Blockchain-State":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractInitTests#Configure-the-Initial-Blockchain-State","role":"pseudoSymbol","url":"\/tutorials\/spacekit\/flipcontractinittests#Configure-the-Initial-Blockchain-State","type":"section","title":"Configure the Initial Blockchain State","abstract":[{"type":"text","text":"Smart contracts are permissionless programs that often manage valuable assets. Because of this, writing comprehensive tests for both successful and failure scenarios is essential."}],"kind":"section"},"doc://SpaceKit/tutorials/SpaceKit/FlipContractTestAdmin#Test-the-increaseReserve-Endpoint":{"kind":"section","abstract":[{"text":"Admin endpoints are critical to the contract’s integrity. They not only control configuration parameters, but also grant access to withdraw the contract’s token reserves.","type":"text"}],"type":"section","url":"\/tutorials\/spacekit\/flipcontracttestadmin#Test-the-increaseReserve-Endpoint","role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractTestAdmin#Test-the-increaseReserve-Endpoint","title":"Test the increaseReserve Endpoint"},"FlipContractTestAdminSection4Step5.swift":{"fileType":"swift","fileName":"FlipTest.swift","content":["import SpaceKitTesting","import Flip","","private let PLAYER_ADDRESS = \"player\"","private let BOUNTY_ADDRESS = \"bounty\"","private let OWNER_ADDRESS = \"owner\"","private let CONTRACT_ADDRESS = \"contract\"","private let USDC_TOKEN_IDENTIFIER_STRING = \"USDC-abcdef\"","private var USDC_TOKEN_IDENTIFIER: TokenIdentifier {","    \"\\(USDC_TOKEN_IDENTIFIER_STRING)\"","}","","final class FlipTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: PLAYER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: BOUNTY_ADDRESS,","                balance: 0","            ),","            WorldAccount(","                address: OWNER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: CONTRACT_ADDRESS,","                balance: 0,","                controllers: [","                    AdminController.self,","                    GameController.self,","                    StorageController.self","                ]","            )","        ]","    }","    ","    func testInitEgld() throws {","        try self.initContract()","        try self.setupEgld()","    }","    ","    func testInitUsdc() throws {","        try self.initContract()","        try self.setupUsdc()","    }","    ","    func testSetMaximumBet() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBet = try storageController.getMaximumBet(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBet, 100)","    }","    ","    func testSetMaximumBetPercent() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBetPercent = try storageController.getMaximumBetPercent(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBetPercent, 100)","    }","    ","    func testIncreaseEgldReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 1_000","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        ","        XCTAssertEqual(tokenReserve, 1_000)","        XCTAssertEqual(contractBalance, 1_000)","    }","    ","    func testIncreaseUsdcReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 1_000","                    )","                ]","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        ","        XCTAssertEqual(tokenReserve, 1_000)","        XCTAssertEqual(contractBalance, 1_000)","    }","    ","    func testWithdrawEgldReserve() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.withdrawReserve(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 10_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","    }","    ","    func testSetMaximumBetNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBet(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testSetMaximumBetPercentNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBetPercent(","                tokenIdentifier: .egld,","                nonce: 0,","                percent: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testIncreaseReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.increaseReserve()","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testWithdrawReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.withdrawReserve(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 100","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    private func initContract() throws {","        try self.deployContract(","            at: CONTRACT_ADDRESS,","            arguments: [","               500,","               100,","               1","            ],","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","    }","    ","    private func setupEgld() throws {","        let adminController = self.instantiateController(","            AdminController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 100_000_000","            )","        )","    }","    ","    private func setupUsdc() throws {","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 100_000_000","                    )","                ]","            )","        )","    }","}"],"type":"file","highlights":[{"line":170},{"line":171},{"line":172},{"line":173},{"line":174},{"line":175},{"line":176},{"line":177},{"line":178}],"syntax":"swift","identifier":"FlipContractTestAdminSection4Step5.swift"},"doc://SpaceKit/tutorials/SpaceKit/Deep-Dive-into-SpaceKit-Concepts/Calling-Contracts-Across-Shards":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Calling-Contracts-Across-Shards","title":"Calling Contracts Across Shards","kind":"article","url":"\/tutorials\/spacekit\/deep-dive-into-spacekit-concepts\/calling-contracts-across-shards","abstract":[],"type":"topic","role":"article"},"doc://SpaceKit/tutorials/SpaceKit/FlipContractTestAdmin#Verify-That-Only-the-Owner-Can-Access-Admin-Endpoints":{"url":"\/tutorials\/spacekit\/flipcontracttestadmin#Verify-That-Only-the-Owner-Can-Access-Admin-Endpoints","kind":"section","type":"section","role":"pseudoSymbol","title":"Verify That Only the Owner Can Access Admin Endpoints","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractTestAdmin#Verify-That-Only-the-Owner-Can-Access-Admin-Endpoints","abstract":[{"type":"text","text":"Admin endpoints are critical to the contract’s integrity. They not only control configuration parameters, but also grant access to withdraw the contract’s token reserves."}]},"doc://SpaceKit/tutorials/SpaceKit/OperationsOnNonFungibleTokens#Burn-Tokens":{"title":"Burn Tokens","role":"pseudoSymbol","kind":"section","abstract":[{"text":"Non-fungible tokens (NFTs) are unique digital assets that cannot be interchanged. Each NFT is associated with a unique identifier, known as a nonce. You can think of it like an airline ticket—each ticket is assigned to a specific passenger, with individual preferences and details.","type":"text"}],"type":"section","url":"\/tutorials\/spacekit\/operationsonnonfungibletokens#Burn-Tokens","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnNonFungibleTokens#Burn-Tokens"},"doc://SpaceKit/tutorials/SpaceKit/FlipContractTestAdmin#Verify-the-Maximum-Bet-Configuration-Endpoints":{"url":"\/tutorials\/spacekit\/flipcontracttestadmin#Verify-the-Maximum-Bet-Configuration-Endpoints","type":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractTestAdmin#Verify-the-Maximum-Bet-Configuration-Endpoints","kind":"section","abstract":[{"type":"text","text":"Admin endpoints are critical to the contract’s integrity. They not only control configuration parameters, but also grant access to withdraw the contract’s token reserves."}],"role":"pseudoSymbol","title":"Verify the Maximum Bet Configuration Endpoints"},"doc://SpaceKit/tutorials/SpaceKit/FlipContractTestAdmin":{"title":"Test the Admin Endpoints","type":"topic","role":"project","abstract":[{"type":"text","text":"Admin endpoints are critical to the contract’s integrity. They not only control configuration parameters, but also grant access to withdraw the contract’s token reserves."}],"kind":"project","estimatedTime":"20min","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractTestAdmin","url":"\/tutorials\/spacekit\/flipcontracttestadmin"},"doc://SpaceKit/tutorials/SpaceKit/Create-and-Manage-Tokens/Enhancing-Contracts-with-Token-Attributes":{"abstract":[],"role":"article","kind":"article","url":"\/tutorials\/spacekit\/create-and-manage-tokens\/enhancing-contracts-with-token-attributes","type":"topic","title":"Enhancing Contracts with Token Attributes","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Create-and-Manage-Tokens\/Enhancing-Contracts-with-Token-Attributes"},"doc://SpaceKit/tutorials/SpaceKit/FlipContractWriteAdmin#Withdraw-Contract-Reserves":{"url":"\/tutorials\/spacekit\/flipcontractwriteadmin#Withdraw-Contract-Reserves","role":"pseudoSymbol","kind":"section","title":"Withdraw Contract Reserves","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteAdmin#Withdraw-Contract-Reserves","type":"section","abstract":[{"type":"text","text":"Now that your storage is fully set up, it’s time to define the administrative endpoints that allow the contract owner to manage critical values and assets."}]},"FlipContractTestAdminSection1Step5.swift":{"highlights":[{"line":69},{"line":70},{"line":71},{"line":72},{"line":73},{"line":74}],"type":"file","identifier":"FlipContractTestAdminSection1Step5.swift","syntax":"swift","content":["import SpaceKitTesting","import Flip","","private let PLAYER_ADDRESS = \"player\"","private let BOUNTY_ADDRESS = \"bounty\"","private let OWNER_ADDRESS = \"owner\"","private let CONTRACT_ADDRESS = \"contract\"","private let USDC_TOKEN_IDENTIFIER_STRING = \"USDC-abcdef\"","private var USDC_TOKEN_IDENTIFIER: TokenIdentifier {","    \"\\(USDC_TOKEN_IDENTIFIER_STRING)\"","}","","final class FlipTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: PLAYER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: BOUNTY_ADDRESS,","                balance: 0","            ),","            WorldAccount(","                address: OWNER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: CONTRACT_ADDRESS,","                balance: 0,","                controllers: [","                    AdminController.self,","                    GameController.self,","                    StorageController.self","                ]","            )","        ]","    }","    ","    func testInitEgld() throws {","        try self.initContract()","        try self.setupEgld()","    }","    ","    func testInitUsdc() throws {","        try self.initContract()","        try self.setupUsdc()","    }","    ","    func testSetMaximumBetNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            ","        } catch {","            ","        }","    }","    ","    private func initContract() throws {","        try self.deployContract(","            at: CONTRACT_ADDRESS,","            arguments: [","               500,","               100,","               1","            ],","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","    }","    ","    private func setupEgld() throws {","        let adminController = self.instantiateController(","            AdminController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 100_000_000","            )","        )","    }","    ","    private func setupUsdc() throws {","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 100_000_000","                    )","                ]","            )","        )","    }","}"],"fileType":"swift","fileName":"FlipTest.swift"},"doc://SpaceKit/tutorials/SpaceKit/FlipContractWriteAdmin":{"estimatedTime":"20min","url":"\/tutorials\/spacekit\/flipcontractwriteadmin","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteAdmin","type":"topic","kind":"project","title":"Add Administrative Endpoints to the Flip Contract","role":"project","abstract":[{"text":"Now that your storage is fully set up, it’s time to define the administrative endpoints that allow the contract owner to manage critical values and assets.","type":"text"}]},"doc://SpaceKit/tutorials/SpaceKit/Build-a-Coin-Flip-Contract/Test-the-Admin-Endpoints":{"type":"topic","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Build-a-Coin-Flip-Contract\/Test-the-Admin-Endpoints","role":"article","abstract":[],"url":"\/tutorials\/spacekit\/build-a-coin-flip-contract\/test-the-admin-endpoints","kind":"article","title":"Test the Admin Endpoints"},"doc://SpaceKit/tutorials/SpaceKit/OperationsOnNonFungibleTokens":{"estimatedTime":"15min","type":"topic","title":"Managing Non-Fungible Tokens","role":"project","url":"\/tutorials\/spacekit\/operationsonnonfungibletokens","abstract":[{"type":"text","text":"Non-fungible tokens (NFTs) are unique digital assets that cannot be interchanged. Each NFT is associated with a unique identifier, known as a nonce. You can think of it like an airline ticket—each ticket is assigned to a specific passenger, with individual preferences and details."}],"kind":"project","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnNonFungibleTokens"},"doc://SpaceKit/tutorials/SpaceKit/AsyncCalls#Declare-the-Callee-Proxy":{"url":"\/tutorials\/spacekit\/asynccalls#Declare-the-Callee-Proxy","kind":"section","type":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls#Declare-the-Callee-Proxy","abstract":[{"type":"text","text":"Blockchain platforms using SpaceVM enable seamless execution within a sharded environment. Sharding divides a blockchain’s global state and validation workload into smaller, manageable units known as shards. This method enhances scalability without compromising decentralization, allowing nodes to operate without significant computational resources."}],"title":"Declare the Callee Proxy","role":"pseudoSymbol"},"doc://SpaceKit/tutorials/SpaceKit/OperationsOnFungibleTokens":{"type":"topic","estimatedTime":"15min","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnFungibleTokens","role":"project","abstract":[{"type":"text","text":"Fungible tokens function similarly to traditional currencies, making them the simplest type of token to work with."}],"url":"\/tutorials\/spacekit\/operationsonfungibletokens","kind":"project","title":"Managing Fungible Tokens"},"doc://SpaceKit/tutorials/SpaceKit/Build-a-Coin-Flip-Contract/Build-a-Coin-Flip-Smart-Contract":{"url":"\/tutorials\/spacekit\/build-a-coin-flip-contract\/build-a-coin-flip-smart-contract","type":"topic","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Build-a-Coin-Flip-Contract\/Build-a-Coin-Flip-Smart-Contract","kind":"article","abstract":[],"role":"article","title":"Build a Coin Flip Smart Contract"},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Working-with-the-BigUint-Type":{"url":"\/tutorials\/spacekit\/familiarizewithtypes#Working-with-the-BigUint-Type","type":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Working-with-the-BigUint-Type","kind":"section","abstract":[{"text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}],"role":"pseudoSymbol","title":"Working with the BigUint Type"},"FlipContractTestAdminSection2Step3.swift":{"highlights":[{"line":67},{"line":68},{"line":69}],"fileType":"swift","content":["import SpaceKitTesting","import Flip","","private let PLAYER_ADDRESS = \"player\"","private let BOUNTY_ADDRESS = \"bounty\"","private let OWNER_ADDRESS = \"owner\"","private let CONTRACT_ADDRESS = \"contract\"","private let USDC_TOKEN_IDENTIFIER_STRING = \"USDC-abcdef\"","private var USDC_TOKEN_IDENTIFIER: TokenIdentifier {","    \"\\(USDC_TOKEN_IDENTIFIER_STRING)\"","}","","final class FlipTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: PLAYER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: BOUNTY_ADDRESS,","                balance: 0","            ),","            WorldAccount(","                address: OWNER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: CONTRACT_ADDRESS,","                balance: 0,","                controllers: [","                    AdminController.self,","                    GameController.self,","                    StorageController.self","                ]","            )","        ]","    }","    ","    func testInitEgld() throws {","        try self.initContract()","        try self.setupEgld()","    }","    ","    func testInitUsdc() throws {","        try self.initContract()","        try self.setupUsdc()","    }","    ","    func testSetMaximumBet() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","    }","    ","    func testSetMaximumBetNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBet(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testSetMaximumBetPercentNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBetPercent(","                tokenIdentifier: .egld,","                nonce: 0,","                percent: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testIncreaseReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.increaseReserve()","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testWithdrawReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.withdrawReserve(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 100","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    private func initContract() throws {","        try self.deployContract(","            at: CONTRACT_ADDRESS,","            arguments: [","               500,","               100,","               1","            ],","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","    }","    ","    private func setupEgld() throws {","        let adminController = self.instantiateController(","            AdminController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 100_000_000","            )","        )","    }","    ","    private func setupUsdc() throws {","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 100_000_000","                    )","                ]","            )","        )","    }","}"],"identifier":"FlipContractTestAdminSection2Step3.swift","type":"file","fileName":"FlipTest.swift","syntax":"swift"},"FlipContractTestAdminSection1Step6.swift":{"identifier":"FlipContractTestAdminSection1Step6.swift","content":["import SpaceKitTesting","import Flip","","private let PLAYER_ADDRESS = \"player\"","private let BOUNTY_ADDRESS = \"bounty\"","private let OWNER_ADDRESS = \"owner\"","private let CONTRACT_ADDRESS = \"contract\"","private let USDC_TOKEN_IDENTIFIER_STRING = \"USDC-abcdef\"","private var USDC_TOKEN_IDENTIFIER: TokenIdentifier {","    \"\\(USDC_TOKEN_IDENTIFIER_STRING)\"","}","","final class FlipTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: PLAYER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: BOUNTY_ADDRESS,","                balance: 0","            ),","            WorldAccount(","                address: OWNER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: CONTRACT_ADDRESS,","                balance: 0,","                controllers: [","                    AdminController.self,","                    GameController.self,","                    StorageController.self","                ]","            )","        ]","    }","    ","    func testInitEgld() throws {","        try self.initContract()","        try self.setupEgld()","    }","    ","    func testInitUsdc() throws {","        try self.initContract()","        try self.setupUsdc()","    }","    ","    func testSetMaximumBetNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBet(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 10_000_000","            )","        } catch {","            ","        }","    }","    ","    private func initContract() throws {","        try self.deployContract(","            at: CONTRACT_ADDRESS,","            arguments: [","               500,","               100,","               1","            ],","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","    }","    ","    private func setupEgld() throws {","        let adminController = self.instantiateController(","            AdminController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 100_000_000","            )","        )","    }","    ","    private func setupUsdc() throws {","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 100_000_000","                    )","                ]","            )","        )","    }","}"],"fileName":"FlipTest.swift","type":"file","fileType":"swift","syntax":"swift","highlights":[{"line":71},{"line":72},{"line":73},{"line":74},{"line":75}]},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges":{"title":"Handling Heap Allocation Challenges","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges","abstract":[{"text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}],"kind":"section","role":"pseudoSymbol","type":"section","url":"\/tutorials\/spacekit\/familiarizewithtypes#Handling-Heap-Allocation-Challenges"},"doc://SpaceKit/tutorials/SpaceKit/Deep-Dive-into-SpaceKit-Concepts/Retrieving-Information-from-the-Blockchain":{"type":"topic","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Retrieving-Information-from-the-Blockchain","role":"article","abstract":[],"url":"\/tutorials\/spacekit\/deep-dive-into-spacekit-concepts\/retrieving-information-from-the-blockchain","kind":"article","title":"Retrieving Information from the Blockchain"},"FlipContractTestAdminSection2Step7.swift":{"highlights":[],"identifier":"FlipContractTestAdminSection2Step7.swift","content":["import SpaceKitTesting","import Flip","","private let PLAYER_ADDRESS = \"player\"","private let BOUNTY_ADDRESS = \"bounty\"","private let OWNER_ADDRESS = \"owner\"","private let CONTRACT_ADDRESS = \"contract\"","private let USDC_TOKEN_IDENTIFIER_STRING = \"USDC-abcdef\"","private var USDC_TOKEN_IDENTIFIER: TokenIdentifier {","    \"\\(USDC_TOKEN_IDENTIFIER_STRING)\"","}","","final class FlipTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: PLAYER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: BOUNTY_ADDRESS,","                balance: 0","            ),","            WorldAccount(","                address: OWNER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: CONTRACT_ADDRESS,","                balance: 0,","                controllers: [","                    AdminController.self,","                    GameController.self,","                    StorageController.self","                ]","            )","        ]","    }","    ","    func testInitEgld() throws {","        try self.initContract()","        try self.setupEgld()","    }","    ","    func testInitUsdc() throws {","        try self.initContract()","        try self.setupUsdc()","    }","    ","    func testSetMaximumBet() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBet = try storageController.getMaximumBet(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBet, 100)","    }","    ","    func testSetMaximumBetPercent() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBetPercent = try storageController.getMaximumBetPercent(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBetPercent, 100)","    }","    ","    func testSetMaximumBetNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBet(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testSetMaximumBetPercentNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBetPercent(","                tokenIdentifier: .egld,","                nonce: 0,","                percent: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testIncreaseReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.increaseReserve()","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testWithdrawReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.withdrawReserve(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 100","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    private func initContract() throws {","        try self.deployContract(","            at: CONTRACT_ADDRESS,","            arguments: [","               500,","               100,","               1","            ],","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","    }","    ","    private func setupEgld() throws {","        let adminController = self.instantiateController(","            AdminController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 100_000_000","            )","        )","    }","    ","    private func setupUsdc() throws {","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 100_000_000","                    )","                ]","            )","        )","    }","}"],"fileName":"FlipTest.swift","type":"file","fileType":"swift","syntax":"swift"},"FlipContractTestAdminSection1Step7.swift":{"highlights":[{"line":76},{"line":77}],"type":"file","content":["import SpaceKitTesting","import Flip","","private let PLAYER_ADDRESS = \"player\"","private let BOUNTY_ADDRESS = \"bounty\"","private let OWNER_ADDRESS = \"owner\"","private let CONTRACT_ADDRESS = \"contract\"","private let USDC_TOKEN_IDENTIFIER_STRING = \"USDC-abcdef\"","private var USDC_TOKEN_IDENTIFIER: TokenIdentifier {","    \"\\(USDC_TOKEN_IDENTIFIER_STRING)\"","}","","final class FlipTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: PLAYER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: BOUNTY_ADDRESS,","                balance: 0","            ),","            WorldAccount(","                address: OWNER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: CONTRACT_ADDRESS,","                balance: 0,","                controllers: [","                    AdminController.self,","                    GameController.self,","                    StorageController.self","                ]","            )","        ]","    }","    ","    func testInitEgld() throws {","        try self.initContract()","        try self.setupEgld()","    }","    ","    func testInitUsdc() throws {","        try self.initContract()","        try self.setupUsdc()","    }","    ","    func testSetMaximumBetNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBet(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 10_000_000","            )","            ","            XCTFail()","        } catch {","            ","        }","    }","    ","    private func initContract() throws {","        try self.deployContract(","            at: CONTRACT_ADDRESS,","            arguments: [","               500,","               100,","               1","            ],","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","    }","    ","    private func setupEgld() throws {","        let adminController = self.instantiateController(","            AdminController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 100_000_000","            )","        )","    }","    ","    private func setupUsdc() throws {","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 100_000_000","                    )","                ]","            )","        )","    }","}"],"identifier":"FlipContractTestAdminSection1Step7.swift","fileType":"swift","syntax":"swift","fileName":"FlipTest.swift"},"doc://SpaceKit/tutorials/SpaceKit/UnderstandTokens":{"url":"\/tutorials\/spacekit\/understandtokens","estimatedTime":"15min","role":"project","kind":"project","title":"Understand the ESDT Standard","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/UnderstandTokens","type":"topic","abstract":[{"text":"Learn about the ESDT standard used in the SpaceKit framework, a token model that supports fungible tokens, non-fungible tokens (NFTs), semi-fungible tokens, and meta-esdt tokens.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The SpaceKit framework uses a token standard called ESDT. This standard defines four types of tokens: fungible, non-fungible (NFT), semi-fungible, and meta-esdt."}]},"doc://SpaceKit/tutorials/SpaceKit/OperationsOnNonFungibleTokens#Add-Quantity-to-an-Existing-Nonce":{"title":"Add Quantity to an Existing Nonce","role":"pseudoSymbol","kind":"section","abstract":[{"text":"Non-fungible tokens (NFTs) are unique digital assets that cannot be interchanged. Each NFT is associated with a unique identifier, known as a nonce. You can think of it like an airline ticket—each ticket is assigned to a specific passenger, with individual preferences and details.","type":"text"}],"type":"section","url":"\/tutorials\/spacekit\/operationsonnonfungibletokens#Add-Quantity-to-an-Existing-Nonce","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnNonFungibleTokens#Add-Quantity-to-an-Existing-Nonce"},"doc://SpaceKit/tutorials/SpaceKit/FlipContractInitTests":{"url":"\/tutorials\/spacekit\/flipcontractinittests","type":"topic","kind":"project","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractInitTests","estimatedTime":"20min","abstract":[{"text":"Smart contracts are permissionless programs that often manage valuable assets. Because of this, writing comprehensive tests for both successful and failure scenarios is essential.","type":"text"}],"title":"Set Up Testing in the SwiftVM","role":"project"},"doc://SpaceKit/tutorials/SpaceKit/FlipContractWriteTheStorage#Implement-Contract-Storage":{"url":"\/tutorials\/spacekit\/flipcontractwritethestorage#Implement-Contract-Storage","kind":"section","type":"section","role":"pseudoSymbol","title":"Implement Contract Storage","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteTheStorage#Implement-Contract-Storage","abstract":[{"type":"text","text":"With your Flip project initialized, you’re ready to begin implementing the smart contract. The contract is composed of the following components:"}]},"doc://SpaceKit/tutorials/SpaceKit/FlipContractWriteAdmin#Set-the-Minimum-Block-Bounty-Delay":{"url":"\/tutorials\/spacekit\/flipcontractwriteadmin#Set-the-Minimum-Block-Bounty-Delay","role":"pseudoSymbol","kind":"section","title":"Set the Minimum Block Bounty Delay","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteAdmin#Set-the-Minimum-Block-Bounty-Delay","type":"section","abstract":[{"text":"Now that your storage is fully set up, it’s time to define the administrative endpoints that allow the contract owner to manage critical values and assets.","type":"text"}]},"doc://SpaceKit/tutorials/SpaceKit/Build-a-Coin-Flip-Contract/Define-the-Storage-for-the-Flip-Contract":{"title":"Define the Storage for the Flip Contract","role":"article","kind":"article","abstract":[],"type":"topic","url":"\/tutorials\/spacekit\/build-a-coin-flip-contract\/define-the-storage-for-the-flip-contract","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Build-a-Coin-Flip-Contract\/Define-the-Storage-for-the-Flip-Contract"},"doc://SpaceKit/tutorials/SpaceKit/Build-a-Coin-Flip-Contract/Implement-the-Game-Logic-for-the-Flip-Contract":{"title":"Implement the Game Logic for the Flip Contract","role":"article","kind":"article","abstract":[],"type":"topic","url":"\/tutorials\/spacekit\/build-a-coin-flip-contract\/implement-the-game-logic-for-the-flip-contract","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Build-a-Coin-Flip-Contract\/Implement-the-Game-Logic-for-the-Flip-Contract"},"doc://SpaceKit/tutorials/SpaceKit/FlipContractInitTests#Create-Helper-Functions-to-Deploy-and-Configure-the-Contract":{"url":"\/tutorials\/spacekit\/flipcontractinittests#Create-Helper-Functions-to-Deploy-and-Configure-the-Contract","role":"pseudoSymbol","kind":"section","title":"Create Helper Functions to Deploy and Configure the Contract","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractInitTests#Create-Helper-Functions-to-Deploy-and-Configure-the-Contract","type":"section","abstract":[{"type":"text","text":"Smart contracts are permissionless programs that often manage valuable assets. Because of this, writing comprehensive tests for both successful and failure scenarios is essential."}]},"doc://SpaceKit/tutorials/SpaceKit/FlipContractWriteAdmin#Set-Maximum-Bet-Limits":{"kind":"section","abstract":[{"type":"text","text":"Now that your storage is fully set up, it’s time to define the administrative endpoints that allow the contract owner to manage critical values and assets."}],"type":"section","url":"\/tutorials\/spacekit\/flipcontractwriteadmin#Set-Maximum-Bet-Limits","role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteAdmin#Set-Maximum-Bet-Limits","title":"Set Maximum Bet Limits"},"FlipContractTestAdminSection1Step2.swift":{"highlights":[{"line":66},{"line":67},{"line":68}],"fileType":"swift","syntax":"swift","identifier":"FlipContractTestAdminSection1Step2.swift","content":["import SpaceKitTesting","import Flip","","private let PLAYER_ADDRESS = \"player\"","private let BOUNTY_ADDRESS = \"bounty\"","private let OWNER_ADDRESS = \"owner\"","private let CONTRACT_ADDRESS = \"contract\"","private let USDC_TOKEN_IDENTIFIER_STRING = \"USDC-abcdef\"","private var USDC_TOKEN_IDENTIFIER: TokenIdentifier {","    \"\\(USDC_TOKEN_IDENTIFIER_STRING)\"","}","","final class FlipTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: PLAYER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: BOUNTY_ADDRESS,","                balance: 0","            ),","            WorldAccount(","                address: OWNER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: CONTRACT_ADDRESS,","                balance: 0,","                controllers: [","                    AdminController.self,","                    GameController.self,","                    StorageController.self","                ]","            )","        ]","    }","    ","    func testInitEgld() throws {","        try self.initContract()","        try self.setupEgld()","    }","    ","    func testInitUsdc() throws {","        try self.initContract()","        try self.setupUsdc()","    }","    ","    func testSetMaximumBetNotOwner() throws {","    }","    ","    private func initContract() throws {","        try self.deployContract(","            at: CONTRACT_ADDRESS,","            arguments: [","               500,","               100,","               1","            ],","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","    }","    ","    private func setupEgld() throws {","        let adminController = self.instantiateController(","            AdminController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 100_000_000","            )","        )","    }","    ","    private func setupUsdc() throws {","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 100_000_000","                    )","                ]","            )","        )","    }","}"],"fileName":"FlipTest.swift","type":"file"},"FlipContractTestAdminSection4Step6.swift":{"highlights":[{"line":179},{"line":180},{"line":181},{"line":182},{"line":183},{"line":184},{"line":185}],"fileType":"swift","content":["import SpaceKitTesting","import Flip","","private let PLAYER_ADDRESS = \"player\"","private let BOUNTY_ADDRESS = \"bounty\"","private let OWNER_ADDRESS = \"owner\"","private let CONTRACT_ADDRESS = \"contract\"","private let USDC_TOKEN_IDENTIFIER_STRING = \"USDC-abcdef\"","private var USDC_TOKEN_IDENTIFIER: TokenIdentifier {","    \"\\(USDC_TOKEN_IDENTIFIER_STRING)\"","}","","final class FlipTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: PLAYER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: BOUNTY_ADDRESS,","                balance: 0","            ),","            WorldAccount(","                address: OWNER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: CONTRACT_ADDRESS,","                balance: 0,","                controllers: [","                    AdminController.self,","                    GameController.self,","                    StorageController.self","                ]","            )","        ]","    }","    ","    func testInitEgld() throws {","        try self.initContract()","        try self.setupEgld()","    }","    ","    func testInitUsdc() throws {","        try self.initContract()","        try self.setupUsdc()","    }","    ","    func testSetMaximumBet() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBet = try storageController.getMaximumBet(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBet, 100)","    }","    ","    func testSetMaximumBetPercent() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBetPercent = try storageController.getMaximumBetPercent(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBetPercent, 100)","    }","    ","    func testIncreaseEgldReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 1_000","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        ","        XCTAssertEqual(tokenReserve, 1_000)","        XCTAssertEqual(contractBalance, 1_000)","    }","    ","    func testIncreaseUsdcReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 1_000","                    )","                ]","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        ","        XCTAssertEqual(tokenReserve, 1_000)","        XCTAssertEqual(contractBalance, 1_000)","    }","    ","    func testWithdrawEgldReserve() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.withdrawReserve(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 10_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        let ownerBalance = self.getAccount(address: OWNER_ADDRESS)!.balance","    }","    ","    func testSetMaximumBetNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBet(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testSetMaximumBetPercentNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBetPercent(","                tokenIdentifier: .egld,","                nonce: 0,","                percent: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testIncreaseReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.increaseReserve()","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testWithdrawReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.withdrawReserve(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 100","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    private func initContract() throws {","        try self.deployContract(","            at: CONTRACT_ADDRESS,","            arguments: [","               500,","               100,","               1","            ],","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","    }","    ","    private func setupEgld() throws {","        let adminController = self.instantiateController(","            AdminController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 100_000_000","            )","        )","    }","    ","    private func setupUsdc() throws {","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 100_000_000","                    )","                ]","            )","        )","    }","}"],"fileName":"FlipTest.swift","type":"file","syntax":"swift","identifier":"FlipContractTestAdminSection4Step6.swift"},"FlipContractTestAdminSection3Step7.swift":{"content":["import SpaceKitTesting","import Flip","","private let PLAYER_ADDRESS = \"player\"","private let BOUNTY_ADDRESS = \"bounty\"","private let OWNER_ADDRESS = \"owner\"","private let CONTRACT_ADDRESS = \"contract\"","private let USDC_TOKEN_IDENTIFIER_STRING = \"USDC-abcdef\"","private var USDC_TOKEN_IDENTIFIER: TokenIdentifier {","    \"\\(USDC_TOKEN_IDENTIFIER_STRING)\"","}","","final class FlipTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: PLAYER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: BOUNTY_ADDRESS,","                balance: 0","            ),","            WorldAccount(","                address: OWNER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: CONTRACT_ADDRESS,","                balance: 0,","                controllers: [","                    AdminController.self,","                    GameController.self,","                    StorageController.self","                ]","            )","        ]","    }","    ","    func testInitEgld() throws {","        try self.initContract()","        try self.setupEgld()","    }","    ","    func testInitUsdc() throws {","        try self.initContract()","        try self.setupUsdc()","    }","    ","    func testSetMaximumBet() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBet = try storageController.getMaximumBet(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBet, 100)","    }","    ","    func testSetMaximumBetPercent() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBetPercent = try storageController.getMaximumBetPercent(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBetPercent, 100)","    }","    ","    func testIncreaseEgldReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 1_000","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        ","        XCTAssertEqual(tokenReserve, 1_000)","        XCTAssertEqual(contractBalance, 1_000)","    }","    ","    func testSetMaximumBetNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBet(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testSetMaximumBetPercentNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBetPercent(","                tokenIdentifier: .egld,","                nonce: 0,","                percent: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testIncreaseReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.increaseReserve()","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testWithdrawReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.withdrawReserve(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 100","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    private func initContract() throws {","        try self.deployContract(","            at: CONTRACT_ADDRESS,","            arguments: [","               500,","               100,","               1","            ],","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","    }","    ","    private func setupEgld() throws {","        let adminController = self.instantiateController(","            AdminController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 100_000_000","            )","        )","    }","    ","    private func setupUsdc() throws {","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 100_000_000","                    )","                ]","            )","        )","    }","}"],"syntax":"swift","fileName":"FlipTest.swift","type":"file","fileType":"swift","identifier":"FlipContractTestAdminSection3Step7.swift","highlights":[{"line":127},{"line":128},{"line":129}]},"doc://SpaceKit/tutorials/SpaceKit/TokenAttributes":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/TokenAttributes","url":"\/tutorials\/spacekit\/tokenattributes","role":"project","type":"topic","kind":"project","abstract":[{"type":"text","text":"The ESDT standard enables embedding custom data within non-fungible tokens, allowing developers to extend the functionality of their smart contracts. This additional data, referred to as “attributes,” is tied to the token and transfers along with it between wallets."}],"estimatedTime":"15min","title":"Enhance Your Contracts with Token Attributes"},"FlipContractTestAdminSection4Step7.swift":{"identifier":"FlipContractTestAdminSection4Step7.swift","fileType":"swift","type":"file","content":["import SpaceKitTesting","import Flip","","private let PLAYER_ADDRESS = \"player\"","private let BOUNTY_ADDRESS = \"bounty\"","private let OWNER_ADDRESS = \"owner\"","private let CONTRACT_ADDRESS = \"contract\"","private let USDC_TOKEN_IDENTIFIER_STRING = \"USDC-abcdef\"","private var USDC_TOKEN_IDENTIFIER: TokenIdentifier {","    \"\\(USDC_TOKEN_IDENTIFIER_STRING)\"","}","","final class FlipTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: PLAYER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: BOUNTY_ADDRESS,","                balance: 0","            ),","            WorldAccount(","                address: OWNER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: CONTRACT_ADDRESS,","                balance: 0,","                controllers: [","                    AdminController.self,","                    GameController.self,","                    StorageController.self","                ]","            )","        ]","    }","    ","    func testInitEgld() throws {","        try self.initContract()","        try self.setupEgld()","    }","    ","    func testInitUsdc() throws {","        try self.initContract()","        try self.setupUsdc()","    }","    ","    func testSetMaximumBet() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBet = try storageController.getMaximumBet(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBet, 100)","    }","    ","    func testSetMaximumBetPercent() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBetPercent = try storageController.getMaximumBetPercent(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBetPercent, 100)","    }","    ","    func testIncreaseEgldReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 1_000","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        ","        XCTAssertEqual(tokenReserve, 1_000)","        XCTAssertEqual(contractBalance, 1_000)","    }","    ","    func testIncreaseUsdcReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 1_000","                    )","                ]","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        ","        XCTAssertEqual(tokenReserve, 1_000)","        XCTAssertEqual(contractBalance, 1_000)","    }","    ","    func testWithdrawEgldReserve() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.withdrawReserve(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 10_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        let ownerBalance = self.getAccount(address: OWNER_ADDRESS)!.balance","        ","        XCTAssertEqual(tokenReserve, 90_000_000)","        XCTAssertEqual(contractBalance, 90_000_000)","        XCTAssertEqual(ownerBalance, 10_000_000)","    }","    ","    func testSetMaximumBetNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBet(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testSetMaximumBetPercentNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBetPercent(","                tokenIdentifier: .egld,","                nonce: 0,","                percent: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testIncreaseReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.increaseReserve()","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testWithdrawReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.withdrawReserve(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 100","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    private func initContract() throws {","        try self.deployContract(","            at: CONTRACT_ADDRESS,","            arguments: [","               500,","               100,","               1","            ],","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","    }","    ","    private func setupEgld() throws {","        let adminController = self.instantiateController(","            AdminController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 100_000_000","            )","        )","    }","    ","    private func setupUsdc() throws {","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 100_000_000","                    )","                ]","            )","        )","    }","}"],"highlights":[{"line":186},{"line":187},{"line":188},{"line":189}],"syntax":"swift","fileName":"FlipTest.swift"},"doc://SpaceKit/tutorials/SpaceKit/AsyncCalls":{"title":"Interacting with Contracts Across Shards","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls","abstract":[{"type":"text","text":"Blockchain platforms using SpaceVM enable seamless execution within a sharded environment. Sharding divides a blockchain’s global state and validation workload into smaller, manageable units known as shards. This method enhances scalability without compromising decentralization, allowing nodes to operate without significant computational resources."}],"kind":"project","role":"project","estimatedTime":"15min","type":"topic","url":"\/tutorials\/spacekit\/asynccalls"},"FlipContractTestAdminSection1Step10.swift":{"type":"file","syntax":"swift","content":["import SpaceKitTesting","import Flip","","private let PLAYER_ADDRESS = \"player\"","private let BOUNTY_ADDRESS = \"bounty\"","private let OWNER_ADDRESS = \"owner\"","private let CONTRACT_ADDRESS = \"contract\"","private let USDC_TOKEN_IDENTIFIER_STRING = \"USDC-abcdef\"","private var USDC_TOKEN_IDENTIFIER: TokenIdentifier {","    \"\\(USDC_TOKEN_IDENTIFIER_STRING)\"","}","","final class FlipTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: PLAYER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: BOUNTY_ADDRESS,","                balance: 0","            ),","            WorldAccount(","                address: OWNER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: CONTRACT_ADDRESS,","                balance: 0,","                controllers: [","                    AdminController.self,","                    GameController.self,","                    StorageController.self","                ]","            )","        ]","    }","    ","    func testInitEgld() throws {","        try self.initContract()","        try self.setupEgld()","    }","    ","    func testInitUsdc() throws {","        try self.initContract()","        try self.setupUsdc()","    }","    ","    func testSetMaximumBetNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBet(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testSetMaximumBetPercentNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBetPercent(","                tokenIdentifier: .egld,","                nonce: 0,","                percent: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testIncreaseReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.increaseReserve()","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    private func initContract() throws {","        try self.deployContract(","            at: CONTRACT_ADDRESS,","            arguments: [","               500,","               100,","               1","            ],","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","    }","    ","    private func setupEgld() throws {","        let adminController = self.instantiateController(","            AdminController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 100_000_000","            )","        )","    }","    ","    private func setupUsdc() throws {","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 100_000_000","                    )","                ]","            )","        )","    }","}"],"highlights":[{"line":100},{"line":101},{"line":102},{"line":103},{"line":104},{"line":105},{"line":106},{"line":107},{"line":108},{"line":109},{"line":110},{"line":111},{"line":112}],"identifier":"FlipContractTestAdminSection1Step10.swift","fileType":"swift","fileName":"FlipTest.swift"},"FlipContractTestAdminSection1Step3.swift":{"identifier":"FlipContractTestAdminSection1Step3.swift","fileType":"swift","type":"file","content":["import SpaceKitTesting","import Flip","","private let PLAYER_ADDRESS = \"player\"","private let BOUNTY_ADDRESS = \"bounty\"","private let OWNER_ADDRESS = \"owner\"","private let CONTRACT_ADDRESS = \"contract\"","private let USDC_TOKEN_IDENTIFIER_STRING = \"USDC-abcdef\"","private var USDC_TOKEN_IDENTIFIER: TokenIdentifier {","    \"\\(USDC_TOKEN_IDENTIFIER_STRING)\"","}","","final class FlipTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: PLAYER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: BOUNTY_ADDRESS,","                balance: 0","            ),","            WorldAccount(","                address: OWNER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: CONTRACT_ADDRESS,","                balance: 0,","                controllers: [","                    AdminController.self,","                    GameController.self,","                    StorageController.self","                ]","            )","        ]","    }","    ","    func testInitEgld() throws {","        try self.initContract()","        try self.setupEgld()","    }","    ","    func testInitUsdc() throws {","        try self.initContract()","        try self.setupUsdc()","    }","    ","    func testSetMaximumBetNotOwner() throws {","        try self.initContract()","    }","    ","    private func initContract() throws {","        try self.deployContract(","            at: CONTRACT_ADDRESS,","            arguments: [","               500,","               100,","               1","            ],","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","    }","    ","    private func setupEgld() throws {","        let adminController = self.instantiateController(","            AdminController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 100_000_000","            )","        )","    }","    ","    private func setupUsdc() throws {","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 100_000_000","                    )","                ]","            )","        )","    }","}"],"highlights":[{"line":67}],"fileName":"FlipTest.swift","syntax":"swift"},"doc://SpaceKit/tutorials/SpaceKit/Getting-Started/Installing-the-Tools":{"abstract":[],"role":"article","kind":"article","url":"\/tutorials\/spacekit\/getting-started\/installing-the-tools","type":"topic","title":"Installing the Tools","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Getting-Started\/Installing-the-Tools"},"doc://SpaceKit/tutorials/SpaceKit/Getting-Started/Building-Your-First-Smart-Contract":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Getting-Started\/Building-Your-First-Smart-Contract","title":"Building Your First Smart Contract","kind":"article","url":"\/tutorials\/spacekit\/getting-started\/building-your-first-smart-contract","abstract":[],"type":"topic","role":"article"},"doc://SpaceKit/tutorials/SpaceKit/UnderstandTokens#Issuing-a-Non-Fungible-Token-from-Your-Contract":{"title":"Issuing a Non-Fungible Token from Your Contract","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/UnderstandTokens#Issuing-a-Non-Fungible-Token-from-Your-Contract","type":"section","abstract":[{"type":"text","text":"Learn about the ESDT standard used in the SpaceKit framework, a token model that supports fungible tokens, non-fungible tokens (NFTs), semi-fungible tokens, and meta-esdt tokens."},{"type":"text","text":" "},{"type":"text","text":"The SpaceKit framework uses a token standard called ESDT. This standard defines four types of tokens: fungible, non-fungible (NFT), semi-fungible, and meta-esdt."}],"kind":"section","role":"pseudoSymbol","url":"\/tutorials\/spacekit\/understandtokens#Issuing-a-Non-Fungible-Token-from-Your-Contract"},"doc://SpaceKit/tutorials/SpaceKit/FlipContractInitTests#Set-Up-the-Test-Project":{"title":"Set Up the Test Project","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractInitTests#Set-Up-the-Test-Project","abstract":[{"type":"text","text":"Smart contracts are permissionless programs that often manage valuable assets. Because of this, writing comprehensive tests for both successful and failure scenarios is essential."}],"url":"\/tutorials\/spacekit\/flipcontractinittests#Set-Up-the-Test-Project","type":"section","kind":"section","role":"pseudoSymbol"},"doc://SpaceKit/tutorials/SpaceKit/OperationsOnFungibleTokens#Mint-New-Tokens":{"url":"\/tutorials\/spacekit\/operationsonfungibletokens#Mint-New-Tokens","role":"pseudoSymbol","abstract":[{"type":"text","text":"Fungible tokens function similarly to traditional currencies, making them the simplest type of token to work with."}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnFungibleTokens#Mint-New-Tokens","type":"section","title":"Mint New Tokens","kind":"section"},"FlipContractTestAdminSection1Step9.swift":{"type":"file","syntax":"swift","content":["import SpaceKitTesting","import Flip","","private let PLAYER_ADDRESS = \"player\"","private let BOUNTY_ADDRESS = \"bounty\"","private let OWNER_ADDRESS = \"owner\"","private let CONTRACT_ADDRESS = \"contract\"","private let USDC_TOKEN_IDENTIFIER_STRING = \"USDC-abcdef\"","private var USDC_TOKEN_IDENTIFIER: TokenIdentifier {","    \"\\(USDC_TOKEN_IDENTIFIER_STRING)\"","}","","final class FlipTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: PLAYER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: BOUNTY_ADDRESS,","                balance: 0","            ),","            WorldAccount(","                address: OWNER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: CONTRACT_ADDRESS,","                balance: 0,","                controllers: [","                    AdminController.self,","                    GameController.self,","                    StorageController.self","                ]","            )","        ]","    }","    ","    func testInitEgld() throws {","        try self.initContract()","        try self.setupEgld()","    }","    ","    func testInitUsdc() throws {","        try self.initContract()","        try self.setupUsdc()","    }","    ","    func testSetMaximumBetNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBet(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testSetMaximumBetPercentNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBetPercent(","                tokenIdentifier: .egld,","                nonce: 0,","                percent: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    private func initContract() throws {","        try self.deployContract(","            at: CONTRACT_ADDRESS,","            arguments: [","               500,","               100,","               1","            ],","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","    }","    ","    private func setupEgld() throws {","        let adminController = self.instantiateController(","            AdminController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 100_000_000","            )","        )","    }","    ","    private func setupUsdc() throws {","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 100_000_000","                    )","                ]","            )","        )","    }","}"],"highlights":[{"line":83},{"line":84},{"line":85},{"line":86},{"line":87},{"line":88},{"line":89},{"line":90},{"line":91},{"line":92},{"line":93},{"line":94},{"line":95},{"line":96},{"line":97},{"line":98},{"line":99}],"identifier":"FlipContractTestAdminSection1Step9.swift","fileType":"swift","fileName":"FlipTest.swift"},"FlipContractTestAdminSection1Step4.swift":{"content":["import SpaceKitTesting","import Flip","","private let PLAYER_ADDRESS = \"player\"","private let BOUNTY_ADDRESS = \"bounty\"","private let OWNER_ADDRESS = \"owner\"","private let CONTRACT_ADDRESS = \"contract\"","private let USDC_TOKEN_IDENTIFIER_STRING = \"USDC-abcdef\"","private var USDC_TOKEN_IDENTIFIER: TokenIdentifier {","    \"\\(USDC_TOKEN_IDENTIFIER_STRING)\"","}","","final class FlipTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: PLAYER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: BOUNTY_ADDRESS,","                balance: 0","            ),","            WorldAccount(","                address: OWNER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: CONTRACT_ADDRESS,","                balance: 0,","                controllers: [","                    AdminController.self,","                    GameController.self,","                    StorageController.self","                ]","            )","        ]","    }","    ","    func testInitEgld() throws {","        try self.initContract()","        try self.setupEgld()","    }","    ","    func testInitUsdc() throws {","        try self.initContract()","        try self.setupUsdc()","    }","    ","    func testSetMaximumBetNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","    }","    ","    private func initContract() throws {","        try self.deployContract(","            at: CONTRACT_ADDRESS,","            arguments: [","               500,","               100,","               1","            ],","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","    }","    ","    private func setupEgld() throws {","        let adminController = self.instantiateController(","            AdminController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 100_000_000","            )","        )","    }","    ","    private func setupUsdc() throws {","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 100_000_000","                    )","                ]","            )","        )","    }","}"],"highlights":[{"line":68}],"fileName":"FlipTest.swift","fileType":"swift","identifier":"FlipContractTestAdminSection1Step4.swift","type":"file","syntax":"swift"},"doc://SpaceKit/tutorials/SpaceKit/FlipContractTestTheGame#Test-Successful-Calls-to-the-flip-Endpoint":{"title":"Test Successful Calls to the flip Endpoint","role":"pseudoSymbol","kind":"section","abstract":[{"text":"This final chapter of the testing tutorial focuses on validating the core game logic implemented in the ","type":"text"},{"type":"codeVoice","code":"GameController"},{"type":"text","text":"."}],"type":"section","url":"\/tutorials\/spacekit\/flipcontracttestthegame#Test-Successful-Calls-to-the-flip-Endpoint","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractTestTheGame#Test-Successful-Calls-to-the-flip-Endpoint"},"doc://SpaceKit/tutorials/SpaceKit/Build-a-Coin-Flip-Contract/Test-the-Game-Logic-for-the-Flip-Contract":{"url":"\/tutorials\/spacekit\/build-a-coin-flip-contract\/test-the-game-logic-for-the-flip-contract","type":"topic","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Build-a-Coin-Flip-Contract\/Test-the-Game-Logic-for-the-Flip-Contract","kind":"article","abstract":[],"role":"article","title":"Test the Game Logic for the Flip Contract"},"doc://SpaceKit/tutorials/SpaceKit/CodingYourFirstContract#Initializing-the-Project":{"url":"\/tutorials\/spacekit\/codingyourfirstcontract#Initializing-the-Project","role":"pseudoSymbol","kind":"section","title":"Initializing the Project","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Initializing-the-Project","type":"section","abstract":[{"type":"text","text":"In this tutorial, you’ll create a simple smart contract that manages a counter. Users can increment or decrement the counter, and the changes are persisted across contract executions."}]},"doc://SpaceKit/tutorials/SpaceKit/FlipContractWriteTheGame#Implement-the-makeFlip-Function":{"url":"\/tutorials\/spacekit\/flipcontractwritethegame#Implement-the-makeFlip-Function","type":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteTheGame#Implement-the-makeFlip-Function","kind":"section","abstract":[{"type":"text","text":"With the storage and administrative endpoints complete, it’s time to build the core gameplay mechanics."}],"role":"pseudoSymbol","title":"Implement the makeFlip Function"},"doc://SpaceKit/tutorials/SpaceKit/StoreValues#Working-with-Storage-for-Single-Value-Persistence":{"title":"Working with @Storage for Single Value Persistence","role":"pseudoSymbol","abstract":[{"type":"text","text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory."}],"kind":"section","url":"\/tutorials\/spacekit\/storevalues#Working-with-Storage-for-Single-Value-Persistence","type":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues#Working-with-Storage-for-Single-Value-Persistence"},"doc://SpaceKit/tutorials/SpaceKit/InstallingTools#Installing-SpaceKits-Dependencies":{"url":"\/tutorials\/spacekit\/installingtools#Installing-SpaceKits-Dependencies","role":"pseudoSymbol","kind":"section","title":"Installing SpaceKit's Dependencies","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Installing-SpaceKits-Dependencies","type":"section","abstract":[{"type":"text","text":"Before writing your first smart contract with SpaceKit, ensure you have the necessary tools installed."}]}}}