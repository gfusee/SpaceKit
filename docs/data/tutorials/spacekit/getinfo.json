{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo"},"sections":[{"content":[{"inlineContent":[{"text":"Many smart contracts rely on contextual data to execute their operations effectively. This data can include input payments, the caller’s address, the current time, the balance of a specific account, or even the contract owner.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The Space framework provides an intuitive way to retrieve all of this information using the "},{"code":"Message","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Blockchain"},{"type":"text","text":" objects."}]}],"estimatedTimeInMinutes":10,"title":"Retrieving Information from the Blockchain","chapter":"Retrieving Information from the Blockchain","kind":"hero"},{"tasks":[{"anchor":"Accessing-Transaction-Context-Data","stepsSection":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Start by defining the contract’s basic structure."}]}],"caption":[],"media":null,"type":"step","code":"GetInfoSection1Step1.swift","runtimePreview":null},{"caption":[{"type":"paragraph","inlineContent":[{"text":"Note: This variable will be initialized later in the contract’s ","type":"text"},{"type":"codeVoice","code":"init"},{"text":" function.","type":"text"}]}],"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Track the specific token type to be deposited. Store its identifier in the contract’s storage using a "},{"code":"@Storage","type":"codeVoice"},{"text":" variable.","type":"text"}]}],"code":"GetInfoSection1Step2.swift","runtimePreview":null,"media":null},{"runtimePreview":null,"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Reminder: Numeric storage variables default to 0."}]}],"type":"step","media":null,"content":[{"inlineContent":[{"type":"text","text":"Create a "},{"type":"codeVoice","code":"@Mapping"},{"type":"text","text":" variable to keep track of the total amount deposited by each user."}],"type":"paragraph"}],"code":"GetInfoSection1Step3.swift"},{"media":null,"type":"step","runtimePreview":null,"caption":[],"code":"GetInfoSection1Step4.swift","content":[{"inlineContent":[{"type":"text","text":"Add an initializer to the contract, which accepts the token identifier as a parameter."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Define the ","type":"text"},{"type":"codeVoice","code":"deposit"},{"text":" endpoint for the contract.","type":"text"}]}],"type":"step","media":null,"runtimePreview":null,"caption":[],"code":"GetInfoSection1Step5.swift"},{"caption":[],"media":null,"runtimePreview":null,"type":"step","code":"GetInfoSection1Step6.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the "},{"type":"codeVoice","code":"Message.caller"},{"type":"text","text":" property to retrieve the address of the user making the deposit."}]}]},{"content":[{"inlineContent":[{"text":"Access the single fungible token payment using ","type":"text"},{"code":"Message.singleFungibleEsdt","type":"codeVoice"},{"text":". If the transaction doesn’t include exactly one fungible token payment, the transaction will fail.","type":"text"}],"type":"paragraph"}],"code":"GetInfoSection1Step7.swift","runtimePreview":null,"type":"step","media":null,"caption":[{"inlineContent":[{"text":"Note: The ","type":"text"},{"type":"codeVoice","code":"Message"},{"text":" object also allows retrieval of multi payments, non-fungible tokens, and EGLD payments.","type":"text"}],"type":"paragraph"}]},{"caption":[],"code":"GetInfoSection1Step8.swift","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Verify the payment by comparing the token identifier with the stored value."}]}],"type":"step","media":null},{"caption":[],"media":null,"code":"GetInfoSection1Step9.swift","runtimePreview":null,"content":[{"inlineContent":[{"text":"Add the payment amount to the storage mapping for the caller’s address.","type":"text"}],"type":"paragraph"}],"type":"step"}],"contentSection":[{"content":[{"inlineContent":[{"type":"text","text":"In this section, you will create a simple smart contract that allows users to deposit a specified fungible token. The contract will track the total amount of tokens deposited by each user."}],"type":"paragraph"}],"kind":"contentAndMedia","mediaPosition":"trailing"}],"title":"Accessing Transaction Context Data"},{"anchor":"Accessing-Blockchain-Context-Data","title":"Accessing Blockchain Context Data","contentSection":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In this section, you will improve the previous contract by adding constraints: each address can deposit only once every 24 hours, and deposits must not exceed 10% of the user’s token balance."}]}],"kind":"contentAndMedia","mediaPosition":"trailing"}],"stepsSection":[{"runtimePreview":null,"media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Start by using the contract from the previous section.","type":"text"}]}],"caption":[],"type":"step","code":"GetInfoSection2Step1.swift"},{"caption":[],"media":null,"runtimePreview":null,"type":"step","code":"GetInfoSection2Step2.swift","content":[{"inlineContent":[{"type":"text","text":"Define a global constant representing the number of seconds in a day."}],"type":"paragraph"}]},{"code":"GetInfoSection2Step3.swift","type":"step","runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"Add a mapping to store the last deposit time for each user."}],"type":"paragraph"}],"media":null,"caption":[]},{"media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"In the ","type":"text"},{"code":"deposit","type":"codeVoice"},{"type":"text","text":" endpoint, retrieve the current timestamp using "},{"code":"Blockchain.getBlockTimestamp()","type":"codeVoice"},{"text":".","type":"text"}]}],"code":"GetInfoSection2Step4.swift","caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Note: The timestamp is the number of seconds since January 1, 1970."}]}],"runtimePreview":null,"type":"step"},{"runtimePreview":null,"caption":[],"media":null,"type":"step","code":"GetInfoSection2Step5.swift","content":[{"type":"paragraph","inlineContent":[{"text":"Retrieve the last deposit time for the caller from the storage.","type":"text"}]}]},{"caption":[],"type":"step","content":[{"inlineContent":[{"type":"text","text":"Compute the next allowed deposit time by adding one day’s worth of seconds to the last deposit time."}],"type":"paragraph"}],"media":null,"code":"GetInfoSection2Step6.swift","runtimePreview":null},{"code":"GetInfoSection2Step7.swift","type":"step","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Ensure the caller is allowed to deposit now.","type":"text"}]}],"media":null,"caption":[]},{"type":"step","runtimePreview":null,"caption":[],"media":null,"code":"GetInfoSection2Step8.swift","content":[{"type":"paragraph","inlineContent":[{"text":"If the deposit isn’t allowed yet, calculate the remaining time before the next deposit is permitted.","type":"text"}]}]},{"runtimePreview":null,"type":"step","code":"GetInfoSection2Step9.swift","media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the calculated time to return an error message with the remaining time."}]}],"caption":[{"type":"paragraph","inlineContent":[{"text":"Tip: You can interpolate buffers, addresses, and numeric types into string literals when creating error messages.","type":"text"}]}]},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Retrieve the caller’s token balance using ","type":"text"},{"type":"codeVoice","code":"Blockchain.getBalance()"},{"text":".","type":"text"}]}],"media":null,"runtimePreview":null,"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Tip: If no token identifier is provided, the EGLD balance is returned."}]}],"code":"GetInfoSection2Step10.swift"},{"type":"step","caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Note: Be cautious when performing integer division as any fractional part is discarded."}]}],"media":null,"code":"GetInfoSection2Step11.swift","content":[{"inlineContent":[{"text":"Calculate the maximum allowable deposit by dividing the caller’s token balance by 10.","type":"text"}],"type":"paragraph"}],"runtimePreview":null},{"media":null,"code":"GetInfoSection2Step12.swift","type":"step","runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"Ensure the deposit amount does not exceed the maximum allowable limit."}],"type":"paragraph"}],"caption":[]},{"runtimePreview":null,"media":null,"code":"GetInfoSection2Step13.swift","type":"step","caption":[],"content":[{"inlineContent":[{"text":"Update the last deposit time for the caller to the current block timestamp.","type":"text"}],"type":"paragraph"}]}]}],"kind":"tasks"},{"action":{"overridingTitle":"Get started","isActive":true,"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls","overridingTitleInlineContent":[{"type":"text","text":"Get started"}],"type":"reference"},"featuredEyebrow":"Tutorial","title":"Interact with Other Contracts","abstract":[{"type":"text","text":"Smart contracts can interact not only with users but also with other smart contracts. This enables more advanced protocols by leveraging existing ones. For example, you could integrate a decentralized exchange directly into your contract to perform token swaps. Decentralized applications often involve multiple contracts, each with a dedicated role, working together to achieve complex functionality—similar to microservices in backend systems."}],"kind":"callToAction"}],"metadata":{"title":"Retrieving Information from the Blockchain","category":"Space","categoryPathComponent":"Space","role":"project"},"kind":"project","variants":[{"paths":["\/tutorials\/spacekit\/getinfo"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"major":0,"patch":0,"minor":3},"hierarchy":{"paths":[["doc:\/\/SpaceKit\/tutorials\/Space","doc:\/\/SpaceKit\/tutorials\/Space\/Deep-Dive-into-Space-Concepts","doc:\/\/SpaceKit\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Retrieving-Information-from-the-Blockchain"]],"reference":"doc:\/\/SpaceKit\/tutorials\/Space","modules":[{"reference":"doc:\/\/SpaceKit\/tutorials\/Space\/Getting-Started\/Installing-the-Tools","projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools","sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Installing-Spaces-Dependencies","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Setting-Up-the-Space-CLI"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract","kind":"task"}]}]},{"reference":"doc:\/\/SpaceKit\/tutorials\/Space\/Getting-Started\/Building-Your-First-Smart-Contract","projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract","sections":[{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Initializing-the-Project"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Writing-the-Contract-Code","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Testing-the-Contract"}]}]},{"reference":"doc:\/\/SpaceKit\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Exploring-Space's-Types","projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes","sections":[{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Understanding-the-Buffer-Type"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Working-with-the-BigUint-Type","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Working-with-the-Vector-Type"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Creating-Your-Own-Types","kind":"task"}]}]},{"reference":"doc:\/\/SpaceKit\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Persisting-Data-Across-Executions","projects":[{"sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues#Working-with-Storage-for-Single-Value-Persistence","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage","kind":"task"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues"}]},{"reference":"doc:\/\/SpaceKit\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Retrieving-Information-from-the-Blockchain","projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo","sections":[{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo#Accessing-Transaction-Context-Data"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo#Accessing-Blockchain-Context-Data","kind":"task"}]}]},{"projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls","sections":[{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls#Declare-the-Callee-Proxy"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls#Perform-a-Synchronous-Call","kind":"task"}]}],"reference":"doc:\/\/SpaceKit\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Interacting-with-Other-Contracts"},{"reference":"doc:\/\/SpaceKit\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Calling-Contracts-Across-Shards","projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls","sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls#Declare-the-Callee-Proxy","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls#Perform-an-Asynchronous-Call","kind":"task"}]}]}]},"references":{"GetInfoSection2Step10.swift":{"identifier":"GetInfoSection2Step10.swift","type":"file","content":["import SpaceKit","","let secondsInADay: UInt64 = 86_400","","@Contract struct MyContract {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","    @Mapping<Address, UInt64>(key: \"lastDepositTime\") var lastDepositTimeForAddress","    @Mapping<Address, BigUint>(key: \"depositedTokens\") var depositedTokensForAddress","    ","    init(tokenIdentifier: Buffer) {","        self.tokenIdentifier = tokenIdentifier","    }","    ","    public mutating func deposit() {","        let caller = Message.caller","        let payment = Message.singleFungibleEsdt","        ","        guard payment.tokenIdentifier == self.tokenIdentifier else {","            smartContractError(message: \"Wrong payment provided\")","        }","        ","        let currentTime = Blockchain.getBlockTimestamp()","        let callerLastDepositTime = self.lastDepositTimeForAddress[caller]","        let nextAllowedTime = callerLastDepositTime + secondsInADay","        ","        guard currentTime > nextAllowedTime else {","            let secondsRemaining = nextAllowedTime - currentTime","            ","            smartContractError(message: \"Not allowed to deposit yet. Please wait \\(secondsRemaining) seconds.\")","        }","        ","        let callerTokenBalance = caller.getBalance(tokenIdentifier: payment.tokenIdentifier)","        ","        self.depositedTokensForAddress[caller] = self.depositedTokensForAddress[caller] + payment.amount","    }","}"],"fileName":"lib.swift","fileType":"swift","syntax":"swift","highlights":[{"line":32},{"line":33}]},"GetInfoSection1Step5.swift":{"fileType":"swift","identifier":"GetInfoSection1Step5.swift","highlights":[{"line":10},{"line":11},{"line":12},{"line":13}],"type":"file","syntax":"swift","content":["import SpaceKit","","@Contract struct MyContract {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","    @Mapping<Address, BigUint>(key: \"depositedTokens\") var depositedTokensForAddress","    ","    init(tokenIdentifier: Buffer) {","        self.tokenIdentifier = tokenIdentifier","    }","    ","    public mutating func deposit() {","        ","    }","}"],"fileName":"lib.swift"},"doc://SpaceKit/tutorials/SpaceKit/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract","role":"pseudoSymbol","title":"Initializing and Compiling Your First Smart Contract","type":"section","abstract":[{"type":"text","text":"Before writing your first smart contract with Space, ensure you have the necessary tools installed."}],"url":"\/tutorials\/spacekit\/installingtools#Initializing-and-Compiling-Your-First-Smart-Contract","kind":"section"},"GetInfoSection2Step13.swift":{"fileType":"swift","identifier":"GetInfoSection2Step13.swift","highlights":[{"line":40}],"type":"file","syntax":"swift","content":["import SpaceKit","","let secondsInADay: UInt64 = 86_400","","@Contract struct MyContract {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","    @Mapping<Address, UInt64>(key: \"lastDepositTime\") var lastDepositTimeForAddress","    @Mapping<Address, BigUint>(key: \"depositedTokens\") var depositedTokensForAddress","    ","    init(tokenIdentifier: Buffer) {","        self.tokenIdentifier = tokenIdentifier","    }","    ","    public mutating func deposit() {","        let caller = Message.caller","        let payment = Message.singleFungibleEsdt","        ","        guard payment.tokenIdentifier == self.tokenIdentifier else {","            smartContractError(message: \"Wrong payment provided\")","        }","        ","        let callerLastDepositTime = self.lastDepositTimeForAddress[caller]","        let currentTime = Blockchain.getBlockTimestamp()","        let nextAllowedTime = callerLastDepositTime + secondsInADay","        ","        guard currentTime > nextAllowedTime else {","            let secondsRemaining = nextAllowedTime - currentTime","            ","            smartContractError(message: \"Not allowed to deposit yet. Please wait \\(secondsRemaining) seconds.\")","        }","        ","        let callerTokenBalance = caller.getBalance(tokenIdentifier: payment.tokenIdentifier)","        let maxAllowedDeposit = callerTokenBalance \/ 10","        ","        guard payment.amount <= maxAllowedDeposit else {","            smartContractError(message: \"Payment amount should not be greater than 10% of the caller's balance for the token. Allowance: \\(maxAllowedDeposit)\")","        }","        ","        self.depositedTokensForAddress[caller] = self.depositedTokensForAddress[caller] + payment.amount","        self.lastDepositTimeForAddress[caller] = currentTime","    }","}"],"fileName":"lib.swift"},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Creating-Your-Own-Types":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Creating-Your-Own-Types","role":"pseudoSymbol","title":"Creating Your Own Types","type":"section","abstract":[{"type":"text","text":"Space provides types that allow you to leverage the full potential of the SpaceVM."}],"url":"\/tutorials\/spacekit\/familiarizewithtypes#Creating-Your-Own-Types","kind":"section"},"doc://SpaceKit/tutorials/SpaceKit/CodingYourFirstContract#Testing-the-Contract":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Testing-the-Contract","kind":"section","url":"\/tutorials\/spacekit\/codingyourfirstcontract#Testing-the-Contract","abstract":[{"type":"text","text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user."}],"type":"section","role":"pseudoSymbol","title":"Testing the Contract"},"doc://SpaceKit/tutorials/Space/Getting-Started/Building-Your-First-Smart-Contract":{"identifier":"doc:\/\/SpaceKit\/tutorials\/Space\/Getting-Started\/Building-Your-First-Smart-Contract","role":"article","title":"Building Your First Smart Contract","type":"topic","abstract":[],"url":"\/tutorials\/space\/getting-started\/building-your-first-smart-contract","kind":"article"},"doc://SpaceKit/tutorials/SpaceKit/CodingYourFirstContract":{"estimatedTime":"20min","role":"project","type":"topic","title":"Building Your First Smart Contract","abstract":[{"type":"text","text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user."}],"kind":"project","url":"\/tutorials\/spacekit\/codingyourfirstcontract","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract"},"doc://SpaceKit/tutorials/Space/Deep-Dive-into-Space-Concepts/Interacting-with-Other-Contracts":{"url":"\/tutorials\/space\/deep-dive-into-space-concepts\/interacting-with-other-contracts","identifier":"doc:\/\/SpaceKit\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Interacting-with-Other-Contracts","abstract":[],"title":"Interacting with Other Contracts","role":"article","kind":"article","type":"topic"},"doc://SpaceKit/tutorials/Space/Deep-Dive-into-Space-Concepts/Exploring-Space's-Types":{"kind":"article","type":"topic","url":"\/tutorials\/space\/deep-dive-into-space-concepts\/exploring-space's-types","identifier":"doc:\/\/SpaceKit\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Exploring-Space's-Types","role":"article","title":"Exploring Space's Types","abstract":[]},"GetInfoSection1Step9.swift":{"content":["import SpaceKit","","@Contract struct MyContract {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","    @Mapping<Address, BigUint>(key: \"depositedTokens\") var depositedTokensForAddress","    ","    init(tokenIdentifier: Buffer) {","        self.tokenIdentifier = tokenIdentifier","    }","    ","    public mutating func deposit() {","        let caller = Message.caller","        let payment = Message.singleFungibleEsdt","        ","        guard payment.tokenIdentifier == self.tokenIdentifier else {","            smartContractError(message: \"Wrong payment provided\")","        }","        ","        self.depositedTokensForAddress[caller] = self.depositedTokensForAddress[caller] + payment.amount","    }","}"],"fileName":"lib.swift","type":"file","syntax":"swift","identifier":"GetInfoSection1Step9.swift","highlights":[{"line":18},{"line":19}],"fileType":"swift"},"doc://SpaceKit/tutorials/SpaceKit/CodingYourFirstContract#Initializing-the-Project":{"abstract":[{"type":"text","text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user."}],"kind":"section","role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Initializing-the-Project","type":"section","title":"Initializing the Project","url":"\/tutorials\/spacekit\/codingyourfirstcontract#Initializing-the-Project"},"GetInfoSection1Step3.swift":{"syntax":"swift","content":["import SpaceKit","","@Contract struct MyContract {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","    @Mapping<Address, BigUint>(key: \"depositedTokens\") var depositedTokensForAddress","}"],"type":"file","fileType":"swift","fileName":"lib.swift","identifier":"GetInfoSection1Step3.swift","highlights":[{"line":5}]},"doc://SpaceKit/tutorials/SpaceKit/GetInfo#Accessing-Blockchain-Context-Data":{"abstract":[{"type":"text","text":"Many smart contracts rely on contextual data to execute their operations effectively. This data can include input payments, the caller’s address, the current time, the balance of a specific account, or even the contract owner."}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo#Accessing-Blockchain-Context-Data","type":"section","kind":"section","title":"Accessing Blockchain Context Data","role":"pseudoSymbol","url":"\/tutorials\/spacekit\/getinfo#Accessing-Blockchain-Context-Data"},"doc://SpaceKit/tutorials/SpaceKit/StoreValues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage":{"kind":"section","role":"pseudoSymbol","abstract":[{"text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory.","type":"text"}],"url":"\/tutorials\/spacekit\/storevalues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage","title":"Leveraging @Mapping for Dynamic Key-Value Storage","type":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage"},"GetInfoSection1Step4.swift":{"content":["import SpaceKit","","@Contract struct MyContract {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","    @Mapping<Address, BigUint>(key: \"depositedTokens\") var depositedTokensForAddress","    ","    init(tokenIdentifier: Buffer) {","        self.tokenIdentifier = tokenIdentifier","    }","}"],"highlights":[{"line":6},{"line":7},{"line":8},{"line":9}],"type":"file","fileName":"lib.swift","fileType":"swift","identifier":"GetInfoSection1Step4.swift","syntax":"swift"},"GetInfoSection2Step2.swift":{"type":"file","content":["import SpaceKit","","let secondsInADay: UInt64 = 86_400","","@Contract struct MyContract {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","    @Mapping<Address, BigUint>(key: \"depositedTokens\") var depositedTokensForAddress","    ","    init(tokenIdentifier: Buffer) {","        self.tokenIdentifier = tokenIdentifier","    }","    ","    public mutating func deposit() {","        let caller = Message.caller","        let payment = Message.singleFungibleEsdt","        ","        guard payment.tokenIdentifier == self.tokenIdentifier else {","            smartContractError(message: \"Wrong payment provided\")","        }","        ","        self.depositedTokensForAddress[caller] = self.depositedTokensForAddress[caller] + payment.amount","    }","}"],"identifier":"GetInfoSection2Step2.swift","syntax":"swift","fileName":"lib.swift","fileType":"swift","highlights":[{"line":3},{"line":4}]},"doc://SpaceKit/tutorials/SpaceKit/GetInfo#Accessing-Transaction-Context-Data":{"type":"section","abstract":[{"type":"text","text":"Many smart contracts rely on contextual data to execute their operations effectively. This data can include input payments, the caller’s address, the current time, the balance of a specific account, or even the contract owner."}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo#Accessing-Transaction-Context-Data","role":"pseudoSymbol","url":"\/tutorials\/spacekit\/getinfo#Accessing-Transaction-Context-Data","title":"Accessing Transaction Context Data","kind":"section"},"GetInfoSection1Step1.swift":{"syntax":"swift","fileName":"lib.swift","content":["import SpaceKit","","@Contract struct MyContract {","    ","}"],"type":"file","fileType":"swift","highlights":[],"identifier":"GetInfoSection1Step1.swift"},"GetInfoSection1Step6.swift":{"type":"file","syntax":"swift","highlights":[{"line":12}],"content":["import SpaceKit","","@Contract struct MyContract {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","    @Mapping<Address, BigUint>(key: \"depositedTokens\") var depositedTokensForAddress","    ","    init(tokenIdentifier: Buffer) {","        self.tokenIdentifier = tokenIdentifier","    }","    ","    public mutating func deposit() {","        let caller = Message.caller","    }","}"],"identifier":"GetInfoSection1Step6.swift","fileName":"lib.swift","fileType":"swift"},"GetInfoSection2Step9.swift":{"syntax":"swift","fileName":"lib.swift","content":["import SpaceKit","","let secondsInADay: UInt64 = 86_400","","@Contract struct MyContract {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","    @Mapping<Address, UInt64>(key: \"lastDepositTime\") var lastDepositTimeForAddress","    @Mapping<Address, BigUint>(key: \"depositedTokens\") var depositedTokensForAddress","    ","    init(tokenIdentifier: Buffer) {","        self.tokenIdentifier = tokenIdentifier","    }","    ","    public mutating func deposit() {","        let caller = Message.caller","        let payment = Message.singleFungibleEsdt","        ","        guard payment.tokenIdentifier == self.tokenIdentifier else {","            smartContractError(message: \"Wrong payment provided\")","        }","        ","        let currentTime = Blockchain.getBlockTimestamp()","        let callerLastDepositTime = self.lastDepositTimeForAddress[caller]","        let nextAllowedTime = callerLastDepositTime + secondsInADay","        ","        guard currentTime > nextAllowedTime else {","            let secondsRemaining = nextAllowedTime - currentTime","            ","            smartContractError(message: \"Not allowed to deposit yet. Please wait \\(secondsRemaining) seconds.\")","        }","        ","        self.depositedTokensForAddress[caller] = self.depositedTokensForAddress[caller] + payment.amount","    }","}"],"type":"file","fileType":"swift","highlights":[{"line":28},{"line":29}],"identifier":"GetInfoSection2Step9.swift"},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Understanding-the-Buffer-Type":{"type":"section","abstract":[{"type":"text","text":"Space provides types that allow you to leverage the full potential of the SpaceVM."}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Understanding-the-Buffer-Type","role":"pseudoSymbol","url":"\/tutorials\/spacekit\/familiarizewithtypes#Understanding-the-Buffer-Type","title":"Understanding the Buffer Type","kind":"section"},"GetInfoSection1Step7.swift":{"syntax":"swift","fileName":"lib.swift","content":["import SpaceKit","","@Contract struct MyContract {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","    @Mapping<Address, BigUint>(key: \"depositedTokens\") var depositedTokensForAddress","    ","    init(tokenIdentifier: Buffer) {","        self.tokenIdentifier = tokenIdentifier","    }","    ","    public mutating func deposit() {","        let caller = Message.caller","        let payment = Message.singleFungibleEsdt","    }","}"],"type":"file","fileType":"swift","highlights":[{"line":13}],"identifier":"GetInfoSection1Step7.swift"},"doc://SpaceKit/tutorials/SpaceKit/AsyncCalls":{"abstract":[{"type":"text","text":"Blockchain platforms using SpaceVM enable seamless execution within a sharded environment. Sharding divides a blockchain’s global state and validation workload into smaller, manageable units known as shards. This method enhances scalability without compromising decentralization, allowing nodes to operate without significant computational resources."}],"url":"\/tutorials\/spacekit\/asynccalls","title":"Interacting with Contracts Across Shards","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls","role":"project","estimatedTime":"15min","kind":"project","type":"topic"},"doc://SpaceKit/tutorials/Space":{"role":"overview","type":"topic","title":"Meet Space","abstract":[{"type":"text","text":"Discover how Space simplifies blockchain development using Swift. Dive into the world of Web3 with ease and efficiency."}],"kind":"overview","url":"\/tutorials\/space","identifier":"doc:\/\/SpaceKit\/tutorials\/Space"},"GetInfoSection2Step6.swift":{"type":"file","syntax":"swift","highlights":[{"line":24}],"content":["import SpaceKit","","let secondsInADay: UInt64 = 86_400","","@Contract struct MyContract {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","    @Mapping<Address, UInt64>(key: \"lastDepositTime\") var lastDepositTimeForAddress","    @Mapping<Address, BigUint>(key: \"depositedTokens\") var depositedTokensForAddress","    ","    init(tokenIdentifier: Buffer) {","        self.tokenIdentifier = tokenIdentifier","    }","    ","    public mutating func deposit() {","        let caller = Message.caller","        let payment = Message.singleFungibleEsdt","        ","        guard payment.tokenIdentifier == self.tokenIdentifier else {","            smartContractError(message: \"Wrong payment provided\")","        }","        ","        let currentTime = Blockchain.getBlockTimestamp()","        let callerLastDepositTime = self.lastDepositTimeForAddress[caller]","        let nextAllowedTime = callerLastDepositTime + secondsInADay","        ","        self.depositedTokensForAddress[caller] = self.depositedTokensForAddress[caller] + payment.amount","    }","}"],"identifier":"GetInfoSection2Step6.swift","fileName":"lib.swift","fileType":"swift"},"doc://SpaceKit/tutorials/SpaceKit/StoreValues#Working-with-Storage-for-Single-Value-Persistence":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues#Working-with-Storage-for-Single-Value-Persistence","title":"Working with @Storage for Single Value Persistence","type":"section","abstract":[{"type":"text","text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory."}],"role":"pseudoSymbol","url":"\/tutorials\/spacekit\/storevalues#Working-with-Storage-for-Single-Value-Persistence","kind":"section"},"GetInfoSection2Step11.swift":{"type":"file","syntax":"swift","highlights":[{"line":33}],"content":["import SpaceKit","","let secondsInADay: UInt64 = 86_400","","@Contract struct MyContract {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","    @Mapping<Address, UInt64>(key: \"lastDepositTime\") var lastDepositTimeForAddress","    @Mapping<Address, BigUint>(key: \"depositedTokens\") var depositedTokensForAddress","    ","    init(tokenIdentifier: Buffer) {","        self.tokenIdentifier = tokenIdentifier","    }","    ","    public mutating func deposit() {","        let caller = Message.caller","        let payment = Message.singleFungibleEsdt","        ","        guard payment.tokenIdentifier == self.tokenIdentifier else {","            smartContractError(message: \"Wrong payment provided\")","        }","        ","        let currentTime = Blockchain.getBlockTimestamp()","        let callerLastDepositTime = self.lastDepositTimeForAddress[caller]","        let nextAllowedTime = callerLastDepositTime + secondsInADay","        ","        guard currentTime > nextAllowedTime else {","            let secondsRemaining = nextAllowedTime - currentTime","            ","            smartContractError(message: \"Not allowed to deposit yet. Please wait \\(secondsRemaining) seconds.\")","        }","        ","        let callerTokenBalance = caller.getBalance(tokenIdentifier: payment.tokenIdentifier)","        let maxAllowedDeposit = callerTokenBalance \/ 10","        ","        self.depositedTokensForAddress[caller] = self.depositedTokensForAddress[caller] + payment.amount","    }","}"],"identifier":"GetInfoSection2Step11.swift","fileName":"lib.swift","fileType":"swift"},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Working-with-the-Vector-Type":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Working-with-the-Vector-Type","title":"Working with the Vector Type","type":"section","abstract":[{"type":"text","text":"Space provides types that allow you to leverage the full potential of the SpaceVM."}],"role":"pseudoSymbol","url":"\/tutorials\/spacekit\/familiarizewithtypes#Working-with-the-Vector-Type","kind":"section"},"doc://SpaceKit/tutorials/SpaceKit/InstallingTools#Setting-Up-the-Space-CLI":{"type":"section","abstract":[{"type":"text","text":"Before writing your first smart contract with Space, ensure you have the necessary tools installed."}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Setting-Up-the-Space-CLI","role":"pseudoSymbol","url":"\/tutorials\/spacekit\/installingtools#Setting-Up-the-Space-CLI","title":"Setting Up the Space CLI","kind":"section"},"GetInfoSection2Step12.swift":{"syntax":"swift","fileName":"lib.swift","content":["import SpaceKit","","let secondsInADay: UInt64 = 86_400","","@Contract struct MyContract {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","    @Mapping<Address, UInt64>(key: \"lastDepositTime\") var lastDepositTimeForAddress","    @Mapping<Address, BigUint>(key: \"depositedTokens\") var depositedTokensForAddress","    ","    init(tokenIdentifier: Buffer) {","        self.tokenIdentifier = tokenIdentifier","    }","    ","    public mutating func deposit() {","        let caller = Message.caller","        let payment = Message.singleFungibleEsdt","        ","        guard payment.tokenIdentifier == self.tokenIdentifier else {","            smartContractError(message: \"Wrong payment provided\")","        }","        ","        let callerLastDepositTime = self.lastDepositTimeForAddress[caller]","        let currentTime = Blockchain.getBlockTimestamp()","        let nextAllowedTime = callerLastDepositTime + secondsInADay","        ","        guard currentTime > nextAllowedTime else {","            let secondsRemaining = nextAllowedTime - currentTime","            ","            smartContractError(message: \"Not allowed to deposit yet. Please wait \\(secondsRemaining) seconds.\")","        }","        ","        let callerTokenBalance = caller.getBalance(tokenIdentifier: payment.tokenIdentifier)","        let maxAllowedDeposit = callerTokenBalance \/ 10","        ","        guard payment.amount <= maxAllowedDeposit else {","            smartContractError(message: \"Payment amount should not be greater than 10% of the caller's balance for the token. Allowance: \\(maxAllowedDeposit)\")","        }","        ","        self.depositedTokensForAddress[caller] = self.depositedTokensForAddress[caller] + payment.amount","    }","}"],"type":"file","fileType":"swift","highlights":[{"line":23},{"line":35},{"line":36},{"line":37},{"line":38}],"identifier":"GetInfoSection2Step12.swift"},"GetInfoSection1Step2.swift":{"type":"file","syntax":"swift","highlights":[{"line":4}],"content":["import SpaceKit","","@Contract struct MyContract {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","}"],"identifier":"GetInfoSection1Step2.swift","fileName":"lib.swift","fileType":"swift"},"GetInfoSection2Step8.swift":{"syntax":"swift","fileName":"lib.swift","content":["import SpaceKit","","let secondsInADay: UInt64 = 86_400","","@Contract struct MyContract {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","    @Mapping<Address, UInt64>(key: \"lastDepositTime\") var lastDepositTimeForAddress","    @Mapping<Address, BigUint>(key: \"depositedTokens\") var depositedTokensForAddress","    ","    init(tokenIdentifier: Buffer) {","        self.tokenIdentifier = tokenIdentifier","    }","    ","    public mutating func deposit() {","        let caller = Message.caller","        let payment = Message.singleFungibleEsdt","        ","        guard payment.tokenIdentifier == self.tokenIdentifier else {","            smartContractError(message: \"Wrong payment provided\")","        }","        ","        let currentTime = Blockchain.getBlockTimestamp()","        let callerLastDepositTime = self.lastDepositTimeForAddress[caller]","        let nextAllowedTime = callerLastDepositTime + secondsInADay","        ","        guard currentTime > nextAllowedTime else {","            let secondsRemaining = nextAllowedTime - currentTime","        }","        ","        self.depositedTokensForAddress[caller] = self.depositedTokensForAddress[caller] + payment.amount","    }","}"],"type":"file","fileType":"swift","highlights":[{"line":27}],"identifier":"GetInfoSection2Step8.swift"},"doc://SpaceKit/tutorials/Space/Getting-Started/Installing-the-Tools":{"type":"topic","abstract":[],"identifier":"doc:\/\/SpaceKit\/tutorials\/Space\/Getting-Started\/Installing-the-Tools","role":"article","url":"\/tutorials\/space\/getting-started\/installing-the-tools","title":"Installing the Tools","kind":"article"},"GetInfoSection2Step4.swift":{"fileName":"lib.swift","syntax":"swift","content":["import SpaceKit","","let secondsInADay: UInt64 = 86_400","","@Contract struct MyContract {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","    @Mapping<Address, UInt64>(key: \"lastDepositTime\") var lastDepositTimeForAddress","    @Mapping<Address, BigUint>(key: \"depositedTokens\") var depositedTokensForAddress","    ","    init(tokenIdentifier: Buffer) {","        self.tokenIdentifier = tokenIdentifier","    }","    ","    public mutating func deposit() {","        let caller = Message.caller","        let payment = Message.singleFungibleEsdt","        ","        guard payment.tokenIdentifier == self.tokenIdentifier else {","            smartContractError(message: \"Wrong payment provided\")","        }","        ","        let currentTime = Blockchain.getBlockTimestamp()","        ","        self.depositedTokensForAddress[caller] = self.depositedTokensForAddress[caller] + payment.amount","    }","}"],"type":"file","fileType":"swift","highlights":[{"line":22},{"line":23}],"identifier":"GetInfoSection2Step4.swift"},"doc://SpaceKit/tutorials/SpaceKit/InstallingTools":{"estimatedTime":"10min","role":"project","type":"topic","title":"Install the Necessary Tools","abstract":[{"type":"text","text":"Before writing your first smart contract with Space, ensure you have the necessary tools installed."}],"kind":"project","url":"\/tutorials\/spacekit\/installingtools","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools"},"GetInfoSection2Step5.swift":{"type":"file","syntax":"swift","highlights":[{"line":23}],"content":["import SpaceKit","","let secondsInADay: UInt64 = 86_400","","@Contract struct MyContract {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","    @Mapping<Address, UInt64>(key: \"lastDepositTime\") var lastDepositTimeForAddress","    @Mapping<Address, BigUint>(key: \"depositedTokens\") var depositedTokensForAddress","    ","    init(tokenIdentifier: Buffer) {","        self.tokenIdentifier = tokenIdentifier","    }","    ","    public mutating func deposit() {","        let caller = Message.caller","        let payment = Message.singleFungibleEsdt","        ","        guard payment.tokenIdentifier == self.tokenIdentifier else {","            smartContractError(message: \"Wrong payment provided\")","        }","        ","        let currentTime = Blockchain.getBlockTimestamp()","        let callerLastDepositTime = self.lastDepositTimeForAddress[caller]","        ","        self.depositedTokensForAddress[caller] = self.depositedTokensForAddress[caller] + payment.amount","    }","}"],"identifier":"GetInfoSection2Step5.swift","fileName":"lib.swift","fileType":"swift"},"doc://SpaceKit/tutorials/SpaceKit/SyncCalls#Perform-a-Synchronous-Call":{"url":"\/tutorials\/spacekit\/synccalls#Perform-a-Synchronous-Call","title":"Perform a Synchronous Call","type":"section","abstract":[{"type":"text","text":"Smart contracts can interact not only with users but also with other smart contracts. This enables more advanced protocols by leveraging existing ones. For example, you could integrate a decentralized exchange directly into your contract to perform token swaps. Decentralized applications often involve multiple contracts, each with a dedicated role, working together to achieve complex functionality—similar to microservices in backend systems."}],"role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls#Perform-a-Synchronous-Call"},"doc://SpaceKit/tutorials/Space/Deep-Dive-into-Space-Concepts/Calling-Contracts-Across-Shards":{"kind":"article","role":"article","type":"topic","title":"Calling Contracts Across Shards","identifier":"doc:\/\/SpaceKit\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Calling-Contracts-Across-Shards","abstract":[],"url":"\/tutorials\/space\/deep-dive-into-space-concepts\/calling-contracts-across-shards"},"doc://SpaceKit/tutorials/Space/Deep-Dive-into-Space-Concepts/Persisting-Data-Across-Executions":{"role":"article","kind":"article","abstract":[],"identifier":"doc:\/\/SpaceKit\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Persisting-Data-Across-Executions","url":"\/tutorials\/space\/deep-dive-into-space-concepts\/persisting-data-across-executions","type":"topic","title":"Persisting Data Across Executions"},"doc://SpaceKit/tutorials/SpaceKit/InstallingTools#Installing-Spaces-Dependencies":{"kind":"section","role":"pseudoSymbol","type":"section","title":"Installing Space's Dependencies","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Installing-Spaces-Dependencies","abstract":[{"text":"Before writing your first smart contract with Space, ensure you have the necessary tools installed.","type":"text"}],"url":"\/tutorials\/spacekit\/installingtools#Installing-Spaces-Dependencies"},"doc://SpaceKit/tutorials/SpaceKit/AsyncCalls#Perform-an-Asynchronous-Call":{"abstract":[{"text":"Blockchain platforms using SpaceVM enable seamless execution within a sharded environment. Sharding divides a blockchain’s global state and validation workload into smaller, manageable units known as shards. This method enhances scalability without compromising decentralization, allowing nodes to operate without significant computational resources.","type":"text"}],"role":"pseudoSymbol","url":"\/tutorials\/spacekit\/asynccalls#Perform-an-Asynchronous-Call","title":"Perform an Asynchronous Call","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls#Perform-an-Asynchronous-Call","kind":"section","type":"section"},"doc://SpaceKit/tutorials/SpaceKit/AsyncCalls#Declare-the-Callee-Proxy":{"kind":"section","role":"pseudoSymbol","type":"section","title":"Declare the Callee Proxy","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls#Declare-the-Callee-Proxy","abstract":[{"text":"Blockchain platforms using SpaceVM enable seamless execution within a sharded environment. Sharding divides a blockchain’s global state and validation workload into smaller, manageable units known as shards. This method enhances scalability without compromising decentralization, allowing nodes to operate without significant computational resources.","type":"text"}],"url":"\/tutorials\/spacekit\/asynccalls#Declare-the-Callee-Proxy"},"doc://SpaceKit/tutorials/SpaceKit/StoreValues":{"abstract":[{"type":"text","text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory."}],"url":"\/tutorials\/spacekit\/storevalues","title":"Persist Values Between Executions","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues","role":"project","estimatedTime":"15min","kind":"project","type":"topic"},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes":{"abstract":[{"type":"text","text":"Space provides types that allow you to leverage the full potential of the SpaceVM."}],"url":"\/tutorials\/spacekit\/familiarizewithtypes","title":"Exploring Space's Types","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes","role":"project","estimatedTime":"20min","kind":"project","type":"topic"},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges":{"abstract":[{"text":"Space provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}],"role":"pseudoSymbol","url":"\/tutorials\/spacekit\/familiarizewithtypes#Handling-Heap-Allocation-Challenges","title":"Handling Heap Allocation Challenges","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges","kind":"section","type":"section"},"GetInfoSection1Step8.swift":{"syntax":"swift","fileType":"swift","type":"file","highlights":[{"line":14},{"line":15},{"line":16},{"line":17}],"identifier":"GetInfoSection1Step8.swift","fileName":"lib.swift","content":["import SpaceKit","","@Contract struct MyContract {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","    @Mapping<Address, BigUint>(key: \"depositedTokens\") var depositedTokensForAddress","    ","    init(tokenIdentifier: Buffer) {","        self.tokenIdentifier = tokenIdentifier","    }","    ","    public mutating func deposit() {","        let caller = Message.caller","        let payment = Message.singleFungibleEsdt","        ","        guard payment.tokenIdentifier == self.tokenIdentifier else {","            smartContractError(message: \"Wrong payment provided\")","        }","    }","}"]},"GetInfoSection2Step7.swift":{"fileType":"swift","type":"file","syntax":"swift","fileName":"lib.swift","identifier":"GetInfoSection2Step7.swift","content":["import SpaceKit","","let secondsInADay: UInt64 = 86_400","","@Contract struct MyContract {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","    @Mapping<Address, UInt64>(key: \"lastDepositTime\") var lastDepositTimeForAddress","    @Mapping<Address, BigUint>(key: \"depositedTokens\") var depositedTokensForAddress","    ","    init(tokenIdentifier: Buffer) {","        self.tokenIdentifier = tokenIdentifier","    }","    ","    public mutating func deposit() {","        let caller = Message.caller","        let payment = Message.singleFungibleEsdt","        ","        guard payment.tokenIdentifier == self.tokenIdentifier else {","            smartContractError(message: \"Wrong payment provided\")","        }","        ","        let currentTime = Blockchain.getBlockTimestamp()","        let callerLastDepositTime = self.lastDepositTimeForAddress[caller]","        let nextAllowedTime = callerLastDepositTime + secondsInADay","        ","        guard currentTime > nextAllowedTime else {","            ","        }","        ","        self.depositedTokensForAddress[caller] = self.depositedTokensForAddress[caller] + payment.amount","    }","}"],"highlights":[{"line":26},{"line":27},{"line":28},{"line":29}]},"doc://SpaceKit/tutorials/SpaceKit/SyncCalls#Declare-the-Callee-Proxy":{"kind":"section","role":"pseudoSymbol","type":"section","url":"\/tutorials\/spacekit\/synccalls#Declare-the-Callee-Proxy","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls#Declare-the-Callee-Proxy","abstract":[{"text":"Smart contracts can interact not only with users but also with other smart contracts. This enables more advanced protocols by leveraging existing ones. For example, you could integrate a decentralized exchange directly into your contract to perform token swaps. Decentralized applications often involve multiple contracts, each with a dedicated role, working together to achieve complex functionality—similar to microservices in backend systems.","type":"text"}],"title":"Declare the Callee Proxy"},"GetInfoSection2Step3.swift":{"fileType":"swift","type":"file","syntax":"swift","fileName":"lib.swift","identifier":"GetInfoSection2Step3.swift","content":["import SpaceKit","","let secondsInADay: UInt64 = 86_400","","@Contract struct MyContract {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","    @Mapping<Address, UInt64>(key: \"lastDepositTime\") var lastDepositTimeForAddress","    @Mapping<Address, BigUint>(key: \"depositedTokens\") var depositedTokensForAddress","    ","    init(tokenIdentifier: Buffer) {","        self.tokenIdentifier = tokenIdentifier","    }","    ","    public mutating func deposit() {","        let caller = Message.caller","        let payment = Message.singleFungibleEsdt","        ","        guard payment.tokenIdentifier == self.tokenIdentifier else {","            smartContractError(message: \"Wrong payment provided\")","        }","        ","        self.depositedTokensForAddress[caller] = self.depositedTokensForAddress[caller] + payment.amount","    }","}"],"highlights":[{"line":7}]},"GetInfoSection2Step1.swift":{"syntax":"swift","fileType":"swift","type":"file","highlights":[],"identifier":"GetInfoSection2Step1.swift","content":["import SpaceKit","","@Contract struct MyContract {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","    @Mapping<Address, BigUint>(key: \"depositedTokens\") var depositedTokensForAddress","    ","    init(tokenIdentifier: Buffer) {","        self.tokenIdentifier = tokenIdentifier","    }","    ","    public mutating func deposit() {","        let caller = Message.caller","        let payment = Message.singleFungibleEsdt","        ","        guard payment.tokenIdentifier == self.tokenIdentifier else {","            smartContractError(message: \"Wrong payment provided\")","        }","        ","        self.depositedTokensForAddress[caller] = self.depositedTokensForAddress[caller] + payment.amount","    }","}"],"fileName":"lib.swift"},"doc://SpaceKit/tutorials/SpaceKit/CodingYourFirstContract#Writing-the-Contract-Code":{"role":"pseudoSymbol","url":"\/tutorials\/spacekit\/codingyourfirstcontract#Writing-the-Contract-Code","type":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Writing-the-Contract-Code","title":"Writing the Contract Code","kind":"section","abstract":[{"text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user.","type":"text"}]},"doc://SpaceKit/tutorials/SpaceKit/GetInfo":{"estimatedTime":"10min","role":"project","type":"topic","title":"Retrieving Information from the Blockchain","abstract":[{"type":"text","text":"Many smart contracts rely on contextual data to execute their operations effectively. This data can include input payments, the caller’s address, the current time, the balance of a specific account, or even the contract owner."}],"kind":"project","url":"\/tutorials\/spacekit\/getinfo","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo"},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Working-with-the-BigUint-Type":{"kind":"section","role":"pseudoSymbol","type":"section","url":"\/tutorials\/spacekit\/familiarizewithtypes#Working-with-the-BigUint-Type","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Working-with-the-BigUint-Type","abstract":[{"text":"Space provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}],"title":"Working with the BigUint Type"},"doc://SpaceKit/tutorials/Space/Deep-Dive-into-Space-Concepts/Retrieving-Information-from-the-Blockchain":{"kind":"article","role":"article","type":"topic","abstract":[],"identifier":"doc:\/\/SpaceKit\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Retrieving-Information-from-the-Blockchain","url":"\/tutorials\/space\/deep-dive-into-space-concepts\/retrieving-information-from-the-blockchain","title":"Retrieving Information from the Blockchain"},"doc://SpaceKit/tutorials/SpaceKit/SyncCalls":{"type":"topic","url":"\/tutorials\/spacekit\/synccalls","title":"Interact with Other Contracts","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls","role":"project","estimatedTime":"15min","kind":"project","abstract":[{"type":"text","text":"Smart contracts can interact not only with users but also with other smart contracts. This enables more advanced protocols by leveraging existing ones. For example, you could integrate a decentralized exchange directly into your contract to perform token swaps. Decentralized applications often involve multiple contracts, each with a dedicated role, working together to achieve complex functionality—similar to microservices in backend systems."}]}}}