{"kind":"project","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo"},"schemaVersion":{"major":0,"minor":3,"patch":0},"hierarchy":{"reference":"doc:\/\/SpaceKit\/tutorials\/Space","modules":[{"projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools","sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Installing-SpaceKits-Dependencies","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Setting-Up-the-SpaceKit-CLI","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract","kind":"task"}]}],"reference":"doc:\/\/SpaceKit\/tutorials\/Space\/Getting-Started\/Installing-the-Tools"},{"reference":"doc:\/\/SpaceKit\/tutorials\/Space\/Getting-Started\/Building-Your-First-Smart-Contract","projects":[{"sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Initializing-the-Project","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Writing-the-Contract-Code"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Testing-the-Contract","kind":"task"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract"}]},{"reference":"doc:\/\/SpaceKit\/tutorials\/Space\/Deep-Dive-into-SpaceKit-Concepts\/Exploring-SpaceKit's-Types","projects":[{"sections":[{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Understanding-the-Buffer-Type","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Working-with-the-BigUint-Type"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Working-with-the-Vector-Type","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Creating-Your-Own-Types","kind":"task"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes"}]},{"projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues","sections":[{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues#Working-with-Storage-for-Single-Value-Persistence"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage","kind":"task"}]}],"reference":"doc:\/\/SpaceKit\/tutorials\/Space\/Deep-Dive-into-SpaceKit-Concepts\/Persisting-Data-Across-Executions"},{"projects":[{"sections":[{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo#Accessing-Transaction-Context-Data"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo#Accessing-Blockchain-Context-Data","kind":"task"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo"}],"reference":"doc:\/\/SpaceKit\/tutorials\/Space\/Deep-Dive-into-SpaceKit-Concepts\/Retrieving-Information-from-the-Blockchain"},{"reference":"doc:\/\/SpaceKit\/tutorials\/Space\/Deep-Dive-into-SpaceKit-Concepts\/Interacting-with-Other-Contracts","projects":[{"sections":[{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls#Declare-the-Callee-Proxy"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls#Perform-a-Synchronous-Call","kind":"task"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls"}]},{"reference":"doc:\/\/SpaceKit\/tutorials\/Space\/Deep-Dive-into-SpaceKit-Concepts\/Calling-Contracts-Across-Shards","projects":[{"sections":[{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls#Declare-the-Callee-Proxy"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls#Perform-an-Asynchronous-Call"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls"}]}],"paths":[["doc:\/\/SpaceKit\/tutorials\/Space","doc:\/\/SpaceKit\/tutorials\/Space\/Deep-Dive-into-SpaceKit-Concepts","doc:\/\/SpaceKit\/tutorials\/Space\/Deep-Dive-into-SpaceKit-Concepts\/Retrieving-Information-from-the-Blockchain"]]},"variants":[{"paths":["\/tutorials\/spacekit\/getinfo"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[{"estimatedTimeInMinutes":10,"chapter":"Retrieving Information from the Blockchain","content":[{"type":"paragraph","inlineContent":[{"text":"Many smart contracts rely on contextual data to execute their operations effectively. This data can include input payments, the caller’s address, the current time, the balance of a specific account, or even the contract owner.","type":"text"}]},{"inlineContent":[{"text":"The SpaceKit framework provides an intuitive way to retrieve all of this information using the ","type":"text"},{"type":"codeVoice","code":"Message"},{"type":"text","text":" and "},{"code":"Blockchain","type":"codeVoice"},{"type":"text","text":" objects."}],"type":"paragraph"}],"kind":"hero","title":"Retrieving Information from the Blockchain"},{"tasks":[{"anchor":"Accessing-Transaction-Context-Data","contentSection":[{"mediaPosition":"trailing","kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"text":"In this section, you will create a simple smart contract that allows users to deposit a specified fungible token. The contract will track the total amount of tokens deposited by each user.","type":"text"}]}]}],"stepsSection":[{"caption":[],"type":"step","media":null,"code":"GetInfoSection1Step1.swift","runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"Start by defining the contract’s basic structure."}],"type":"paragraph"}]},{"media":null,"runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"Track the specific token type to be deposited. Store its identifier in the contract’s storage using a "},{"code":"@Storage","type":"codeVoice"},{"type":"text","text":" variable."}],"type":"paragraph"}],"caption":[{"inlineContent":[{"type":"text","text":"Note: This variable will be initialized later in the contract’s "},{"code":"init","type":"codeVoice"},{"text":" function.","type":"text"}],"type":"paragraph"}],"type":"step","code":"GetInfoSection1Step2.swift"},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a "},{"code":"@Mapping","type":"codeVoice"},{"text":" variable to keep track of the total amount deposited by each user.","type":"text"}]}],"media":null,"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Reminder: Numeric storage variables default to 0."}]}],"code":"GetInfoSection1Step3.swift","runtimePreview":null},{"code":"GetInfoSection1Step4.swift","content":[{"inlineContent":[{"type":"text","text":"Add an initializer to the contract, which accepts the token identifier as a parameter."}],"type":"paragraph"}],"runtimePreview":null,"type":"step","media":null,"caption":[]},{"type":"step","caption":[],"code":"GetInfoSection1Step5.swift","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Define the ","type":"text"},{"type":"codeVoice","code":"deposit"},{"text":" endpoint for the contract.","type":"text"}]}],"media":null},{"type":"step","media":null,"code":"GetInfoSection1Step6.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the "},{"code":"Message.caller","type":"codeVoice"},{"text":" property to retrieve the address of the user making the deposit.","type":"text"}]}],"caption":[],"runtimePreview":null},{"code":"GetInfoSection1Step7.swift","type":"step","media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Access the single fungible token payment using ","type":"text"},{"type":"codeVoice","code":"Message.singleFungibleEsdt"},{"text":". If the transaction doesn’t include exactly one fungible token payment, the transaction will fail.","type":"text"}]}],"runtimePreview":null,"caption":[{"inlineContent":[{"text":"Note: The ","type":"text"},{"type":"codeVoice","code":"Message"},{"type":"text","text":" object also allows retrieval of multi payments, non-fungible tokens, and EGLD payments."}],"type":"paragraph"}]},{"type":"step","code":"GetInfoSection1Step8.swift","runtimePreview":null,"media":null,"content":[{"inlineContent":[{"text":"Verify the payment by comparing the token identifier with the stored value.","type":"text"}],"type":"paragraph"}],"caption":[]},{"code":"GetInfoSection1Step9.swift","content":[{"type":"paragraph","inlineContent":[{"text":"Add the payment amount to the storage mapping for the caller’s address.","type":"text"}]}],"media":null,"caption":[],"type":"step","runtimePreview":null}],"title":"Accessing Transaction Context Data"},{"anchor":"Accessing-Blockchain-Context-Data","stepsSection":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Start by using the contract from the previous section."}]}],"caption":[],"media":null,"type":"step","code":"GetInfoSection2Step1.swift","runtimePreview":null},{"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Define a global constant representing the number of seconds in a day.","type":"text"}]}],"type":"step","media":null,"caption":[],"code":"GetInfoSection2Step2.swift"},{"media":null,"content":[{"inlineContent":[{"text":"Add a mapping to store the last deposit time for each user.","type":"text"}],"type":"paragraph"}],"code":"GetInfoSection2Step3.swift","runtimePreview":null,"type":"step","caption":[]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In the "},{"code":"deposit","type":"codeVoice"},{"text":" endpoint, retrieve the current timestamp using ","type":"text"},{"type":"codeVoice","code":"Blockchain.getBlockTimestamp()"},{"text":".","type":"text"}]}],"media":null,"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Note: The timestamp is the number of seconds since January 1, 1970."}]}],"code":"GetInfoSection2Step4.swift","runtimePreview":null,"type":"step"},{"content":[{"inlineContent":[{"type":"text","text":"Retrieve the last deposit time for the caller from the storage."}],"type":"paragraph"}],"media":null,"code":"GetInfoSection2Step5.swift","caption":[],"runtimePreview":null,"type":"step"},{"type":"step","caption":[],"content":[{"type":"paragraph","inlineContent":[{"text":"Compute the next allowed deposit time by adding one day’s worth of seconds to the last deposit time.","type":"text"}]}],"media":null,"code":"GetInfoSection2Step6.swift","runtimePreview":null},{"media":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Ensure the caller is allowed to deposit now."}]}],"runtimePreview":null,"code":"GetInfoSection2Step7.swift","caption":[]},{"caption":[],"code":"GetInfoSection2Step8.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the deposit isn’t allowed yet, calculate the remaining time before the next deposit is permitted."}]}],"media":null,"type":"step","runtimePreview":null},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the calculated time to return an error message with the remaining time."}]}],"runtimePreview":null,"type":"step","code":"GetInfoSection2Step9.swift","media":null,"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Tip: You can interpolate buffers, addresses, and numeric types into string literals when creating error messages."}]}]},{"runtimePreview":null,"code":"GetInfoSection2Step10.swift","caption":[{"type":"paragraph","inlineContent":[{"text":"Tip: If no token identifier is provided, the EGLD balance is returned.","type":"text"}]}],"media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Retrieve the caller’s token balance using ","type":"text"},{"type":"codeVoice","code":"Blockchain.getBalance()"},{"type":"text","text":"."}]}],"type":"step"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Calculate the maximum allowable deposit by dividing the caller’s token balance by 10."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Note: Be cautious when performing integer division as any fractional part is discarded."}]}],"media":null,"type":"step","code":"GetInfoSection2Step11.swift","runtimePreview":null},{"caption":[],"type":"step","media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Ensure the deposit amount does not exceed the maximum allowable limit."}]}],"code":"GetInfoSection2Step12.swift","runtimePreview":null},{"type":"step","runtimePreview":null,"caption":[],"code":"GetInfoSection2Step13.swift","content":[{"inlineContent":[{"text":"Update the last deposit time for the caller to the current block timestamp.","type":"text"}],"type":"paragraph"}],"media":null}],"contentSection":[{"content":[{"inlineContent":[{"text":"In this section, you will improve the previous contract by adding constraints: each address can deposit only once every 24 hours, and deposits must not exceed 10% of the user’s token balance.","type":"text"}],"type":"paragraph"}],"mediaPosition":"trailing","kind":"contentAndMedia"}],"title":"Accessing Blockchain Context Data"}],"kind":"tasks"},{"action":{"isActive":true,"overridingTitleInlineContent":[{"text":"Get started","type":"text"}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls","type":"reference","overridingTitle":"Get started"},"featuredEyebrow":"Tutorial","abstract":[{"text":"Smart contracts can interact not only with users but also with other smart contracts. This enables more advanced protocols by leveraging existing ones. For example, you could integrate a decentralized exchange directly into your contract to perform token swaps. Decentralized applications often involve multiple contracts, each with a dedicated role, working together to achieve complex functionality—similar to microservices in backend systems.","type":"text"}],"title":"Interact with Other Contracts","kind":"callToAction"}],"metadata":{"categoryPathComponent":"Space","title":"Retrieving Information from the Blockchain","category":"SpaceKit","role":"project"},"references":{"doc://SpaceKit/tutorials/SpaceKit/InstallingTools#Setting-Up-the-SpaceKit-CLI":{"url":"\/tutorials\/spacekit\/installingtools#Setting-Up-the-SpaceKit-CLI","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Setting-Up-the-SpaceKit-CLI","type":"section","title":"Setting Up the SpaceKit CLI","abstract":[{"text":"Before writing your first smart contract with SpaceKit, ensure you have the necessary tools installed.","type":"text"}],"kind":"section","role":"pseudoSymbol"},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Working-with-the-BigUint-Type":{"type":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Working-with-the-BigUint-Type","role":"pseudoSymbol","kind":"section","url":"\/tutorials\/spacekit\/familiarizewithtypes#Working-with-the-BigUint-Type","abstract":[{"text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}],"title":"Working with the BigUint Type"},"doc://SpaceKit/tutorials/Space/Getting-Started/Building-Your-First-Smart-Contract":{"title":"Building Your First Smart Contract","type":"topic","url":"\/tutorials\/space\/getting-started\/building-your-first-smart-contract","kind":"article","abstract":[],"identifier":"doc:\/\/SpaceKit\/tutorials\/Space\/Getting-Started\/Building-Your-First-Smart-Contract","role":"article"},"GetInfoSection1Step8.swift":{"identifier":"GetInfoSection1Step8.swift","fileType":"swift","content":["import SpaceKit","","@Contract struct MyContract {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","    @Mapping<Address, BigUint>(key: \"depositedTokens\") var depositedTokensForAddress","    ","    init(tokenIdentifier: Buffer) {","        self.tokenIdentifier = tokenIdentifier","    }","    ","    public mutating func deposit() {","        let caller = Message.caller","        let payment = Message.singleFungibleEsdt","        ","        guard payment.tokenIdentifier == self.tokenIdentifier else {","            smartContractError(message: \"Wrong payment provided\")","        }","    }","}"],"type":"file","fileName":"lib.swift","syntax":"swift","highlights":[{"line":14},{"line":15},{"line":16},{"line":17}]},"doc://SpaceKit/tutorials/SpaceKit/CodingYourFirstContract#Testing-the-Contract":{"role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Testing-the-Contract","type":"section","title":"Testing the Contract","abstract":[{"type":"text","text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user."}],"kind":"section","url":"\/tutorials\/spacekit\/codingyourfirstcontract#Testing-the-Contract"},"doc://SpaceKit/tutorials/SpaceKit/AsyncCalls#Declare-the-Callee-Proxy":{"type":"section","abstract":[{"type":"text","text":"Blockchain platforms using SpaceVM enable seamless execution within a sharded environment. Sharding divides a blockchain’s global state and validation workload into smaller, manageable units known as shards. This method enhances scalability without compromising decentralization, allowing nodes to operate without significant computational resources."}],"url":"\/tutorials\/spacekit\/asynccalls#Declare-the-Callee-Proxy","role":"pseudoSymbol","title":"Declare the Callee Proxy","kind":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls#Declare-the-Callee-Proxy"},"GetInfoSection1Step6.swift":{"content":["import SpaceKit","","@Contract struct MyContract {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","    @Mapping<Address, BigUint>(key: \"depositedTokens\") var depositedTokensForAddress","    ","    init(tokenIdentifier: Buffer) {","        self.tokenIdentifier = tokenIdentifier","    }","    ","    public mutating func deposit() {","        let caller = Message.caller","    }","}"],"identifier":"GetInfoSection1Step6.swift","type":"file","fileName":"lib.swift","highlights":[{"line":12}],"fileType":"swift","syntax":"swift"},"doc://SpaceKit/tutorials/SpaceKit/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract":{"type":"section","abstract":[{"type":"text","text":"Before writing your first smart contract with SpaceKit, ensure you have the necessary tools installed."}],"url":"\/tutorials\/spacekit\/installingtools#Initializing-and-Compiling-Your-First-Smart-Contract","role":"pseudoSymbol","title":"Initializing and Compiling Your First Smart Contract","kind":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract"},"doc://SpaceKit/tutorials/SpaceKit/CodingYourFirstContract":{"role":"project","estimatedTime":"20min","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract","type":"topic","title":"Building Your First Smart Contract","abstract":[{"type":"text","text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user."}],"kind":"project","url":"\/tutorials\/spacekit\/codingyourfirstcontract"},"GetInfoSection1Step3.swift":{"highlights":[{"line":5}],"syntax":"swift","fileType":"swift","content":["import SpaceKit","","@Contract struct MyContract {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","    @Mapping<Address, BigUint>(key: \"depositedTokens\") var depositedTokensForAddress","}"],"identifier":"GetInfoSection1Step3.swift","fileName":"lib.swift","type":"file"},"doc://SpaceKit/tutorials/SpaceKit/InstallingTools":{"role":"project","estimatedTime":"10min","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools","type":"topic","title":"Install the Necessary Tools","abstract":[{"type":"text","text":"Before writing your first smart contract with SpaceKit, ensure you have the necessary tools installed."}],"kind":"project","url":"\/tutorials\/spacekit\/installingtools"},"GetInfoSection2Step11.swift":{"highlights":[{"line":33}],"syntax":"swift","fileType":"swift","content":["import SpaceKit","","let secondsInADay: UInt64 = 86_400","","@Contract struct MyContract {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","    @Mapping<Address, UInt64>(key: \"lastDepositTime\") var lastDepositTimeForAddress","    @Mapping<Address, BigUint>(key: \"depositedTokens\") var depositedTokensForAddress","    ","    init(tokenIdentifier: Buffer) {","        self.tokenIdentifier = tokenIdentifier","    }","    ","    public mutating func deposit() {","        let caller = Message.caller","        let payment = Message.singleFungibleEsdt","        ","        guard payment.tokenIdentifier == self.tokenIdentifier else {","            smartContractError(message: \"Wrong payment provided\")","        }","        ","        let currentTime = Blockchain.getBlockTimestamp()","        let callerLastDepositTime = self.lastDepositTimeForAddress[caller]","        let nextAllowedTime = callerLastDepositTime + secondsInADay","        ","        guard currentTime > nextAllowedTime else {","            let secondsRemaining = nextAllowedTime - currentTime","            ","            smartContractError(message: \"Not allowed to deposit yet. Please wait \\(secondsRemaining) seconds.\")","        }","        ","        let callerTokenBalance = caller.getBalance(tokenIdentifier: payment.tokenIdentifier)","        let maxAllowedDeposit = callerTokenBalance \/ 10","        ","        self.depositedTokensForAddress[caller] = self.depositedTokensForAddress[caller] + payment.amount","    }","}"],"type":"file","fileName":"lib.swift","identifier":"GetInfoSection2Step11.swift"},"GetInfoSection2Step6.swift":{"type":"file","highlights":[{"line":24}],"syntax":"swift","content":["import SpaceKit","","let secondsInADay: UInt64 = 86_400","","@Contract struct MyContract {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","    @Mapping<Address, UInt64>(key: \"lastDepositTime\") var lastDepositTimeForAddress","    @Mapping<Address, BigUint>(key: \"depositedTokens\") var depositedTokensForAddress","    ","    init(tokenIdentifier: Buffer) {","        self.tokenIdentifier = tokenIdentifier","    }","    ","    public mutating func deposit() {","        let caller = Message.caller","        let payment = Message.singleFungibleEsdt","        ","        guard payment.tokenIdentifier == self.tokenIdentifier else {","            smartContractError(message: \"Wrong payment provided\")","        }","        ","        let currentTime = Blockchain.getBlockTimestamp()","        let callerLastDepositTime = self.lastDepositTimeForAddress[caller]","        let nextAllowedTime = callerLastDepositTime + secondsInADay","        ","        self.depositedTokensForAddress[caller] = self.depositedTokensForAddress[caller] + payment.amount","    }","}"],"identifier":"GetInfoSection2Step6.swift","fileType":"swift","fileName":"lib.swift"},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Working-with-the-Vector-Type":{"abstract":[{"type":"text","text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM."}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Working-with-the-Vector-Type","role":"pseudoSymbol","kind":"section","title":"Working with the Vector Type","type":"section","url":"\/tutorials\/spacekit\/familiarizewithtypes#Working-with-the-Vector-Type"},"doc://SpaceKit/tutorials/SpaceKit/SyncCalls#Perform-a-Synchronous-Call":{"type":"section","title":"Perform a Synchronous Call","url":"\/tutorials\/spacekit\/synccalls#Perform-a-Synchronous-Call","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls#Perform-a-Synchronous-Call","kind":"section","role":"pseudoSymbol","abstract":[{"type":"text","text":"Smart contracts can interact not only with users but also with other smart contracts. This enables more advanced protocols by leveraging existing ones. For example, you could integrate a decentralized exchange directly into your contract to perform token swaps. Decentralized applications often involve multiple contracts, each with a dedicated role, working together to achieve complex functionality—similar to microservices in backend systems."}]},"doc://SpaceKit/tutorials/SpaceKit/SyncCalls":{"abstract":[{"type":"text","text":"Smart contracts can interact not only with users but also with other smart contracts. This enables more advanced protocols by leveraging existing ones. For example, you could integrate a decentralized exchange directly into your contract to perform token swaps. Decentralized applications often involve multiple contracts, each with a dedicated role, working together to achieve complex functionality—similar to microservices in backend systems."}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls","estimatedTime":"15min","role":"project","kind":"project","title":"Interact with Other Contracts","type":"topic","url":"\/tutorials\/spacekit\/synccalls"},"GetInfoSection2Step3.swift":{"type":"file","highlights":[{"line":7}],"syntax":"swift","content":["import SpaceKit","","let secondsInADay: UInt64 = 86_400","","@Contract struct MyContract {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","    @Mapping<Address, UInt64>(key: \"lastDepositTime\") var lastDepositTimeForAddress","    @Mapping<Address, BigUint>(key: \"depositedTokens\") var depositedTokensForAddress","    ","    init(tokenIdentifier: Buffer) {","        self.tokenIdentifier = tokenIdentifier","    }","    ","    public mutating func deposit() {","        let caller = Message.caller","        let payment = Message.singleFungibleEsdt","        ","        guard payment.tokenIdentifier == self.tokenIdentifier else {","            smartContractError(message: \"Wrong payment provided\")","        }","        ","        self.depositedTokensForAddress[caller] = self.depositedTokensForAddress[caller] + payment.amount","    }","}"],"identifier":"GetInfoSection2Step3.swift","fileType":"swift","fileName":"lib.swift"},"doc://SpaceKit/tutorials/Space/Deep-Dive-into-SpaceKit-Concepts/Exploring-SpaceKit's-Types":{"abstract":[],"identifier":"doc:\/\/SpaceKit\/tutorials\/Space\/Deep-Dive-into-SpaceKit-Concepts\/Exploring-SpaceKit's-Types","role":"article","kind":"article","title":"Exploring SpaceKit's Types","type":"topic","url":"\/tutorials\/space\/deep-dive-into-spacekit-concepts\/exploring-spacekit's-types"},"doc://SpaceKit/tutorials/SpaceKit/GetInfo#Accessing-Blockchain-Context-Data":{"type":"section","title":"Accessing Blockchain Context Data","url":"\/tutorials\/spacekit\/getinfo#Accessing-Blockchain-Context-Data","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo#Accessing-Blockchain-Context-Data","kind":"section","role":"pseudoSymbol","abstract":[{"type":"text","text":"Many smart contracts rely on contextual data to execute their operations effectively. This data can include input payments, the caller’s address, the current time, the balance of a specific account, or even the contract owner."}]},"doc://SpaceKit/tutorials/SpaceKit/GetInfo#Accessing-Transaction-Context-Data":{"abstract":[{"type":"text","text":"Many smart contracts rely on contextual data to execute their operations effectively. This data can include input payments, the caller’s address, the current time, the balance of a specific account, or even the contract owner."}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo#Accessing-Transaction-Context-Data","role":"pseudoSymbol","kind":"section","title":"Accessing Transaction Context Data","type":"section","url":"\/tutorials\/spacekit\/getinfo#Accessing-Transaction-Context-Data"},"GetInfoSection2Step7.swift":{"content":["import SpaceKit","","let secondsInADay: UInt64 = 86_400","","@Contract struct MyContract {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","    @Mapping<Address, UInt64>(key: \"lastDepositTime\") var lastDepositTimeForAddress","    @Mapping<Address, BigUint>(key: \"depositedTokens\") var depositedTokensForAddress","    ","    init(tokenIdentifier: Buffer) {","        self.tokenIdentifier = tokenIdentifier","    }","    ","    public mutating func deposit() {","        let caller = Message.caller","        let payment = Message.singleFungibleEsdt","        ","        guard payment.tokenIdentifier == self.tokenIdentifier else {","            smartContractError(message: \"Wrong payment provided\")","        }","        ","        let currentTime = Blockchain.getBlockTimestamp()","        let callerLastDepositTime = self.lastDepositTimeForAddress[caller]","        let nextAllowedTime = callerLastDepositTime + secondsInADay","        ","        guard currentTime > nextAllowedTime else {","            ","        }","        ","        self.depositedTokensForAddress[caller] = self.depositedTokensForAddress[caller] + payment.amount","    }","}"],"type":"file","fileType":"swift","highlights":[{"line":26},{"line":27},{"line":28},{"line":29}],"identifier":"GetInfoSection2Step7.swift","fileName":"lib.swift","syntax":"swift"},"GetInfoSection2Step5.swift":{"type":"file","content":["import SpaceKit","","let secondsInADay: UInt64 = 86_400","","@Contract struct MyContract {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","    @Mapping<Address, UInt64>(key: \"lastDepositTime\") var lastDepositTimeForAddress","    @Mapping<Address, BigUint>(key: \"depositedTokens\") var depositedTokensForAddress","    ","    init(tokenIdentifier: Buffer) {","        self.tokenIdentifier = tokenIdentifier","    }","    ","    public mutating func deposit() {","        let caller = Message.caller","        let payment = Message.singleFungibleEsdt","        ","        guard payment.tokenIdentifier == self.tokenIdentifier else {","            smartContractError(message: \"Wrong payment provided\")","        }","        ","        let currentTime = Blockchain.getBlockTimestamp()","        let callerLastDepositTime = self.lastDepositTimeForAddress[caller]","        ","        self.depositedTokensForAddress[caller] = self.depositedTokensForAddress[caller] + payment.amount","    }","}"],"fileName":"lib.swift","syntax":"swift","identifier":"GetInfoSection2Step5.swift","fileType":"swift","highlights":[{"line":23}]},"doc://SpaceKit/tutorials/SpaceKit/GetInfo":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo","type":"topic","kind":"project","title":"Retrieving Information from the Blockchain","abstract":[{"text":"Many smart contracts rely on contextual data to execute their operations effectively. This data can include input payments, the caller’s address, the current time, the balance of a specific account, or even the contract owner.","type":"text"}],"role":"project","estimatedTime":"10min","url":"\/tutorials\/spacekit\/getinfo"},"doc://SpaceKit/tutorials/Space/Deep-Dive-into-SpaceKit-Concepts/Calling-Contracts-Across-Shards":{"abstract":[],"url":"\/tutorials\/space\/deep-dive-into-spacekit-concepts\/calling-contracts-across-shards","type":"topic","role":"article","identifier":"doc:\/\/SpaceKit\/tutorials\/Space\/Deep-Dive-into-SpaceKit-Concepts\/Calling-Contracts-Across-Shards","title":"Calling Contracts Across Shards","kind":"article"},"GetInfoSection1Step7.swift":{"identifier":"GetInfoSection1Step7.swift","type":"file","syntax":"swift","fileName":"lib.swift","content":["import SpaceKit","","@Contract struct MyContract {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","    @Mapping<Address, BigUint>(key: \"depositedTokens\") var depositedTokensForAddress","    ","    init(tokenIdentifier: Buffer) {","        self.tokenIdentifier = tokenIdentifier","    }","    ","    public mutating func deposit() {","        let caller = Message.caller","        let payment = Message.singleFungibleEsdt","    }","}"],"fileType":"swift","highlights":[{"line":13}]},"doc://SpaceKit/tutorials/SpaceKit/StoreValues#Working-with-Storage-for-Single-Value-Persistence":{"abstract":[{"text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory.","type":"text"}],"url":"\/tutorials\/spacekit\/storevalues#Working-with-Storage-for-Single-Value-Persistence","type":"section","role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues#Working-with-Storage-for-Single-Value-Persistence","title":"Working with @Storage for Single Value Persistence","kind":"section"},"doc://SpaceKit/tutorials/Space/Deep-Dive-into-SpaceKit-Concepts/Interacting-with-Other-Contracts":{"identifier":"doc:\/\/SpaceKit\/tutorials\/Space\/Deep-Dive-into-SpaceKit-Concepts\/Interacting-with-Other-Contracts","type":"topic","kind":"article","title":"Interacting with Other Contracts","abstract":[],"role":"article","url":"\/tutorials\/space\/deep-dive-into-spacekit-concepts\/interacting-with-other-contracts"},"GetInfoSection1Step4.swift":{"type":"file","content":["import SpaceKit","","@Contract struct MyContract {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","    @Mapping<Address, BigUint>(key: \"depositedTokens\") var depositedTokensForAddress","    ","    init(tokenIdentifier: Buffer) {","        self.tokenIdentifier = tokenIdentifier","    }","}"],"fileName":"lib.swift","syntax":"swift","identifier":"GetInfoSection1Step4.swift","fileType":"swift","highlights":[{"line":6},{"line":7},{"line":8},{"line":9}]},"doc://SpaceKit/tutorials/SpaceKit/CodingYourFirstContract#Writing-the-Contract-Code":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Writing-the-Contract-Code","type":"section","kind":"section","title":"Writing the Contract Code","abstract":[{"text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user.","type":"text"}],"role":"pseudoSymbol","url":"\/tutorials\/spacekit\/codingyourfirstcontract#Writing-the-Contract-Code"},"GetInfoSection1Step2.swift":{"type":"file","content":["import SpaceKit","","@Contract struct MyContract {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","}"],"fileName":"lib.swift","syntax":"swift","identifier":"GetInfoSection1Step2.swift","fileType":"swift","highlights":[{"line":4}]},"doc://SpaceKit/tutorials/SpaceKit/AsyncCalls":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls","type":"topic","kind":"project","title":"Interacting with Contracts Across Shards","abstract":[{"text":"Blockchain platforms using SpaceVM enable seamless execution within a sharded environment. Sharding divides a blockchain’s global state and validation workload into smaller, manageable units known as shards. This method enhances scalability without compromising decentralization, allowing nodes to operate without significant computational resources.","type":"text"}],"role":"project","estimatedTime":"15min","url":"\/tutorials\/spacekit\/asynccalls"},"GetInfoSection2Step12.swift":{"fileName":"lib.swift","type":"file","identifier":"GetInfoSection2Step12.swift","content":["import SpaceKit","","let secondsInADay: UInt64 = 86_400","","@Contract struct MyContract {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","    @Mapping<Address, UInt64>(key: \"lastDepositTime\") var lastDepositTimeForAddress","    @Mapping<Address, BigUint>(key: \"depositedTokens\") var depositedTokensForAddress","    ","    init(tokenIdentifier: Buffer) {","        self.tokenIdentifier = tokenIdentifier","    }","    ","    public mutating func deposit() {","        let caller = Message.caller","        let payment = Message.singleFungibleEsdt","        ","        guard payment.tokenIdentifier == self.tokenIdentifier else {","            smartContractError(message: \"Wrong payment provided\")","        }","        ","        let callerLastDepositTime = self.lastDepositTimeForAddress[caller]","        let currentTime = Blockchain.getBlockTimestamp()","        let nextAllowedTime = callerLastDepositTime + secondsInADay","        ","        guard currentTime > nextAllowedTime else {","            let secondsRemaining = nextAllowedTime - currentTime","            ","            smartContractError(message: \"Not allowed to deposit yet. Please wait \\(secondsRemaining) seconds.\")","        }","        ","        let callerTokenBalance = caller.getBalance(tokenIdentifier: payment.tokenIdentifier)","        let maxAllowedDeposit = callerTokenBalance \/ 10","        ","        guard payment.amount <= maxAllowedDeposit else {","            smartContractError(message: \"Payment amount should not be greater than 10% of the caller's balance for the token. Allowance: \\(maxAllowedDeposit)\")","        }","        ","        self.depositedTokensForAddress[caller] = self.depositedTokensForAddress[caller] + payment.amount","    }","}"],"fileType":"swift","highlights":[{"line":23},{"line":35},{"line":36},{"line":37},{"line":38}],"syntax":"swift"},"GetInfoSection2Step1.swift":{"identifier":"GetInfoSection2Step1.swift","type":"file","syntax":"swift","fileName":"lib.swift","content":["import SpaceKit","","@Contract struct MyContract {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","    @Mapping<Address, BigUint>(key: \"depositedTokens\") var depositedTokensForAddress","    ","    init(tokenIdentifier: Buffer) {","        self.tokenIdentifier = tokenIdentifier","    }","    ","    public mutating func deposit() {","        let caller = Message.caller","        let payment = Message.singleFungibleEsdt","        ","        guard payment.tokenIdentifier == self.tokenIdentifier else {","            smartContractError(message: \"Wrong payment provided\")","        }","        ","        self.depositedTokensForAddress[caller] = self.depositedTokensForAddress[caller] + payment.amount","    }","}"],"fileType":"swift","highlights":[]},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes":{"kind":"project","type":"topic","url":"\/tutorials\/spacekit\/familiarizewithtypes","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes","role":"project","title":"Exploring SpaceKit's Types","estimatedTime":"20min","abstract":[{"text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}]},"GetInfoSection2Step10.swift":{"identifier":"GetInfoSection2Step10.swift","type":"file","syntax":"swift","fileName":"lib.swift","content":["import SpaceKit","","let secondsInADay: UInt64 = 86_400","","@Contract struct MyContract {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","    @Mapping<Address, UInt64>(key: \"lastDepositTime\") var lastDepositTimeForAddress","    @Mapping<Address, BigUint>(key: \"depositedTokens\") var depositedTokensForAddress","    ","    init(tokenIdentifier: Buffer) {","        self.tokenIdentifier = tokenIdentifier","    }","    ","    public mutating func deposit() {","        let caller = Message.caller","        let payment = Message.singleFungibleEsdt","        ","        guard payment.tokenIdentifier == self.tokenIdentifier else {","            smartContractError(message: \"Wrong payment provided\")","        }","        ","        let currentTime = Blockchain.getBlockTimestamp()","        let callerLastDepositTime = self.lastDepositTimeForAddress[caller]","        let nextAllowedTime = callerLastDepositTime + secondsInADay","        ","        guard currentTime > nextAllowedTime else {","            let secondsRemaining = nextAllowedTime - currentTime","            ","            smartContractError(message: \"Not allowed to deposit yet. Please wait \\(secondsRemaining) seconds.\")","        }","        ","        let callerTokenBalance = caller.getBalance(tokenIdentifier: payment.tokenIdentifier)","        ","        self.depositedTokensForAddress[caller] = self.depositedTokensForAddress[caller] + payment.amount","    }","}"],"fileType":"swift","highlights":[{"line":32},{"line":33}]},"doc://SpaceKit/tutorials/Space/Deep-Dive-into-SpaceKit-Concepts/Retrieving-Information-from-the-Blockchain":{"kind":"article","type":"topic","url":"\/tutorials\/space\/deep-dive-into-spacekit-concepts\/retrieving-information-from-the-blockchain","identifier":"doc:\/\/SpaceKit\/tutorials\/Space\/Deep-Dive-into-SpaceKit-Concepts\/Retrieving-Information-from-the-Blockchain","role":"article","title":"Retrieving Information from the Blockchain","abstract":[]},"GetInfoSection1Step1.swift":{"identifier":"GetInfoSection1Step1.swift","type":"file","syntax":"swift","fileName":"lib.swift","content":["import SpaceKit","","@Contract struct MyContract {","    ","}"],"fileType":"swift","highlights":[]},"GetInfoSection2Step9.swift":{"fileName":"lib.swift","type":"file","identifier":"GetInfoSection2Step9.swift","content":["import SpaceKit","","let secondsInADay: UInt64 = 86_400","","@Contract struct MyContract {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","    @Mapping<Address, UInt64>(key: \"lastDepositTime\") var lastDepositTimeForAddress","    @Mapping<Address, BigUint>(key: \"depositedTokens\") var depositedTokensForAddress","    ","    init(tokenIdentifier: Buffer) {","        self.tokenIdentifier = tokenIdentifier","    }","    ","    public mutating func deposit() {","        let caller = Message.caller","        let payment = Message.singleFungibleEsdt","        ","        guard payment.tokenIdentifier == self.tokenIdentifier else {","            smartContractError(message: \"Wrong payment provided\")","        }","        ","        let currentTime = Blockchain.getBlockTimestamp()","        let callerLastDepositTime = self.lastDepositTimeForAddress[caller]","        let nextAllowedTime = callerLastDepositTime + secondsInADay","        ","        guard currentTime > nextAllowedTime else {","            let secondsRemaining = nextAllowedTime - currentTime","            ","            smartContractError(message: \"Not allowed to deposit yet. Please wait \\(secondsRemaining) seconds.\")","        }","        ","        self.depositedTokensForAddress[caller] = self.depositedTokensForAddress[caller] + payment.amount","    }","}"],"fileType":"swift","highlights":[{"line":28},{"line":29}],"syntax":"swift"},"doc://SpaceKit/tutorials/SpaceKit/StoreValues":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues","type":"topic","kind":"project","title":"Persist Values Between Executions","abstract":[{"text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory.","type":"text"}],"role":"project","estimatedTime":"15min","url":"\/tutorials\/spacekit\/storevalues"},"doc://SpaceKit/tutorials/Space":{"kind":"overview","type":"topic","url":"\/tutorials\/space","identifier":"doc:\/\/SpaceKit\/tutorials\/Space","role":"overview","title":"Meet SpaceKit","abstract":[{"text":"Discover how SpaceKit simplifies blockchain development using Swift. Dive into the world of Web3 with ease and efficiency.","type":"text"}]},"GetInfoSection2Step13.swift":{"identifier":"GetInfoSection2Step13.swift","type":"file","syntax":"swift","fileName":"lib.swift","content":["import SpaceKit","","let secondsInADay: UInt64 = 86_400","","@Contract struct MyContract {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","    @Mapping<Address, UInt64>(key: \"lastDepositTime\") var lastDepositTimeForAddress","    @Mapping<Address, BigUint>(key: \"depositedTokens\") var depositedTokensForAddress","    ","    init(tokenIdentifier: Buffer) {","        self.tokenIdentifier = tokenIdentifier","    }","    ","    public mutating func deposit() {","        let caller = Message.caller","        let payment = Message.singleFungibleEsdt","        ","        guard payment.tokenIdentifier == self.tokenIdentifier else {","            smartContractError(message: \"Wrong payment provided\")","        }","        ","        let callerLastDepositTime = self.lastDepositTimeForAddress[caller]","        let currentTime = Blockchain.getBlockTimestamp()","        let nextAllowedTime = callerLastDepositTime + secondsInADay","        ","        guard currentTime > nextAllowedTime else {","            let secondsRemaining = nextAllowedTime - currentTime","            ","            smartContractError(message: \"Not allowed to deposit yet. Please wait \\(secondsRemaining) seconds.\")","        }","        ","        let callerTokenBalance = caller.getBalance(tokenIdentifier: payment.tokenIdentifier)","        let maxAllowedDeposit = callerTokenBalance \/ 10","        ","        guard payment.amount <= maxAllowedDeposit else {","            smartContractError(message: \"Payment amount should not be greater than 10% of the caller's balance for the token. Allowance: \\(maxAllowedDeposit)\")","        }","        ","        self.depositedTokensForAddress[caller] = self.depositedTokensForAddress[caller] + payment.amount","        self.lastDepositTimeForAddress[caller] = currentTime","    }","}"],"fileType":"swift","highlights":[{"line":40}]},"GetInfoSection1Step9.swift":{"fileName":"lib.swift","type":"file","identifier":"GetInfoSection1Step9.swift","content":["import SpaceKit","","@Contract struct MyContract {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","    @Mapping<Address, BigUint>(key: \"depositedTokens\") var depositedTokensForAddress","    ","    init(tokenIdentifier: Buffer) {","        self.tokenIdentifier = tokenIdentifier","    }","    ","    public mutating func deposit() {","        let caller = Message.caller","        let payment = Message.singleFungibleEsdt","        ","        guard payment.tokenIdentifier == self.tokenIdentifier else {","            smartContractError(message: \"Wrong payment provided\")","        }","        ","        self.depositedTokensForAddress[caller] = self.depositedTokensForAddress[caller] + payment.amount","    }","}"],"fileType":"swift","highlights":[{"line":18},{"line":19}],"syntax":"swift"},"doc://SpaceKit/tutorials/SpaceKit/StoreValues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage":{"title":"Leveraging @Mapping for Dynamic Key-Value Storage","type":"section","kind":"section","abstract":[{"text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory.","type":"text"}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage","url":"\/tutorials\/spacekit\/storevalues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage","role":"pseudoSymbol"},"GetInfoSection2Step4.swift":{"syntax":"swift","content":["import SpaceKit","","let secondsInADay: UInt64 = 86_400","","@Contract struct MyContract {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","    @Mapping<Address, UInt64>(key: \"lastDepositTime\") var lastDepositTimeForAddress","    @Mapping<Address, BigUint>(key: \"depositedTokens\") var depositedTokensForAddress","    ","    init(tokenIdentifier: Buffer) {","        self.tokenIdentifier = tokenIdentifier","    }","    ","    public mutating func deposit() {","        let caller = Message.caller","        let payment = Message.singleFungibleEsdt","        ","        guard payment.tokenIdentifier == self.tokenIdentifier else {","            smartContractError(message: \"Wrong payment provided\")","        }","        ","        let currentTime = Blockchain.getBlockTimestamp()","        ","        self.depositedTokensForAddress[caller] = self.depositedTokensForAddress[caller] + payment.amount","    }","}"],"type":"file","fileName":"lib.swift","identifier":"GetInfoSection2Step4.swift","highlights":[{"line":22},{"line":23}],"fileType":"swift"},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Understanding-the-Buffer-Type":{"role":"pseudoSymbol","title":"Understanding the Buffer Type","kind":"section","type":"section","abstract":[{"text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Understanding-the-Buffer-Type","url":"\/tutorials\/spacekit\/familiarizewithtypes#Understanding-the-Buffer-Type"},"doc://SpaceKit/tutorials/Space/Deep-Dive-into-SpaceKit-Concepts/Persisting-Data-Across-Executions":{"title":"Persisting Data Across Executions","type":"topic","kind":"article","abstract":[],"identifier":"doc:\/\/SpaceKit\/tutorials\/Space\/Deep-Dive-into-SpaceKit-Concepts\/Persisting-Data-Across-Executions","url":"\/tutorials\/space\/deep-dive-into-spacekit-concepts\/persisting-data-across-executions","role":"article"},"doc://SpaceKit/tutorials/SpaceKit/SyncCalls#Declare-the-Callee-Proxy":{"role":"pseudoSymbol","title":"Declare the Callee Proxy","kind":"section","type":"section","abstract":[{"text":"Smart contracts can interact not only with users but also with other smart contracts. This enables more advanced protocols by leveraging existing ones. For example, you could integrate a decentralized exchange directly into your contract to perform token swaps. Decentralized applications often involve multiple contracts, each with a dedicated role, working together to achieve complex functionality—similar to microservices in backend systems.","type":"text"}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls#Declare-the-Callee-Proxy","url":"\/tutorials\/spacekit\/synccalls#Declare-the-Callee-Proxy"},"doc://SpaceKit/tutorials/SpaceKit/InstallingTools#Installing-SpaceKits-Dependencies":{"title":"Installing SpaceKit's Dependencies","type":"section","kind":"section","abstract":[{"text":"Before writing your first smart contract with SpaceKit, ensure you have the necessary tools installed.","type":"text"}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Installing-SpaceKits-Dependencies","url":"\/tutorials\/spacekit\/installingtools#Installing-SpaceKits-Dependencies","role":"pseudoSymbol"},"GetInfoSection1Step5.swift":{"syntax":"swift","type":"file","content":["import SpaceKit","","@Contract struct MyContract {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","    @Mapping<Address, BigUint>(key: \"depositedTokens\") var depositedTokensForAddress","    ","    init(tokenIdentifier: Buffer) {","        self.tokenIdentifier = tokenIdentifier","    }","    ","    public mutating func deposit() {","        ","    }","}"],"fileName":"lib.swift","fileType":"swift","identifier":"GetInfoSection1Step5.swift","highlights":[{"line":10},{"line":11},{"line":12},{"line":13}]},"GetInfoSection2Step2.swift":{"syntax":"swift","content":["import SpaceKit","","let secondsInADay: UInt64 = 86_400","","@Contract struct MyContract {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","    @Mapping<Address, BigUint>(key: \"depositedTokens\") var depositedTokensForAddress","    ","    init(tokenIdentifier: Buffer) {","        self.tokenIdentifier = tokenIdentifier","    }","    ","    public mutating func deposit() {","        let caller = Message.caller","        let payment = Message.singleFungibleEsdt","        ","        guard payment.tokenIdentifier == self.tokenIdentifier else {","            smartContractError(message: \"Wrong payment provided\")","        }","        ","        self.depositedTokensForAddress[caller] = self.depositedTokensForAddress[caller] + payment.amount","    }","}"],"type":"file","fileName":"lib.swift","identifier":"GetInfoSection2Step2.swift","highlights":[{"line":3},{"line":4}],"fileType":"swift"},"doc://SpaceKit/tutorials/SpaceKit/AsyncCalls#Perform-an-Asynchronous-Call":{"role":"pseudoSymbol","title":"Perform an Asynchronous Call","kind":"section","type":"section","abstract":[{"text":"Blockchain platforms using SpaceVM enable seamless execution within a sharded environment. Sharding divides a blockchain’s global state and validation workload into smaller, manageable units known as shards. This method enhances scalability without compromising decentralization, allowing nodes to operate without significant computational resources.","type":"text"}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls#Perform-an-Asynchronous-Call","url":"\/tutorials\/spacekit\/asynccalls#Perform-an-Asynchronous-Call"},"doc://SpaceKit/tutorials/SpaceKit/CodingYourFirstContract#Initializing-the-Project":{"title":"Initializing the Project","type":"section","kind":"section","abstract":[{"text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user.","type":"text"}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Initializing-the-Project","url":"\/tutorials\/spacekit\/codingyourfirstcontract#Initializing-the-Project","role":"pseudoSymbol"},"GetInfoSection2Step8.swift":{"syntax":"swift","type":"file","content":["import SpaceKit","","let secondsInADay: UInt64 = 86_400","","@Contract struct MyContract {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","    @Mapping<Address, UInt64>(key: \"lastDepositTime\") var lastDepositTimeForAddress","    @Mapping<Address, BigUint>(key: \"depositedTokens\") var depositedTokensForAddress","    ","    init(tokenIdentifier: Buffer) {","        self.tokenIdentifier = tokenIdentifier","    }","    ","    public mutating func deposit() {","        let caller = Message.caller","        let payment = Message.singleFungibleEsdt","        ","        guard payment.tokenIdentifier == self.tokenIdentifier else {","            smartContractError(message: \"Wrong payment provided\")","        }","        ","        let currentTime = Blockchain.getBlockTimestamp()","        let callerLastDepositTime = self.lastDepositTimeForAddress[caller]","        let nextAllowedTime = callerLastDepositTime + secondsInADay","        ","        guard currentTime > nextAllowedTime else {","            let secondsRemaining = nextAllowedTime - currentTime","        }","        ","        self.depositedTokensForAddress[caller] = self.depositedTokensForAddress[caller] + payment.amount","    }","}"],"fileName":"lib.swift","fileType":"swift","identifier":"GetInfoSection2Step8.swift","highlights":[{"line":27}]},"doc://SpaceKit/tutorials/Space/Getting-Started/Installing-the-Tools":{"title":"Installing the Tools","type":"topic","kind":"article","abstract":[],"identifier":"doc:\/\/SpaceKit\/tutorials\/Space\/Getting-Started\/Installing-the-Tools","url":"\/tutorials\/space\/getting-started\/installing-the-tools","role":"article"},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Creating-Your-Own-Types":{"role":"pseudoSymbol","title":"Creating Your Own Types","kind":"section","type":"section","abstract":[{"text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Creating-Your-Own-Types","url":"\/tutorials\/spacekit\/familiarizewithtypes#Creating-Your-Own-Types"},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges":{"title":"Handling Heap Allocation Challenges","type":"section","kind":"section","abstract":[{"text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges","url":"\/tutorials\/spacekit\/familiarizewithtypes#Handling-Heap-Allocation-Challenges","role":"pseudoSymbol"}}}