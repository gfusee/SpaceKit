{"sections":[{"kind":"hero","estimatedTimeInMinutes":10,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Many smart contracts rely on contextual data to execute their operations effectively. This data can include input payments, the caller’s address, the current time, the balance of a specific account, or even the contract owner."}]},{"inlineContent":[{"type":"text","text":"The SpaceKit framework provides an intuitive way to retrieve all of this information using the "},{"code":"Message","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Blockchain"},{"text":" objects.","type":"text"}],"type":"paragraph"}],"chapter":"Retrieving Information from the Blockchain","title":"Retrieving Information from the Blockchain"},{"tasks":[{"stepsSection":[{"type":"step","caption":[],"runtimePreview":null,"media":null,"code":"GetInfoSection1Step1.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Start by defining the contract’s basic structure."}]}]},{"runtimePreview":null,"media":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Track the specific token type to be deposited. Store its identifier in the contract’s storage using a "},{"type":"codeVoice","code":"@Storage"},{"text":" variable.","type":"text"}]}],"caption":[{"inlineContent":[{"text":"Note: This variable will be initialized later in the contract’s ","type":"text"},{"type":"codeVoice","code":"init"},{"type":"text","text":" function."}],"type":"paragraph"}],"code":"GetInfoSection1Step2.swift"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a "},{"type":"codeVoice","code":"@Mapping"},{"text":" variable to keep track of the total amount deposited by each user.","type":"text"}]}],"media":null,"caption":[{"inlineContent":[{"type":"text","text":"Reminder: Numeric storage variables default to 0."}],"type":"paragraph"}],"type":"step","code":"GetInfoSection1Step3.swift","runtimePreview":null},{"runtimePreview":null,"caption":[],"code":"GetInfoSection1Step4.swift","type":"step","content":[{"inlineContent":[{"text":"Add an initializer to the contract, which accepts the token identifier as a parameter.","type":"text"}],"type":"paragraph"}],"media":null},{"media":null,"content":[{"inlineContent":[{"type":"text","text":"Define the "},{"type":"codeVoice","code":"deposit"},{"type":"text","text":" endpoint for the contract."}],"type":"paragraph"}],"caption":[],"code":"GetInfoSection1Step5.swift","runtimePreview":null,"type":"step"},{"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Use the ","type":"text"},{"type":"codeVoice","code":"Message.caller"},{"type":"text","text":" property to retrieve the address of the user making the deposit."}]}],"type":"step","media":null,"caption":[],"code":"GetInfoSection1Step6.swift"},{"code":"GetInfoSection1Step7.swift","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Access the single fungible token payment using ","type":"text"},{"code":"Message.singleFungibleEsdt","type":"codeVoice"},{"type":"text","text":". If the transaction doesn’t include exactly one fungible token payment, the transaction will fail."}]}],"caption":[{"inlineContent":[{"text":"Note: The ","type":"text"},{"code":"Message","type":"codeVoice"},{"text":" object also allows retrieval of multi payments, non-fungible tokens, and EGLD payments.","type":"text"}],"type":"paragraph"}],"type":"step","media":null},{"media":null,"type":"step","content":[{"inlineContent":[{"text":"Verify the payment by comparing the token identifier with the stored value.","type":"text"}],"type":"paragraph"}],"runtimePreview":null,"caption":[],"code":"GetInfoSection1Step8.swift"},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add the payment amount to the storage mapping for the caller’s address."}]}],"runtimePreview":null,"code":"GetInfoSection1Step9.swift","caption":[],"media":null}],"title":"Accessing Transaction Context Data","contentSection":[{"mediaPosition":"trailing","kind":"contentAndMedia","content":[{"inlineContent":[{"type":"text","text":"In this section, you will create a simple smart contract that allows users to deposit a specified fungible token. The contract will track the total amount of tokens deposited by each user."}],"type":"paragraph"}]}],"anchor":"Accessing-Transaction-Context-Data"},{"stepsSection":[{"runtimePreview":null,"media":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Start by using the contract from the previous section.","type":"text"}]}],"caption":[],"code":"GetInfoSection2Step1.swift"},{"runtimePreview":null,"media":null,"code":"GetInfoSection2Step2.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Define a global constant representing the number of seconds in a day."}]}],"type":"step","caption":[]},{"caption":[],"code":"GetInfoSection2Step3.swift","runtimePreview":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add a mapping to store the last deposit time for each user."}]}],"media":null},{"content":[{"inlineContent":[{"type":"text","text":"In the "},{"type":"codeVoice","code":"deposit"},{"type":"text","text":" endpoint, retrieve the current timestamp using "},{"code":"Blockchain.getBlockTimestamp()","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}],"runtimePreview":null,"type":"step","code":"GetInfoSection2Step4.swift","caption":[{"inlineContent":[{"type":"text","text":"Note: The timestamp is the number of seconds since January 1, 1970."}],"type":"paragraph"}],"media":null},{"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Retrieve the last deposit time for the caller from the storage."}]}],"caption":[],"media":null,"code":"GetInfoSection2Step5.swift","type":"step"},{"runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"Compute the next allowed deposit time by adding one day’s worth of seconds to the last deposit time."}],"type":"paragraph"}],"type":"step","media":null,"code":"GetInfoSection2Step6.swift","caption":[]},{"runtimePreview":null,"type":"step","code":"GetInfoSection2Step7.swift","content":[{"type":"paragraph","inlineContent":[{"text":"Ensure the caller is allowed to deposit now.","type":"text"}]}],"caption":[],"media":null},{"media":null,"type":"step","code":"GetInfoSection2Step8.swift","runtimePreview":null,"caption":[],"content":[{"inlineContent":[{"text":"If the deposit isn’t allowed yet, calculate the remaining time before the next deposit is permitted.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the calculated time to return an error message with the remaining time."}]}],"media":null,"runtimePreview":null,"type":"step","code":"GetInfoSection2Step9.swift","caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Tip: You can interpolate buffers, addresses, and numeric types into string literals when creating error messages."}]}]},{"type":"step","media":null,"caption":[{"type":"paragraph","inlineContent":[{"text":"Tip: If no token identifier is provided, the EGLD balance is returned.","type":"text"}]}],"code":"GetInfoSection2Step10.swift","content":[{"inlineContent":[{"type":"text","text":"Retrieve the caller’s token balance using "},{"code":"Blockchain.getBalance()","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}],"runtimePreview":null},{"runtimePreview":null,"type":"step","caption":[{"inlineContent":[{"type":"text","text":"Note: Be cautious when performing integer division as any fractional part is discarded."}],"type":"paragraph"}],"media":null,"content":[{"inlineContent":[{"type":"text","text":"Calculate the maximum allowable deposit by dividing the caller’s token balance by 10."}],"type":"paragraph"}],"code":"GetInfoSection2Step11.swift"},{"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Ensure the deposit amount does not exceed the maximum allowable limit."}]}],"code":"GetInfoSection2Step12.swift","caption":[],"type":"step","media":null},{"caption":[],"content":[{"type":"paragraph","inlineContent":[{"text":"Update the last deposit time for the caller to the current block timestamp.","type":"text"}]}],"code":"GetInfoSection2Step13.swift","runtimePreview":null,"type":"step","media":null}],"anchor":"Accessing-Blockchain-Context-Data","title":"Accessing Blockchain Context Data","contentSection":[{"kind":"contentAndMedia","mediaPosition":"trailing","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In this section, you will improve the previous contract by adding constraints: each address can deposit only once every 24 hours, and deposits must not exceed 10% of the user’s token balance."}]}]}]}],"kind":"tasks"},{"title":"Interact with Other Contracts","action":{"overridingTitleInlineContent":[{"text":"Get started","type":"text"}],"type":"reference","overridingTitle":"Get started","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls","isActive":true},"featuredEyebrow":"Tutorial","abstract":[{"type":"text","text":"Smart contracts can interact not only with users but also with other smart contracts. This enables more advanced protocols by leveraging existing ones. For example, you could integrate a decentralized exchange directly into your contract to perform token swaps. Decentralized applications often involve multiple contracts, each with a dedicated role, working together to achieve complex functionality—similar to microservices in backend systems."}],"kind":"callToAction"}],"hierarchy":{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit","modules":[{"projects":[{"sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Installing-SpaceKits-Dependencies","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Setting-Up-the-SpaceKit-CLI"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Getting-Started\/Installing-the-Tools"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Getting-Started\/Building-Your-First-Smart-Contract","projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract","sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Initializing-the-Project","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Writing-the-Contract-Code","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Testing-the-Contract"}]}]},{"projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes","sections":[{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Understanding-the-Buffer-Type"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Working-with-the-BigUint-Type","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Working-with-the-Vector-Type","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Creating-Your-Own-Types"}]}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Exploring-SpaceKit's-Types"},{"projects":[{"sections":[{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues#Working-with-Storage-for-Single-Value-Persistence"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Persisting-Data-Across-Executions"},{"projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo","sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo#Accessing-Transaction-Context-Data","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo#Accessing-Blockchain-Context-Data","kind":"task"}]}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Retrieving-Information-from-the-Blockchain"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Interacting-with-Other-Contracts","projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls","sections":[{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls#Declare-the-Callee-Proxy"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls#Perform-a-Synchronous-Call"}]}]},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Calling-Contracts-Across-Shards","projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls","sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls#Declare-the-Callee-Proxy","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls#Perform-an-Asynchronous-Call","kind":"task"}]}]}],"paths":[["doc:\/\/SpaceKit\/tutorials\/SpaceKit","doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts","doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Retrieving-Information-from-the-Blockchain"]]},"kind":"project","identifier":{"url":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo","interfaceLanguage":"swift"},"metadata":{"categoryPathComponent":"SpaceKit","category":"SpaceKit","title":"Retrieving Information from the Blockchain","role":"project"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/tutorials\/spacekit\/getinfo"]}],"schemaVersion":{"patch":0,"major":0,"minor":3},"references":{"doc://SpaceKit/tutorials/SpaceKit/Deep-Dive-into-SpaceKit-Concepts/Exploring-SpaceKit's-Types":{"type":"topic","role":"article","title":"Exploring SpaceKit's Types","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Exploring-SpaceKit's-Types","kind":"article","url":"\/tutorials\/spacekit\/deep-dive-into-spacekit-concepts\/exploring-spacekit's-types","abstract":[]},"doc://SpaceKit/tutorials/SpaceKit/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract":{"url":"\/tutorials\/spacekit\/installingtools#Initializing-and-Compiling-Your-First-Smart-Contract","title":"Initializing and Compiling Your First Smart Contract","type":"section","kind":"section","abstract":[{"text":"Before writing your first smart contract with SpaceKit, ensure you have the necessary tools installed.","type":"text"}],"role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract"},"doc://SpaceKit/tutorials/SpaceKit/StoreValues":{"kind":"project","estimatedTime":"15min","role":"project","abstract":[{"type":"text","text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory."}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues","url":"\/tutorials\/spacekit\/storevalues","type":"topic","title":"Persist Values Between Executions"},"doc://SpaceKit/tutorials/SpaceKit/InstallingTools#Setting-Up-the-SpaceKit-CLI":{"abstract":[{"text":"Before writing your first smart contract with SpaceKit, ensure you have the necessary tools installed.","type":"text"}],"url":"\/tutorials\/spacekit\/installingtools#Setting-Up-the-SpaceKit-CLI","kind":"section","title":"Setting Up the SpaceKit CLI","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Setting-Up-the-SpaceKit-CLI","type":"section","role":"pseudoSymbol"},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges":{"type":"section","kind":"section","abstract":[{"text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}],"url":"\/tutorials\/spacekit\/familiarizewithtypes#Handling-Heap-Allocation-Challenges","role":"pseudoSymbol","title":"Handling Heap Allocation Challenges","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges"},"doc://SpaceKit/tutorials/SpaceKit/CodingYourFirstContract#Testing-the-Contract":{"type":"section","kind":"section","abstract":[{"text":"In this tutorial, you’ll create a simple smart contract that manages a counter. Users can increment or decrement the counter, and the changes are persisted across contract executions.","type":"text"}],"url":"\/tutorials\/spacekit\/codingyourfirstcontract#Testing-the-Contract","role":"pseudoSymbol","title":"Testing the Contract","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Testing-the-Contract"},"GetInfoSection2Step13.swift":{"fileName":"lib.swift","syntax":"swift","identifier":"GetInfoSection2Step13.swift","fileType":"swift","content":["import SpaceKit","","let secondsInADay: UInt64 = 86_400","","@Init func initialize(tokenIdentifier: Buffer) {","    var controller = MyController()","    ","    controller.tokenIdentifier = tokenIdentifier","}","","@Controller struct MyController {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","    @Mapping<Address, UInt64>(key: \"lastDepositTime\") var lastDepositTimeForAddress","    @Mapping<Address, BigUint>(key: \"depositedTokens\") var depositedTokensForAddress","    ","    public mutating func deposit() {","        let caller = Message.caller","        let payment = Message.singleFungibleEsdt","        ","        guard payment.tokenIdentifier == self.tokenIdentifier else {","            smartContractError(message: \"Wrong payment provided\")","        }","        ","        let callerLastDepositTime = self.lastDepositTimeForAddress[caller]","        let currentTime = Blockchain.getBlockTimestamp()","        let nextAllowedTime = callerLastDepositTime + secondsInADay","        ","        guard currentTime > nextAllowedTime else {","            let secondsRemaining = nextAllowedTime - currentTime","            ","            smartContractError(message: \"Not allowed to deposit yet. Please wait \\(secondsRemaining) seconds.\")","        }","        ","        let callerTokenBalance = caller.getBalance(tokenIdentifier: payment.tokenIdentifier)","        let maxAllowedDeposit = callerTokenBalance \/ 10","        ","        guard payment.amount <= maxAllowedDeposit else {","            smartContractError(message: \"Payment amount should not be greater than 10% of the caller's balance for the token. Allowance: \\(maxAllowedDeposit)\")","        }","        ","        self.depositedTokensForAddress[caller] = self.depositedTokensForAddress[caller] + payment.amount","        self.lastDepositTimeForAddress[caller] = currentTime","    }","}"],"type":"file","highlights":[{"line":42}]},"GetInfoSection2Step5.swift":{"fileName":"lib.swift","fileType":"swift","type":"file","highlights":[{"line":25}],"syntax":"swift","identifier":"GetInfoSection2Step5.swift","content":["import SpaceKit","","let secondsInADay: UInt64 = 86_400","","@Init func initialize(tokenIdentifier: Buffer) {","    var controller = MyController()","    ","    controller.tokenIdentifier = tokenIdentifier","}","","@Controller struct MyController {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","    @Mapping<Address, UInt64>(key: \"lastDepositTime\") var lastDepositTimeForAddress","    @Mapping<Address, BigUint>(key: \"depositedTokens\") var depositedTokensForAddress","    ","    public mutating func deposit() {","        let caller = Message.caller","        let payment = Message.singleFungibleEsdt","        ","        guard payment.tokenIdentifier == self.tokenIdentifier else {","            smartContractError(message: \"Wrong payment provided\")","        }","        ","        let currentTime = Blockchain.getBlockTimestamp()","        let callerLastDepositTime = self.lastDepositTimeForAddress[caller]","        ","        self.depositedTokensForAddress[caller] = self.depositedTokensForAddress[caller] + payment.amount","    }","}"]},"GetInfoSection1Step3.swift":{"fileName":"lib.swift","highlights":[{"line":5}],"identifier":"GetInfoSection1Step3.swift","type":"file","content":["import SpaceKit","","@Controller struct MyController {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","    @Mapping<Address, BigUint>(key: \"depositedTokens\") var depositedTokensForAddress","}"],"syntax":"swift","fileType":"swift"},"GetInfoSection1Step5.swift":{"fileName":"lib.swift","fileType":"swift","type":"file","highlights":[{"line":12},{"line":13},{"line":14},{"line":15}],"syntax":"swift","identifier":"GetInfoSection1Step5.swift","content":["import SpaceKit","","@Init func initialize(tokenIdentifier: Buffer) {","    var controller = MyController()","    ","    controller.tokenIdentifier = tokenIdentifier","}","","@Controller struct MyController {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","    @Mapping<Address, BigUint>(key: \"depositedTokens\") var depositedTokensForAddress","    ","    public mutating func deposit() {","        ","    }","}"]},"GetInfoSection2Step10.swift":{"fileName":"lib.swift","syntax":"swift","identifier":"GetInfoSection2Step10.swift","fileType":"swift","content":["import SpaceKit","","let secondsInADay: UInt64 = 86_400","","@Init func initialize(tokenIdentifier: Buffer) {","    var controller = MyController()","    ","    controller.tokenIdentifier = tokenIdentifier","}","","@Controller struct MyController {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","    @Mapping<Address, UInt64>(key: \"lastDepositTime\") var lastDepositTimeForAddress","    @Mapping<Address, BigUint>(key: \"depositedTokens\") var depositedTokensForAddress","    ","    public mutating func deposit() {","        let caller = Message.caller","        let payment = Message.singleFungibleEsdt","        ","        guard payment.tokenIdentifier == self.tokenIdentifier else {","            smartContractError(message: \"Wrong payment provided\")","        }","        ","        let currentTime = Blockchain.getBlockTimestamp()","        let callerLastDepositTime = self.lastDepositTimeForAddress[caller]","        let nextAllowedTime = callerLastDepositTime + secondsInADay","        ","        guard currentTime > nextAllowedTime else {","            let secondsRemaining = nextAllowedTime - currentTime","            ","            smartContractError(message: \"Not allowed to deposit yet. Please wait \\(secondsRemaining) seconds.\")","        }","        ","        let callerTokenBalance = caller.getBalance(tokenIdentifier: payment.tokenIdentifier)","        ","        self.depositedTokensForAddress[caller] = self.depositedTokensForAddress[caller] + payment.amount","    }","}"],"type":"file","highlights":[{"line":34},{"line":35}]},"doc://SpaceKit/tutorials/SpaceKit/AsyncCalls#Declare-the-Callee-Proxy":{"title":"Declare the Callee Proxy","role":"pseudoSymbol","url":"\/tutorials\/spacekit\/asynccalls#Declare-the-Callee-Proxy","abstract":[{"type":"text","text":"Blockchain platforms using SpaceVM enable seamless execution within a sharded environment. Sharding divides a blockchain’s global state and validation workload into smaller, manageable units known as shards. This method enhances scalability without compromising decentralization, allowing nodes to operate without significant computational resources."}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls#Declare-the-Callee-Proxy","type":"section","kind":"section"},"GetInfoSection1Step7.swift":{"fileName":"lib.swift","fileType":"swift","type":"file","highlights":[{"line":15}],"syntax":"swift","identifier":"GetInfoSection1Step7.swift","content":["import SpaceKit","","@Init func initialize(tokenIdentifier: Buffer) {","    var controller = MyController()","    ","    controller.tokenIdentifier = tokenIdentifier","}","","@Controller struct MyController {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","    @Mapping<Address, BigUint>(key: \"depositedTokens\") var depositedTokensForAddress","    ","    public mutating func deposit() {","        let caller = Message.caller","        let payment = Message.singleFungibleEsdt","    }","}"]},"GetInfoSection1Step9.swift":{"fileName":"lib.swift","syntax":"swift","identifier":"GetInfoSection1Step9.swift","fileType":"swift","content":["import SpaceKit","","@Init func initialize(tokenIdentifier: Buffer) {","    var controller = MyController()","    ","    controller.tokenIdentifier = tokenIdentifier","}","","@Controller struct MyController {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","    @Mapping<Address, BigUint>(key: \"depositedTokens\") var depositedTokensForAddress","    ","    public mutating func deposit() {","        let caller = Message.caller","        let payment = Message.singleFungibleEsdt","        ","        guard payment.tokenIdentifier == self.tokenIdentifier else {","            smartContractError(message: \"Wrong payment provided\")","        }","        ","        self.depositedTokensForAddress[caller] = self.depositedTokensForAddress[caller] + payment.amount","    }","}"],"type":"file","highlights":[{"line":20},{"line":21}]},"doc://SpaceKit/tutorials/SpaceKit/Deep-Dive-into-SpaceKit-Concepts/Calling-Contracts-Across-Shards":{"url":"\/tutorials\/spacekit\/deep-dive-into-spacekit-concepts\/calling-contracts-across-shards","abstract":[],"title":"Calling Contracts Across Shards","kind":"article","type":"topic","role":"article","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Calling-Contracts-Across-Shards"},"doc://SpaceKit/tutorials/SpaceKit/StoreValues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage":{"type":"section","kind":"section","abstract":[{"text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory.","type":"text"}],"url":"\/tutorials\/spacekit\/storevalues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage","role":"pseudoSymbol","title":"Leveraging @Mapping for Dynamic Key-Value Storage","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage"},"doc://SpaceKit/tutorials/SpaceKit/Getting-Started/Installing-the-Tools":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Getting-Started\/Installing-the-Tools","role":"article","url":"\/tutorials\/spacekit\/getting-started\/installing-the-tools","abstract":[],"kind":"article","type":"topic","title":"Installing the Tools"},"GetInfoSection1Step4.swift":{"fileName":"lib.swift","highlights":[{"line":3},{"line":4},{"line":5},{"line":6},{"line":7},{"line":8}],"identifier":"GetInfoSection1Step4.swift","type":"file","content":["import SpaceKit","","@Init func initialize(tokenIdentifier: Buffer) {","    var controller = MyController()","    ","    controller.tokenIdentifier = tokenIdentifier","}","","@Controller struct MyController {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","    @Mapping<Address, BigUint>(key: \"depositedTokens\") var depositedTokensForAddress","}"],"syntax":"swift","fileType":"swift"},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Working-with-the-BigUint-Type":{"abstract":[{"text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}],"url":"\/tutorials\/spacekit\/familiarizewithtypes#Working-with-the-BigUint-Type","kind":"section","title":"Working with the BigUint Type","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Working-with-the-BigUint-Type","type":"section","role":"pseudoSymbol"},"GetInfoSection2Step3.swift":{"fileName":"lib.swift","syntax":"swift","identifier":"GetInfoSection2Step3.swift","fileType":"swift","content":["import SpaceKit","","let secondsInADay: UInt64 = 86_400","","@Init func initialize(tokenIdentifier: Buffer) {","    var controller = MyController()","    ","    controller.tokenIdentifier = tokenIdentifier","}","","@Controller struct MyController {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","    @Mapping<Address, UInt64>(key: \"lastDepositTime\") var lastDepositTimeForAddress","    @Mapping<Address, BigUint>(key: \"depositedTokens\") var depositedTokensForAddress","    ","    public mutating func deposit() {","        let caller = Message.caller","        let payment = Message.singleFungibleEsdt","        ","        guard payment.tokenIdentifier == self.tokenIdentifier else {","            smartContractError(message: \"Wrong payment provided\")","        }","        ","        self.depositedTokensForAddress[caller] = self.depositedTokensForAddress[caller] + payment.amount","    }","}"],"type":"file","highlights":[{"line":13}]},"GetInfoSection2Step7.swift":{"fileName":"lib.swift","fileType":"swift","type":"file","highlights":[{"line":28},{"line":29},{"line":30},{"line":31}],"syntax":"swift","identifier":"GetInfoSection2Step7.swift","content":["import SpaceKit","","let secondsInADay: UInt64 = 86_400","","@Init func initialize(tokenIdentifier: Buffer) {","    var controller = MyController()","    ","    controller.tokenIdentifier = tokenIdentifier","}","","@Controller struct MyController {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","    @Mapping<Address, UInt64>(key: \"lastDepositTime\") var lastDepositTimeForAddress","    @Mapping<Address, BigUint>(key: \"depositedTokens\") var depositedTokensForAddress","    ","    public mutating func deposit() {","        let caller = Message.caller","        let payment = Message.singleFungibleEsdt","        ","        guard payment.tokenIdentifier == self.tokenIdentifier else {","            smartContractError(message: \"Wrong payment provided\")","        }","        ","        let currentTime = Blockchain.getBlockTimestamp()","        let callerLastDepositTime = self.lastDepositTimeForAddress[caller]","        let nextAllowedTime = callerLastDepositTime + secondsInADay","        ","        guard currentTime > nextAllowedTime else {","            ","        }","        ","        self.depositedTokensForAddress[caller] = self.depositedTokensForAddress[caller] + payment.amount","    }","}"]},"GetInfoSection2Step8.swift":{"fileName":"lib.swift","syntax":"swift","identifier":"GetInfoSection2Step8.swift","fileType":"swift","content":["import SpaceKit","","let secondsInADay: UInt64 = 86_400","","@Init func initialize(tokenIdentifier: Buffer) {","    var controller = MyController()","    ","    controller.tokenIdentifier = tokenIdentifier","}","","@Controller struct MyController {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","    @Mapping<Address, UInt64>(key: \"lastDepositTime\") var lastDepositTimeForAddress","    @Mapping<Address, BigUint>(key: \"depositedTokens\") var depositedTokensForAddress","    ","    public mutating func deposit() {","        let caller = Message.caller","        let payment = Message.singleFungibleEsdt","        ","        guard payment.tokenIdentifier == self.tokenIdentifier else {","            smartContractError(message: \"Wrong payment provided\")","        }","        ","        let currentTime = Blockchain.getBlockTimestamp()","        let callerLastDepositTime = self.lastDepositTimeForAddress[caller]","        let nextAllowedTime = callerLastDepositTime + secondsInADay","        ","        guard currentTime > nextAllowedTime else {","            let secondsRemaining = nextAllowedTime - currentTime","        }","        ","        self.depositedTokensForAddress[caller] = self.depositedTokensForAddress[caller] + payment.amount","    }","}"],"type":"file","highlights":[{"line":29}]},"GetInfoSection1Step6.swift":{"fileName":"lib.swift","fileType":"swift","type":"file","highlights":[{"line":14}],"syntax":"swift","identifier":"GetInfoSection1Step6.swift","content":["import SpaceKit","","@Init func initialize(tokenIdentifier: Buffer) {","    var controller = MyController()","    ","    controller.tokenIdentifier = tokenIdentifier","}","","@Controller struct MyController {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","    @Mapping<Address, BigUint>(key: \"depositedTokens\") var depositedTokensForAddress","    ","    public mutating func deposit() {","        let caller = Message.caller","    }","}"]},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Understanding-the-Buffer-Type":{"url":"\/tutorials\/spacekit\/familiarizewithtypes#Understanding-the-Buffer-Type","abstract":[{"type":"text","text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM."}],"title":"Understanding the Buffer Type","kind":"section","type":"section","role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Understanding-the-Buffer-Type"},"GetInfoSection2Step6.swift":{"fileName":"lib.swift","syntax":"swift","identifier":"GetInfoSection2Step6.swift","fileType":"swift","content":["import SpaceKit","","let secondsInADay: UInt64 = 86_400","","@Init func initialize(tokenIdentifier: Buffer) {","    var controller = MyController()","    ","    controller.tokenIdentifier = tokenIdentifier","}","","@Controller struct MyController {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","    @Mapping<Address, UInt64>(key: \"lastDepositTime\") var lastDepositTimeForAddress","    @Mapping<Address, BigUint>(key: \"depositedTokens\") var depositedTokensForAddress","    ","    public mutating func deposit() {","        let caller = Message.caller","        let payment = Message.singleFungibleEsdt","        ","        guard payment.tokenIdentifier == self.tokenIdentifier else {","            smartContractError(message: \"Wrong payment provided\")","        }","        ","        let currentTime = Blockchain.getBlockTimestamp()","        let callerLastDepositTime = self.lastDepositTimeForAddress[caller]","        let nextAllowedTime = callerLastDepositTime + secondsInADay","        ","        self.depositedTokensForAddress[caller] = self.depositedTokensForAddress[caller] + payment.amount","    }","}"],"type":"file","highlights":[{"line":26}]},"GetInfoSection2Step11.swift":{"fileName":"lib.swift","fileType":"swift","type":"file","highlights":[{"line":35}],"syntax":"swift","identifier":"GetInfoSection2Step11.swift","content":["import SpaceKit","","let secondsInADay: UInt64 = 86_400","","@Init func initialize(tokenIdentifier: Buffer) {","    var controller = MyController()","    ","    controller.tokenIdentifier = tokenIdentifier","}","","@Controller struct MyController {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","    @Mapping<Address, UInt64>(key: \"lastDepositTime\") var lastDepositTimeForAddress","    @Mapping<Address, BigUint>(key: \"depositedTokens\") var depositedTokensForAddress","    ","    public mutating func deposit() {","        let caller = Message.caller","        let payment = Message.singleFungibleEsdt","        ","        guard payment.tokenIdentifier == self.tokenIdentifier else {","            smartContractError(message: \"Wrong payment provided\")","        }","        ","        let currentTime = Blockchain.getBlockTimestamp()","        let callerLastDepositTime = self.lastDepositTimeForAddress[caller]","        let nextAllowedTime = callerLastDepositTime + secondsInADay","        ","        guard currentTime > nextAllowedTime else {","            let secondsRemaining = nextAllowedTime - currentTime","            ","            smartContractError(message: \"Not allowed to deposit yet. Please wait \\(secondsRemaining) seconds.\")","        }","        ","        let callerTokenBalance = caller.getBalance(tokenIdentifier: payment.tokenIdentifier)","        let maxAllowedDeposit = callerTokenBalance \/ 10","        ","        self.depositedTokensForAddress[caller] = self.depositedTokensForAddress[caller] + payment.amount","    }","}"]},"doc://SpaceKit/tutorials/SpaceKit/SyncCalls#Perform-a-Synchronous-Call":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls#Perform-a-Synchronous-Call","type":"section","url":"\/tutorials\/spacekit\/synccalls#Perform-a-Synchronous-Call","kind":"section","abstract":[{"text":"Smart contracts can interact not only with users but also with other smart contracts. This enables more advanced protocols by leveraging existing ones. For example, you could integrate a decentralized exchange directly into your contract to perform token swaps. Decentralized applications often involve multiple contracts, each with a dedicated role, working together to achieve complex functionality—similar to microservices in backend systems.","type":"text"}],"role":"pseudoSymbol","title":"Perform a Synchronous Call"},"GetInfoSection1Step1.swift":{"fileName":"lib.swift","syntax":"swift","identifier":"GetInfoSection1Step1.swift","fileType":"swift","content":["import SpaceKit","","@Controller struct MyController {","    ","}"],"type":"file","highlights":[]},"doc://SpaceKit/tutorials/SpaceKit/AsyncCalls#Perform-an-Asynchronous-Call":{"url":"\/tutorials\/spacekit\/asynccalls#Perform-an-Asynchronous-Call","title":"Perform an Asynchronous Call","type":"section","kind":"section","abstract":[{"text":"Blockchain platforms using SpaceVM enable seamless execution within a sharded environment. Sharding divides a blockchain’s global state and validation workload into smaller, manageable units known as shards. This method enhances scalability without compromising decentralization, allowing nodes to operate without significant computational resources.","type":"text"}],"role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls#Perform-an-Asynchronous-Call"},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Working-with-the-Vector-Type":{"abstract":[{"text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}],"url":"\/tutorials\/spacekit\/familiarizewithtypes#Working-with-the-Vector-Type","kind":"section","title":"Working with the Vector Type","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Working-with-the-Vector-Type","type":"section","role":"pseudoSymbol"},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Creating-Your-Own-Types":{"type":"section","kind":"section","abstract":[{"text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}],"url":"\/tutorials\/spacekit\/familiarizewithtypes#Creating-Your-Own-Types","role":"pseudoSymbol","title":"Creating Your Own Types","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Creating-Your-Own-Types"},"doc://SpaceKit/tutorials/SpaceKit/GetInfo":{"abstract":[{"text":"Many smart contracts rely on contextual data to execute their operations effectively. This data can include input payments, the caller’s address, the current time, the balance of a specific account, or even the contract owner.","type":"text"}],"url":"\/tutorials\/spacekit\/getinfo","kind":"project","title":"Retrieving Information from the Blockchain","estimatedTime":"10min","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo","type":"topic","role":"project"},"GetInfoSection2Step2.swift":{"fileName":"lib.swift","fileType":"swift","type":"file","highlights":[{"line":3},{"line":4}],"syntax":"swift","identifier":"GetInfoSection2Step2.swift","content":["import SpaceKit","","let secondsInADay: UInt64 = 86_400","","@Init func initialize(tokenIdentifier: Buffer) {","    var controller = MyController()","    ","    controller.tokenIdentifier = tokenIdentifier","}","","@Controller struct MyController {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","    @Mapping<Address, BigUint>(key: \"depositedTokens\") var depositedTokensForAddress","    ","    public mutating func deposit() {","        let caller = Message.caller","        let payment = Message.singleFungibleEsdt","        ","        guard payment.tokenIdentifier == self.tokenIdentifier else {","            smartContractError(message: \"Wrong payment provided\")","        }","        ","        self.depositedTokensForAddress[caller] = self.depositedTokensForAddress[caller] + payment.amount","    }","}"]},"doc://SpaceKit/tutorials/SpaceKit/CodingYourFirstContract#Initializing-the-Project":{"url":"\/tutorials\/spacekit\/codingyourfirstcontract#Initializing-the-Project","abstract":[{"type":"text","text":"In this tutorial, you’ll create a simple smart contract that manages a counter. Users can increment or decrement the counter, and the changes are persisted across contract executions."}],"title":"Initializing the Project","kind":"section","type":"section","role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Initializing-the-Project"},"doc://SpaceKit/tutorials/SpaceKit":{"url":"\/tutorials\/spacekit","abstract":[{"type":"text","text":"Discover how SpaceKit simplifies blockchain development using Swift. Dive into the world of Web3 with ease and efficiency."}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit","title":"Meet SpaceKit","kind":"overview","type":"topic","role":"overview"},"GetInfoSection1Step2.swift":{"fileName":"lib.swift","syntax":"swift","identifier":"GetInfoSection1Step2.swift","fileType":"swift","content":["import SpaceKit","","@Controller struct MyController {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","}"],"type":"file","highlights":[{"line":4}]},"GetInfoSection2Step9.swift":{"fileName":"lib.swift","fileType":"swift","type":"file","highlights":[{"line":30},{"line":31}],"syntax":"swift","identifier":"GetInfoSection2Step9.swift","content":["import SpaceKit","","let secondsInADay: UInt64 = 86_400","","@Init func initialize(tokenIdentifier: Buffer) {","    var controller = MyController()","    ","    controller.tokenIdentifier = tokenIdentifier","}","","@Controller struct MyController {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","    @Mapping<Address, UInt64>(key: \"lastDepositTime\") var lastDepositTimeForAddress","    @Mapping<Address, BigUint>(key: \"depositedTokens\") var depositedTokensForAddress","    ","    public mutating func deposit() {","        let caller = Message.caller","        let payment = Message.singleFungibleEsdt","        ","        guard payment.tokenIdentifier == self.tokenIdentifier else {","            smartContractError(message: \"Wrong payment provided\")","        }","        ","        let currentTime = Blockchain.getBlockTimestamp()","        let callerLastDepositTime = self.lastDepositTimeForAddress[caller]","        let nextAllowedTime = callerLastDepositTime + secondsInADay","        ","        guard currentTime > nextAllowedTime else {","            let secondsRemaining = nextAllowedTime - currentTime","            ","            smartContractError(message: \"Not allowed to deposit yet. Please wait \\(secondsRemaining) seconds.\")","        }","        ","        self.depositedTokensForAddress[caller] = self.depositedTokensForAddress[caller] + payment.amount","    }","}"]},"GetInfoSection1Step8.swift":{"fileName":"lib.swift","syntax":"swift","identifier":"GetInfoSection1Step8.swift","fileType":"swift","content":["import SpaceKit","","@Init func initialize(tokenIdentifier: Buffer) {","    var controller = MyController()","    ","    controller.tokenIdentifier = tokenIdentifier","}","","@Controller struct MyController {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","    @Mapping<Address, BigUint>(key: \"depositedTokens\") var depositedTokensForAddress","    ","    public mutating func deposit() {","        let caller = Message.caller","        let payment = Message.singleFungibleEsdt","        ","        guard payment.tokenIdentifier == self.tokenIdentifier else {","            smartContractError(message: \"Wrong payment provided\")","        }","    }","}"],"type":"file","highlights":[{"line":16},{"line":17},{"line":18},{"line":19}]},"doc://SpaceKit/tutorials/SpaceKit/InstallingTools":{"title":"Install the Necessary Tools","role":"project","url":"\/tutorials\/spacekit\/installingtools","abstract":[{"type":"text","text":"Before writing your first smart contract with SpaceKit, ensure you have the necessary tools installed."}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools","type":"topic","kind":"project","estimatedTime":"10min"},"GetInfoSection2Step1.swift":{"fileName":"lib.swift","fileType":"swift","type":"file","highlights":[],"syntax":"swift","identifier":"GetInfoSection2Step1.swift","content":["import SpaceKit","","@Init func initialize(tokenIdentifier: Buffer) {","    var controller = MyController()","    ","    controller.tokenIdentifier = tokenIdentifier","}","","@Controller struct MyController {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","    @Mapping<Address, BigUint>(key: \"depositedTokens\") var depositedTokensForAddress","    ","    public mutating func deposit() {","        let caller = Message.caller","        let payment = Message.singleFungibleEsdt","        ","        guard payment.tokenIdentifier == self.tokenIdentifier else {","            smartContractError(message: \"Wrong payment provided\")","        }","        ","        self.depositedTokensForAddress[caller] = self.depositedTokensForAddress[caller] + payment.amount","    }","}"]},"doc://SpaceKit/tutorials/SpaceKit/InstallingTools#Installing-SpaceKits-Dependencies":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Installing-SpaceKits-Dependencies","type":"section","url":"\/tutorials\/spacekit\/installingtools#Installing-SpaceKits-Dependencies","kind":"section","abstract":[{"text":"Before writing your first smart contract with SpaceKit, ensure you have the necessary tools installed.","type":"text"}],"role":"pseudoSymbol","title":"Installing SpaceKit's Dependencies"},"doc://SpaceKit/tutorials/SpaceKit/StoreValues#Working-with-Storage-for-Single-Value-Persistence":{"url":"\/tutorials\/spacekit\/storevalues#Working-with-Storage-for-Single-Value-Persistence","role":"pseudoSymbol","type":"section","title":"Working with @Storage for Single Value Persistence","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues#Working-with-Storage-for-Single-Value-Persistence","kind":"section","abstract":[{"text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory.","type":"text"}]},"doc://SpaceKit/tutorials/SpaceKit/Deep-Dive-into-SpaceKit-Concepts/Interacting-with-Other-Contracts":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Interacting-with-Other-Contracts","role":"article","url":"\/tutorials\/spacekit\/deep-dive-into-spacekit-concepts\/interacting-with-other-contracts","abstract":[],"kind":"article","type":"topic","title":"Interacting with Other Contracts"},"doc://SpaceKit/tutorials/SpaceKit/Getting-Started/Building-Your-First-Smart-Contract":{"type":"topic","role":"article","title":"Building Your First Smart Contract","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Getting-Started\/Building-Your-First-Smart-Contract","kind":"article","url":"\/tutorials\/spacekit\/getting-started\/building-your-first-smart-contract","abstract":[]},"doc://SpaceKit/tutorials/SpaceKit/SyncCalls":{"abstract":[{"text":"Smart contracts can interact not only with users but also with other smart contracts. This enables more advanced protocols by leveraging existing ones. For example, you could integrate a decentralized exchange directly into your contract to perform token swaps. Decentralized applications often involve multiple contracts, each with a dedicated role, working together to achieve complex functionality—similar to microservices in backend systems.","type":"text"}],"url":"\/tutorials\/spacekit\/synccalls","kind":"project","title":"Interact with Other Contracts","estimatedTime":"15min","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls","type":"topic","role":"project"},"doc://SpaceKit/tutorials/SpaceKit/Deep-Dive-into-SpaceKit-Concepts/Persisting-Data-Across-Executions":{"type":"topic","kind":"article","abstract":[],"url":"\/tutorials\/spacekit\/deep-dive-into-spacekit-concepts\/persisting-data-across-executions","role":"article","title":"Persisting Data Across Executions","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Persisting-Data-Across-Executions"},"GetInfoSection2Step12.swift":{"fileName":"lib.swift","syntax":"swift","identifier":"GetInfoSection2Step12.swift","fileType":"swift","content":["import SpaceKit","","let secondsInADay: UInt64 = 86_400","","@Init func initialize(tokenIdentifier: Buffer) {","    var controller = MyController()","    ","    controller.tokenIdentifier = tokenIdentifier","}","","@Controller struct MyController {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","    @Mapping<Address, UInt64>(key: \"lastDepositTime\") var lastDepositTimeForAddress","    @Mapping<Address, BigUint>(key: \"depositedTokens\") var depositedTokensForAddress","    ","    public mutating func deposit() {","        let caller = Message.caller","        let payment = Message.singleFungibleEsdt","        ","        guard payment.tokenIdentifier == self.tokenIdentifier else {","            smartContractError(message: \"Wrong payment provided\")","        }","        ","        let callerLastDepositTime = self.lastDepositTimeForAddress[caller]","        let currentTime = Blockchain.getBlockTimestamp()","        let nextAllowedTime = callerLastDepositTime + secondsInADay","        ","        guard currentTime > nextAllowedTime else {","            let secondsRemaining = nextAllowedTime - currentTime","            ","            smartContractError(message: \"Not allowed to deposit yet. Please wait \\(secondsRemaining) seconds.\")","        }","        ","        let callerTokenBalance = caller.getBalance(tokenIdentifier: payment.tokenIdentifier)","        let maxAllowedDeposit = callerTokenBalance \/ 10","        ","        guard payment.amount <= maxAllowedDeposit else {","            smartContractError(message: \"Payment amount should not be greater than 10% of the caller's balance for the token. Allowance: \\(maxAllowedDeposit)\")","        }","        ","        self.depositedTokensForAddress[caller] = self.depositedTokensForAddress[caller] + payment.amount","    }","}"],"type":"file","highlights":[{"line":25},{"line":37},{"line":38},{"line":39},{"line":40}]},"doc://SpaceKit/tutorials/SpaceKit/Deep-Dive-into-SpaceKit-Concepts/Retrieving-Information-from-the-Blockchain":{"abstract":[],"url":"\/tutorials\/spacekit\/deep-dive-into-spacekit-concepts\/retrieving-information-from-the-blockchain","kind":"article","title":"Retrieving Information from the Blockchain","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Retrieving-Information-from-the-Blockchain","type":"topic","role":"article"},"doc://SpaceKit/tutorials/SpaceKit/SyncCalls#Declare-the-Callee-Proxy":{"title":"Declare the Callee Proxy","role":"pseudoSymbol","url":"\/tutorials\/spacekit\/synccalls#Declare-the-Callee-Proxy","abstract":[{"type":"text","text":"Smart contracts can interact not only with users but also with other smart contracts. This enables more advanced protocols by leveraging existing ones. For example, you could integrate a decentralized exchange directly into your contract to perform token swaps. Decentralized applications often involve multiple contracts, each with a dedicated role, working together to achieve complex functionality—similar to microservices in backend systems."}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls#Declare-the-Callee-Proxy","type":"section","kind":"section"},"doc://SpaceKit/tutorials/SpaceKit/AsyncCalls":{"kind":"project","abstract":[{"type":"text","text":"Blockchain platforms using SpaceVM enable seamless execution within a sharded environment. Sharding divides a blockchain’s global state and validation workload into smaller, manageable units known as shards. This method enhances scalability without compromising decentralization, allowing nodes to operate without significant computational resources."}],"title":"Interacting with Contracts Across Shards","url":"\/tutorials\/spacekit\/asynccalls","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls","role":"project","type":"topic","estimatedTime":"15min"},"doc://SpaceKit/tutorials/SpaceKit/GetInfo#Accessing-Blockchain-Context-Data":{"type":"section","kind":"section","abstract":[{"type":"text","text":"Many smart contracts rely on contextual data to execute their operations effectively. This data can include input payments, the caller’s address, the current time, the balance of a specific account, or even the contract owner."}],"url":"\/tutorials\/spacekit\/getinfo#Accessing-Blockchain-Context-Data","role":"pseudoSymbol","title":"Accessing Blockchain Context Data","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo#Accessing-Blockchain-Context-Data"},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes":{"url":"\/tutorials\/spacekit\/familiarizewithtypes","title":"Exploring SpaceKit's Types","type":"topic","kind":"project","abstract":[{"text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}],"estimatedTime":"20min","role":"project","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes"},"doc://SpaceKit/tutorials/SpaceKit/GetInfo#Accessing-Transaction-Context-Data":{"kind":"section","role":"pseudoSymbol","abstract":[{"type":"text","text":"Many smart contracts rely on contextual data to execute their operations effectively. This data can include input payments, the caller’s address, the current time, the balance of a specific account, or even the contract owner."}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo#Accessing-Transaction-Context-Data","url":"\/tutorials\/spacekit\/getinfo#Accessing-Transaction-Context-Data","type":"section","title":"Accessing Transaction Context Data"},"doc://SpaceKit/tutorials/SpaceKit/CodingYourFirstContract":{"type":"topic","kind":"project","abstract":[{"text":"In this tutorial, you’ll create a simple smart contract that manages a counter. Users can increment or decrement the counter, and the changes are persisted across contract executions.","type":"text"}],"url":"\/tutorials\/spacekit\/codingyourfirstcontract","role":"project","title":"Building Your First Smart Contract","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract","estimatedTime":"20min"},"doc://SpaceKit/tutorials/SpaceKit/CodingYourFirstContract#Writing-the-Contract-Code":{"kind":"section","abstract":[{"type":"text","text":"In this tutorial, you’ll create a simple smart contract that manages a counter. Users can increment or decrement the counter, and the changes are persisted across contract executions."}],"title":"Writing the Contract Code","url":"\/tutorials\/spacekit\/codingyourfirstcontract#Writing-the-Contract-Code","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Writing-the-Contract-Code","role":"pseudoSymbol","type":"section"},"GetInfoSection2Step4.swift":{"fileName":"lib.swift","fileType":"swift","type":"file","highlights":[{"line":24},{"line":25}],"syntax":"swift","identifier":"GetInfoSection2Step4.swift","content":["import SpaceKit","","let secondsInADay: UInt64 = 86_400","","@Init func initialize(tokenIdentifier: Buffer) {","    var controller = MyController()","    ","    controller.tokenIdentifier = tokenIdentifier","}","","@Controller struct MyController {","    @Storage(key: \"tokenIdentifier\") var tokenIdentifier: Buffer","    @Mapping<Address, UInt64>(key: \"lastDepositTime\") var lastDepositTimeForAddress","    @Mapping<Address, BigUint>(key: \"depositedTokens\") var depositedTokensForAddress","    ","    public mutating func deposit() {","        let caller = Message.caller","        let payment = Message.singleFungibleEsdt","        ","        guard payment.tokenIdentifier == self.tokenIdentifier else {","            smartContractError(message: \"Wrong payment provided\")","        }","        ","        let currentTime = Blockchain.getBlockTimestamp()","        ","        self.depositedTokensForAddress[caller] = self.depositedTokensForAddress[caller] + payment.amount","    }","}"]}}}