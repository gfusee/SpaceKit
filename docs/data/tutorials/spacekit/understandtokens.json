{"sections":[{"content":[{"inlineContent":[{"type":"text","text":"Learn about the ESDT standard used in the SpaceKit framework, a token model that supports fungible tokens, non-fungible tokens (NFTs), semi-fungible tokens, and meta-esdt tokens."},{"type":"text","text":" "},{"text":"The SpaceKit framework uses a token standard called ESDT. This standard defines four types of tokens: fungible, non-fungible (NFT), semi-fungible, and meta-esdt.","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Fungible tokens","type":"text"}],"type":"strong"},{"text":" are interchangeable, like traditional currencies. For example, one USDC token has the same value as another.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Non-fungible tokens"}]},{"text":" represent unique assets. In a flight ticket collection, each ticket is distinct, with specific attributes like seat number and boarding options.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"Semi-fungible tokens"}],"type":"strong"},{"type":"text","text":" combine aspects of fungibility and uniqueness. For example, state bonds with a unique year of issuance are fungible within their group but distinct between groups."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Meta-esdt tokens","type":"text"}],"type":"strong"},{"text":" expand semi-fungibility by enabling on-chain attributes, supporting complex operations with types like ","type":"text"},{"type":"codeVoice","code":"Buffer"},{"type":"text","text":", "},{"code":"BigUint","type":"codeVoice"},{"type":"text","text":", and even custom "},{"type":"codeVoice","code":"@Codable"},{"text":" structs or enums.","type":"text"}]}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"The ESDT standard enables various token operations, such as minting, burning, and freezing, ensuring transparency by requiring all supported actions to be defined at issuance."}],"type":"paragraph"},{"inlineContent":[{"text":"Semi-fungible tokens operate similarly to NFTs, but for a given nonce, there can be multiple identical tokens. For example, state bonds labeled ","type":"text"},{"code":"$BOND","type":"codeVoice"},{"type":"text","text":" could have different nonces for the year they were issued. If "},{"code":"$BOND#1","type":"codeVoice"},{"type":"text","text":" represents bonds from 2010 and "},{"type":"codeVoice","code":"$BOND#2"},{"text":" represents those from 2011, all tokens with the same nonce are fungible within their group, as they share the same maturity date.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Meta-esdt tokens enhance this concept by allowing attributes to be added on-chain for each nonce. These attributes can be of any SpaceKit-compatible type, such as "},{"type":"codeVoice","code":"Buffer"},{"text":", ","type":"text"},{"type":"codeVoice","code":"BigUint"},{"text":", or ","type":"text"},{"type":"codeVoice","code":"UInt64"},{"type":"text","text":", or even complex structs and enums with the "},{"code":"@Codable","type":"codeVoice"},{"type":"text","text":" annotation. Meta-esdt is powerful because it enables contracts to process on-chain logic using these attributes."}]},{"inlineContent":[{"text":"The ESDT standard supports various token operations like minting, burning, freezing, and more. These actions must be explicitly declared at the time of token issuance, ensuring transparency. For example, a non-mintable ESDT cannot be minted or altered after issuance.","type":"text"}],"type":"paragraph"}],"chapter":"Creating and Understanding Tokens","title":"Understand the ESDT Standard","kind":"hero","estimatedTimeInMinutes":15},{"kind":"tasks","tasks":[{"anchor":"Issuing-a-Fungible-Token-from-Your-Contract","stepsSection":[{"runtimePreview":null,"type":"step","caption":[],"media":null,"code":"UnderstandTokensSection1Step1.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Define the contract structure."}]}]},{"content":[{"inlineContent":[{"text":"Declare storage to hold the token identifier.","type":"text"}],"type":"paragraph"}],"code":"UnderstandTokensSection1Step2.swift","runtimePreview":null,"type":"step","caption":[],"media":null},{"content":[{"inlineContent":[{"type":"text","text":"Implement an endpoint for token issuance."}],"type":"paragraph"}],"type":"step","media":null,"code":"UnderstandTokensSection1Step3.swift","caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Ensure the caller pays the issuance fee."}]}],"runtimePreview":null},{"type":"step","runtimePreview":null,"media":null,"code":"UnderstandTokensSection1Step4.swift","content":[{"type":"paragraph","inlineContent":[{"text":"Restrict issuance to the contract owner and prevent duplicate token identifiers.","type":"text"}]}],"caption":[]},{"media":null,"code":"UnderstandTokensSection1Step5.swift","type":"step","content":[{"inlineContent":[{"type":"text","text":"Retrieve the issuance fee from the caller."}],"type":"paragraph"}],"runtimePreview":null,"caption":[]},{"media":null,"code":"UnderstandTokensSection1Step6.swift","content":[{"inlineContent":[{"text":"Make an asynchronous call to the token issuance contract, defining properties such as ","type":"text"},{"type":"codeVoice","code":"canMint"},{"type":"text","text":"."}],"type":"paragraph"}],"caption":[{"inlineContent":[{"text":"Use a human-readable display name for the token.","type":"text"}],"type":"paragraph"}],"runtimePreview":null,"type":"step"},{"type":"step","caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Retain the caller’s payment to refund in case of failure."}]}],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Register a promise to handle the asynchronous call."}]}],"media":null,"code":"UnderstandTokensSection1Step7.swift","runtimePreview":null},{"code":"UnderstandTokensSection1Step8.swift","type":"step","media":null,"caption":[{"type":"paragraph","inlineContent":[{"text":"You can retrieve the new identifier in the payments if initialSupply > 0, if initialSupply == 0 you can declare result as a AsyncCallResult<Buffer> to retrieve it.","type":"text"}]}],"content":[{"inlineContent":[{"type":"text","text":"Create a callback to process the result of the asynchronous call."}],"type":"paragraph"}],"runtimePreview":null},{"media":null,"runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"Save the issued token identifier and initial supply in storage upon success."}],"type":"paragraph"}],"code":"UnderstandTokensSection1Step9.swift","type":"step","caption":[]},{"runtimePreview":null,"caption":[],"type":"step","content":[{"inlineContent":[{"text":"Refund the caller in case of an issuance error.","type":"text"}],"type":"paragraph"}],"media":null,"code":"UnderstandTokensSection1Step10.swift"},{"code":"UnderstandTokensSection1Step11.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Link the callback to the promise registration."}]}],"media":null,"runtimePreview":null,"type":"step","caption":[]}],"title":"Issuing a Fungible Token from Your Contract","contentSection":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Issuing a fungible token involves invoking a built-in smart contract. On networks like MultiversX, the issuance fee is 0.5 EGLD. In this section, you’ll create a mintable and burnable token called ","type":"text"},{"code":"SPACE","type":"codeVoice"},{"type":"text","text":", with essential properties tailored to your needs."}]}],"mediaPosition":"trailing","kind":"contentAndMedia"}]},{"contentSection":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Once you’ve learned how to issue a fungible token, creating other types of tokens follows a similar process.","type":"text"}]}],"mediaPosition":"trailing","kind":"contentAndMedia"}],"anchor":"Issuing-a-Non-Fungible-Token-from-Your-Contract","title":"Issuing a Non-Fungible Token from Your Contract","stepsSection":[{"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the "},{"type":"codeVoice","code":"Blockchain.issueNonFungibleToken"},{"type":"text","text":" function to issue a non-fungible token."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Important: The result type of the asynchronous call in the callback differs from the one in the previous section."}]}],"media":null,"type":"step","code":"UnderstandTokensSection3Step1.swift"}]},{"title":"Issuing a Semi-Fungible Token from Your Contract","contentSection":[{"kind":"contentAndMedia","content":[{"inlineContent":[{"text":"Semi-fungible tokens share similarities with non-fungible tokens, but they allow multiple tokens per nonce. As a result, issuing a semi-fungible token closely follows the steps for issuing a non-fungible token.","type":"text"}],"type":"paragraph"}],"mediaPosition":"trailing"}],"stepsSection":[{"caption":[],"code":"UnderstandTokensSection4Step1.swift","type":"step","media":null,"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the "},{"type":"codeVoice","code":"Blockchain.issueSemiFungibleToken"},{"text":" function to issue a semi-fungible token.","type":"text"}]}]}],"anchor":"Issuing-a-Semi-Fungible-Token-from-Your-Contract"},{"anchor":"Issuing-a-Meta-ESDT-from-Your-Contract","stepsSection":[{"media":null,"type":"step","code":"UnderstandTokensSection5Step1.swift","runtimePreview":null,"content":[{"inlineContent":[{"text":"Use the ","type":"text"},{"type":"codeVoice","code":"Blockchain.issueSemiFungibleToken"},{"type":"text","text":" function to issue a Meta ESDT."}],"type":"paragraph"}],"caption":[{"inlineContent":[{"type":"text","text":"Note: The only difference from issuing a semi-fungible token is the specification of the number of decimal places."}],"type":"paragraph"}]}],"contentSection":[{"content":[{"inlineContent":[{"text":"Beyond NFTs and SFTs, the SpaceVM introduces Meta ESDTs, a specialized type of semi-fungible token. Meta ESDTs function like standard ESDT fungible tokens but include additional properties. For example, they can be used for locked tokens where their properties define the release schedule.","type":"text"}],"type":"paragraph"}],"kind":"contentAndMedia","mediaPosition":"trailing"}],"title":"Issuing a Meta ESDT from Your Contract"}]},{"title":"Managing Fungible Tokens","kind":"callToAction","featuredEyebrow":"Tutorial","action":{"type":"reference","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnFungibleTokens","overridingTitle":"Get started","overridingTitleInlineContent":[{"type":"text","text":"Get started"}],"isActive":true},"abstract":[{"text":"Fungible tokens function similarly to traditional currencies, making them the simplest type of token to work with.","type":"text"}]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/tutorials\/spacekit\/understandtokens"]}],"identifier":{"url":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/UnderstandTokens","interfaceLanguage":"swift"},"kind":"project","hierarchy":{"paths":[["doc:\/\/SpaceKit\/tutorials\/SpaceKit","doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Create-and-Manage-Tokens","doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Create-and-Manage-Tokens\/Creating-and-Understanding-Tokens"]],"modules":[{"projects":[{"sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Installing-SpaceKits-Dependencies","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Setting-Up-the-SpaceKit-CLI"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Getting-Started\/Installing-the-Tools"},{"projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract","sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Initializing-the-Project","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Writing-the-Contract-Code","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Testing-the-Contract"}]}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Getting-Started\/Building-Your-First-Smart-Contract"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Exploring-SpaceKit's-Types","projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes","sections":[{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Understanding-the-Buffer-Type","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Working-with-the-BigUint-Type"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Working-with-the-Vector-Type","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Creating-Your-Own-Types","kind":"task"}]}]},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Persisting-Data-Across-Executions","projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues","sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues#Working-with-Storage-for-Single-Value-Persistence","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage","kind":"task"}]}]},{"projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo","sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo#Accessing-Transaction-Context-Data","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo#Accessing-Blockchain-Context-Data","kind":"task"}]}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Retrieving-Information-from-the-Blockchain"},{"projects":[{"sections":[{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls#Declare-the-Callee-Proxy"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls#Perform-a-Synchronous-Call","kind":"task"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Interacting-with-Other-Contracts"},{"projects":[{"sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls#Declare-the-Callee-Proxy","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls#Perform-an-Asynchronous-Call","kind":"task"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Calling-Contracts-Across-Shards"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Create-and-Manage-Tokens\/Creating-and-Understanding-Tokens","projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/UnderstandTokens","sections":[{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/UnderstandTokens#Issuing-a-Fungible-Token-from-Your-Contract"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/UnderstandTokens#Issuing-a-Non-Fungible-Token-from-Your-Contract","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/UnderstandTokens#Issuing-a-Semi-Fungible-Token-from-Your-Contract","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/UnderstandTokens#Issuing-a-Meta-ESDT-from-Your-Contract","kind":"task"}]}]},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Create-and-Manage-Tokens\/Managing-Fungible-Tokens","projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnFungibleTokens","sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnFungibleTokens#Assign-Mint-and-Burn-Roles","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnFungibleTokens#Mint-New-Tokens"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnFungibleTokens#Burn-Tokens","kind":"task"}]}]},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Create-and-Manage-Tokens\/Managing-Non-Fungible-Tokens","projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnNonFungibleTokens","sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnNonFungibleTokens#Assign-Create-AddQuantity-and-Burn-Roles","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnNonFungibleTokens#Create-a-New-Nonce"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnNonFungibleTokens#Add-Quantity-to-an-Existing-Nonce"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnNonFungibleTokens#Burn-Tokens","kind":"task"}]}]},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Create-and-Manage-Tokens\/Enhancing-Contracts-with-Token-Attributes","projects":[{"sections":[{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/TokenAttributes#Implementing-the-lockFunds-Endpoint"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/TokenAttributes#Implementing-the-unlockFunds-Endpoint"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/TokenAttributes#Implementing-the-changeTokenLockDuration-Endpoint"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/TokenAttributes"}]}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit"},"metadata":{"role":"project","category":"SpaceKit","title":"Understand the ESDT Standard","categoryPathComponent":"SpaceKit"},"schemaVersion":{"patch":0,"major":0,"minor":3},"references":{"UnderstandTokensSection1Step9.swift":{"fileType":"swift","type":"file","fileName":"lib.swift","identifier":"UnderstandTokensSection1Step9.swift","syntax":"swift","highlights":[{"line":44},{"line":45},{"line":46}],"content":["import SpaceKit","","@Controller public struct MyContract {","    @Storage(key: \"issuedTokenIdentifier\") var issuedTokenIdentifier: Buffer","    ","    public func issueToken() {","        assertOwner()","","        if !self.$issuedTokenIdentifier.isEmpty() {","            smartContractError(message: \"Token already issued\")","        }","        ","        let payment = Message.egldValue","        ","        Blockchain","            .issueFungibleToken(","                tokenDisplayName: \"SpaceKitToken\",","                tokenTicker: \"SPACE\",","                initialSupply: 1,","                properties: FungibleTokenProperties(","                    numDecimals: 18,","                    canFreeze: false,","                    canWipe: false,","                    canPause: false,","                    canMint: true,","                    canBurn: true,","                    canChangeOwner: true,","                    canUpgrade: true,","                    canAddSpecialRoles: true","                )","            )","            .registerPromise(","                gas: 30_000_000,","                value: payment,","                callback: \/\/ We will fill this parameter later","            )","    }","    ","    @Callback public mutating func issueTokenCallback(sentValue: BigUint) {","        let result: AsyncCallResult<IgnoreValue> = Message.asyncCallResult()","        ","        switch result {","        case .success(_):","            let receivedPayment = Message.singleFungibleEsdt","            ","            self.issuedTokenIdentifier = receivedPayment.tokenIdentifier","        case .error(_):","            \/\/ We will fill the error case later","        }","    }","","}",""]},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Understanding-the-Buffer-Type":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Understanding-the-Buffer-Type","url":"\/tutorials\/spacekit\/familiarizewithtypes#Understanding-the-Buffer-Type","abstract":[{"type":"text","text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM."}],"kind":"section","title":"Understanding the Buffer Type","type":"section","role":"pseudoSymbol"},"doc://SpaceKit/tutorials/SpaceKit/OperationsOnNonFungibleTokens#Assign-Create-AddQuantity-and-Burn-Roles":{"title":"Assign Create, AddQuantity, and Burn Roles","role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnNonFungibleTokens#Assign-Create-AddQuantity-and-Burn-Roles","kind":"section","type":"section","url":"\/tutorials\/spacekit\/operationsonnonfungibletokens#Assign-Create-AddQuantity-and-Burn-Roles","abstract":[{"type":"text","text":"Non-fungible tokens (NFTs) are unique digital assets that cannot be interchanged. Each NFT is associated with a unique identifier, known as a nonce. You can think of it like an airline ticket—each ticket is assigned to a specific passenger, with individual preferences and details."}]},"doc://SpaceKit/tutorials/SpaceKit/Create-and-Manage-Tokens/Managing-Fungible-Tokens":{"abstract":[],"kind":"article","title":"Managing Fungible Tokens","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Create-and-Manage-Tokens\/Managing-Fungible-Tokens","url":"\/tutorials\/spacekit\/create-and-manage-tokens\/managing-fungible-tokens","type":"topic","role":"article"},"UnderstandTokensSection5Step1.swift":{"syntax":"swift","highlights":[],"content":["import SpaceKit","","@Controller public struct MyContract {","    @Storage(key: \"issuedTokenIdentifier\") var issuedTokenIdentifier: Buffer","    ","    public func issueNonFungibleToken() {","        assertOwner()","","        if !self.$issuedTokenIdentifier.isEmpty() {","            smartContractError(message: \"Token already issued\")","        }","        ","        let payment = Message.egldValue","        ","        Blockchain","            .registerMetaEsdt(","                tokenDisplayName: \"TestToken\",","                tokenTicker: \"TEST\",","                properties: MetaTokenProperties(","                    numDecimals: 18,","                    canFreeze: false,","                    canWipe: false,","                    canPause: false,","                    canTransferCreateRole: false,","                    canChangeOwner: false,","                    canUpgrade: false,","                    canAddSpecialRoles: true","                )","            )","            .registerPromise(","                gas: 30_000_000,","                value: payment,","                callback: self.$issueTokenCallback(","                    sentValue: payment,","                    gasForCallback: 15_000_000","                )","            )","    }","    ","    @Callback public mutating func issueTokenCallback(sentValue: BigUint) {","        let result: AsyncCallResult<TokenIdentifier> = Message.asyncCallResult()","        ","        switch result {","        case .success(let tokenIdentifier):","            self.issuedTokenIdentifier = tokenIdentifier","        case .error(_):","            Blockchain.getOwner()","                .send(egldValue: sentValue)","        }","    }","}",""],"fileType":"swift","identifier":"UnderstandTokensSection5Step1.swift","fileName":"lib.swift","type":"file"},"doc://SpaceKit/tutorials/SpaceKit/UnderstandTokens#Issuing-a-Fungible-Token-from-Your-Contract":{"title":"Issuing a Fungible Token from Your Contract","role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/UnderstandTokens#Issuing-a-Fungible-Token-from-Your-Contract","kind":"section","type":"section","url":"\/tutorials\/spacekit\/understandtokens#Issuing-a-Fungible-Token-from-Your-Contract","abstract":[{"type":"text","text":"Learn about the ESDT standard used in the SpaceKit framework, a token model that supports fungible tokens, non-fungible tokens (NFTs), semi-fungible tokens, and meta-esdt tokens."},{"type":"text","text":" "},{"type":"text","text":"The SpaceKit framework uses a token standard called ESDT. This standard defines four types of tokens: fungible, non-fungible (NFT), semi-fungible, and meta-esdt."}]},"doc://SpaceKit/tutorials/SpaceKit/TokenAttributes#Implementing-the-changeTokenLockDuration-Endpoint":{"title":"Implementing the changeTokenLockDuration Endpoint","role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/TokenAttributes#Implementing-the-changeTokenLockDuration-Endpoint","kind":"section","type":"section","url":"\/tutorials\/spacekit\/tokenattributes#Implementing-the-changeTokenLockDuration-Endpoint","abstract":[{"type":"text","text":"The ESDT standard enables embedding custom data within non-fungible tokens, allowing developers to extend the functionality of their smart contracts. This additional data, referred to as “attributes,” is tied to the token and transfers along with it between wallets."}]},"doc://SpaceKit/tutorials/SpaceKit/StoreValues":{"role":"project","estimatedTime":"15min","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues","abstract":[{"type":"text","text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory."}],"kind":"project","url":"\/tutorials\/spacekit\/storevalues","type":"topic","title":"Persist Values Between Executions"},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes","kind":"project","type":"topic","abstract":[{"type":"text","text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM."}],"role":"project","url":"\/tutorials\/spacekit\/familiarizewithtypes","estimatedTime":"20min","title":"Exploring SpaceKit's Types"},"doc://SpaceKit/tutorials/SpaceKit/Getting-Started/Installing-the-Tools":{"abstract":[],"kind":"article","title":"Installing the Tools","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Getting-Started\/Installing-the-Tools","url":"\/tutorials\/spacekit\/getting-started\/installing-the-tools","type":"topic","role":"article"},"doc://SpaceKit/tutorials/SpaceKit/Create-and-Manage-Tokens/Managing-Non-Fungible-Tokens":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Create-and-Manage-Tokens\/Managing-Non-Fungible-Tokens","url":"\/tutorials\/spacekit\/create-and-manage-tokens\/managing-non-fungible-tokens","abstract":[],"kind":"article","title":"Managing Non-Fungible Tokens","type":"topic","role":"article"},"doc://SpaceKit/tutorials/SpaceKit/OperationsOnNonFungibleTokens#Create-a-New-Nonce":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnNonFungibleTokens#Create-a-New-Nonce","kind":"section","type":"section","abstract":[{"type":"text","text":"Non-fungible tokens (NFTs) are unique digital assets that cannot be interchanged. Each NFT is associated with a unique identifier, known as a nonce. You can think of it like an airline ticket—each ticket is assigned to a specific passenger, with individual preferences and details."}],"role":"pseudoSymbol","url":"\/tutorials\/spacekit\/operationsonnonfungibletokens#Create-a-New-Nonce","title":"Create a New Nonce"},"doc://SpaceKit/tutorials/SpaceKit/InstallingTools#Installing-SpaceKits-Dependencies":{"kind":"section","abstract":[{"type":"text","text":"Before writing your first smart contract with SpaceKit, ensure you have the necessary tools installed."}],"type":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Installing-SpaceKits-Dependencies","url":"\/tutorials\/spacekit\/installingtools#Installing-SpaceKits-Dependencies","title":"Installing SpaceKit's Dependencies","role":"pseudoSymbol"},"doc://SpaceKit/tutorials/SpaceKit/AsyncCalls":{"title":"Interacting with Contracts Across Shards","role":"project","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls","kind":"project","type":"topic","estimatedTime":"15min","url":"\/tutorials\/spacekit\/asynccalls","abstract":[{"type":"text","text":"Blockchain platforms using SpaceVM enable seamless execution within a sharded environment. Sharding divides a blockchain’s global state and validation workload into smaller, manageable units known as shards. This method enhances scalability without compromising decentralization, allowing nodes to operate without significant computational resources."}]},"doc://SpaceKit/tutorials/SpaceKit/OperationsOnNonFungibleTokens#Add-Quantity-to-an-Existing-Nonce":{"title":"Add Quantity to an Existing Nonce","role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnNonFungibleTokens#Add-Quantity-to-an-Existing-Nonce","kind":"section","type":"section","url":"\/tutorials\/spacekit\/operationsonnonfungibletokens#Add-Quantity-to-an-Existing-Nonce","abstract":[{"type":"text","text":"Non-fungible tokens (NFTs) are unique digital assets that cannot be interchanged. Each NFT is associated with a unique identifier, known as a nonce. You can think of it like an airline ticket—each ticket is assigned to a specific passenger, with individual preferences and details."}]},"doc://SpaceKit/tutorials/SpaceKit/UnderstandTokens#Issuing-a-Non-Fungible-Token-from-Your-Contract":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/UnderstandTokens#Issuing-a-Non-Fungible-Token-from-Your-Contract","kind":"section","abstract":[{"text":"Learn about the ESDT standard used in the SpaceKit framework, a token model that supports fungible tokens, non-fungible tokens (NFTs), semi-fungible tokens, and meta-esdt tokens.","type":"text"},{"text":" ","type":"text"},{"text":"The SpaceKit framework uses a token standard called ESDT. This standard defines four types of tokens: fungible, non-fungible (NFT), semi-fungible, and meta-esdt.","type":"text"}],"url":"\/tutorials\/spacekit\/understandtokens#Issuing-a-Non-Fungible-Token-from-Your-Contract","title":"Issuing a Non-Fungible Token from Your Contract","type":"section","role":"pseudoSymbol"},"doc://SpaceKit/tutorials/SpaceKit/GetInfo#Accessing-Blockchain-Context-Data":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo#Accessing-Blockchain-Context-Data","kind":"section","type":"section","abstract":[{"type":"text","text":"Many smart contracts rely on contextual data to execute their operations effectively. This data can include input payments, the caller’s address, the current time, the balance of a specific account, or even the contract owner."}],"role":"pseudoSymbol","url":"\/tutorials\/spacekit\/getinfo#Accessing-Blockchain-Context-Data","title":"Accessing Blockchain Context Data"},"doc://SpaceKit/tutorials/SpaceKit/CodingYourFirstContract":{"role":"project","estimatedTime":"20min","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract","abstract":[{"type":"text","text":"In this tutorial, you’ll create a simple smart contract that manages a counter. Users can increment or decrement the counter, and the changes are persisted across contract executions."}],"kind":"project","url":"\/tutorials\/spacekit\/codingyourfirstcontract","type":"topic","title":"Building Your First Smart Contract"},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Creating-Your-Own-Types":{"title":"Creating Your Own Types","role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Creating-Your-Own-Types","kind":"section","type":"section","url":"\/tutorials\/spacekit\/familiarizewithtypes#Creating-Your-Own-Types","abstract":[{"type":"text","text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM."}]},"UnderstandTokensSection1Step7.swift":{"fileType":"swift","type":"file","fileName":"lib.swift","identifier":"UnderstandTokensSection1Step7.swift","syntax":"swift","highlights":[{"line":32},{"line":33},{"line":34},{"line":35},{"line":36}],"content":["import SpaceKit","","@Controller public struct MyContract {","    @Storage(key: \"issuedTokenIdentifier\") var issuedTokenIdentifier: Buffer","    ","    public func issueToken() {","        assertOwner()","","        if !self.$issuedTokenIdentifier.isEmpty() {","            smartContractError(message: \"Token already issued\")","        }","        ","        let payment = Message.egldValue","        ","        Blockchain","            .issueFungibleToken(","                tokenDisplayName: \"SpaceKitToken\",","                tokenTicker: \"SPACE\",","                initialSupply: 1,","                properties: FungibleTokenProperties(","                    numDecimals: 18,","                    canFreeze: false,","                    canWipe: false,","                    canPause: false,","                    canMint: true,","                    canBurn: true,","                    canChangeOwner: true,","                    canUpgrade: true,","                    canAddSpecialRoles: true","                )","            )","            .registerPromise(","                gas: 30_000_000,","                value: payment,","                callback: \/\/ We will fill this parameter later","            )","    }","}",""]},"UnderstandTokensSection1Step10.swift":{"syntax":"swift","highlights":[{"line":48},{"line":49}],"content":["import SpaceKit","","@Controller public struct MyContract {","    @Storage(key: \"issuedTokenIdentifier\") var issuedTokenIdentifier: Buffer","    ","    public func issueToken() {","        assertOwner()","","        if !self.$issuedTokenIdentifier.isEmpty() {","            smartContractError(message: \"Token already issued\")","        }","        ","        let payment = Message.egldValue","        ","        Blockchain","            .issueFungibleToken(","                tokenDisplayName: \"SpaceKitToken\",","                tokenTicker: \"SPACE\",","                initialSupply: 1,","                properties: FungibleTokenProperties(","                    numDecimals: 18,","                    canFreeze: false,","                    canWipe: false,","                    canPause: false,","                    canMint: true,","                    canBurn: true,","                    canChangeOwner: true,","                    canUpgrade: true,","                    canAddSpecialRoles: true","                )","            )","            .registerPromise(","                gas: 30_000_000,","                value: payment,","                callback: \/\/ We will fill this parameter later","            )","    }","    ","    @Callback public mutating func issueTokenCallback(sentValue: BigUint) {","        let result: AsyncCallResult<IgnoreValue> = Message.asyncCallResult()","        ","        switch result {","        case .success(_):","            let receivedPayment = Message.singleFungibleEsdt","            ","            self.issuedTokenIdentifier = receivedPayment.tokenIdentifier","        case .error(_):","            Blockchain.getOwner()","                .send(egldValue: sentValue)","        }","    }","}",""],"fileType":"swift","identifier":"UnderstandTokensSection1Step10.swift","fileName":"lib.swift","type":"file"},"doc://SpaceKit/tutorials/SpaceKit/StoreValues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage":{"role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage","abstract":[{"type":"text","text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory."}],"kind":"section","url":"\/tutorials\/spacekit\/storevalues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage","type":"section","title":"Leveraging @Mapping for Dynamic Key-Value Storage"},"doc://SpaceKit/tutorials/SpaceKit/GetInfo":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo","estimatedTime":"10min","kind":"project","abstract":[{"text":"Many smart contracts rely on contextual data to execute their operations effectively. This data can include input payments, the caller’s address, the current time, the balance of a specific account, or even the contract owner.","type":"text"}],"url":"\/tutorials\/spacekit\/getinfo","title":"Retrieving Information from the Blockchain","type":"topic","role":"project"},"doc://SpaceKit/tutorials/SpaceKit/SyncCalls#Declare-the-Callee-Proxy":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls#Declare-the-Callee-Proxy","url":"\/tutorials\/spacekit\/synccalls#Declare-the-Callee-Proxy","abstract":[{"type":"text","text":"Smart contracts can interact not only with users but also with other smart contracts. This enables more advanced protocols by leveraging existing ones. For example, you could integrate a decentralized exchange directly into your contract to perform token swaps. Decentralized applications often involve multiple contracts, each with a dedicated role, working together to achieve complex functionality—similar to microservices in backend systems."}],"kind":"section","title":"Declare the Callee Proxy","type":"section","role":"pseudoSymbol"},"doc://SpaceKit/tutorials/SpaceKit/Deep-Dive-into-SpaceKit-Concepts/Interacting-with-Other-Contracts":{"title":"Interacting with Other Contracts","url":"\/tutorials\/spacekit\/deep-dive-into-spacekit-concepts\/interacting-with-other-contracts","role":"article","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Interacting-with-Other-Contracts","type":"topic","kind":"article","abstract":[]},"doc://SpaceKit/tutorials/SpaceKit":{"title":"Meet SpaceKit","url":"\/tutorials\/spacekit","role":"overview","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit","type":"topic","kind":"overview","abstract":[{"text":"Discover how SpaceKit simplifies blockchain development using Swift. Dive into the world of Web3 with ease and efficiency.","type":"text"}]},"doc://SpaceKit/tutorials/SpaceKit/UnderstandTokens#Issuing-a-Semi-Fungible-Token-from-Your-Contract":{"role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/UnderstandTokens#Issuing-a-Semi-Fungible-Token-from-Your-Contract","abstract":[{"type":"text","text":"Learn about the ESDT standard used in the SpaceKit framework, a token model that supports fungible tokens, non-fungible tokens (NFTs), semi-fungible tokens, and meta-esdt tokens."},{"type":"text","text":" "},{"type":"text","text":"The SpaceKit framework uses a token standard called ESDT. This standard defines four types of tokens: fungible, non-fungible (NFT), semi-fungible, and meta-esdt."}],"kind":"section","url":"\/tutorials\/spacekit\/understandtokens#Issuing-a-Semi-Fungible-Token-from-Your-Contract","type":"section","title":"Issuing a Semi-Fungible Token from Your Contract"},"doc://SpaceKit/tutorials/SpaceKit/TokenAttributes":{"abstract":[{"text":"The ESDT standard enables embedding custom data within non-fungible tokens, allowing developers to extend the functionality of their smart contracts. This additional data, referred to as “attributes,” is tied to the token and transfers along with it between wallets.","type":"text"}],"url":"\/tutorials\/spacekit\/tokenattributes","title":"Enhance Your Contracts with Token Attributes","type":"topic","kind":"project","estimatedTime":"15min","role":"project","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/TokenAttributes"},"doc://SpaceKit/tutorials/SpaceKit/CodingYourFirstContract#Writing-the-Contract-Code":{"role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Writing-the-Contract-Code","abstract":[{"type":"text","text":"In this tutorial, you’ll create a simple smart contract that manages a counter. Users can increment or decrement the counter, and the changes are persisted across contract executions."}],"kind":"section","url":"\/tutorials\/spacekit\/codingyourfirstcontract#Writing-the-Contract-Code","type":"section","title":"Writing the Contract Code"},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Working-with-the-BigUint-Type":{"title":"Working with the BigUint Type","url":"\/tutorials\/spacekit\/familiarizewithtypes#Working-with-the-BigUint-Type","role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Working-with-the-BigUint-Type","type":"section","kind":"section","abstract":[{"text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}]},"UnderstandTokensSection1Step1.swift":{"type":"file","fileType":"swift","identifier":"UnderstandTokensSection1Step1.swift","syntax":"swift","fileName":"lib.swift","content":["import SpaceKit","","@Controller public struct MyContract {","    ","}",""],"highlights":[]},"doc://SpaceKit/tutorials/SpaceKit/AsyncCalls#Perform-an-Asynchronous-Call":{"abstract":[{"text":"Blockchain platforms using SpaceVM enable seamless execution within a sharded environment. Sharding divides a blockchain’s global state and validation workload into smaller, manageable units known as shards. This method enhances scalability without compromising decentralization, allowing nodes to operate without significant computational resources.","type":"text"}],"url":"\/tutorials\/spacekit\/asynccalls#Perform-an-Asynchronous-Call","title":"Perform an Asynchronous Call","type":"section","kind":"section","role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls#Perform-an-Asynchronous-Call"},"doc://SpaceKit/tutorials/SpaceKit/Deep-Dive-into-SpaceKit-Concepts/Retrieving-Information-from-the-Blockchain":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Retrieving-Information-from-the-Blockchain","kind":"article","type":"topic","abstract":[],"role":"article","url":"\/tutorials\/spacekit\/deep-dive-into-spacekit-concepts\/retrieving-information-from-the-blockchain","title":"Retrieving Information from the Blockchain"},"UnderstandTokensSection1Step2.swift":{"content":["import SpaceKit","","@Controller public struct MyContract {","    @Storage(key: \"issuedTokenIdentifier\") var issuedTokenIdentifier: Buffer","}",""],"fileType":"swift","highlights":[{"line":4}],"type":"file","fileName":"lib.swift","identifier":"UnderstandTokensSection1Step2.swift","syntax":"swift"},"doc://SpaceKit/tutorials/SpaceKit/InstallingTools#Setting-Up-the-SpaceKit-CLI":{"role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Setting-Up-the-SpaceKit-CLI","abstract":[{"type":"text","text":"Before writing your first smart contract with SpaceKit, ensure you have the necessary tools installed."}],"kind":"section","url":"\/tutorials\/spacekit\/installingtools#Setting-Up-the-SpaceKit-CLI","type":"section","title":"Setting Up the SpaceKit CLI"},"doc://SpaceKit/tutorials/SpaceKit/AsyncCalls#Declare-the-Callee-Proxy":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls#Declare-the-Callee-Proxy","kind":"section","type":"section","abstract":[{"type":"text","text":"Blockchain platforms using SpaceVM enable seamless execution within a sharded environment. Sharding divides a blockchain’s global state and validation workload into smaller, manageable units known as shards. This method enhances scalability without compromising decentralization, allowing nodes to operate without significant computational resources."}],"role":"pseudoSymbol","url":"\/tutorials\/spacekit\/asynccalls#Declare-the-Callee-Proxy","title":"Declare the Callee Proxy"},"doc://SpaceKit/tutorials/SpaceKit/Getting-Started/Building-Your-First-Smart-Contract":{"role":"article","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Getting-Started\/Building-Your-First-Smart-Contract","abstract":[],"kind":"article","url":"\/tutorials\/spacekit\/getting-started\/building-your-first-smart-contract","type":"topic","title":"Building Your First Smart Contract"},"doc://SpaceKit/tutorials/SpaceKit/CodingYourFirstContract#Testing-the-Contract":{"abstract":[{"type":"text","text":"In this tutorial, you’ll create a simple smart contract that manages a counter. Users can increment or decrement the counter, and the changes are persisted across contract executions."}],"url":"\/tutorials\/spacekit\/codingyourfirstcontract#Testing-the-Contract","title":"Testing the Contract","kind":"section","type":"section","role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Testing-the-Contract"},"doc://SpaceKit/tutorials/SpaceKit/Deep-Dive-into-SpaceKit-Concepts/Calling-Contracts-Across-Shards":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Calling-Contracts-Across-Shards","url":"\/tutorials\/spacekit\/deep-dive-into-spacekit-concepts\/calling-contracts-across-shards","abstract":[],"kind":"article","title":"Calling Contracts Across Shards","type":"topic","role":"article"},"doc://SpaceKit/tutorials/SpaceKit/OperationsOnFungibleTokens#Assign-Mint-and-Burn-Roles":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnFungibleTokens#Assign-Mint-and-Burn-Roles","kind":"section","abstract":[{"text":"Fungible tokens function similarly to traditional currencies, making them the simplest type of token to work with.","type":"text"}],"url":"\/tutorials\/spacekit\/operationsonfungibletokens#Assign-Mint-and-Burn-Roles","title":"Assign Mint and Burn Roles","type":"section","role":"pseudoSymbol"},"doc://SpaceKit/tutorials/SpaceKit/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract":{"abstract":[{"text":"Before writing your first smart contract with SpaceKit, ensure you have the necessary tools installed.","type":"text"}],"url":"\/tutorials\/spacekit\/installingtools#Initializing-and-Compiling-Your-First-Smart-Contract","title":"Initializing and Compiling Your First Smart Contract","type":"section","kind":"section","role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract"},"doc://SpaceKit/tutorials/SpaceKit/SyncCalls#Perform-a-Synchronous-Call":{"title":"Perform a Synchronous Call","url":"\/tutorials\/spacekit\/synccalls#Perform-a-Synchronous-Call","role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls#Perform-a-Synchronous-Call","type":"section","kind":"section","abstract":[{"text":"Smart contracts can interact not only with users but also with other smart contracts. This enables more advanced protocols by leveraging existing ones. For example, you could integrate a decentralized exchange directly into your contract to perform token swaps. Decentralized applications often involve multiple contracts, each with a dedicated role, working together to achieve complex functionality—similar to microservices in backend systems.","type":"text"}]},"doc://SpaceKit/tutorials/SpaceKit/OperationsOnNonFungibleTokens":{"abstract":[{"text":"Non-fungible tokens (NFTs) are unique digital assets that cannot be interchanged. Each NFT is associated with a unique identifier, known as a nonce. You can think of it like an airline ticket—each ticket is assigned to a specific passenger, with individual preferences and details.","type":"text"}],"url":"\/tutorials\/spacekit\/operationsonnonfungibletokens","title":"Managing Non-Fungible Tokens","type":"topic","kind":"project","estimatedTime":"15min","role":"project","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnNonFungibleTokens"},"doc://SpaceKit/tutorials/SpaceKit/UnderstandTokens":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/UnderstandTokens","kind":"project","type":"topic","abstract":[{"type":"text","text":"Learn about the ESDT standard used in the SpaceKit framework, a token model that supports fungible tokens, non-fungible tokens (NFTs), semi-fungible tokens, and meta-esdt tokens."},{"type":"text","text":" "},{"type":"text","text":"The SpaceKit framework uses a token standard called ESDT. This standard defines four types of tokens: fungible, non-fungible (NFT), semi-fungible, and meta-esdt."}],"role":"project","url":"\/tutorials\/spacekit\/understandtokens","estimatedTime":"15min","title":"Understand the ESDT Standard"},"doc://SpaceKit/tutorials/SpaceKit/GetInfo#Accessing-Transaction-Context-Data":{"title":"Accessing Transaction Context Data","url":"\/tutorials\/spacekit\/getinfo#Accessing-Transaction-Context-Data","role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo#Accessing-Transaction-Context-Data","type":"section","kind":"section","abstract":[{"text":"Many smart contracts rely on contextual data to execute their operations effectively. This data can include input payments, the caller’s address, the current time, the balance of a specific account, or even the contract owner.","type":"text"}]},"doc://SpaceKit/tutorials/SpaceKit/SyncCalls":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls","kind":"project","type":"topic","abstract":[{"type":"text","text":"Smart contracts can interact not only with users but also with other smart contracts. This enables more advanced protocols by leveraging existing ones. For example, you could integrate a decentralized exchange directly into your contract to perform token swaps. Decentralized applications often involve multiple contracts, each with a dedicated role, working together to achieve complex functionality—similar to microservices in backend systems."}],"role":"project","url":"\/tutorials\/spacekit\/synccalls","estimatedTime":"15min","title":"Interact with Other Contracts"},"doc://SpaceKit/tutorials/SpaceKit/Create-and-Manage-Tokens/Creating-and-Understanding-Tokens":{"role":"article","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Create-and-Manage-Tokens\/Creating-and-Understanding-Tokens","abstract":[],"kind":"article","url":"\/tutorials\/spacekit\/create-and-manage-tokens\/creating-and-understanding-tokens","type":"topic","title":"Creating and Understanding Tokens"},"doc://SpaceKit/tutorials/SpaceKit/Deep-Dive-into-SpaceKit-Concepts/Exploring-SpaceKit's-Types":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Exploring-SpaceKit's-Types","kind":"article","type":"topic","abstract":[],"role":"article","url":"\/tutorials\/spacekit\/deep-dive-into-spacekit-concepts\/exploring-spacekit's-types","title":"Exploring SpaceKit's Types"},"doc://SpaceKit/tutorials/SpaceKit/CodingYourFirstContract#Initializing-the-Project":{"role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Initializing-the-Project","abstract":[{"type":"text","text":"In this tutorial, you’ll create a simple smart contract that manages a counter. Users can increment or decrement the counter, and the changes are persisted across contract executions."}],"kind":"section","url":"\/tutorials\/spacekit\/codingyourfirstcontract#Initializing-the-Project","type":"section","title":"Initializing the Project"},"doc://SpaceKit/tutorials/SpaceKit/Deep-Dive-into-SpaceKit-Concepts/Persisting-Data-Across-Executions":{"title":"Persisting Data Across Executions","url":"\/tutorials\/spacekit\/deep-dive-into-spacekit-concepts\/persisting-data-across-executions","role":"article","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Persisting-Data-Across-Executions","type":"topic","kind":"article","abstract":[]},"doc://SpaceKit/tutorials/SpaceKit/StoreValues#Working-with-Storage-for-Single-Value-Persistence":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues#Working-with-Storage-for-Single-Value-Persistence","url":"\/tutorials\/spacekit\/storevalues#Working-with-Storage-for-Single-Value-Persistence","abstract":[{"type":"text","text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory."}],"kind":"section","title":"Working with @Storage for Single Value Persistence","type":"section","role":"pseudoSymbol"},"doc://SpaceKit/tutorials/SpaceKit/InstallingTools":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools","kind":"project","type":"topic","abstract":[{"type":"text","text":"Before writing your first smart contract with SpaceKit, ensure you have the necessary tools installed."}],"role":"project","url":"\/tutorials\/spacekit\/installingtools","estimatedTime":"10min","title":"Install the Necessary Tools"},"UnderstandTokensSection1Step4.swift":{"content":["import SpaceKit","","@Controller public struct MyContract {","    @Storage(key: \"issuedTokenIdentifier\") var issuedTokenIdentifier: Buffer","    ","    public func issueToken() {","        assertOwner()","","        if !self.$issuedTokenIdentifier.isEmpty() {","            smartContractError(message: \"Token already issued\")","        }","    }","}",""],"fileType":"swift","highlights":[{"line":7},{"line":8},{"line":9},{"line":10},{"line":11}],"type":"file","fileName":"lib.swift","identifier":"UnderstandTokensSection1Step4.swift","syntax":"swift"},"UnderstandTokensSection1Step5.swift":{"fileName":"lib.swift","identifier":"UnderstandTokensSection1Step5.swift","syntax":"swift","content":["import SpaceKit","","@Controller public struct MyContract {","    @Storage(key: \"issuedTokenIdentifier\") var issuedTokenIdentifier: Buffer","    ","    public func issueToken() {","        assertOwner()","","        if !self.$issuedTokenIdentifier.isEmpty() {","            smartContractError(message: \"Token already issued\")","        }","        ","        let payment = Message.egldValue","    }","}",""],"highlights":[{"line":12},{"line":13}],"fileType":"swift","type":"file"},"doc://SpaceKit/tutorials/SpaceKit/OperationsOnFungibleTokens#Burn-Tokens":{"role":"pseudoSymbol","abstract":[{"text":"Fungible tokens function similarly to traditional currencies, making them the simplest type of token to work with.","type":"text"}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnFungibleTokens#Burn-Tokens","kind":"section","url":"\/tutorials\/spacekit\/operationsonfungibletokens#Burn-Tokens","type":"section","title":"Burn Tokens"},"UnderstandTokensSection4Step1.swift":{"content":["import SpaceKit","","@Controller public struct MyContract {","    @Storage(key: \"issuedTokenIdentifier\") var issuedTokenIdentifier: Buffer","    ","    public func issueNonFungibleToken() {","        assertOwner()","","        if !self.$issuedTokenIdentifier.isEmpty() {","            smartContractError(message: \"Token already issued\")","        }","        ","        let payment = Message.egldValue","        ","        Blockchain","            .issueSemiFungibleToken(","                tokenDisplayName: \"TestToken\",","                tokenTicker: \"TEST\",","                properties: SemiFungibleTokenProperties(","                    canFreeze: false,","                    canWipe: false,","                    canPause: false,","                    canTransferCreateRole: false,","                    canChangeOwner: false,","                    canUpgrade: false,","                    canAddSpecialRoles: true","                )","            )","            .registerPromise(","                gas: 30_000_000,","                value: payment,","                callback: self.$issueTokenCallback(","                    sentValue: payment,","                    gasForCallback: 15_000_000","                )","            )","    }","    ","    @Callback public mutating func issueTokenCallback(sentValue: BigUint) {","        let result: AsyncCallResult<TokenIdentifier> = Message.asyncCallResult()","        ","        switch result {","        case .success(let tokenIdentifier):","            self.issuedTokenIdentifier = tokenIdentifier","        case .error(_):","            Blockchain.getOwner()","                .send(egldValue: sentValue)","        }","    }","}",""],"fileType":"swift","highlights":[],"type":"file","fileName":"lib.swift","identifier":"UnderstandTokensSection4Step1.swift","syntax":"swift"},"doc://SpaceKit/tutorials/SpaceKit/OperationsOnFungibleTokens#Mint-New-Tokens":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnFungibleTokens#Mint-New-Tokens","kind":"section","type":"section","abstract":[{"type":"text","text":"Fungible tokens function similarly to traditional currencies, making them the simplest type of token to work with."}],"role":"pseudoSymbol","url":"\/tutorials\/spacekit\/operationsonfungibletokens#Mint-New-Tokens","title":"Mint New Tokens"},"doc://SpaceKit/tutorials/SpaceKit/UnderstandTokens#Issuing-a-Meta-ESDT-from-Your-Contract":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/UnderstandTokens#Issuing-a-Meta-ESDT-from-Your-Contract","kind":"section","type":"section","abstract":[{"type":"text","text":"Learn about the ESDT standard used in the SpaceKit framework, a token model that supports fungible tokens, non-fungible tokens (NFTs), semi-fungible tokens, and meta-esdt tokens."},{"type":"text","text":" "},{"type":"text","text":"The SpaceKit framework uses a token standard called ESDT. This standard defines four types of tokens: fungible, non-fungible (NFT), semi-fungible, and meta-esdt."}],"role":"pseudoSymbol","url":"\/tutorials\/spacekit\/understandtokens#Issuing-a-Meta-ESDT-from-Your-Contract","title":"Issuing a Meta ESDT from Your Contract"},"doc://SpaceKit/tutorials/SpaceKit/TokenAttributes#Implementing-the-unlockFunds-Endpoint":{"role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/TokenAttributes#Implementing-the-unlockFunds-Endpoint","abstract":[{"type":"text","text":"The ESDT standard enables embedding custom data within non-fungible tokens, allowing developers to extend the functionality of their smart contracts. This additional data, referred to as “attributes,” is tied to the token and transfers along with it between wallets."}],"kind":"section","url":"\/tutorials\/spacekit\/tokenattributes#Implementing-the-unlockFunds-Endpoint","type":"section","title":"Implementing the unlockFunds Endpoint"},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Working-with-the-Vector-Type":{"abstract":[{"text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}],"url":"\/tutorials\/spacekit\/familiarizewithtypes#Working-with-the-Vector-Type","title":"Working with the Vector Type","type":"section","kind":"section","role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Working-with-the-Vector-Type"},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges":{"title":"Handling Heap Allocation Challenges","role":"pseudoSymbol","type":"section","url":"\/tutorials\/spacekit\/familiarizewithtypes#Handling-Heap-Allocation-Challenges","abstract":[{"text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}],"kind":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges"},"UnderstandTokensSection1Step3.swift":{"fileName":"lib.swift","identifier":"UnderstandTokensSection1Step3.swift","syntax":"swift","content":["import SpaceKit","","@Controller public struct MyContract {","    @Storage(key: \"issuedTokenIdentifier\") var issuedTokenIdentifier: Buffer","    ","    public func issueToken() {","        ","    }","}",""],"highlights":[{"line":5},{"line":6},{"line":7},{"line":8}],"fileType":"swift","type":"file"},"UnderstandTokensSection1Step8.swift":{"content":["import SpaceKit","","@Controller public struct MyContract {","    @Storage(key: \"issuedTokenIdentifier\") var issuedTokenIdentifier: Buffer","    ","    public func issueToken() {","        assertOwner()","","        if !self.$issuedTokenIdentifier.isEmpty() {","            smartContractError(message: \"Token already issued\")","        }","        ","        let payment = Message.egldValue","        ","        Blockchain","            .issueFungibleToken(","                tokenDisplayName: \"SpaceKitToken\",","                tokenTicker: \"SPACE\",","                initialSupply: 1,","                properties: FungibleTokenProperties(","                    numDecimals: 18,","                    canFreeze: false,","                    canWipe: false,","                    canPause: false,","                    canMint: true,","                    canBurn: true,","                    canChangeOwner: true,","                    canUpgrade: true,","                    canAddSpecialRoles: true","                )","            )","            .registerPromise(","                gas: 30_000_000,","                value: payment,","                callback: \/\/ We will fill this parameter later","            )","    }","    ","    @Callback public mutating func issueTokenCallback(sentValue: BigUint) {","        let result: AsyncCallResult<IgnoreValue> = Message.asyncCallResult()","        ","        switch result {","        case .success(_):","            \/\/ We will fill the success case later","        case .error(_):","            \/\/ We will fill the error case later","        }","    }","","}",""],"fileType":"swift","highlights":[{"line":38},{"line":39},{"line":40},{"line":41},{"line":42},{"line":43},{"line":44},{"line":45},{"line":46},{"line":47},{"line":48},{"line":49}],"type":"file","fileName":"lib.swift","identifier":"UnderstandTokensSection1Step8.swift","syntax":"swift"},"UnderstandTokensSection1Step11.swift":{"content":["import SpaceKit","","@Controller public struct MyContract {","    @Storage(key: \"issuedTokenIdentifier\") var issuedTokenIdentifier: Buffer","    ","    public func issueToken() {","        assertOwner()","","        if !self.$issuedTokenIdentifier.isEmpty() {","            smartContractError(message: \"Token already issued\")","        }","        ","        let payment = Message.egldValue","        ","        Blockchain","            .issueFungibleToken(","                tokenDisplayName: \"SpaceKitToken\",","                tokenTicker: \"SPACE\",","                initialSupply: 1,","                properties: FungibleTokenProperties(","                    numDecimals: 18,","                    canFreeze: false,","                    canWipe: false,","                    canPause: false,","                    canMint: true,","                    canBurn: true,","                    canChangeOwner: true,","                    canUpgrade: true,","                    canAddSpecialRoles: true","                )","            )","            .registerPromise(","                gas: 30_000_000,","                value: payment,","                callback: self.$issueTokenCallback(","                    sentValue: payment,","                    gasForCallback: 15_000_000","                )","            )","    }","    ","    @Callback public mutating func issueTokenCallback(sentValue: BigUint) {","        let result: AsyncCallResult<IgnoreValue> = Message.asyncCallResult()","        ","        switch result {","        case .success(_):","            let receivedPayment = Message.singleFungibleEsdt","            ","            self.issuedTokenIdentifier = receivedPayment.tokenIdentifier","        case .error(_):","            Blockchain.getOwner()","                .send(egldValue: sentValue)","        }","    }","}",""],"fileType":"swift","type":"file","identifier":"UnderstandTokensSection1Step11.swift","syntax":"swift","highlights":[{"line":35},{"line":36},{"line":37},{"line":38}],"fileName":"lib.swift"},"UnderstandTokensSection1Step6.swift":{"content":["import SpaceKit","","@Controller public struct MyContract {","    @Storage(key: \"issuedTokenIdentifier\") var issuedTokenIdentifier: Buffer","    ","    public func issueToken() {","        assertOwner()","","        if !self.$issuedTokenIdentifier.isEmpty() {","            smartContractError(message: \"Token already issued\")","        }","        ","        let payment = Message.egldValue","        ","        Blockchain","            .issueFungibleToken(","                tokenDisplayName: \"SpaceKitToken\",","                tokenTicker: \"SPACE\",","                initialSupply: 1,","                properties: FungibleTokenProperties(","                    numDecimals: 18,","                    canFreeze: false,","                    canWipe: false,","                    canPause: false,","                    canMint: true,","                    canBurn: true,","                    canChangeOwner: true,","                    canUpgrade: true,","                    canAddSpecialRoles: true","                )","            )","    }","}",""],"fileType":"swift","highlights":[{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31}],"type":"file","fileName":"lib.swift","identifier":"UnderstandTokensSection1Step6.swift","syntax":"swift"},"doc://SpaceKit/tutorials/SpaceKit/OperationsOnFungibleTokens":{"title":"Managing Fungible Tokens","role":"project","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnFungibleTokens","kind":"project","type":"topic","estimatedTime":"15min","url":"\/tutorials\/spacekit\/operationsonfungibletokens","abstract":[{"type":"text","text":"Fungible tokens function similarly to traditional currencies, making them the simplest type of token to work with."}]},"doc://SpaceKit/tutorials/SpaceKit/TokenAttributes#Implementing-the-lockFunds-Endpoint":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/TokenAttributes#Implementing-the-lockFunds-Endpoint","kind":"section","abstract":[{"text":"The ESDT standard enables embedding custom data within non-fungible tokens, allowing developers to extend the functionality of their smart contracts. This additional data, referred to as “attributes,” is tied to the token and transfers along with it between wallets.","type":"text"}],"url":"\/tutorials\/spacekit\/tokenattributes#Implementing-the-lockFunds-Endpoint","title":"Implementing the lockFunds Endpoint","type":"section","role":"pseudoSymbol"},"doc://SpaceKit/tutorials/SpaceKit/OperationsOnNonFungibleTokens#Burn-Tokens":{"abstract":[{"text":"Non-fungible tokens (NFTs) are unique digital assets that cannot be interchanged. Each NFT is associated with a unique identifier, known as a nonce. You can think of it like an airline ticket—each ticket is assigned to a specific passenger, with individual preferences and details.","type":"text"}],"kind":"section","title":"Burn Tokens","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnNonFungibleTokens#Burn-Tokens","url":"\/tutorials\/spacekit\/operationsonnonfungibletokens#Burn-Tokens","type":"section","role":"pseudoSymbol"},"doc://SpaceKit/tutorials/SpaceKit/Create-and-Manage-Tokens/Enhancing-Contracts-with-Token-Attributes":{"abstract":[],"title":"Enhancing Contracts with Token Attributes","type":"topic","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Create-and-Manage-Tokens\/Enhancing-Contracts-with-Token-Attributes","url":"\/tutorials\/spacekit\/create-and-manage-tokens\/enhancing-contracts-with-token-attributes","kind":"article","role":"article"},"UnderstandTokensSection3Step1.swift":{"content":["import SpaceKit","","@Controller public struct MyContract {","    @Storage(key: \"issuedTokenIdentifier\") var issuedTokenIdentifier: Buffer","    ","    public func issueNonFungibleToken() {","        assertOwner()","","        if !self.$issuedTokenIdentifier.isEmpty() {","            smartContractError(message: \"Token already issued\")","        }","        ","        let payment = Message.egldValue","        ","        Blockchain","            .issueNonFungibleToken(","                tokenDisplayName: \"TestToken\",","                tokenTicker: \"TEST\",","                properties: NonFungibleTokenProperties(","                    canFreeze: false,","                    canWipe: false,","                    canPause: false,","                    canTransferCreateRole: false,","                    canChangeOwner: false,","                    canUpgrade: false,","                    canAddSpecialRoles: true","                )","            )","            .registerPromise(","                gas: 30_000_000,","                value: payment,","                callback: self.$issueTokenCallback(","                    sentValue: payment,","                    gasForCallback: 15_000_000","                )","            )","    }","    ","    @Callback public mutating func issueTokenCallback(sentValue: BigUint) {","        let result: AsyncCallResult<TokenIdentifier> = Message.asyncCallResult()","        ","        switch result {","        case .success(let tokenIdentifier):","            self.issuedTokenIdentifier = tokenIdentifier","        case .error(_):","            Blockchain.getOwner()","                .send(egldValue: sentValue)","        }","    }","}",""],"fileType":"swift","type":"file","identifier":"UnderstandTokensSection3Step1.swift","syntax":"swift","highlights":[],"fileName":"lib.swift"}}}
