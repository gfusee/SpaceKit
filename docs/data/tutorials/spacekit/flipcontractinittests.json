{"kind":"project","variants":[{"paths":["\/tutorials\/spacekit\/flipcontractinittests"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"modules":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Getting-Started\/Installing-the-Tools","projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools","sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Installing-SpaceKits-Dependencies","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Setting-Up-the-SpaceKit-CLI"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract","kind":"task"}]}]},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Getting-Started\/Building-Your-First-Smart-Contract","projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract","sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Initializing-the-Project","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Writing-the-Contract-Code","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Testing-the-Contract","kind":"task"}]}]},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Exploring-SpaceKit's-Types","projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes","sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Understanding-the-Buffer-Type"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Working-with-the-BigUint-Type"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Working-with-the-Vector-Type","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Creating-Your-Own-Types","kind":"task"}]}]},{"projects":[{"sections":[{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues#Working-with-Storage-for-Single-Value-Persistence"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Persisting-Data-Across-Executions"},{"projects":[{"sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo#Accessing-Transaction-Context-Data","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo#Accessing-Blockchain-Context-Data","kind":"task"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Retrieving-Information-from-the-Blockchain"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Interacting-with-Other-Contracts","projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls","sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls#Declare-the-Callee-Proxy","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls#Perform-a-Synchronous-Call"}]}]},{"projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls","sections":[{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls#Declare-the-Callee-Proxy"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls#Perform-an-Asynchronous-Call","kind":"task"}]}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Calling-Contracts-Across-Shards"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Create-and-Manage-Tokens\/Creating-and-Understanding-Tokens","projects":[{"sections":[{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/UnderstandTokens#Issuing-a-Fungible-Token-from-Your-Contract"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/UnderstandTokens#Issuing-a-Non-Fungible-Token-from-Your-Contract"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/UnderstandTokens#Issuing-a-Semi-Fungible-Token-from-Your-Contract","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/UnderstandTokens#Issuing-a-Meta-ESDT-from-Your-Contract"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/UnderstandTokens"}]},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Create-and-Manage-Tokens\/Managing-Fungible-Tokens","projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnFungibleTokens","sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnFungibleTokens#Assign-Mint-and-Burn-Roles","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnFungibleTokens#Mint-New-Tokens"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnFungibleTokens#Burn-Tokens","kind":"task"}]}]},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Create-and-Manage-Tokens\/Managing-Non-Fungible-Tokens","projects":[{"sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnNonFungibleTokens#Assign-Create-AddQuantity-and-Burn-Roles","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnNonFungibleTokens#Create-a-New-Nonce"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnNonFungibleTokens#Add-Quantity-to-an-Existing-Nonce","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnNonFungibleTokens#Burn-Tokens","kind":"task"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnNonFungibleTokens"}]},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Create-and-Manage-Tokens\/Enhancing-Contracts-with-Token-Attributes","projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/TokenAttributes","sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/TokenAttributes#Implementing-the-lockFunds-Endpoint","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/TokenAttributes#Implementing-the-unlockFunds-Endpoint","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/TokenAttributes#Implementing-the-changeTokenLockDuration-Endpoint","kind":"task"}]}]},{"projects":[{"sections":[{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractIntro#Set-Up-the-Project"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractIntro"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Build-a-Coin-Flip-Contract\/Build-a-Coin-Flip-Smart-Contract"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Build-a-Coin-Flip-Contract\/Define-the-Storage-for-the-Flip-Contract","projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteTheStorage","sections":[{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteTheStorage#Define-the-Flip-Structure"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteTheStorage#Implement-Contract-Storage","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteTheStorage#Define-the-Contract-Init","kind":"task"}]}]},{"projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteAdmin","sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteAdmin#Set-the-Minimum-Block-Bounty-Delay","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteAdmin#Set-Maximum-Bet-Limits","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteAdmin#Increase-Contract-Reserves","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteAdmin#Withdraw-Contract-Reserves"}]}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Build-a-Coin-Flip-Contract\/Add-Administrative-Endpoints-to-the-Flip-Contract"},{"projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteTheGame","sections":[{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteTheGame#Implement-the-flip-Endpoint"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteTheGame#Implement-the-makeFlip-Function"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteTheGame#Define-the-bounty-Endpoint"}]}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Build-a-Coin-Flip-Contract\/Implement-the-Game-Logic-for-the-Flip-Contract"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Build-a-Coin-Flip-Contract\/Set-Up-Testing-in-the-SwiftVM","projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractInitTests","sections":[{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractInitTests#Set-Up-the-Test-Project"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractInitTests#Declare-Constants-for-the-Test-Environment","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractInitTests#Configure-the-Initial-Blockchain-State","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractInitTests#Create-Helper-Functions-to-Deploy-and-Configure-the-Contract","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractInitTests#Write-Tests-for-the-Setup-Helpers","kind":"task"}]}]},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Build-a-Coin-Flip-Contract\/Test-the-Admin-Endpoints","projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractTestAdmin","sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractTestAdmin#Verify-That-Only-the-Owner-Can-Access-Admin-Endpoints","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractTestAdmin#Verify-the-Maximum-Bet-Configuration-Endpoints"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractTestAdmin#Test-the-increaseReserve-Endpoint"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractTestAdmin#Test-the-withdrawReserve-Endpoint","kind":"task"}]}]},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Build-a-Coin-Flip-Contract\/Test-the-Game-Logic-for-the-Flip-Contract","projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractTestTheGame","sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractTestTheGame#Create-Utility-Functions-for-flip-and-bounty","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractTestTheGame#Test-Failure-Cases-for-the-flip-Endpoint","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractTestTheGame#Test-Successful-Calls-to-the-flip-Endpoint","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractTestTheGame#Test-Failure-Case-for-the-bounty-Endpoint","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractTestTheGame#Test-the-bounty-Endpoint"}]}]}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit","paths":[["doc:\/\/SpaceKit\/tutorials\/SpaceKit","doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Build-a-Coin-Flip-Contract","doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Build-a-Coin-Flip-Contract\/Set-Up-Testing-in-the-SwiftVM"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractInitTests"},"sections":[{"title":"Set Up Testing in the SwiftVM","chapter":"Set Up Testing in the SwiftVM","kind":"hero","estimatedTimeInMinutes":20,"content":[{"inlineContent":[{"text":"Smart contracts are permissionless programs that often manage valuable assets. Because of this, writing comprehensive tests for both successful and failure scenarios is essential.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"SpaceKit provides the SwiftVM, a native Swift-based replica of the SpaceVM. This lets you run and debug your smart contracts directly in Swift, using familiar tools like breakpoints and the debugger. Unlike contract code, your Swift tests can take advantage of the full Swift language—including heap-allocated types like ","type":"text"},{"type":"codeVoice","code":"String"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this tutorial, you’ll configure the test environment and get ready to write your first tests."}]}]},{"tasks":[{"stepsSection":[{"media":"FlipContractInitTestsSection1Step1.png","type":"step","caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Delete any existing files inside the "},{"type":"codeVoice","code":"Contracts\/Flip\/Tests\/FlipTests"},{"type":"text","text":" folder."}]}],"runtimePreview":null,"code":null,"content":[{"inlineContent":[{"type":"text","text":"Remove the default template files."}],"type":"paragraph"}]},{"runtimePreview":null,"type":"step","caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a new file named "},{"code":"FlipTests.swift","type":"codeVoice"},{"text":" inside the ","type":"text"},{"code":"Contracts\/Flip\/Tests\/FlipTests","type":"codeVoice"},{"type":"text","text":" directory."}]}],"media":"FlipContractInitTestsSection1Step2.png","code":null}],"anchor":"Set-Up-the-Test-Project","contentSection":[{"mediaPosition":"trailing","kind":"contentAndMedia","content":[{"inlineContent":[{"text":"Before writing tests, prepare the project by cleaning up the test directory and creating a new test file.","type":"text"}],"type":"paragraph"}]}],"title":"Set Up the Test Project"},{"stepsSection":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Import the "},{"code":"SpaceKitTesting","type":"codeVoice"},{"type":"text","text":" module."}]}],"code":"FlipContractInitTestsSection2Step1.swift","runtimePreview":null,"type":"step","caption":[{"inlineContent":[{"type":"text","text":"This also imports "},{"type":"codeVoice","code":"SpaceKit"},{"type":"text","text":", "},{"type":"codeVoice","code":"XCTest"},{"type":"text","text":", and "},{"type":"codeVoice","code":"Foundation"},{"text":".","type":"text"}],"type":"paragraph"}],"media":null},{"code":"FlipContractInitTestsSection2Step2.swift","caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Import the Flip contract code."}]}],"media":null,"type":"step","runtimePreview":null},{"type":"step","media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Define a constant for the player’s address.","type":"text"}]}],"runtimePreview":null,"caption":[{"inlineContent":[{"text":"This address will be used to invoke the ","type":"text"},{"type":"codeVoice","code":"flip"},{"type":"text","text":" endpoint during tests."}],"type":"paragraph"}],"code":"FlipContractInitTestsSection2Step3.swift"},{"type":"step","code":"FlipContractInitTestsSection2Step4.swift","content":[{"type":"paragraph","inlineContent":[{"text":"Define a constant for the bounty executor’s address.","type":"text"}]}],"media":null,"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This will be used to call the "},{"code":"bounty","type":"codeVoice"},{"type":"text","text":" endpoint in tests."}]}],"runtimePreview":null},{"type":"step","code":"FlipContractInitTestsSection2Step5.swift","content":[{"type":"paragraph","inlineContent":[{"text":"Define a constant for the contract owner’s address.","type":"text"}]}],"caption":[{"type":"paragraph","inlineContent":[{"text":"This account will access admin endpoints and receive owner fees.","type":"text"}]}],"media":null,"runtimePreview":null},{"runtimePreview":null,"caption":[],"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Define the address of the contract."}]}],"media":null,"code":"FlipContractInitTestsSection2Step6.swift"},{"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A valid ticker includes a name, a dash, and six characters (letters "},{"code":"a","type":"codeVoice"},{"text":"–","type":"text"},{"type":"codeVoice","code":"f"},{"type":"text","text":" and digits "},{"type":"codeVoice","code":"0"},{"text":"–","type":"text"},{"type":"codeVoice","code":"9"},{"type":"text","text":")."}]}],"media":null,"runtimePreview":null,"type":"step","content":[{"inlineContent":[{"type":"text","text":"Define the ticker string for the USDC token."}],"type":"paragraph"}],"code":"FlipContractInitTestsSection2Step7.swift"},{"code":"FlipContractInitTestsSection2Step8.swift","runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"Add a computed variable to convert the USDC ticker string into a "},{"type":"codeVoice","code":"TokenIdentifier"},{"type":"text","text":"."}],"type":"paragraph"}],"caption":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Note:"}]},{"type":"text","text":" Avoid declaring "},{"code":"SpaceKit","type":"codeVoice"},{"text":" value types in the global scope, as test resets in SwiftVM could invalidate them between runs.","type":"text"}],"type":"paragraph"}],"media":null,"type":"step"}],"title":"Declare Constants for the Test Environment","contentSection":[{"content":[{"type":"paragraph","inlineContent":[{"text":"The SwiftVM allows you to configure the initial state of the simulated blockchain before executing any transactions. This state includes:","type":"text"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Wallets: predefined addresses with specified EGLD and ESDT balances.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Smart contracts: their addresses, token balances, and logic (declared by listing all associated ","type":"text"},{"code":"@Controller","type":"codeVoice"},{"text":"s).","type":"text"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"text":"In contrast to a real blockchain, where contract addresses are assigned at deployment, SwiftVM tests require that contract addresses be explicitly defined ahead of time. This ensures consistency and makes it easier to reference the same contract across multiple test runs.","type":"text"}]},{"inlineContent":[{"text":"Because the SwiftVM needs to understand the full structure of a contract at runtime, all relevant ","type":"text"},{"code":"@Controller","type":"codeVoice"},{"type":"text","text":" definitions must be available before any test is executed."}],"type":"paragraph"}],"kind":"contentAndMedia","mediaPosition":"trailing"}],"anchor":"Declare-Constants-for-the-Test-Environment"},{"title":"Configure the Initial Blockchain State","stepsSection":[{"code":"FlipContractInitTestsSection2Step8.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Begin with the code you wrote in the previous section."}]}],"runtimePreview":null,"caption":[],"media":null,"type":"step"},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Define the ","type":"text"},{"type":"codeVoice","code":"FlipTests"},{"text":" class, which will contain all test methods.","type":"text"}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Note:","type":"text"}]},{"text":" ","type":"text"},{"code":"FlipTests","type":"codeVoice"},{"type":"text","text":" inherits from "},{"type":"codeVoice","code":"ContractTestCase"},{"text":", which itself extends ","type":"text"},{"type":"codeVoice","code":"XCTestCase"},{"text":".","type":"text"}]}],"media":null,"code":"FlipContractInitTestsSection3Step2.swift","runtimePreview":null},{"type":"step","media":null,"content":[{"inlineContent":[{"type":"text","text":"Override the "},{"code":"initialAccounts","type":"codeVoice"},{"text":" computed property.","type":"text"}],"type":"paragraph"}],"code":"FlipContractInitTestsSection3Step3.swift","caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This property returns an array of "},{"code":"WorldAccount","type":"codeVoice"},{"type":"text","text":" objects, representing the state of the blockchain at the beginning of each test."}]}],"runtimePreview":null},{"content":[{"type":"paragraph","inlineContent":[{"text":"Define the player account.","type":"text"}]}],"caption":[{"inlineContent":[{"text":"Give it an EGLD balance of ","type":"text"},{"type":"codeVoice","code":"100_000_000"},{"type":"text","text":", and a USDC balance of "},{"type":"codeVoice","code":"100_000_000"},{"text":".","type":"text"}],"type":"paragraph"}],"code":"FlipContractInitTestsSection3Step4.swift","runtimePreview":null,"type":"step","media":null},{"code":"FlipContractInitTestsSection3Step5.swift","runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"Define the bounty account."}],"type":"paragraph"}],"type":"step","media":null,"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This account will start with no balance."}]}]},{"type":"step","caption":[{"inlineContent":[{"type":"text","text":"Like the player, it should have both "},{"type":"codeVoice","code":"100_000_000"},{"type":"text","text":" EGLD and "},{"type":"codeVoice","code":"100_000_000"},{"text":" USDC.","type":"text"}],"type":"paragraph"}],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Define the contract owner account."}]}],"media":null,"runtimePreview":null,"code":"FlipContractInitTestsSection3Step6.swift"},{"code":"FlipContractInitTestsSection3Step7.swift","content":[{"type":"paragraph","inlineContent":[{"text":"Define the smart contract account for the Flip contract.","type":"text"}]}],"caption":[{"inlineContent":[{"type":"text","text":"Be sure to declare all associated controllers so the SwiftVM knows how to simulate its behavior."}],"type":"paragraph"}],"type":"step","media":null,"runtimePreview":null}],"anchor":"Configure-the-Initial-Blockchain-State","contentSection":[{"mediaPosition":"trailing","content":[{"type":"paragraph","inlineContent":[{"text":"With the constants now defined, you can use them to describe the initial blockchain state for each test case.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This state includes all user accounts and smart contracts, along with their balances and behavior."}]},{"type":"paragraph","inlineContent":[{"text":"Keep in mind: the SwiftVM resets the state before each test, ensuring test isolation and repeatability.","type":"text"}]}],"kind":"contentAndMedia"}]},{"anchor":"Create-Helper-Functions-to-Deploy-and-Configure-the-Contract","title":"Create Helper Functions to Deploy and Configure the Contract","contentSection":[{"mediaPosition":"trailing","kind":"contentAndMedia","content":[{"inlineContent":[{"type":"text","text":"Since deploying and configuring the Flip contract is a common setup step across multiple tests, it’s helpful to extract this logic into reusable helper functions."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You’ll define three such functions:"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"code":"initContract","type":"codeVoice"},{"type":"text","text":": Deploys the Flip contract into the SwiftVM."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"code":"setupEgld","type":"codeVoice"},{"text":": Adds EGLD to the contract’s reserve and sets the max bet cap.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"setupUsdc"},{"type":"text","text":": Adds "},{"type":"codeVoice","code":"USDC-abcdef"},{"text":" to the contract’s reserve and sets the max bet cap.","type":"text"}]}]}]}]}],"stepsSection":[{"caption":[],"code":"FlipContractInitTestsSection3Step7.swift","runtimePreview":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Start with the code from the previous section."}]}],"media":null},{"code":"FlipContractInitTestsSection4Step2.swift","runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"Declare a private function named "},{"type":"codeVoice","code":"initContract"},{"text":".","type":"text"}],"type":"paragraph"}],"caption":[{"inlineContent":[{"type":"text","text":"All helper functions will be marked "},{"type":"codeVoice","code":"throws"},{"text":" to allow SwiftVM to catch transaction errors during execution.","type":"text"}],"type":"paragraph"}],"type":"step","media":null},{"media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the "},{"code":"self.deployContract","type":"codeVoice"},{"text":" method to deploy the Flip contract.","type":"text"}]}],"caption":[{"inlineContent":[{"text":"Prefix the call with ","type":"text"},{"type":"codeVoice","code":"try"},{"type":"text","text":", as deployment may fail if the transaction is invalid."}],"type":"paragraph"}],"type":"step","code":"FlipContractInitTestsSection4Step3.swift","runtimePreview":null},{"content":[{"type":"paragraph","inlineContent":[{"text":"Pass the contract’s address to the deployment call.","type":"text"}]}],"media":null,"code":"FlipContractInitTestsSection4Step4.swift","type":"step","runtimePreview":null,"caption":[{"inlineContent":[{"type":"text","text":"This tells the SwiftVM where the contract should be deployed."}],"type":"paragraph"}]},{"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Supply the initialization arguments in the same order as defined in the ","type":"text"},{"type":"codeVoice","code":"@Init"},{"type":"text","text":" function."}]}],"media":null,"type":"step","caption":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Note:"}]},{"text":" Deployment is the only context where arguments are untyped, so ensure the types and order are correct.","type":"text"}],"type":"paragraph"}],"code":"FlipContractInitTestsSection4Step5.swift"},{"media":null,"code":"FlipContractInitTestsSection4Step6.swift","content":[{"inlineContent":[{"type":"text","text":"Set the contract owner as the sender of the deployment transaction."}],"type":"paragraph"}],"runtimePreview":null,"type":"step","caption":[{"inlineContent":[{"type":"text","text":"This allows the SwiftVM to register the owner for permissioned actions."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Define a private helper function named "},{"type":"codeVoice","code":"setupEgld"},{"type":"text","text":"."}]}],"code":"FlipContractInitTestsSection4Step7.swift","type":"step","caption":[],"media":null,"runtimePreview":null},{"runtimePreview":null,"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The SwiftVM will automatically bind the controller to the contract’s address and internal storage."}]}],"media":null,"code":"FlipContractInitTestsSection4Step8.swift","type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Use ","type":"text"},{"type":"codeVoice","code":"self.instantiateController"},{"type":"text","text":" to initialize the "},{"code":"AdminController","type":"codeVoice"},{"text":".","type":"text"}]}]},{"runtimePreview":null,"media":null,"code":"FlipContractInitTestsSection4Step9.swift","content":[{"type":"paragraph","inlineContent":[{"text":"Call the ","type":"text"},{"code":"setMaximumBet","type":"codeVoice"},{"type":"text","text":" endpoint from the owner account."}]}],"type":"step","caption":[{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"transactionInput"},{"type":"text","text":" parameter lets you specify the caller and any EGLD or ESDT sent."}]}]},{"type":"step","content":[{"inlineContent":[{"text":"Call the ","type":"text"},{"type":"codeVoice","code":"setMaximumBetPercent"},{"type":"text","text":" endpoint from the owner account."}],"type":"paragraph"}],"media":null,"caption":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Reminder:"}]},{"text":" As defined earlier, ","type":"text"},{"type":"codeVoice","code":"10_000"},{"text":" equals 100%, so ","type":"text"},{"code":"1_000","type":"codeVoice"},{"type":"text","text":" represents 10%."}]}],"code":"FlipContractInitTestsSection4Step10.swift","runtimePreview":null},{"code":"FlipContractInitTestsSection4Step11.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Call "},{"code":"increaseReserve","type":"codeVoice"},{"type":"text","text":" to fund the EGLD reserve with "},{"type":"codeVoice","code":"100_000_000"},{"type":"text","text":"."}]}],"type":"step","media":null,"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Ensure the call is made from the owner address."}]}],"runtimePreview":null},{"type":"step","caption":[],"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create the "},{"code":"setupUsdc","type":"codeVoice"},{"type":"text","text":" function using the same structure."}]}],"media":null,"code":"FlipContractInitTestsSection4Step12.swift"}]},{"title":"Write Tests for the Setup Helpers","contentSection":[{"mediaPosition":"trailing","kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Now that you’ve created the helper functions, it’s time to verify that they work as expected."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You’ll write two tests—one for the EGLD setup and one for the USDC setup."}]}]}],"anchor":"Write-Tests-for-the-Setup-Helpers","stepsSection":[{"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Continue from where you left off in the previous section."}]}],"code":"FlipContractInitTestsSection4Step12.swift","caption":[],"media":null,"type":"step"},{"media":null,"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Write a test method that verifies the ","type":"text"},{"code":"setupEgld","type":"codeVoice"},{"type":"text","text":" helper."}]}],"caption":[],"code":"FlipContractInitTestsSection5Step2.swift","type":"step"},{"caption":[],"media":null,"type":"step","content":[{"inlineContent":[{"type":"text","text":"Inside the test, call the "},{"type":"codeVoice","code":"initContract"},{"text":" function to deploy the contract.","type":"text"}],"type":"paragraph"}],"code":"FlipContractInitTestsSection5Step3.swift","runtimePreview":null},{"runtimePreview":null,"caption":[],"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Call the "},{"type":"codeVoice","code":"setupEgld"},{"type":"text","text":" function to configure the contract with EGLD values."}]}],"media":null,"code":"FlipContractInitTestsSection5Step4.swift"},{"type":"step","content":[{"inlineContent":[{"type":"text","text":"Then, create another test to verify the "},{"type":"codeVoice","code":"setupUsdc"},{"type":"text","text":" helper, following a similar pattern."}],"type":"paragraph"}],"media":null,"runtimePreview":null,"caption":[],"code":"FlipContractInitTestsSection5Step5.swift"}]}],"kind":"tasks"},{"action":{"overridingTitle":"Get started","overridingTitleInlineContent":[{"type":"text","text":"Get started"}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractTestAdmin","isActive":true,"type":"reference"},"title":"Test the Admin Endpoints","featuredEyebrow":"Tutorial","kind":"callToAction","abstract":[{"type":"text","text":"Admin endpoints are critical to the contract’s integrity. They not only control configuration parameters, but also grant access to withdraw the contract’s token reserves."}]}],"metadata":{"role":"project","categoryPathComponent":"SpaceKit","category":"SpaceKit","title":"Set Up Testing in the SwiftVM"},"schemaVersion":{"patch":0,"major":0,"minor":3},"references":{"doc://SpaceKit/tutorials/SpaceKit/FlipContractInitTests#Create-Helper-Functions-to-Deploy-and-Configure-the-Contract":{"url":"\/tutorials\/spacekit\/flipcontractinittests#Create-Helper-Functions-to-Deploy-and-Configure-the-Contract","role":"pseudoSymbol","kind":"section","title":"Create Helper Functions to Deploy and Configure the Contract","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractInitTests#Create-Helper-Functions-to-Deploy-and-Configure-the-Contract","type":"section","abstract":[{"type":"text","text":"Smart contracts are permissionless programs that often manage valuable assets. Because of this, writing comprehensive tests for both successful and failure scenarios is essential."}]},"FlipContractInitTestsSection4Step3.swift":{"syntax":"swift","type":"file","identifier":"FlipContractInitTestsSection4Step3.swift","content":["import SpaceKitTesting","import Flip","","private let PLAYER_ADDRESS = \"player\"","private let BOUNTY_ADDRESS = \"bounty\"","private let OWNER_ADDRESS = \"owner\"","private let CONTRACT_ADDRESS = \"contract\"","private let USDC_TOKEN_IDENTIFIER_STRING = \"USDC-abcdef\"","private var USDC_TOKEN_IDENTIFIER: TokenIdentifier {","    \"\\(USDC_TOKEN_IDENTIFIER_STRING)\"","}","","final class FlipTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: PLAYER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: BOUNTY_ADDRESS,","                balance: 0","            ),","            WorldAccount(","                address: OWNER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: CONTRACT_ADDRESS,","                balance: 0,","                controllers: [","                    AdminController.self,","                    GameController.self,","                    StorageController.self","                ]","            )","        ]","    }","    ","    private func initContract() throws {","        try self.deployContract(","        )","    }","}"],"highlights":[{"line":57},{"line":58}],"fileName":"FlipTest.swift","fileType":"swift"},"doc://SpaceKit/tutorials/SpaceKit/OperationsOnFungibleTokens#Burn-Tokens":{"url":"\/tutorials\/spacekit\/operationsonfungibletokens#Burn-Tokens","kind":"section","type":"section","role":"pseudoSymbol","title":"Burn Tokens","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnFungibleTokens#Burn-Tokens","abstract":[{"text":"Fungible tokens function similarly to traditional currencies, making them the simplest type of token to work with.","type":"text"}]},"doc://SpaceKit/tutorials/SpaceKit/UnderstandTokens#Issuing-a-Semi-Fungible-Token-from-Your-Contract":{"title":"Issuing a Semi-Fungible Token from Your Contract","type":"section","role":"pseudoSymbol","abstract":[{"text":"Learn about the ESDT standard used in the SpaceKit framework, a token model that supports fungible tokens, non-fungible tokens (NFTs), semi-fungible tokens, and meta-esdt tokens.","type":"text"},{"text":" ","type":"text"},{"text":"The SpaceKit framework uses a token standard called ESDT. This standard defines four types of tokens: fungible, non-fungible (NFT), semi-fungible, and meta-esdt.","type":"text"}],"kind":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/UnderstandTokens#Issuing-a-Semi-Fungible-Token-from-Your-Contract","url":"\/tutorials\/spacekit\/understandtokens#Issuing-a-Semi-Fungible-Token-from-Your-Contract"},"doc://SpaceKit/tutorials/SpaceKit/InstallingTools#Installing-SpaceKits-Dependencies":{"url":"\/tutorials\/spacekit\/installingtools#Installing-SpaceKits-Dependencies","role":"pseudoSymbol","kind":"section","title":"Installing SpaceKit's Dependencies","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Installing-SpaceKits-Dependencies","type":"section","abstract":[{"type":"text","text":"Before writing your first smart contract with SpaceKit, ensure you have the necessary tools installed."}]},"FlipContractInitTestsSection5Step5.swift":{"type":"file","content":["import SpaceKitTesting","import Flip","","private let PLAYER_ADDRESS = \"player\"","private let BOUNTY_ADDRESS = \"bounty\"","private let OWNER_ADDRESS = \"owner\"","private let CONTRACT_ADDRESS = \"contract\"","private let USDC_TOKEN_IDENTIFIER_STRING = \"USDC-abcdef\"","private var USDC_TOKEN_IDENTIFIER: TokenIdentifier {","    \"\\(USDC_TOKEN_IDENTIFIER_STRING)\"","}","","final class FlipTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: PLAYER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: BOUNTY_ADDRESS,","                balance: 0","            ),","            WorldAccount(","                address: OWNER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: CONTRACT_ADDRESS,","                balance: 0,","                controllers: [","                    AdminController.self,","                    GameController.self,","                    StorageController.self","                ]","            )","        ]","    }","    ","    func testInitEgld() throws {","        try self.initContract()","        try self.setupEgld()","    }","    ","    func testInitUsdc() throws {","        try self.initContract()","        try self.setupUsdc()","    }","    ","    private func initContract() throws {","        try self.deployContract(","            at: CONTRACT_ADDRESS,","            arguments: [","               500,","               100,","               1","            ],","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","    }","    ","    private func setupEgld() throws {","        let adminController = self.instantiateController(","            AdminController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 100_000_000","            )","        )","    }","    ","    private func setupUsdc() throws {","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 100_000_000","                    )","                ]","            )","        )","    }","}"],"identifier":"FlipContractInitTestsSection5Step5.swift","fileName":"FlipTest.swift","highlights":[{"line":61},{"line":62},{"line":63},{"line":64},{"line":65}],"fileType":"swift","syntax":"swift"},"FlipContractInitTestsSection1Step2.png":{"alt":"Contracts\/Flip\/Tests\/FlipTests with a file named FlipTests.swift.","identifier":"FlipContractInitTestsSection1Step2.png","variants":[{"url":"\/images\/SpaceKit\/FlipContractInitTestsSection1Step2.png","traits":["1x","light"]}],"type":"image"},"doc://SpaceKit/tutorials/SpaceKit/Build-a-Coin-Flip-Contract/Set-Up-Testing-in-the-SwiftVM":{"url":"\/tutorials\/spacekit\/build-a-coin-flip-contract\/set-up-testing-in-the-swiftvm","type":"topic","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Build-a-Coin-Flip-Contract\/Set-Up-Testing-in-the-SwiftVM","kind":"article","abstract":[],"role":"article","title":"Set Up Testing in the SwiftVM"},"doc://SpaceKit/tutorials/SpaceKit/InstallingTools":{"title":"Install the Necessary Tools","estimatedTime":"10min","url":"\/tutorials\/spacekit\/installingtools","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools","abstract":[{"text":"Before writing your first smart contract with SpaceKit, ensure you have the necessary tools installed.","type":"text"}],"role":"project","kind":"project","type":"topic"},"doc://SpaceKit/tutorials/SpaceKit/FlipContractWriteAdmin#Set-Maximum-Bet-Limits":{"kind":"section","abstract":[{"type":"text","text":"Now that your storage is fully set up, it’s time to define the administrative endpoints that allow the contract owner to manage critical values and assets."}],"type":"section","url":"\/tutorials\/spacekit\/flipcontractwriteadmin#Set-Maximum-Bet-Limits","role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteAdmin#Set-Maximum-Bet-Limits","title":"Set Maximum Bet Limits"},"doc://SpaceKit/tutorials/SpaceKit/OperationsOnFungibleTokens#Assign-Mint-and-Burn-Roles":{"abstract":[{"type":"text","text":"Fungible tokens function similarly to traditional currencies, making them the simplest type of token to work with."}],"role":"pseudoSymbol","url":"\/tutorials\/spacekit\/operationsonfungibletokens#Assign-Mint-and-Burn-Roles","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnFungibleTokens#Assign-Mint-and-Burn-Roles","kind":"section","type":"section","title":"Assign Mint and Burn Roles"},"doc://SpaceKit/tutorials/SpaceKit/FlipContractWriteAdmin#Withdraw-Contract-Reserves":{"url":"\/tutorials\/spacekit\/flipcontractwriteadmin#Withdraw-Contract-Reserves","role":"pseudoSymbol","kind":"section","title":"Withdraw Contract Reserves","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteAdmin#Withdraw-Contract-Reserves","type":"section","abstract":[{"type":"text","text":"Now that your storage is fully set up, it’s time to define the administrative endpoints that allow the contract owner to manage critical values and assets."}]},"FlipContractInitTestsSection2Step2.swift":{"type":"file","content":["import SpaceKitTesting","import Flip"],"identifier":"FlipContractInitTestsSection2Step2.swift","fileName":"FlipTest.swift","highlights":[{"line":2}],"fileType":"swift","syntax":"swift"},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Working-with-the-BigUint-Type":{"url":"\/tutorials\/spacekit\/familiarizewithtypes#Working-with-the-BigUint-Type","type":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Working-with-the-BigUint-Type","kind":"section","abstract":[{"text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}],"role":"pseudoSymbol","title":"Working with the BigUint Type"},"FlipContractInitTestsSection4Step11.swift":{"syntax":"swift","type":"file","identifier":"FlipContractInitTestsSection4Step11.swift","content":["import SpaceKitTesting","import Flip","","private let PLAYER_ADDRESS = \"player\"","private let BOUNTY_ADDRESS = \"bounty\"","private let OWNER_ADDRESS = \"owner\"","private let CONTRACT_ADDRESS = \"contract\"","private let USDC_TOKEN_IDENTIFIER_STRING = \"USDC-abcdef\"","private var USDC_TOKEN_IDENTIFIER: TokenIdentifier {","    \"\\(USDC_TOKEN_IDENTIFIER_STRING)\"","}","","final class FlipTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: PLAYER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: BOUNTY_ADDRESS,","                balance: 0","            ),","            WorldAccount(","                address: OWNER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: CONTRACT_ADDRESS,","                balance: 0,","                controllers: [","                    AdminController.self,","                    GameController.self,","                    StorageController.self","                ]","            )","        ]","    }","    ","    private func initContract() throws {","        try self.deployContract(","            at: CONTRACT_ADDRESS,","            arguments: [","               500,","               100,","               1","            ],","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","    }","    ","    private func setupEgld() throws {","        let adminController = self.instantiateController(","            AdminController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 100_000_000","            )","        )","    }","}"],"highlights":[{"line":93},{"line":94},{"line":95},{"line":96},{"line":97},{"line":98},{"line":99}],"fileName":"FlipTest.swift","fileType":"swift"},"doc://SpaceKit/tutorials/SpaceKit/FlipContractWriteTheStorage#Define-the-Contract-Init":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteTheStorage#Define-the-Contract-Init","role":"pseudoSymbol","url":"\/tutorials\/spacekit\/flipcontractwritethestorage#Define-the-Contract-Init","abstract":[{"type":"text","text":"With your Flip project initialized, you’re ready to begin implementing the smart contract. The contract is composed of the following components:"}],"title":"Define the Contract Init","type":"section","kind":"section"},"doc://SpaceKit/tutorials/SpaceKit/FlipContractTestAdmin":{"title":"Test the Admin Endpoints","type":"topic","role":"project","abstract":[{"type":"text","text":"Admin endpoints are critical to the contract’s integrity. They not only control configuration parameters, but also grant access to withdraw the contract’s token reserves."}],"kind":"project","estimatedTime":"20min","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractTestAdmin","url":"\/tutorials\/spacekit\/flipcontracttestadmin"},"doc://SpaceKit/tutorials/SpaceKit/Deep-Dive-into-SpaceKit-Concepts/Exploring-SpaceKit's-Types":{"abstract":[],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Exploring-SpaceKit's-Types","title":"Exploring SpaceKit's Types","type":"topic","url":"\/tutorials\/spacekit\/deep-dive-into-spacekit-concepts\/exploring-spacekit's-types","kind":"article","role":"article"},"doc://SpaceKit/tutorials/SpaceKit/Create-and-Manage-Tokens/Enhancing-Contracts-with-Token-Attributes":{"abstract":[],"role":"article","kind":"article","url":"\/tutorials\/spacekit\/create-and-manage-tokens\/enhancing-contracts-with-token-attributes","type":"topic","title":"Enhancing Contracts with Token Attributes","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Create-and-Manage-Tokens\/Enhancing-Contracts-with-Token-Attributes"},"doc://SpaceKit/tutorials/SpaceKit/CodingYourFirstContract#Initializing-the-Project":{"url":"\/tutorials\/spacekit\/codingyourfirstcontract#Initializing-the-Project","role":"pseudoSymbol","kind":"section","title":"Initializing the Project","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Initializing-the-Project","type":"section","abstract":[{"type":"text","text":"In this tutorial, you’ll create a simple smart contract that manages a counter. Users can increment or decrement the counter, and the changes are persisted across contract executions."}]},"FlipContractInitTestsSection2Step8.swift":{"type":"file","content":["import SpaceKitTesting","import Flip","","private let PLAYER_ADDRESS = \"player\"","private let BOUNTY_ADDRESS = \"bounty\"","private let OWNER_ADDRESS = \"owner\"","private let CONTRACT_ADDRESS = \"contract\"","private let USDC_TOKEN_IDENTIFIER_STRING = \"USDC-abcdef\"","private var USDC_TOKEN_IDENTIFIER: TokenIdentifier {","    \"\\(USDC_TOKEN_IDENTIFIER_STRING)\"","}"],"identifier":"FlipContractInitTestsSection2Step8.swift","fileName":"FlipTest.swift","highlights":[],"fileType":"swift","syntax":"swift"},"doc://SpaceKit/tutorials/SpaceKit/Getting-Started/Building-Your-First-Smart-Contract":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Getting-Started\/Building-Your-First-Smart-Contract","title":"Building Your First Smart Contract","kind":"article","url":"\/tutorials\/spacekit\/getting-started\/building-your-first-smart-contract","abstract":[],"type":"topic","role":"article"},"doc://SpaceKit/tutorials/SpaceKit/OperationsOnNonFungibleTokens#Assign-Create-AddQuantity-and-Burn-Roles":{"url":"\/tutorials\/spacekit\/operationsonnonfungibletokens#Assign-Create-AddQuantity-and-Burn-Roles","kind":"section","type":"section","role":"pseudoSymbol","title":"Assign Create, AddQuantity, and Burn Roles","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnNonFungibleTokens#Assign-Create-AddQuantity-and-Burn-Roles","abstract":[{"text":"Non-fungible tokens (NFTs) are unique digital assets that cannot be interchanged. Each NFT is associated with a unique identifier, known as a nonce. You can think of it like an airline ticket—each ticket is assigned to a specific passenger, with individual preferences and details.","type":"text"}]},"doc://SpaceKit/tutorials/SpaceKit/AsyncCalls":{"title":"Interacting with Contracts Across Shards","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls","abstract":[{"type":"text","text":"Blockchain platforms using SpaceVM enable seamless execution within a sharded environment. Sharding divides a blockchain’s global state and validation workload into smaller, manageable units known as shards. This method enhances scalability without compromising decentralization, allowing nodes to operate without significant computational resources."}],"kind":"project","role":"project","estimatedTime":"15min","type":"topic","url":"\/tutorials\/spacekit\/asynccalls"},"doc://SpaceKit/tutorials/SpaceKit/UnderstandTokens":{"url":"\/tutorials\/spacekit\/understandtokens","estimatedTime":"15min","role":"project","kind":"project","title":"Understand the ESDT Standard","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/UnderstandTokens","type":"topic","abstract":[{"text":"Learn about the ESDT standard used in the SpaceKit framework, a token model that supports fungible tokens, non-fungible tokens (NFTs), semi-fungible tokens, and meta-esdt tokens.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The SpaceKit framework uses a token standard called ESDT. This standard defines four types of tokens: fungible, non-fungible (NFT), semi-fungible, and meta-esdt."}]},"doc://SpaceKit/tutorials/SpaceKit/Build-a-Coin-Flip-Contract/Test-the-Admin-Endpoints":{"type":"topic","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Build-a-Coin-Flip-Contract\/Test-the-Admin-Endpoints","role":"article","abstract":[],"url":"\/tutorials\/spacekit\/build-a-coin-flip-contract\/test-the-admin-endpoints","kind":"article","title":"Test the Admin Endpoints"},"FlipContractInitTestsSection2Step3.swift":{"highlights":[{"line":3},{"line":4}],"content":["import SpaceKitTesting","import Flip","","private let PLAYER_ADDRESS = \"player\""],"syntax":"swift","type":"file","fileName":"FlipTest.swift","fileType":"swift","identifier":"FlipContractInitTestsSection2Step3.swift"},"doc://SpaceKit/tutorials/SpaceKit/FlipContractTestTheGame#Create-Utility-Functions-for-flip-and-bounty":{"url":"\/tutorials\/spacekit\/flipcontracttestthegame#Create-Utility-Functions-for-flip-and-bounty","type":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractTestTheGame#Create-Utility-Functions-for-flip-and-bounty","kind":"section","abstract":[{"type":"text","text":"This final chapter of the testing tutorial focuses on validating the core game logic implemented in the "},{"type":"codeVoice","code":"GameController"},{"text":".","type":"text"}],"role":"pseudoSymbol","title":"Create Utility Functions for flip and bounty"},"FlipContractInitTestsSection4Step5.swift":{"content":["import SpaceKitTesting","import Flip","","private let PLAYER_ADDRESS = \"player\"","private let BOUNTY_ADDRESS = \"bounty\"","private let OWNER_ADDRESS = \"owner\"","private let CONTRACT_ADDRESS = \"contract\"","private let USDC_TOKEN_IDENTIFIER_STRING = \"USDC-abcdef\"","private var USDC_TOKEN_IDENTIFIER: TokenIdentifier {","    \"\\(USDC_TOKEN_IDENTIFIER_STRING)\"","}","","final class FlipTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: PLAYER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: BOUNTY_ADDRESS,","                balance: 0","            ),","            WorldAccount(","                address: OWNER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: CONTRACT_ADDRESS,","                balance: 0,","                controllers: [","                    AdminController.self,","                    GameController.self,","                    StorageController.self","                ]","            )","        ]","    }","    ","    private func initContract() throws {","        try self.deployContract(","            at: CONTRACT_ADDRESS,","            arguments: [","               500,","               100,","               1","            ],","        )","    }","}"],"fileName":"FlipTest.swift","syntax":"swift","type":"file","highlights":[{"line":59},{"line":60},{"line":61},{"line":62},{"line":63}],"fileType":"swift","identifier":"FlipContractInitTestsSection4Step5.swift"},"doc://SpaceKit/tutorials/SpaceKit/TokenAttributes":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/TokenAttributes","url":"\/tutorials\/spacekit\/tokenattributes","role":"project","type":"topic","kind":"project","abstract":[{"type":"text","text":"The ESDT standard enables embedding custom data within non-fungible tokens, allowing developers to extend the functionality of their smart contracts. This additional data, referred to as “attributes,” is tied to the token and transfers along with it between wallets."}],"estimatedTime":"15min","title":"Enhance Your Contracts with Token Attributes"},"doc://SpaceKit/tutorials/SpaceKit/InstallingTools#Setting-Up-the-SpaceKit-CLI":{"url":"\/tutorials\/spacekit\/installingtools#Setting-Up-the-SpaceKit-CLI","type":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Setting-Up-the-SpaceKit-CLI","kind":"section","abstract":[{"type":"text","text":"Before writing your first smart contract with SpaceKit, ensure you have the necessary tools installed."}],"role":"pseudoSymbol","title":"Setting Up the SpaceKit CLI"},"doc://SpaceKit/tutorials/SpaceKit/FlipContractInitTests#Declare-Constants-for-the-Test-Environment":{"title":"Declare Constants for the Test Environment","role":"pseudoSymbol","kind":"section","abstract":[{"text":"Smart contracts are permissionless programs that often manage valuable assets. Because of this, writing comprehensive tests for both successful and failure scenarios is essential.","type":"text"}],"type":"section","url":"\/tutorials\/spacekit\/flipcontractinittests#Declare-Constants-for-the-Test-Environment","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractInitTests#Declare-Constants-for-the-Test-Environment"},"doc://SpaceKit/tutorials/SpaceKit/FlipContractWriteTheStorage":{"title":"Define the Storage for the Flip Contract","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteTheStorage","abstract":[{"type":"text","text":"With your Flip project initialized, you’re ready to begin implementing the smart contract. The contract is composed of the following components:"}],"kind":"project","role":"project","estimatedTime":"20min","type":"topic","url":"\/tutorials\/spacekit\/flipcontractwritethestorage"},"doc://SpaceKit/tutorials/SpaceKit/FlipContractTestAdmin#Test-the-withdrawReserve-Endpoint":{"type":"section","kind":"section","abstract":[{"type":"text","text":"Admin endpoints are critical to the contract’s integrity. They not only control configuration parameters, but also grant access to withdraw the contract’s token reserves."}],"title":"Test the withdrawReserve Endpoint","role":"pseudoSymbol","url":"\/tutorials\/spacekit\/flipcontracttestadmin#Test-the-withdrawReserve-Endpoint","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractTestAdmin#Test-the-withdrawReserve-Endpoint"},"doc://SpaceKit/tutorials/SpaceKit/OperationsOnNonFungibleTokens#Burn-Tokens":{"title":"Burn Tokens","role":"pseudoSymbol","kind":"section","abstract":[{"text":"Non-fungible tokens (NFTs) are unique digital assets that cannot be interchanged. Each NFT is associated with a unique identifier, known as a nonce. You can think of it like an airline ticket—each ticket is assigned to a specific passenger, with individual preferences and details.","type":"text"}],"type":"section","url":"\/tutorials\/spacekit\/operationsonnonfungibletokens#Burn-Tokens","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnNonFungibleTokens#Burn-Tokens"},"doc://SpaceKit/tutorials/SpaceKit/GetInfo":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo","role":"project","url":"\/tutorials\/spacekit\/getinfo","abstract":[{"type":"text","text":"Many smart contracts rely on contextual data to execute their operations effectively. This data can include input payments, the caller’s address, the current time, the balance of a specific account, or even the contract owner."}],"title":"Retrieving Information from the Blockchain","type":"topic","estimatedTime":"10min","kind":"project"},"doc://SpaceKit/tutorials/SpaceKit/Build-a-Coin-Flip-Contract/Build-a-Coin-Flip-Smart-Contract":{"url":"\/tutorials\/spacekit\/build-a-coin-flip-contract\/build-a-coin-flip-smart-contract","type":"topic","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Build-a-Coin-Flip-Contract\/Build-a-Coin-Flip-Smart-Contract","kind":"article","abstract":[],"role":"article","title":"Build a Coin Flip Smart Contract"},"doc://SpaceKit/tutorials/SpaceKit/FlipContractTestAdmin#Test-the-increaseReserve-Endpoint":{"kind":"section","abstract":[{"text":"Admin endpoints are critical to the contract’s integrity. They not only control configuration parameters, but also grant access to withdraw the contract’s token reserves.","type":"text"}],"type":"section","url":"\/tutorials\/spacekit\/flipcontracttestadmin#Test-the-increaseReserve-Endpoint","role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractTestAdmin#Test-the-increaseReserve-Endpoint","title":"Test the increaseReserve Endpoint"},"doc://SpaceKit/tutorials/SpaceKit/SyncCalls":{"title":"Interact with Other Contracts","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls","abstract":[{"type":"text","text":"Smart contracts can interact not only with users but also with other smart contracts. This enables more advanced protocols by leveraging existing ones. For example, you could integrate a decentralized exchange directly into your contract to perform token swaps. Decentralized applications often involve multiple contracts, each with a dedicated role, working together to achieve complex functionality—similar to microservices in backend systems."}],"kind":"project","role":"project","estimatedTime":"15min","type":"topic","url":"\/tutorials\/spacekit\/synccalls"},"FlipContractInitTestsSection3Step2.swift":{"syntax":"swift","content":["import SpaceKitTesting","import Flip","","private let PLAYER_ADDRESS = \"player\"","private let BOUNTY_ADDRESS = \"bounty\"","private let OWNER_ADDRESS = \"owner\"","private let CONTRACT_ADDRESS = \"contract\"","private let USDC_TOKEN_IDENTIFIER_STRING = \"USDC-abcdef\"","private var USDC_TOKEN_IDENTIFIER: TokenIdentifier {","    \"\\(USDC_TOKEN_IDENTIFIER_STRING)\"","}","","final class FlipTests: ContractTestCase {","}"],"highlights":[{"line":12},{"line":13},{"line":14}],"fileType":"swift","fileName":"FlipTest.swift","identifier":"FlipContractInitTestsSection3Step2.swift","type":"file"},"doc://SpaceKit/tutorials/SpaceKit/Deep-Dive-into-SpaceKit-Concepts/Retrieving-Information-from-the-Blockchain":{"type":"topic","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Retrieving-Information-from-the-Blockchain","role":"article","abstract":[],"url":"\/tutorials\/spacekit\/deep-dive-into-spacekit-concepts\/retrieving-information-from-the-blockchain","kind":"article","title":"Retrieving Information from the Blockchain"},"doc://SpaceKit/tutorials/SpaceKit":{"title":"Meet SpaceKit","abstract":[{"type":"text","text":"Discover how SpaceKit simplifies blockchain development using Swift. Dive into the world of Web3 with ease and efficiency."}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit","url":"\/tutorials\/spacekit","role":"overview","kind":"overview","type":"topic"},"doc://SpaceKit/tutorials/SpaceKit/OperationsOnNonFungibleTokens#Create-a-New-Nonce":{"abstract":[{"type":"text","text":"Non-fungible tokens (NFTs) are unique digital assets that cannot be interchanged. Each NFT is associated with a unique identifier, known as a nonce. You can think of it like an airline ticket—each ticket is assigned to a specific passenger, with individual preferences and details."}],"role":"pseudoSymbol","kind":"section","url":"\/tutorials\/spacekit\/operationsonnonfungibletokens#Create-a-New-Nonce","type":"section","title":"Create a New Nonce","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnNonFungibleTokens#Create-a-New-Nonce"},"FlipContractInitTestsSection2Step5.swift":{"content":["import SpaceKitTesting","import Flip","","private let PLAYER_ADDRESS = \"player\"","private let BOUNTY_ADDRESS = \"bounty\"","private let OWNER_ADDRESS = \"owner\""],"fileName":"FlipTest.swift","syntax":"swift","type":"file","highlights":[{"line":6}],"fileType":"swift","identifier":"FlipContractInitTestsSection2Step5.swift"},"doc://SpaceKit/tutorials/SpaceKit/OperationsOnNonFungibleTokens":{"estimatedTime":"15min","type":"topic","title":"Managing Non-Fungible Tokens","role":"project","url":"\/tutorials\/spacekit\/operationsonnonfungibletokens","abstract":[{"type":"text","text":"Non-fungible tokens (NFTs) are unique digital assets that cannot be interchanged. Each NFT is associated with a unique identifier, known as a nonce. You can think of it like an airline ticket—each ticket is assigned to a specific passenger, with individual preferences and details."}],"kind":"project","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnNonFungibleTokens"},"doc://SpaceKit/tutorials/SpaceKit/FlipContractWriteAdmin#Set-the-Minimum-Block-Bounty-Delay":{"url":"\/tutorials\/spacekit\/flipcontractwriteadmin#Set-the-Minimum-Block-Bounty-Delay","role":"pseudoSymbol","kind":"section","title":"Set the Minimum Block Bounty Delay","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteAdmin#Set-the-Minimum-Block-Bounty-Delay","type":"section","abstract":[{"text":"Now that your storage is fully set up, it’s time to define the administrative endpoints that allow the contract owner to manage critical values and assets.","type":"text"}]},"doc://SpaceKit/tutorials/SpaceKit/Create-and-Manage-Tokens/Managing-Non-Fungible-Tokens":{"url":"\/tutorials\/spacekit\/create-and-manage-tokens\/managing-non-fungible-tokens","kind":"article","type":"topic","role":"article","title":"Managing Non-Fungible Tokens","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Create-and-Manage-Tokens\/Managing-Non-Fungible-Tokens","abstract":[]},"doc://SpaceKit/tutorials/SpaceKit/Deep-Dive-into-SpaceKit-Concepts/Persisting-Data-Across-Executions":{"title":"Persisting Data Across Executions","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Persisting-Data-Across-Executions","type":"topic","abstract":[],"kind":"article","role":"article","url":"\/tutorials\/spacekit\/deep-dive-into-spacekit-concepts\/persisting-data-across-executions"},"FlipContractInitTestsSection1Step1.png":{"alt":"Contracts\/Flip\/Tests\/FlipTests is empty.","identifier":"FlipContractInitTestsSection1Step1.png","type":"image","variants":[{"url":"\/images\/SpaceKit\/FlipContractInitTestsSection1Step1.png","traits":["1x","light"]}]},"doc://SpaceKit/tutorials/SpaceKit/SyncCalls#Perform-a-Synchronous-Call":{"kind":"section","abstract":[{"text":"Smart contracts can interact not only with users but also with other smart contracts. This enables more advanced protocols by leveraging existing ones. For example, you could integrate a decentralized exchange directly into your contract to perform token swaps. Decentralized applications often involve multiple contracts, each with a dedicated role, working together to achieve complex functionality—similar to microservices in backend systems.","type":"text"}],"type":"section","url":"\/tutorials\/spacekit\/synccalls#Perform-a-Synchronous-Call","role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls#Perform-a-Synchronous-Call","title":"Perform a Synchronous Call"},"doc://SpaceKit/tutorials/SpaceKit/SyncCalls#Declare-the-Callee-Proxy":{"type":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls#Declare-the-Callee-Proxy","url":"\/tutorials\/spacekit\/synccalls#Declare-the-Callee-Proxy","title":"Declare the Callee Proxy","kind":"section","abstract":[{"text":"Smart contracts can interact not only with users but also with other smart contracts. This enables more advanced protocols by leveraging existing ones. For example, you could integrate a decentralized exchange directly into your contract to perform token swaps. Decentralized applications often involve multiple contracts, each with a dedicated role, working together to achieve complex functionality—similar to microservices in backend systems.","type":"text"}],"role":"pseudoSymbol"},"doc://SpaceKit/tutorials/SpaceKit/OperationsOnFungibleTokens#Mint-New-Tokens":{"url":"\/tutorials\/spacekit\/operationsonfungibletokens#Mint-New-Tokens","role":"pseudoSymbol","abstract":[{"type":"text","text":"Fungible tokens function similarly to traditional currencies, making them the simplest type of token to work with."}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnFungibleTokens#Mint-New-Tokens","type":"section","title":"Mint New Tokens","kind":"section"},"doc://SpaceKit/tutorials/SpaceKit/TokenAttributes#Implementing-the-lockFunds-Endpoint":{"url":"\/tutorials\/spacekit\/tokenattributes#Implementing-the-lockFunds-Endpoint","type":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/TokenAttributes#Implementing-the-lockFunds-Endpoint","kind":"section","abstract":[{"text":"The ESDT standard enables embedding custom data within non-fungible tokens, allowing developers to extend the functionality of their smart contracts. This additional data, referred to as “attributes,” is tied to the token and transfers along with it between wallets.","type":"text"}],"role":"pseudoSymbol","title":"Implementing the lockFunds Endpoint"},"doc://SpaceKit/tutorials/SpaceKit/FlipContractInitTests":{"url":"\/tutorials\/spacekit\/flipcontractinittests","type":"topic","kind":"project","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractInitTests","estimatedTime":"20min","abstract":[{"text":"Smart contracts are permissionless programs that often manage valuable assets. Because of this, writing comprehensive tests for both successful and failure scenarios is essential.","type":"text"}],"title":"Set Up Testing in the SwiftVM","role":"project"},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Working-with-the-Vector-Type":{"url":"\/tutorials\/spacekit\/familiarizewithtypes#Working-with-the-Vector-Type","type":"section","kind":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Working-with-the-Vector-Type","abstract":[{"text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}],"title":"Working with the Vector Type","role":"pseudoSymbol"},"doc://SpaceKit/tutorials/SpaceKit/FlipContractTestTheGame":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractTestTheGame","title":"Test the Game Logic for the Flip Contract","kind":"project","estimatedTime":"20min","url":"\/tutorials\/spacekit\/flipcontracttestthegame","abstract":[{"type":"text","text":"This final chapter of the testing tutorial focuses on validating the core game logic implemented in the "},{"type":"codeVoice","code":"GameController"},{"type":"text","text":"."}],"type":"topic","role":"project"},"FlipContractInitTestsSection2Step6.swift":{"content":["import SpaceKitTesting","import Flip","","private let PLAYER_ADDRESS = \"player\"","private let BOUNTY_ADDRESS = \"bounty\"","private let OWNER_ADDRESS = \"owner\"","private let CONTRACT_ADDRESS = \"contract\""],"fileName":"FlipTest.swift","syntax":"swift","type":"file","highlights":[{"line":7}],"fileType":"swift","identifier":"FlipContractInitTestsSection2Step6.swift"},"doc://SpaceKit/tutorials/SpaceKit/AsyncCalls#Perform-an-Asynchronous-Call":{"url":"\/tutorials\/spacekit\/asynccalls#Perform-an-Asynchronous-Call","kind":"section","type":"section","role":"pseudoSymbol","title":"Perform an Asynchronous Call","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls#Perform-an-Asynchronous-Call","abstract":[{"type":"text","text":"Blockchain platforms using SpaceVM enable seamless execution within a sharded environment. Sharding divides a blockchain’s global state and validation workload into smaller, manageable units known as shards. This method enhances scalability without compromising decentralization, allowing nodes to operate without significant computational resources."}]},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges":{"title":"Handling Heap Allocation Challenges","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges","abstract":[{"text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}],"kind":"section","role":"pseudoSymbol","type":"section","url":"\/tutorials\/spacekit\/familiarizewithtypes#Handling-Heap-Allocation-Challenges"},"doc://SpaceKit/tutorials/SpaceKit/Build-a-Coin-Flip-Contract/Test-the-Game-Logic-for-the-Flip-Contract":{"url":"\/tutorials\/spacekit\/build-a-coin-flip-contract\/test-the-game-logic-for-the-flip-contract","type":"topic","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Build-a-Coin-Flip-Contract\/Test-the-Game-Logic-for-the-Flip-Contract","kind":"article","abstract":[],"role":"article","title":"Test the Game Logic for the Flip Contract"},"FlipContractInitTestsSection4Step12.swift":{"highlights":[],"syntax":"swift","content":["import SpaceKitTesting","import Flip","","private let PLAYER_ADDRESS = \"player\"","private let BOUNTY_ADDRESS = \"bounty\"","private let OWNER_ADDRESS = \"owner\"","private let CONTRACT_ADDRESS = \"contract\"","private let USDC_TOKEN_IDENTIFIER_STRING = \"USDC-abcdef\"","private var USDC_TOKEN_IDENTIFIER: TokenIdentifier {","    \"\\(USDC_TOKEN_IDENTIFIER_STRING)\"","}","","final class FlipTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: PLAYER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: BOUNTY_ADDRESS,","                balance: 0","            ),","            WorldAccount(","                address: OWNER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: CONTRACT_ADDRESS,","                balance: 0,","                controllers: [","                    AdminController.self,","                    GameController.self,","                    StorageController.self","                ]","            )","        ]","    }","    ","    private func initContract() throws {","        try self.deployContract(","            at: CONTRACT_ADDRESS,","            arguments: [","               500,","               100,","               1","            ],","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","    }","    ","    private func setupEgld() throws {","        let adminController = self.instantiateController(","            AdminController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 100_000_000","            )","        )","    }","    ","    private func setupUsdc() throws {","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 100_000_000","                    )","                ]","            )","        )","    }","}"],"type":"file","fileName":"FlipTest.swift","fileType":"swift","identifier":"FlipContractInitTestsSection4Step12.swift"},"FlipContractInitTestsSection5Step4.swift":{"content":["import SpaceKitTesting","import Flip","","private let PLAYER_ADDRESS = \"player\"","private let BOUNTY_ADDRESS = \"bounty\"","private let OWNER_ADDRESS = \"owner\"","private let CONTRACT_ADDRESS = \"contract\"","private let USDC_TOKEN_IDENTIFIER_STRING = \"USDC-abcdef\"","private var USDC_TOKEN_IDENTIFIER: TokenIdentifier {","    \"\\(USDC_TOKEN_IDENTIFIER_STRING)\"","}","","final class FlipTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: PLAYER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: BOUNTY_ADDRESS,","                balance: 0","            ),","            WorldAccount(","                address: OWNER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: CONTRACT_ADDRESS,","                balance: 0,","                controllers: [","                    AdminController.self,","                    GameController.self,","                    StorageController.self","                ]","            )","        ]","    }","    ","    func testInitEgld() throws {","        try self.initContract()","        try self.setupEgld()","    }","    ","    private func initContract() throws {","        try self.deployContract(","            at: CONTRACT_ADDRESS,","            arguments: [","               500,","               100,","               1","            ],","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","    }","    ","    private func setupEgld() throws {","        let adminController = self.instantiateController(","            AdminController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 100_000_000","            )","        )","    }","    ","    private func setupUsdc() throws {","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 100_000_000","                    )","                ]","            )","        )","    }","}"],"fileName":"FlipTest.swift","syntax":"swift","type":"file","highlights":[{"line":58}],"fileType":"swift","identifier":"FlipContractInitTestsSection5Step4.swift"},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Understanding-the-Buffer-Type":{"title":"Understanding the Buffer Type","role":"pseudoSymbol","kind":"section","abstract":[{"type":"text","text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM."}],"type":"section","url":"\/tutorials\/spacekit\/familiarizewithtypes#Understanding-the-Buffer-Type","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Understanding-the-Buffer-Type"},"doc://SpaceKit/tutorials/SpaceKit/StoreValues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage","url":"\/tutorials\/spacekit\/storevalues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage","role":"pseudoSymbol","type":"section","kind":"section","abstract":[{"text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory.","type":"text"}],"title":"Leveraging @Mapping for Dynamic Key-Value Storage"},"doc://SpaceKit/tutorials/SpaceKit/TokenAttributes#Implementing-the-unlockFunds-Endpoint":{"type":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/TokenAttributes#Implementing-the-unlockFunds-Endpoint","url":"\/tutorials\/spacekit\/tokenattributes#Implementing-the-unlockFunds-Endpoint","title":"Implementing the unlockFunds Endpoint","kind":"section","abstract":[{"text":"The ESDT standard enables embedding custom data within non-fungible tokens, allowing developers to extend the functionality of their smart contracts. This additional data, referred to as “attributes,” is tied to the token and transfers along with it between wallets.","type":"text"}],"role":"pseudoSymbol"},"doc://SpaceKit/tutorials/SpaceKit/FlipContractTestTheGame#Test-the-bounty-Endpoint":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractTestTheGame#Test-the-bounty-Endpoint","abstract":[{"type":"text","text":"This final chapter of the testing tutorial focuses on validating the core game logic implemented in the "},{"type":"codeVoice","code":"GameController"},{"text":".","type":"text"}],"role":"pseudoSymbol","title":"Test the bounty Endpoint","kind":"section","url":"\/tutorials\/spacekit\/flipcontracttestthegame#Test-the-bounty-Endpoint","type":"section"},"doc://SpaceKit/tutorials/SpaceKit/Create-and-Manage-Tokens/Creating-and-Understanding-Tokens":{"url":"\/tutorials\/spacekit\/create-and-manage-tokens\/creating-and-understanding-tokens","kind":"article","type":"topic","role":"article","title":"Creating and Understanding Tokens","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Create-and-Manage-Tokens\/Creating-and-Understanding-Tokens","abstract":[]},"doc://SpaceKit/tutorials/SpaceKit/UnderstandTokens#Issuing-a-Non-Fungible-Token-from-Your-Contract":{"title":"Issuing a Non-Fungible Token from Your Contract","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/UnderstandTokens#Issuing-a-Non-Fungible-Token-from-Your-Contract","type":"section","abstract":[{"type":"text","text":"Learn about the ESDT standard used in the SpaceKit framework, a token model that supports fungible tokens, non-fungible tokens (NFTs), semi-fungible tokens, and meta-esdt tokens."},{"type":"text","text":" "},{"type":"text","text":"The SpaceKit framework uses a token standard called ESDT. This standard defines four types of tokens: fungible, non-fungible (NFT), semi-fungible, and meta-esdt."}],"kind":"section","role":"pseudoSymbol","url":"\/tutorials\/spacekit\/understandtokens#Issuing-a-Non-Fungible-Token-from-Your-Contract"},"doc://SpaceKit/tutorials/SpaceKit/FlipContractTestTheGame#Test-Failure-Case-for-the-bounty-Endpoint":{"url":"\/tutorials\/spacekit\/flipcontracttestthegame#Test-Failure-Case-for-the-bounty-Endpoint","role":"pseudoSymbol","kind":"section","title":"Test Failure Case for the bounty Endpoint","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractTestTheGame#Test-Failure-Case-for-the-bounty-Endpoint","type":"section","abstract":[{"type":"text","text":"This final chapter of the testing tutorial focuses on validating the core game logic implemented in the "},{"type":"codeVoice","code":"GameController"},{"text":".","type":"text"}]},"doc://SpaceKit/tutorials/SpaceKit/GetInfo#Accessing-Blockchain-Context-Data":{"abstract":[{"type":"text","text":"Many smart contracts rely on contextual data to execute their operations effectively. This data can include input payments, the caller’s address, the current time, the balance of a specific account, or even the contract owner."}],"url":"\/tutorials\/spacekit\/getinfo#Accessing-Blockchain-Context-Data","role":"pseudoSymbol","title":"Accessing Blockchain Context Data","kind":"section","type":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo#Accessing-Blockchain-Context-Data"},"FlipContractInitTestsSection4Step10.swift":{"highlights":[{"line":84},{"line":85},{"line":86},{"line":87},{"line":88},{"line":89},{"line":90},{"line":91},{"line":92}],"syntax":"swift","content":["import SpaceKitTesting","import Flip","","private let PLAYER_ADDRESS = \"player\"","private let BOUNTY_ADDRESS = \"bounty\"","private let OWNER_ADDRESS = \"owner\"","private let CONTRACT_ADDRESS = \"contract\"","private let USDC_TOKEN_IDENTIFIER_STRING = \"USDC-abcdef\"","private var USDC_TOKEN_IDENTIFIER: TokenIdentifier {","    \"\\(USDC_TOKEN_IDENTIFIER_STRING)\"","}","","final class FlipTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: PLAYER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: BOUNTY_ADDRESS,","                balance: 0","            ),","            WorldAccount(","                address: OWNER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: CONTRACT_ADDRESS,","                balance: 0,","                controllers: [","                    AdminController.self,","                    GameController.self,","                    StorageController.self","                ]","            )","        ]","    }","    ","    private func initContract() throws {","        try self.deployContract(","            at: CONTRACT_ADDRESS,","            arguments: [","               500,","               100,","               1","            ],","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","    }","    ","    private func setupEgld() throws {","        let adminController = self.instantiateController(","            AdminController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","    }","}"],"type":"file","fileName":"FlipTest.swift","fileType":"swift","identifier":"FlipContractInitTestsSection4Step10.swift"},"FlipContractInitTestsSection3Step7.swift":{"content":["import SpaceKitTesting","import Flip","","private let PLAYER_ADDRESS = \"player\"","private let BOUNTY_ADDRESS = \"bounty\"","private let OWNER_ADDRESS = \"owner\"","private let CONTRACT_ADDRESS = \"contract\"","private let USDC_TOKEN_IDENTIFIER_STRING = \"USDC-abcdef\"","private var USDC_TOKEN_IDENTIFIER: TokenIdentifier {","    \"\\(USDC_TOKEN_IDENTIFIER_STRING)\"","}","","final class FlipTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: PLAYER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: BOUNTY_ADDRESS,","                balance: 0","            ),","            WorldAccount(","                address: OWNER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: CONTRACT_ADDRESS,","                balance: 0,","                controllers: [","                    AdminController.self,","                    GameController.self,","                    StorageController.self","                ]","            )","        ]","    }","}"],"fileName":"FlipTest.swift","syntax":"swift","type":"file","highlights":[],"fileType":"swift","identifier":"FlipContractInitTestsSection3Step7.swift"},"FlipContractInitTestsSection5Step3.swift":{"highlights":[{"line":57}],"syntax":"swift","content":["import SpaceKitTesting","import Flip","","private let PLAYER_ADDRESS = \"player\"","private let BOUNTY_ADDRESS = \"bounty\"","private let OWNER_ADDRESS = \"owner\"","private let CONTRACT_ADDRESS = \"contract\"","private let USDC_TOKEN_IDENTIFIER_STRING = \"USDC-abcdef\"","private var USDC_TOKEN_IDENTIFIER: TokenIdentifier {","    \"\\(USDC_TOKEN_IDENTIFIER_STRING)\"","}","","final class FlipTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: PLAYER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: BOUNTY_ADDRESS,","                balance: 0","            ),","            WorldAccount(","                address: OWNER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: CONTRACT_ADDRESS,","                balance: 0,","                controllers: [","                    AdminController.self,","                    GameController.self,","                    StorageController.self","                ]","            )","        ]","    }","    ","    func testInitEgld() throws {","        try self.initContract()","    }","    ","    private func initContract() throws {","        try self.deployContract(","            at: CONTRACT_ADDRESS,","            arguments: [","               500,","               100,","               1","            ],","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","    }","    ","    private func setupEgld() throws {","        let adminController = self.instantiateController(","            AdminController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 100_000_000","            )","        )","    }","    ","    private func setupUsdc() throws {","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 100_000_000","                    )","                ]","            )","        )","    }","}"],"type":"file","fileName":"FlipTest.swift","fileType":"swift","identifier":"FlipContractInitTestsSection5Step3.swift"},"doc://SpaceKit/tutorials/SpaceKit/StoreValues":{"abstract":[{"type":"text","text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory."}],"role":"project","estimatedTime":"15min","kind":"project","url":"\/tutorials\/spacekit\/storevalues","type":"topic","title":"Persist Values Between Executions","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues"},"FlipContractInitTestsSection2Step1.swift":{"content":["import SpaceKitTesting"],"fileName":"FlipTest.swift","syntax":"swift","type":"file","highlights":[],"fileType":"swift","identifier":"FlipContractInitTestsSection2Step1.swift"},"doc://SpaceKit/tutorials/SpaceKit/UnderstandTokens#Issuing-a-Meta-ESDT-from-Your-Contract":{"title":"Issuing a Meta ESDT from Your Contract","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/UnderstandTokens#Issuing-a-Meta-ESDT-from-Your-Contract","abstract":[{"type":"text","text":"Learn about the ESDT standard used in the SpaceKit framework, a token model that supports fungible tokens, non-fungible tokens (NFTs), semi-fungible tokens, and meta-esdt tokens."},{"type":"text","text":" "},{"type":"text","text":"The SpaceKit framework uses a token standard called ESDT. This standard defines four types of tokens: fungible, non-fungible (NFT), semi-fungible, and meta-esdt."}],"kind":"section","role":"pseudoSymbol","type":"section","url":"\/tutorials\/spacekit\/understandtokens#Issuing-a-Meta-ESDT-from-Your-Contract"},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes":{"type":"topic","url":"\/tutorials\/spacekit\/familiarizewithtypes","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes","estimatedTime":"20min","role":"project","kind":"project","title":"Exploring SpaceKit's Types","abstract":[{"text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}]},"doc://SpaceKit/tutorials/SpaceKit/FlipContractInitTests#Write-Tests-for-the-Setup-Helpers":{"type":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractInitTests#Write-Tests-for-the-Setup-Helpers","role":"pseudoSymbol","abstract":[{"type":"text","text":"Smart contracts are permissionless programs that often manage valuable assets. Because of this, writing comprehensive tests for both successful and failure scenarios is essential."}],"url":"\/tutorials\/spacekit\/flipcontractinittests#Write-Tests-for-the-Setup-Helpers","kind":"section","title":"Write Tests for the Setup Helpers"},"doc://SpaceKit/tutorials/SpaceKit/FlipContractWriteAdmin#Increase-Contract-Reserves":{"url":"\/tutorials\/spacekit\/flipcontractwriteadmin#Increase-Contract-Reserves","type":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteAdmin#Increase-Contract-Reserves","kind":"section","abstract":[{"type":"text","text":"Now that your storage is fully set up, it’s time to define the administrative endpoints that allow the contract owner to manage critical values and assets."}],"role":"pseudoSymbol","title":"Increase Contract Reserves"},"FlipContractInitTestsSection3Step4.swift":{"syntax":"swift","highlights":[{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28}],"fileType":"swift","type":"file","fileName":"FlipTest.swift","content":["import SpaceKitTesting","import Flip","","private let PLAYER_ADDRESS = \"player\"","private let BOUNTY_ADDRESS = \"bounty\"","private let OWNER_ADDRESS = \"owner\"","private let CONTRACT_ADDRESS = \"contract\"","private let USDC_TOKEN_IDENTIFIER_STRING = \"USDC-abcdef\"","private var USDC_TOKEN_IDENTIFIER: TokenIdentifier {","    \"\\(USDC_TOKEN_IDENTIFIER_STRING)\"","}","","final class FlipTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: PLAYER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","        ]","    }","}"],"identifier":"FlipContractInitTestsSection3Step4.swift"},"doc://SpaceKit/tutorials/SpaceKit/FlipContractTestTheGame#Test-Failure-Cases-for-the-flip-Endpoint":{"url":"\/tutorials\/spacekit\/flipcontracttestthegame#Test-Failure-Cases-for-the-flip-Endpoint","type":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractTestTheGame#Test-Failure-Cases-for-the-flip-Endpoint","abstract":[{"type":"text","text":"This final chapter of the testing tutorial focuses on validating the core game logic implemented in the "},{"code":"GameController","type":"codeVoice"},{"text":".","type":"text"}],"kind":"section","title":"Test Failure Cases for the flip Endpoint","role":"pseudoSymbol"},"FlipContractInitTestsSection3Step5.swift":{"syntax":"swift","highlights":[{"line":28},{"line":29},{"line":30},{"line":31}],"fileType":"swift","type":"file","fileName":"FlipTest.swift","content":["import SpaceKitTesting","import Flip","","private let PLAYER_ADDRESS = \"player\"","private let BOUNTY_ADDRESS = \"bounty\"","private let OWNER_ADDRESS = \"owner\"","private let CONTRACT_ADDRESS = \"contract\"","private let USDC_TOKEN_IDENTIFIER_STRING = \"USDC-abcdef\"","private var USDC_TOKEN_IDENTIFIER: TokenIdentifier {","    \"\\(USDC_TOKEN_IDENTIFIER_STRING)\"","}","","final class FlipTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: PLAYER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: BOUNTY_ADDRESS,","                balance: 0","            ),","        ]","    }","}"],"identifier":"FlipContractInitTestsSection3Step5.swift"},"doc://SpaceKit/tutorials/SpaceKit/FlipContractIntro#Set-Up-the-Project":{"url":"\/tutorials\/spacekit\/flipcontractintro#Set-Up-the-Project","kind":"section","type":"section","role":"pseudoSymbol","title":"Set Up the Project","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractIntro#Set-Up-the-Project","abstract":[{"type":"text","text":"In this tutorial, you’ll write and test a complete smart contract that relies on random number generation to implement a coin flip mechanic. Players wager a chosen amount of any token and face a 50% chance of doubling their bet—or losing it. A small fee is deducted from each wager and sent to the developer’s wallet."}]},"doc://SpaceKit/tutorials/SpaceKit/UnderstandTokens#Issuing-a-Fungible-Token-from-Your-Contract":{"url":"\/tutorials\/spacekit\/understandtokens#Issuing-a-Fungible-Token-from-Your-Contract","role":"pseudoSymbol","abstract":[{"type":"text","text":"Learn about the ESDT standard used in the SpaceKit framework, a token model that supports fungible tokens, non-fungible tokens (NFTs), semi-fungible tokens, and meta-esdt tokens."},{"type":"text","text":" "},{"text":"The SpaceKit framework uses a token standard called ESDT. This standard defines four types of tokens: fungible, non-fungible (NFT), semi-fungible, and meta-esdt.","type":"text"}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/UnderstandTokens#Issuing-a-Fungible-Token-from-Your-Contract","type":"section","title":"Issuing a Fungible Token from Your Contract","kind":"section"},"doc://SpaceKit/tutorials/SpaceKit/Create-and-Manage-Tokens/Managing-Fungible-Tokens":{"url":"\/tutorials\/spacekit\/create-and-manage-tokens\/managing-fungible-tokens","type":"topic","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Create-and-Manage-Tokens\/Managing-Fungible-Tokens","kind":"article","abstract":[],"role":"article","title":"Managing Fungible Tokens"},"doc://SpaceKit/tutorials/SpaceKit/Build-a-Coin-Flip-Contract/Implement-the-Game-Logic-for-the-Flip-Contract":{"title":"Implement the Game Logic for the Flip Contract","role":"article","kind":"article","abstract":[],"type":"topic","url":"\/tutorials\/spacekit\/build-a-coin-flip-contract\/implement-the-game-logic-for-the-flip-contract","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Build-a-Coin-Flip-Contract\/Implement-the-Game-Logic-for-the-Flip-Contract"},"FlipContractInitTestsSection5Step2.swift":{"identifier":"FlipContractInitTestsSection5Step2.swift","fileType":"swift","content":["import SpaceKitTesting","import Flip","","private let PLAYER_ADDRESS = \"player\"","private let BOUNTY_ADDRESS = \"bounty\"","private let OWNER_ADDRESS = \"owner\"","private let CONTRACT_ADDRESS = \"contract\"","private let USDC_TOKEN_IDENTIFIER_STRING = \"USDC-abcdef\"","private var USDC_TOKEN_IDENTIFIER: TokenIdentifier {","    \"\\(USDC_TOKEN_IDENTIFIER_STRING)\"","}","","final class FlipTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: PLAYER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: BOUNTY_ADDRESS,","                balance: 0","            ),","            WorldAccount(","                address: OWNER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: CONTRACT_ADDRESS,","                balance: 0,","                controllers: [","                    AdminController.self,","                    GameController.self,","                    StorageController.self","                ]","            )","        ]","    }","    ","    func testInitEgld() throws {","    }","    ","    private func initContract() throws {","        try self.deployContract(","            at: CONTRACT_ADDRESS,","            arguments: [","               500,","               100,","               1","            ],","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","    }","    ","    private func setupEgld() throws {","        let adminController = self.instantiateController(","            AdminController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 100_000_000","            )","        )","    }","    ","    private func setupUsdc() throws {","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 100_000_000","                    )","                ]","            )","        )","    }","}"],"type":"file","highlights":[{"line":56},{"line":57},{"line":58}],"syntax":"swift","fileName":"FlipTest.swift"},"doc://SpaceKit/tutorials/SpaceKit/CodingYourFirstContract":{"url":"\/tutorials\/spacekit\/codingyourfirstcontract","kind":"project","estimatedTime":"20min","type":"topic","role":"project","title":"Building Your First Smart Contract","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract","abstract":[{"text":"In this tutorial, you’ll create a simple smart contract that manages a counter. Users can increment or decrement the counter, and the changes are persisted across contract executions.","type":"text"}]},"doc://SpaceKit/tutorials/SpaceKit/FlipContractWriteTheGame#Define-the-bounty-Endpoint":{"abstract":[{"text":"With the storage and administrative endpoints complete, it’s time to build the core gameplay mechanics.","type":"text"}],"kind":"section","role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteTheGame#Define-the-bounty-Endpoint","type":"section","title":"Define the bounty Endpoint","url":"\/tutorials\/spacekit\/flipcontractwritethegame#Define-the-bounty-Endpoint"},"doc://SpaceKit/tutorials/SpaceKit/OperationsOnFungibleTokens":{"type":"topic","estimatedTime":"15min","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnFungibleTokens","role":"project","abstract":[{"type":"text","text":"Fungible tokens function similarly to traditional currencies, making them the simplest type of token to work with."}],"url":"\/tutorials\/spacekit\/operationsonfungibletokens","kind":"project","title":"Managing Fungible Tokens"},"doc://SpaceKit/tutorials/SpaceKit/Deep-Dive-into-SpaceKit-Concepts/Interacting-with-Other-Contracts":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Interacting-with-Other-Contracts","title":"Interacting with Other Contracts","kind":"article","url":"\/tutorials\/spacekit\/deep-dive-into-spacekit-concepts\/interacting-with-other-contracts","abstract":[],"type":"topic","role":"article"},"doc://SpaceKit/tutorials/SpaceKit/FlipContractInitTests#Set-Up-the-Test-Project":{"title":"Set Up the Test Project","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractInitTests#Set-Up-the-Test-Project","abstract":[{"type":"text","text":"Smart contracts are permissionless programs that often manage valuable assets. Because of this, writing comprehensive tests for both successful and failure scenarios is essential."}],"url":"\/tutorials\/spacekit\/flipcontractinittests#Set-Up-the-Test-Project","type":"section","kind":"section","role":"pseudoSymbol"},"doc://SpaceKit/tutorials/SpaceKit/FlipContractTestAdmin#Verify-the-Maximum-Bet-Configuration-Endpoints":{"url":"\/tutorials\/spacekit\/flipcontracttestadmin#Verify-the-Maximum-Bet-Configuration-Endpoints","type":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractTestAdmin#Verify-the-Maximum-Bet-Configuration-Endpoints","kind":"section","abstract":[{"type":"text","text":"Admin endpoints are critical to the contract’s integrity. They not only control configuration parameters, but also grant access to withdraw the contract’s token reserves."}],"role":"pseudoSymbol","title":"Verify the Maximum Bet Configuration Endpoints"},"FlipContractInitTestsSection3Step3.swift":{"fileType":"swift","fileName":"FlipTest.swift","content":["import SpaceKitTesting","import Flip","","private let PLAYER_ADDRESS = \"player\"","private let BOUNTY_ADDRESS = \"bounty\"","private let OWNER_ADDRESS = \"owner\"","private let CONTRACT_ADDRESS = \"contract\"","private let USDC_TOKEN_IDENTIFIER_STRING = \"USDC-abcdef\"","private var USDC_TOKEN_IDENTIFIER: TokenIdentifier {","    \"\\(USDC_TOKEN_IDENTIFIER_STRING)\"","}","","final class FlipTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        []","    }","}"],"identifier":"FlipContractInitTestsSection3Step3.swift","syntax":"swift","highlights":[{"line":14},{"line":15},{"line":16}],"type":"file"},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Creating-Your-Own-Types":{"title":"Creating Your Own Types","role":"pseudoSymbol","abstract":[{"text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}],"kind":"section","url":"\/tutorials\/spacekit\/familiarizewithtypes#Creating-Your-Own-Types","type":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Creating-Your-Own-Types"},"FlipContractInitTestsSection4Step9.swift":{"identifier":"FlipContractInitTestsSection4Step9.swift","fileType":"swift","type":"file","content":["import SpaceKitTesting","import Flip","","private let PLAYER_ADDRESS = \"player\"","private let BOUNTY_ADDRESS = \"bounty\"","private let OWNER_ADDRESS = \"owner\"","private let CONTRACT_ADDRESS = \"contract\"","private let USDC_TOKEN_IDENTIFIER_STRING = \"USDC-abcdef\"","private var USDC_TOKEN_IDENTIFIER: TokenIdentifier {","    \"\\(USDC_TOKEN_IDENTIFIER_STRING)\"","}","","final class FlipTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: PLAYER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: BOUNTY_ADDRESS,","                balance: 0","            ),","            WorldAccount(","                address: OWNER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: CONTRACT_ADDRESS,","                balance: 0,","                controllers: [","                    AdminController.self,","                    GameController.self,","                    StorageController.self","                ]","            )","        ]","    }","    ","    private func initContract() throws {","        try self.deployContract(","            at: CONTRACT_ADDRESS,","            arguments: [","               500,","               100,","               1","            ],","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","    }","    ","    private func setupEgld() throws {","        let adminController = self.instantiateController(","            AdminController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","    }","}"],"highlights":[{"line":75},{"line":76},{"line":77},{"line":78},{"line":79},{"line":80},{"line":81},{"line":82},{"line":83}],"fileName":"FlipTest.swift","syntax":"swift"},"FlipContractInitTestsSection4Step6.swift":{"fileType":"swift","fileName":"FlipTest.swift","content":["import SpaceKitTesting","import Flip","","private let PLAYER_ADDRESS = \"player\"","private let BOUNTY_ADDRESS = \"bounty\"","private let OWNER_ADDRESS = \"owner\"","private let CONTRACT_ADDRESS = \"contract\"","private let USDC_TOKEN_IDENTIFIER_STRING = \"USDC-abcdef\"","private var USDC_TOKEN_IDENTIFIER: TokenIdentifier {","    \"\\(USDC_TOKEN_IDENTIFIER_STRING)\"","}","","final class FlipTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: PLAYER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: BOUNTY_ADDRESS,","                balance: 0","            ),","            WorldAccount(","                address: OWNER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: CONTRACT_ADDRESS,","                balance: 0,","                controllers: [","                    AdminController.self,","                    GameController.self,","                    StorageController.self","                ]","            )","        ]","    }","    ","    private func initContract() throws {","        try self.deployContract(","            at: CONTRACT_ADDRESS,","            arguments: [","               500,","               100,","               1","            ],","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","    }","}"],"identifier":"FlipContractInitTestsSection4Step6.swift","syntax":"swift","highlights":[{"line":64},{"line":65},{"line":66}],"type":"file"},"FlipContractInitTestsSection2Step4.swift":{"identifier":"FlipContractInitTestsSection2Step4.swift","fileType":"swift","type":"file","content":["import SpaceKitTesting","import Flip","","private let PLAYER_ADDRESS = \"player\"","private let BOUNTY_ADDRESS = \"bounty\""],"highlights":[{"line":5}],"fileName":"FlipTest.swift","syntax":"swift"},"doc://SpaceKit/tutorials/SpaceKit/FlipContractWriteTheGame":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteTheGame","estimatedTime":"20min","abstract":[{"type":"text","text":"With the storage and administrative endpoints complete, it’s time to build the core gameplay mechanics."}],"role":"project","title":"Implement the Game Logic for the Flip Contract","kind":"project","url":"\/tutorials\/spacekit\/flipcontractwritethegame","type":"topic"},"doc://SpaceKit/tutorials/SpaceKit/FlipContractIntro":{"type":"topic","url":"\/tutorials\/spacekit\/flipcontractintro","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractIntro","estimatedTime":"20min","role":"project","kind":"project","title":"Build a Coin Flip Smart Contract","abstract":[{"text":"In this tutorial, you’ll write and test a complete smart contract that relies on random number generation to implement a coin flip mechanic. Players wager a chosen amount of any token and face a 50% chance of doubling their bet—or losing it. A small fee is deducted from each wager and sent to the developer’s wallet.","type":"text"}]},"doc://SpaceKit/tutorials/SpaceKit/AsyncCalls#Declare-the-Callee-Proxy":{"url":"\/tutorials\/spacekit\/asynccalls#Declare-the-Callee-Proxy","kind":"section","type":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls#Declare-the-Callee-Proxy","abstract":[{"type":"text","text":"Blockchain platforms using SpaceVM enable seamless execution within a sharded environment. Sharding divides a blockchain’s global state and validation workload into smaller, manageable units known as shards. This method enhances scalability without compromising decentralization, allowing nodes to operate without significant computational resources."}],"title":"Declare the Callee Proxy","role":"pseudoSymbol"},"doc://SpaceKit/tutorials/SpaceKit/CodingYourFirstContract#Writing-the-Contract-Code":{"url":"\/tutorials\/spacekit\/codingyourfirstcontract#Writing-the-Contract-Code","role":"pseudoSymbol","abstract":[{"type":"text","text":"In this tutorial, you’ll create a simple smart contract that manages a counter. Users can increment or decrement the counter, and the changes are persisted across contract executions."}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Writing-the-Contract-Code","type":"section","title":"Writing the Contract Code","kind":"section"},"doc://SpaceKit/tutorials/SpaceKit/TokenAttributes#Implementing-the-changeTokenLockDuration-Endpoint":{"abstract":[{"type":"text","text":"The ESDT standard enables embedding custom data within non-fungible tokens, allowing developers to extend the functionality of their smart contracts. This additional data, referred to as “attributes,” is tied to the token and transfers along with it between wallets."}],"role":"pseudoSymbol","kind":"section","url":"\/tutorials\/spacekit\/tokenattributes#Implementing-the-changeTokenLockDuration-Endpoint","type":"section","title":"Implementing the changeTokenLockDuration Endpoint","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/TokenAttributes#Implementing-the-changeTokenLockDuration-Endpoint"},"FlipContractInitTestsSection4Step4.swift":{"fileType":"swift","fileName":"FlipTest.swift","content":["import SpaceKitTesting","import Flip","","private let PLAYER_ADDRESS = \"player\"","private let BOUNTY_ADDRESS = \"bounty\"","private let OWNER_ADDRESS = \"owner\"","private let CONTRACT_ADDRESS = \"contract\"","private let USDC_TOKEN_IDENTIFIER_STRING = \"USDC-abcdef\"","private var USDC_TOKEN_IDENTIFIER: TokenIdentifier {","    \"\\(USDC_TOKEN_IDENTIFIER_STRING)\"","}","","final class FlipTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: PLAYER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: BOUNTY_ADDRESS,","                balance: 0","            ),","            WorldAccount(","                address: OWNER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: CONTRACT_ADDRESS,","                balance: 0,","                controllers: [","                    AdminController.self,","                    GameController.self,","                    StorageController.self","                ]","            )","        ]","    }","    ","    private func initContract() throws {","        try self.deployContract(","            at: CONTRACT_ADDRESS,","        )","    }","}"],"identifier":"FlipContractInitTestsSection4Step4.swift","syntax":"swift","highlights":[{"line":58}],"type":"file"},"doc://SpaceKit/tutorials/SpaceKit/OperationsOnNonFungibleTokens#Add-Quantity-to-an-Existing-Nonce":{"title":"Add Quantity to an Existing Nonce","role":"pseudoSymbol","kind":"section","abstract":[{"text":"Non-fungible tokens (NFTs) are unique digital assets that cannot be interchanged. Each NFT is associated with a unique identifier, known as a nonce. You can think of it like an airline ticket—each ticket is assigned to a specific passenger, with individual preferences and details.","type":"text"}],"type":"section","url":"\/tutorials\/spacekit\/operationsonnonfungibletokens#Add-Quantity-to-an-Existing-Nonce","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnNonFungibleTokens#Add-Quantity-to-an-Existing-Nonce"},"doc://SpaceKit/tutorials/SpaceKit/FlipContractWriteTheGame#Implement-the-makeFlip-Function":{"url":"\/tutorials\/spacekit\/flipcontractwritethegame#Implement-the-makeFlip-Function","type":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteTheGame#Implement-the-makeFlip-Function","kind":"section","abstract":[{"type":"text","text":"With the storage and administrative endpoints complete, it’s time to build the core gameplay mechanics."}],"role":"pseudoSymbol","title":"Implement the makeFlip Function"},"doc://SpaceKit/tutorials/SpaceKit/FlipContractTestAdmin#Verify-That-Only-the-Owner-Can-Access-Admin-Endpoints":{"url":"\/tutorials\/spacekit\/flipcontracttestadmin#Verify-That-Only-the-Owner-Can-Access-Admin-Endpoints","kind":"section","type":"section","role":"pseudoSymbol","title":"Verify That Only the Owner Can Access Admin Endpoints","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractTestAdmin#Verify-That-Only-the-Owner-Can-Access-Admin-Endpoints","abstract":[{"type":"text","text":"Admin endpoints are critical to the contract’s integrity. They not only control configuration parameters, but also grant access to withdraw the contract’s token reserves."}]},"doc://SpaceKit/tutorials/SpaceKit/FlipContractWriteAdmin":{"estimatedTime":"20min","url":"\/tutorials\/spacekit\/flipcontractwriteadmin","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteAdmin","type":"topic","kind":"project","title":"Add Administrative Endpoints to the Flip Contract","role":"project","abstract":[{"text":"Now that your storage is fully set up, it’s time to define the administrative endpoints that allow the contract owner to manage critical values and assets.","type":"text"}]},"doc://SpaceKit/tutorials/SpaceKit/FlipContractWriteTheStorage#Define-the-Flip-Structure":{"abstract":[{"type":"text","text":"With your Flip project initialized, you’re ready to begin implementing the smart contract. The contract is composed of the following components:"}],"url":"\/tutorials\/spacekit\/flipcontractwritethestorage#Define-the-Flip-Structure","role":"pseudoSymbol","title":"Define the Flip Structure","kind":"section","type":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteTheStorage#Define-the-Flip-Structure"},"doc://SpaceKit/tutorials/SpaceKit/FlipContractTestTheGame#Test-Successful-Calls-to-the-flip-Endpoint":{"title":"Test Successful Calls to the flip Endpoint","role":"pseudoSymbol","kind":"section","abstract":[{"text":"This final chapter of the testing tutorial focuses on validating the core game logic implemented in the ","type":"text"},{"type":"codeVoice","code":"GameController"},{"type":"text","text":"."}],"type":"section","url":"\/tutorials\/spacekit\/flipcontracttestthegame#Test-Successful-Calls-to-the-flip-Endpoint","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractTestTheGame#Test-Successful-Calls-to-the-flip-Endpoint"},"doc://SpaceKit/tutorials/SpaceKit/FlipContractInitTests#Configure-the-Initial-Blockchain-State":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractInitTests#Configure-the-Initial-Blockchain-State","role":"pseudoSymbol","url":"\/tutorials\/spacekit\/flipcontractinittests#Configure-the-Initial-Blockchain-State","type":"section","title":"Configure the Initial Blockchain State","abstract":[{"type":"text","text":"Smart contracts are permissionless programs that often manage valuable assets. Because of this, writing comprehensive tests for both successful and failure scenarios is essential."}],"kind":"section"},"doc://SpaceKit/tutorials/SpaceKit/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract":{"type":"section","kind":"section","url":"\/tutorials\/spacekit\/installingtools#Initializing-and-Compiling-Your-First-Smart-Contract","abstract":[{"text":"Before writing your first smart contract with SpaceKit, ensure you have the necessary tools installed.","type":"text"}],"title":"Initializing and Compiling Your First Smart Contract","role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract"},"FlipContractInitTestsSection2Step7.swift":{"identifier":"FlipContractInitTestsSection2Step7.swift","fileType":"swift","type":"file","content":["import SpaceKitTesting","import Flip","","private let PLAYER_ADDRESS = \"player\"","private let BOUNTY_ADDRESS = \"bounty\"","private let OWNER_ADDRESS = \"owner\"","private let CONTRACT_ADDRESS = \"contract\"","private let USDC_TOKEN_IDENTIFIER_STRING = \"USDC-abcdef\""],"highlights":[{"line":8}],"fileName":"FlipTest.swift","syntax":"swift"},"doc://SpaceKit/tutorials/SpaceKit/FlipContractWriteTheStorage#Implement-Contract-Storage":{"url":"\/tutorials\/spacekit\/flipcontractwritethestorage#Implement-Contract-Storage","kind":"section","type":"section","role":"pseudoSymbol","title":"Implement Contract Storage","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteTheStorage#Implement-Contract-Storage","abstract":[{"type":"text","text":"With your Flip project initialized, you’re ready to begin implementing the smart contract. The contract is composed of the following components:"}]},"doc://SpaceKit/tutorials/SpaceKit/Build-a-Coin-Flip-Contract/Define-the-Storage-for-the-Flip-Contract":{"title":"Define the Storage for the Flip Contract","role":"article","kind":"article","abstract":[],"type":"topic","url":"\/tutorials\/spacekit\/build-a-coin-flip-contract\/define-the-storage-for-the-flip-contract","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Build-a-Coin-Flip-Contract\/Define-the-Storage-for-the-Flip-Contract"},"doc://SpaceKit/tutorials/SpaceKit/Build-a-Coin-Flip-Contract/Add-Administrative-Endpoints-to-the-Flip-Contract":{"url":"\/tutorials\/spacekit\/build-a-coin-flip-contract\/add-administrative-endpoints-to-the-flip-contract","type":"topic","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Build-a-Coin-Flip-Contract\/Add-Administrative-Endpoints-to-the-Flip-Contract","kind":"article","abstract":[],"role":"article","title":"Add Administrative Endpoints to the Flip Contract"},"doc://SpaceKit/tutorials/SpaceKit/Getting-Started/Installing-the-Tools":{"abstract":[],"role":"article","kind":"article","url":"\/tutorials\/spacekit\/getting-started\/installing-the-tools","type":"topic","title":"Installing the Tools","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Getting-Started\/Installing-the-Tools"},"doc://SpaceKit/tutorials/SpaceKit/GetInfo#Accessing-Transaction-Context-Data":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo#Accessing-Transaction-Context-Data","role":"pseudoSymbol","url":"\/tutorials\/spacekit\/getinfo#Accessing-Transaction-Context-Data","abstract":[{"type":"text","text":"Many smart contracts rely on contextual data to execute their operations effectively. This data can include input payments, the caller’s address, the current time, the balance of a specific account, or even the contract owner."}],"title":"Accessing Transaction Context Data","type":"section","kind":"section"},"FlipContractInitTestsSection4Step8.swift":{"fileType":"swift","fileName":"FlipTest.swift","content":["import SpaceKitTesting","import Flip","","private let PLAYER_ADDRESS = \"player\"","private let BOUNTY_ADDRESS = \"bounty\"","private let OWNER_ADDRESS = \"owner\"","private let CONTRACT_ADDRESS = \"contract\"","private let USDC_TOKEN_IDENTIFIER_STRING = \"USDC-abcdef\"","private var USDC_TOKEN_IDENTIFIER: TokenIdentifier {","    \"\\(USDC_TOKEN_IDENTIFIER_STRING)\"","}","","final class FlipTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: PLAYER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: BOUNTY_ADDRESS,","                balance: 0","            ),","            WorldAccount(","                address: OWNER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: CONTRACT_ADDRESS,","                balance: 0,","                controllers: [","                    AdminController.self,","                    GameController.self,","                    StorageController.self","                ]","            )","        ]","    }","    ","    private func initContract() throws {","        try self.deployContract(","            at: CONTRACT_ADDRESS,","            arguments: [","               500,","               100,","               1","            ],","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","    }","    ","    private func setupEgld() throws {","        let adminController = self.instantiateController(","            AdminController.self,","            for: CONTRACT_ADDRESS","        )!","    }","}"],"identifier":"FlipContractInitTestsSection4Step8.swift","syntax":"swift","highlights":[{"line":71},{"line":72},{"line":73},{"line":74}],"type":"file"},"FlipContractInitTestsSection4Step2.swift":{"identifier":"FlipContractInitTestsSection4Step2.swift","fileType":"swift","type":"file","content":["import SpaceKitTesting","import Flip","","private let PLAYER_ADDRESS = \"player\"","private let BOUNTY_ADDRESS = \"bounty\"","private let OWNER_ADDRESS = \"owner\"","private let CONTRACT_ADDRESS = \"contract\"","private let USDC_TOKEN_IDENTIFIER_STRING = \"USDC-abcdef\"","private var USDC_TOKEN_IDENTIFIER: TokenIdentifier {","    \"\\(USDC_TOKEN_IDENTIFIER_STRING)\"","}","","final class FlipTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: PLAYER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: BOUNTY_ADDRESS,","                balance: 0","            ),","            WorldAccount(","                address: OWNER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: CONTRACT_ADDRESS,","                balance: 0,","                controllers: [","                    AdminController.self,","                    GameController.self,","                    StorageController.self","                ]","            )","        ]","    }","    ","    private func initContract() throws {","    }","}"],"highlights":[{"line":55},{"line":56},{"line":57}],"fileName":"FlipTest.swift","syntax":"swift"},"FlipContractInitTestsSection4Step7.swift":{"identifier":"FlipContractInitTestsSection4Step7.swift","fileType":"swift","highlights":[{"line":69},{"line":70},{"line":71}],"fileName":"FlipTest.swift","syntax":"swift","type":"file","content":["import SpaceKitTesting","import Flip","","private let PLAYER_ADDRESS = \"player\"","private let BOUNTY_ADDRESS = \"bounty\"","private let OWNER_ADDRESS = \"owner\"","private let CONTRACT_ADDRESS = \"contract\"","private let USDC_TOKEN_IDENTIFIER_STRING = \"USDC-abcdef\"","private var USDC_TOKEN_IDENTIFIER: TokenIdentifier {","    \"\\(USDC_TOKEN_IDENTIFIER_STRING)\"","}","","final class FlipTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: PLAYER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: BOUNTY_ADDRESS,","                balance: 0","            ),","            WorldAccount(","                address: OWNER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: CONTRACT_ADDRESS,","                balance: 0,","                controllers: [","                    AdminController.self,","                    GameController.self,","                    StorageController.self","                ]","            )","        ]","    }","    ","    private func initContract() throws {","        try self.deployContract(","            at: CONTRACT_ADDRESS,","            arguments: [","               500,","               100,","               1","            ],","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","    }","    ","    private func setupEgld() throws {","    }","}"]},"doc://SpaceKit/tutorials/SpaceKit/StoreValues#Working-with-Storage-for-Single-Value-Persistence":{"title":"Working with @Storage for Single Value Persistence","role":"pseudoSymbol","abstract":[{"type":"text","text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory."}],"kind":"section","url":"\/tutorials\/spacekit\/storevalues#Working-with-Storage-for-Single-Value-Persistence","type":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues#Working-with-Storage-for-Single-Value-Persistence"},"doc://SpaceKit/tutorials/SpaceKit/Deep-Dive-into-SpaceKit-Concepts/Calling-Contracts-Across-Shards":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Calling-Contracts-Across-Shards","title":"Calling Contracts Across Shards","kind":"article","url":"\/tutorials\/spacekit\/deep-dive-into-spacekit-concepts\/calling-contracts-across-shards","abstract":[],"type":"topic","role":"article"},"doc://SpaceKit/tutorials/SpaceKit/FlipContractWriteTheGame#Implement-the-flip-Endpoint":{"kind":"section","abstract":[{"type":"text","text":"With the storage and administrative endpoints complete, it’s time to build the core gameplay mechanics."}],"type":"section","url":"\/tutorials\/spacekit\/flipcontractwritethegame#Implement-the-flip-Endpoint","role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteTheGame#Implement-the-flip-Endpoint","title":"Implement the flip Endpoint"},"FlipContractInitTestsSection3Step6.swift":{"fileName":"FlipTest.swift","highlights":[{"line":32},{"line":33},{"line":34},{"line":35},{"line":36},{"line":37},{"line":38},{"line":39},{"line":40},{"line":41},{"line":42},{"line":43}],"content":["import SpaceKitTesting","import Flip","","private let PLAYER_ADDRESS = \"player\"","private let BOUNTY_ADDRESS = \"bounty\"","private let OWNER_ADDRESS = \"owner\"","private let CONTRACT_ADDRESS = \"contract\"","private let USDC_TOKEN_IDENTIFIER_STRING = \"USDC-abcdef\"","private var USDC_TOKEN_IDENTIFIER: TokenIdentifier {","    \"\\(USDC_TOKEN_IDENTIFIER_STRING)\"","}","","final class FlipTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: PLAYER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: BOUNTY_ADDRESS,","                balance: 0","            ),","            WorldAccount(","                address: OWNER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","        ]","    }","}"],"identifier":"FlipContractInitTestsSection3Step6.swift","syntax":"swift","type":"file","fileType":"swift"},"doc://SpaceKit/tutorials/SpaceKit/CodingYourFirstContract#Testing-the-Contract":{"url":"\/tutorials\/spacekit\/codingyourfirstcontract#Testing-the-Contract","role":"pseudoSymbol","kind":"section","title":"Testing the Contract","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Testing-the-Contract","type":"section","abstract":[{"type":"text","text":"In this tutorial, you’ll create a simple smart contract that manages a counter. Users can increment or decrement the counter, and the changes are persisted across contract executions."}]}}}