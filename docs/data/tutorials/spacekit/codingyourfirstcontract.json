{"schemaVersion":{"minor":3,"patch":0,"major":0},"identifier":{"url":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract","interfaceLanguage":"swift"},"metadata":{"categoryPathComponent":"SpaceKit","title":"Building Your First Smart Contract","role":"project","category":"SpaceKit"},"hierarchy":{"paths":[["doc:\/\/SpaceKit\/tutorials\/SpaceKit","doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Getting-Started","doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Getting-Started\/Building-Your-First-Smart-Contract"]],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit","modules":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Getting-Started\/Installing-the-Tools","projects":[{"sections":[{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Installing-SpaceKits-Dependencies"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Setting-Up-the-SpaceKit-CLI","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract","kind":"task"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools"}]},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Getting-Started\/Building-Your-First-Smart-Contract","projects":[{"sections":[{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Initializing-the-Project"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Writing-the-Contract-Code","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Testing-the-Contract"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract"}]},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Exploring-SpaceKit's-Types","projects":[{"sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Understanding-the-Buffer-Type"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Working-with-the-BigUint-Type","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Working-with-the-Vector-Type","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Creating-Your-Own-Types"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes"}]},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Persisting-Data-Across-Executions","projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues","sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues#Working-with-Storage-for-Single-Value-Persistence","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage","kind":"task"}]}]},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Retrieving-Information-from-the-Blockchain","projects":[{"sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo#Accessing-Transaction-Context-Data","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo#Accessing-Blockchain-Context-Data","kind":"task"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo"}]},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Interacting-with-Other-Contracts","projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls","sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls#Declare-the-Callee-Proxy","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls#Perform-a-Synchronous-Call","kind":"task"}]}]},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Calling-Contracts-Across-Shards","projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls","sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls#Declare-the-Callee-Proxy","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls#Perform-an-Asynchronous-Call"}]}]},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Create-and-Manage-Tokens\/Creating-and-Understanding-Tokens","projects":[{"sections":[{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/UnderstandTokens#Issuing-a-Fungible-Token-from-Your-Contract"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/UnderstandTokens#Issuing-a-Non-Fungible-Token-from-Your-Contract"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/UnderstandTokens#Issuing-a-Semi-Fungible-Token-from-Your-Contract","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/UnderstandTokens#Issuing-a-Meta-ESDT-from-Your-Contract"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/UnderstandTokens"}]},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Create-and-Manage-Tokens\/Managing-Fungible-Tokens","projects":[{"sections":[{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnFungibleTokens#Assign-Mint-and-Burn-Roles"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnFungibleTokens#Mint-New-Tokens","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnFungibleTokens#Burn-Tokens","kind":"task"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnFungibleTokens"}]},{"projects":[{"sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnNonFungibleTokens#Assign-Create-AddQuantity-and-Burn-Roles","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnNonFungibleTokens#Create-a-New-Nonce"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnNonFungibleTokens#Add-Quantity-to-an-Existing-Nonce","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnNonFungibleTokens#Burn-Tokens"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnNonFungibleTokens"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Create-and-Manage-Tokens\/Managing-Non-Fungible-Tokens"},{"projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/TokenAttributes","sections":[{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/TokenAttributes#Implementing-the-lockFunds-Endpoint"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/TokenAttributes#Implementing-the-unlockFunds-Endpoint"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/TokenAttributes#Implementing-the-changeTokenLockDuration-Endpoint","kind":"task"}]}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Create-and-Manage-Tokens\/Enhancing-Contracts-with-Token-Attributes"}]},"sections":[{"kind":"hero","estimatedTimeInMinutes":20,"title":"Building Your First Smart Contract","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In this tutorial, you’ll create a simple smart contract that manages a counter. Users can increment or decrement the counter, and the changes are persisted across contract executions."}]}],"chapter":"Building Your First Smart Contract"},{"kind":"tasks","tasks":[{"contentSection":[{"mediaPosition":"trailing","kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Before writing the contract, set up the project using the SpaceKit command-line tool."}]}]}],"stepsSection":[{"type":"step","media":"InstallingToolsSection1Step1.png","caption":[],"content":[{"inlineContent":[{"type":"text","text":"Open a terminal."}],"type":"paragraph"}],"code":null,"runtimePreview":null},{"runtimePreview":null,"code":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Navigate to your desired directory and execute the command ","type":"text"},{"type":"codeVoice","code":"space init Counter"},{"text":".","type":"text"}]}],"media":"CodingFirstContractSection1Step2.png","caption":[{"inlineContent":[{"type":"text","text":"This command generates a new folder named “Counter.”"}],"type":"paragraph"}],"type":"step"},{"media":"CodingFirstContractSection1Step3.png","caption":[{"inlineContent":[{"text":"In this tutorial, Xcode is used. If using other environments, consult their respective guides.","type":"text"}],"type":"paragraph"}],"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Open the “Counter” directory in your preferred Swift IDE. Xcode or VSCode (with the official Swift extension) are recommended."}]}],"runtimePreview":null,"type":"step"},{"runtimePreview":null,"media":"CodingFirstContractSection1Step4.png","code":null,"type":"step","caption":[{"inlineContent":[{"type":"text","text":"In Xcode, go to "},{"type":"strong","inlineContent":[{"text":"Product > Build","type":"text"}]},{"text":" or use the shortcut ","type":"text"},{"code":"⌘ + B","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"(Optional) Build the project for improved IDE performance and macro generation."}]}]}],"title":"Initializing the Project","anchor":"Initializing-the-Project"},{"stepsSection":[{"code":"CodingFirstContractSection2Step1.swift","caption":[],"type":"step","media":null,"runtimePreview":null,"content":[{"inlineContent":[{"text":"Open the ","type":"text"},{"code":"Contracts\/Counter\/Source\/lib.swift","type":"codeVoice"},{"text":" file and clear its contents.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Import the SpaceKit framework by adding "},{"type":"codeVoice","code":"import SpaceKit"},{"type":"text","text":" at the top of the file."}],"type":"paragraph"}],"runtimePreview":null,"caption":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Note:","type":"text"}],"type":"strong"},{"text":" Only the SpaceKit library is compatible with SpaceVM. Avoid importing Foundation or other frameworks.","type":"text"}]}],"type":"step","media":null,"code":"CodingFirstContractSection2Step2.swift"},{"runtimePreview":null,"type":"step","content":[{"inlineContent":[{"text":"Define the contract by creating a struct annotated with ","type":"text"},{"type":"codeVoice","code":"@Controller"},{"text":".","type":"text"}],"type":"paragraph"}],"media":null,"code":"CodingFirstContractSection2Step3.swift","caption":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Tip:"}]},{"text":" You can define multiple controllers in a single or multiple files. A contract consists of all the controllers declared.","type":"text"}]}]},{"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the "},{"code":"BigUint","type":"codeVoice"},{"text":" type to handle arbitrarily large numbers.","type":"text"}]}],"runtimePreview":null,"media":null,"code":"CodingFirstContractSection2Step4.swift","content":[{"type":"paragraph","inlineContent":[{"text":"Add a storage property to persist the counter using ","type":"text"},{"code":"@Storage(key: \"counter\")","type":"codeVoice"},{"type":"text","text":"."}]}],"type":"step"},{"media":null,"code":"CodingFirstContractSection2Step5.swift","runtimePreview":null,"caption":[],"content":[{"type":"paragraph","inlineContent":[{"text":"Create an ","type":"text"},{"type":"codeVoice","code":"increase"},{"text":" endpoint to increment the counter. This endpoint accepts a parameter specifying the increment amount.","type":"text"}]}],"type":"step"},{"code":"CodingFirstContractSection2Step6.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add a "},{"code":"decrease","type":"codeVoice"},{"type":"text","text":" endpoint to decrement the counter."}]}],"media":null,"type":"step","runtimePreview":null,"caption":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Note:","type":"text"}]},{"type":"text","text":" The "},{"type":"codeVoice","code":"BigUint"},{"type":"text","text":" type prevents negative values. If a decrement results in a negative value, the operation fails without any changes."}],"type":"paragraph"}]},{"media":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Implement a view function "},{"type":"codeVoice","code":"getCounter"},{"type":"text","text":" to retrieve the counter value."}]}],"code":"CodingFirstContractSection2Step7.swift","caption":[{"inlineContent":[{"type":"text","text":"This function does not modify the contract’s state, that’s why we call it “view”."}],"type":"paragraph"}],"runtimePreview":null},{"runtimePreview":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add an initializer to set the initial counter value during contract deployment."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Tip:"}]},{"type":"text","text":" The initializer is a global function executed once during deployment. It is optional."}]}],"media":null,"code":"CodingFirstContractSection2Step8.swift"}],"anchor":"Writing-the-Contract-Code","title":"Writing the Contract Code","contentSection":[{"mediaPosition":"trailing","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s write the code for the smart contract."}]}],"kind":"contentAndMedia"}]},{"stepsSection":[{"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Open the "},{"code":"Contracts\/Counter\/Tests\/CounterTests","type":"codeVoice"},{"type":"text","text":" directory. Replace any files with a new file named "},{"code":"CounterTests.swift","type":"codeVoice"},{"type":"text","text":"."}]}],"media":"CodingFirstContractSection3Step1.png","runtimePreview":null,"caption":[],"code":null},{"caption":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Note:"}]},{"type":"text","text":" XCTest is the official framework for unit tests in Swift."}],"type":"paragraph"}],"media":null,"code":"CodingFirstContractSection3Step2.swift","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Import "},{"code":"SpaceKit","type":"codeVoice"},{"text":", your contract, and ","type":"text"},{"type":"codeVoice","code":"XCTest"},{"type":"text","text":" into the test file."}]}],"type":"step"},{"type":"step","media":null,"code":"CodingFirstContractSection3Step3.swift","runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"Define the contract address. SwiftVM assigns a deterministic address for your contract."}],"type":"paragraph"}],"caption":[]},{"caption":[{"inlineContent":[{"inlineContent":[{"text":"Important:","type":"text"}],"type":"strong"},{"text":" Avoid overriding ","type":"text"},{"code":"setUp","type":"codeVoice"},{"type":"text","text":" and "},{"code":"tearDown","type":"codeVoice"},{"text":" methods.","type":"text"}],"type":"paragraph"}],"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a test class inheriting from "},{"type":"codeVoice","code":"ContractTestCase"},{"text":".","type":"text"}]}],"media":null,"code":"CodingFirstContractSection3Step4.swift","runtimePreview":null},{"content":[{"type":"paragraph","inlineContent":[{"text":"Override ","type":"text"},{"type":"codeVoice","code":"initialAccounts"},{"type":"text","text":" to define the contract address in SwiftVM."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Important:","type":"text"}]},{"type":"text","text":" Include all "},{"code":"@Controller","type":"codeVoice"},{"type":"text","text":" annotated structs in the "},{"code":"controllers","type":"codeVoice"},{"text":" parameter.","type":"text"}]}],"runtimePreview":null,"media":null,"code":"CodingFirstContractSection3Step5.swift","type":"step"},{"runtimePreview":null,"code":"CodingFirstContractSection3Step6.swift","caption":[],"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Write a unit test for deploying the contract with an initial counter value of zero.","type":"text"}]}],"media":null},{"media":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Deploy the contract using "},{"type":"codeVoice","code":"self.deployContract"},{"type":"text","text":"."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This calls your @Init function if defined and captures any deployment errors."}]}],"code":"CodingFirstContractSection3Step7.swift","runtimePreview":null},{"runtimePreview":null,"type":"step","media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Instantiate the "},{"type":"codeVoice","code":"CounterController"},{"type":"text","text":" for interacting with the contract."}]}],"caption":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Note:"}],"type":"strong"},{"text":" The instantiated controller includes, on each endpoint, optional parameters to mock transaction data.","type":"text"}]}],"code":"CodingFirstContractSection3Step8.swift"},{"caption":[],"code":"CodingFirstContractSection3Step9.swift","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Verify the counter’s initial value with the ","type":"text"},{"type":"codeVoice","code":"getCounter"},{"type":"text","text":" view."}]}],"media":null,"type":"step"},{"media":null,"caption":[],"code":"CodingFirstContractSection3Step10.swift","runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"Add a unit test to verify deploying the contract with a non-zero initial value."}],"type":"paragraph"}],"type":"step"},{"caption":[],"media":null,"code":"CodingFirstContractSection3Step11.swift","runtimePreview":null,"content":[{"inlineContent":[{"text":"Create unit tests for the increase endpoint, similar to the deployment tests.","type":"text"}],"type":"paragraph"}],"type":"step"},{"media":null,"content":[{"inlineContent":[{"text":"Repeat for the decrease endpoint.","type":"text"}],"type":"paragraph"}],"code":"CodingFirstContractSection3Step12.swift","caption":[],"type":"step","runtimePreview":null},{"caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add a test to ensure failure when trying to decrease the counter below zero."}]}],"media":null,"code":"CodingFirstContractSection3Step13.swift","type":"step","runtimePreview":null},{"code":null,"runtimePreview":null,"caption":[],"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Run the tests to confirm your contract works correctly!"}]}],"media":"CodingFirstContractSection3Step14.png"}],"title":"Testing the Contract","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Test your contract using SpaceKit’s SwiftVM emulator."}]}],"mediaPosition":"trailing"}],"anchor":"Testing-the-Contract"}]}],"kind":"project","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/tutorials\/spacekit\/codingyourfirstcontract"]}],"references":{"CodingFirstContractSection1Step3.png":{"type":"image","identifier":"CodingFirstContractSection1Step3.png","alt":"Xcode project selection screen with 'Counter' highlighted.","variants":[{"url":"\/images\/SpaceKit\/CodingFirstContractSection1Step3.png","traits":["1x","light"]}]},"CodingFirstContractSection3Step1.png":{"variants":[{"url":"\/images\/SpaceKit\/CodingFirstContractSection3Step1.png","traits":["1x","light"]}],"alt":"File tree showing newly created `CounterTests.swift`.","type":"image","identifier":"CodingFirstContractSection3Step1.png"},"doc://SpaceKit/tutorials/SpaceKit/Getting-Started/Building-Your-First-Smart-Contract":{"role":"article","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Getting-Started\/Building-Your-First-Smart-Contract","abstract":[],"kind":"article","url":"\/tutorials\/spacekit\/getting-started\/building-your-first-smart-contract","type":"topic","title":"Building Your First Smart Contract"},"doc://SpaceKit/tutorials/SpaceKit/OperationsOnNonFungibleTokens#Create-a-New-Nonce":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnNonFungibleTokens#Create-a-New-Nonce","kind":"section","type":"section","abstract":[{"type":"text","text":"Non-fungible tokens (NFTs) are unique digital assets that cannot be interchanged. Each NFT is associated with a unique identifier, known as a nonce. You can think of it like an airline ticket—each ticket is assigned to a specific passenger, with individual preferences and details."}],"role":"pseudoSymbol","url":"\/tutorials\/spacekit\/operationsonnonfungibletokens#Create-a-New-Nonce","title":"Create a New Nonce"},"doc://SpaceKit/tutorials/SpaceKit/Getting-Started/Installing-the-Tools":{"abstract":[],"kind":"article","title":"Installing the Tools","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Getting-Started\/Installing-the-Tools","url":"\/tutorials\/spacekit\/getting-started\/installing-the-tools","type":"topic","role":"article"},"CodingFirstContractSection1Step2.png":{"identifier":"CodingFirstContractSection1Step2.png","type":"image","alt":"Output of the `space init Counter` command.","variants":[{"url":"\/images\/SpaceKit\/CodingFirstContractSection1Step2.png","traits":["1x","light"]}]},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Working-with-the-BigUint-Type":{"title":"Working with the BigUint Type","url":"\/tutorials\/spacekit\/familiarizewithtypes#Working-with-the-BigUint-Type","role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Working-with-the-BigUint-Type","type":"section","kind":"section","abstract":[{"text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}]},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges":{"title":"Handling Heap Allocation Challenges","role":"pseudoSymbol","type":"section","url":"\/tutorials\/spacekit\/familiarizewithtypes#Handling-Heap-Allocation-Challenges","abstract":[{"text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}],"kind":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges"},"doc://SpaceKit/tutorials/SpaceKit/UnderstandTokens#Issuing-a-Non-Fungible-Token-from-Your-Contract":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/UnderstandTokens#Issuing-a-Non-Fungible-Token-from-Your-Contract","kind":"section","abstract":[{"text":"Learn about the ESDT standard used in the SpaceKit framework, a token model that supports fungible tokens, non-fungible tokens (NFTs), semi-fungible tokens, and meta-esdt tokens.","type":"text"},{"text":" ","type":"text"},{"text":"The SpaceKit framework uses a token standard called ESDT. This standard defines four types of tokens: fungible, non-fungible (NFT), semi-fungible, and meta-esdt.","type":"text"}],"url":"\/tutorials\/spacekit\/understandtokens#Issuing-a-Non-Fungible-Token-from-Your-Contract","title":"Issuing a Non-Fungible Token from Your Contract","type":"section","role":"pseudoSymbol"},"CodingFirstContractSection3Step10.swift":{"identifier":"CodingFirstContractSection3Step10.swift","highlights":[{"line":36},{"line":37},{"line":38},{"line":39},{"line":40},{"line":41},{"line":42},{"line":43},{"line":44},{"line":45},{"line":46},{"line":47},{"line":48},{"line":49},{"line":50},{"line":51},{"line":52},{"line":53}],"fileType":"swift","content":["import SpaceKit","import Counter","import SpaceKitTesting","","let COUNTER_ADDRESS = \"counter\"","","final class CounterTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: COUNTER_ADDRESS,","                controllers: [","                    CounterController.self","                ]","            )","        ]","    }","    ","    func testDeployCounterInitialValueZero() throws {","        try self.deployContract(","            at: COUNTER_ADDRESS,","            arguments: [","                0 \/\/ Initial value","            ]","        )","        ","        let controller = self.instantiateController(","            CounterController.self,","            for: COUNTER_ADDRESS","        )!","        ","        let result = try controller.getCounter()","        ","        XCTAssertEqual(result, 0)","    }","    ","    func testDeployCounterInitialValueNonZero() throws {","        try self.deployContract(","            at: COUNTER_ADDRESS,","            arguments: [","                15 \/\/ Initial value","            ]","        )","        ","        let controller = self.instantiateController(","            CounterController.self,","            for: COUNTER_ADDRESS","        )!","        ","        let result = try controller.getCounter()","        ","        XCTAssertEqual(result, 15)","    }","}"],"type":"file","syntax":"swift","fileName":"CounterTests.swift"},"doc://SpaceKit/tutorials/SpaceKit/AsyncCalls":{"title":"Interacting with Contracts Across Shards","role":"project","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls","kind":"project","type":"topic","estimatedTime":"15min","url":"\/tutorials\/spacekit\/asynccalls","abstract":[{"type":"text","text":"Blockchain platforms using SpaceVM enable seamless execution within a sharded environment. Sharding divides a blockchain’s global state and validation workload into smaller, manageable units known as shards. This method enhances scalability without compromising decentralization, allowing nodes to operate without significant computational resources."}]},"doc://SpaceKit/tutorials/SpaceKit/GetInfo":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo","estimatedTime":"10min","kind":"project","abstract":[{"text":"Many smart contracts rely on contextual data to execute their operations effectively. This data can include input payments, the caller’s address, the current time, the balance of a specific account, or even the contract owner.","type":"text"}],"url":"\/tutorials\/spacekit\/getinfo","title":"Retrieving Information from the Blockchain","type":"topic","role":"project"},"doc://SpaceKit/tutorials/SpaceKit/SyncCalls":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls","kind":"project","type":"topic","abstract":[{"type":"text","text":"Smart contracts can interact not only with users but also with other smart contracts. This enables more advanced protocols by leveraging existing ones. For example, you could integrate a decentralized exchange directly into your contract to perform token swaps. Decentralized applications often involve multiple contracts, each with a dedicated role, working together to achieve complex functionality—similar to microservices in backend systems."}],"role":"project","url":"\/tutorials\/spacekit\/synccalls","estimatedTime":"15min","title":"Interact with Other Contracts"},"CodingFirstContractSection2Step3.swift":{"highlights":[{"line":2},{"line":3},{"line":4},{"line":5}],"content":["import SpaceKit","","@Controller public struct CounterController {","    ","}"],"syntax":"swift","type":"file","fileName":"lib.swift","fileType":"swift","identifier":"CodingFirstContractSection2Step3.swift"},"CodingFirstContractSection2Step2.swift":{"highlights":[{"line":1}],"content":["import SpaceKit"],"syntax":"swift","type":"file","fileName":"lib.swift","fileType":"swift","identifier":"CodingFirstContractSection2Step2.swift"},"doc://SpaceKit/tutorials/SpaceKit/StoreValues#Working-with-Storage-for-Single-Value-Persistence":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues#Working-with-Storage-for-Single-Value-Persistence","url":"\/tutorials\/spacekit\/storevalues#Working-with-Storage-for-Single-Value-Persistence","abstract":[{"type":"text","text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory."}],"kind":"section","title":"Working with @Storage for Single Value Persistence","type":"section","role":"pseudoSymbol"},"doc://SpaceKit/tutorials/SpaceKit/OperationsOnNonFungibleTokens#Assign-Create-AddQuantity-and-Burn-Roles":{"title":"Assign Create, AddQuantity, and Burn Roles","role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnNonFungibleTokens#Assign-Create-AddQuantity-and-Burn-Roles","kind":"section","type":"section","url":"\/tutorials\/spacekit\/operationsonnonfungibletokens#Assign-Create-AddQuantity-and-Burn-Roles","abstract":[{"type":"text","text":"Non-fungible tokens (NFTs) are unique digital assets that cannot be interchanged. Each NFT is associated with a unique identifier, known as a nonce. You can think of it like an airline ticket—each ticket is assigned to a specific passenger, with individual preferences and details."}]},"doc://SpaceKit/tutorials/SpaceKit/Create-and-Manage-Tokens/Creating-and-Understanding-Tokens":{"role":"article","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Create-and-Manage-Tokens\/Creating-and-Understanding-Tokens","abstract":[],"kind":"article","url":"\/tutorials\/spacekit\/create-and-manage-tokens\/creating-and-understanding-tokens","type":"topic","title":"Creating and Understanding Tokens"},"doc://SpaceKit/tutorials/SpaceKit/CodingYourFirstContract":{"role":"project","estimatedTime":"20min","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract","abstract":[{"type":"text","text":"In this tutorial, you’ll create a simple smart contract that manages a counter. Users can increment or decrement the counter, and the changes are persisted across contract executions."}],"kind":"project","url":"\/tutorials\/spacekit\/codingyourfirstcontract","type":"topic","title":"Building Your First Smart Contract"},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes","kind":"project","type":"topic","abstract":[{"type":"text","text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM."}],"role":"project","url":"\/tutorials\/spacekit\/familiarizewithtypes","estimatedTime":"20min","title":"Exploring SpaceKit's Types"},"doc://SpaceKit/tutorials/SpaceKit/Create-and-Manage-Tokens/Managing-Fungible-Tokens":{"abstract":[],"kind":"article","title":"Managing Fungible Tokens","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Create-and-Manage-Tokens\/Managing-Fungible-Tokens","url":"\/tutorials\/spacekit\/create-and-manage-tokens\/managing-fungible-tokens","type":"topic","role":"article"},"doc://SpaceKit/tutorials/SpaceKit/UnderstandTokens#Issuing-a-Semi-Fungible-Token-from-Your-Contract":{"role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/UnderstandTokens#Issuing-a-Semi-Fungible-Token-from-Your-Contract","abstract":[{"type":"text","text":"Learn about the ESDT standard used in the SpaceKit framework, a token model that supports fungible tokens, non-fungible tokens (NFTs), semi-fungible tokens, and meta-esdt tokens."},{"type":"text","text":" "},{"type":"text","text":"The SpaceKit framework uses a token standard called ESDT. This standard defines four types of tokens: fungible, non-fungible (NFT), semi-fungible, and meta-esdt."}],"kind":"section","url":"\/tutorials\/spacekit\/understandtokens#Issuing-a-Semi-Fungible-Token-from-Your-Contract","type":"section","title":"Issuing a Semi-Fungible Token from Your Contract"},"doc://SpaceKit/tutorials/SpaceKit/OperationsOnFungibleTokens#Mint-New-Tokens":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnFungibleTokens#Mint-New-Tokens","kind":"section","type":"section","abstract":[{"type":"text","text":"Fungible tokens function similarly to traditional currencies, making them the simplest type of token to work with."}],"role":"pseudoSymbol","url":"\/tutorials\/spacekit\/operationsonfungibletokens#Mint-New-Tokens","title":"Mint New Tokens"},"CodingFirstContractSection3Step2.swift":{"highlights":[],"content":["import SpaceKit","import Counter","import SpaceKitTesting"],"syntax":"swift","type":"file","fileName":"CounterTests.swift","fileType":"swift","identifier":"CodingFirstContractSection3Step2.swift"},"doc://SpaceKit/tutorials/SpaceKit/OperationsOnNonFungibleTokens#Burn-Tokens":{"abstract":[{"text":"Non-fungible tokens (NFTs) are unique digital assets that cannot be interchanged. Each NFT is associated with a unique identifier, known as a nonce. You can think of it like an airline ticket—each ticket is assigned to a specific passenger, with individual preferences and details.","type":"text"}],"kind":"section","title":"Burn Tokens","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnNonFungibleTokens#Burn-Tokens","url":"\/tutorials\/spacekit\/operationsonnonfungibletokens#Burn-Tokens","type":"section","role":"pseudoSymbol"},"CodingFirstContractSection2Step6.swift":{"highlights":[{"line":9},{"line":10},{"line":11},{"line":12}],"content":["import SpaceKit","","@Controller public struct CounterController {","    @Storage(key: \"counter\") var counter: BigUint","    ","    public mutating func increase(value: BigUint) {","        self.counter = self.counter + value","    }","    ","    public mutating func decrease(value: BigUint) {","        self.counter = self.counter - value","    }","}"],"syntax":"swift","type":"file","fileName":"lib.swift","fileType":"swift","identifier":"CodingFirstContractSection2Step6.swift"},"doc://SpaceKit/tutorials/SpaceKit":{"title":"Meet SpaceKit","url":"\/tutorials\/spacekit","role":"overview","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit","type":"topic","kind":"overview","abstract":[{"text":"Discover how SpaceKit simplifies blockchain development using Swift. Dive into the world of Web3 with ease and efficiency.","type":"text"}]},"doc://SpaceKit/tutorials/SpaceKit/OperationsOnFungibleTokens#Assign-Mint-and-Burn-Roles":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnFungibleTokens#Assign-Mint-and-Burn-Roles","kind":"section","abstract":[{"text":"Fungible tokens function similarly to traditional currencies, making them the simplest type of token to work with.","type":"text"}],"url":"\/tutorials\/spacekit\/operationsonfungibletokens#Assign-Mint-and-Burn-Roles","title":"Assign Mint and Burn Roles","type":"section","role":"pseudoSymbol"},"doc://SpaceKit/tutorials/SpaceKit/TokenAttributes#Implementing-the-unlockFunds-Endpoint":{"role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/TokenAttributes#Implementing-the-unlockFunds-Endpoint","abstract":[{"type":"text","text":"The ESDT standard enables embedding custom data within non-fungible tokens, allowing developers to extend the functionality of their smart contracts. This additional data, referred to as “attributes,” is tied to the token and transfers along with it between wallets."}],"kind":"section","url":"\/tutorials\/spacekit\/tokenattributes#Implementing-the-unlockFunds-Endpoint","type":"section","title":"Implementing the unlockFunds Endpoint"},"CodingFirstContractSection2Step7.swift":{"highlights":[{"line":13},{"line":14},{"line":15},{"line":16}],"content":["import SpaceKit","","@Controller public struct CounterController {","    @Storage(key: \"counter\") var counter: BigUint","    ","    public mutating func increase(value: BigUint) {","        self.counter = self.counter + value","    }","    ","    public mutating func decrease(value: BigUint) {","        self.counter = self.counter - value","    }","    ","    public func getCounter() -> BigUint {","        return self.counter","    }","}"],"syntax":"swift","type":"file","fileName":"lib.swift","fileType":"swift","identifier":"CodingFirstContractSection2Step7.swift"},"doc://SpaceKit/tutorials/SpaceKit/AsyncCalls#Declare-the-Callee-Proxy":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls#Declare-the-Callee-Proxy","kind":"section","type":"section","abstract":[{"type":"text","text":"Blockchain platforms using SpaceVM enable seamless execution within a sharded environment. Sharding divides a blockchain’s global state and validation workload into smaller, manageable units known as shards. This method enhances scalability without compromising decentralization, allowing nodes to operate without significant computational resources."}],"role":"pseudoSymbol","url":"\/tutorials\/spacekit\/asynccalls#Declare-the-Callee-Proxy","title":"Declare the Callee Proxy"},"doc://SpaceKit/tutorials/SpaceKit/UnderstandTokens":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/UnderstandTokens","kind":"project","type":"topic","abstract":[{"type":"text","text":"Learn about the ESDT standard used in the SpaceKit framework, a token model that supports fungible tokens, non-fungible tokens (NFTs), semi-fungible tokens, and meta-esdt tokens."},{"type":"text","text":" "},{"type":"text","text":"The SpaceKit framework uses a token standard called ESDT. This standard defines four types of tokens: fungible, non-fungible (NFT), semi-fungible, and meta-esdt."}],"role":"project","url":"\/tutorials\/spacekit\/understandtokens","estimatedTime":"15min","title":"Understand the ESDT Standard"},"doc://SpaceKit/tutorials/SpaceKit/CodingYourFirstContract#Initializing-the-Project":{"role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Initializing-the-Project","abstract":[{"type":"text","text":"In this tutorial, you’ll create a simple smart contract that manages a counter. Users can increment or decrement the counter, and the changes are persisted across contract executions."}],"kind":"section","url":"\/tutorials\/spacekit\/codingyourfirstcontract#Initializing-the-Project","type":"section","title":"Initializing the Project"},"doc://SpaceKit/tutorials/SpaceKit/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract":{"abstract":[{"text":"Before writing your first smart contract with SpaceKit, ensure you have the necessary tools installed.","type":"text"}],"url":"\/tutorials\/spacekit\/installingtools#Initializing-and-Compiling-Your-First-Smart-Contract","title":"Initializing and Compiling Your First Smart Contract","type":"section","kind":"section","role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract"},"CodingFirstContractSection3Step11.swift":{"highlights":[{"line":54},{"line":55},{"line":56},{"line":57},{"line":58},{"line":59},{"line":60},{"line":61},{"line":62},{"line":63},{"line":64},{"line":65},{"line":66},{"line":67},{"line":68},{"line":69},{"line":70},{"line":71},{"line":72},{"line":73},{"line":74},{"line":75},{"line":76},{"line":77},{"line":78},{"line":79},{"line":80},{"line":81},{"line":82},{"line":83},{"line":84},{"line":85},{"line":86},{"line":87},{"line":88},{"line":89},{"line":90},{"line":91},{"line":92},{"line":93}],"content":["import SpaceKit","import Counter","import SpaceKitTesting","","let COUNTER_ADDRESS = \"counter\"","","final class CounterTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: COUNTER_ADDRESS,","                controllers: [","                    CounterController.self","                ]","            )","        ]","    }","    ","    func testDeployCounterInitialValueZero() throws {","        try self.deployContract(","            at: COUNTER_ADDRESS,","            arguments: [","                0 \/\/ Initial value","            ]","        )","        ","        let controller = self.instantiateController(","            CounterController.self,","            for: COUNTER_ADDRESS","        )!","        ","        let result = try controller.getCounter()","        ","        XCTAssertEqual(result, 0)","    }","    ","    func testDeployCounterInitialValueNonZero() throws {","        try self.deployContract(","            at: COUNTER_ADDRESS,","            arguments: [","                15 \/\/ Initial value","            ]","        )","        ","        let controller = self.instantiateController(","            CounterController.self,","            for: COUNTER_ADDRESS","        )!","        ","        let result = try controller.getCounter()","        ","        XCTAssertEqual(result, 15)","    }","    ","    func testIncreaseZero() throws {","        try self.deployContract(","            at: COUNTER_ADDRESS,","            arguments: [","                15 \/\/ Initial value","            ]","        )","        ","        var controller = self.instantiateController(","            CounterController.self,","            for: COUNTER_ADDRESS","        )!","        ","        try controller.increase(value: 0)","        ","        let result = try controller.getCounter()","        ","        XCTAssertEqual(result, 15)","    }","    ","    func testIncreaseMoreThanZero() throws {","        try self.deployContract(","            at: COUNTER_ADDRESS,","            arguments: [","                15 \/\/ Initial value","            ]","        )","        ","        var controller = self.instantiateController(","            CounterController.self,","            for: COUNTER_ADDRESS","        )!","        ","        try controller.increase(value: 5)","        ","        let result = try controller.getCounter()","        ","        XCTAssertEqual(result, 20)","    }","}"],"syntax":"swift","type":"file","fileName":"CounterTests.swift","fileType":"swift","identifier":"CodingFirstContractSection3Step11.swift"},"doc://SpaceKit/tutorials/SpaceKit/InstallingTools#Installing-SpaceKits-Dependencies":{"kind":"section","abstract":[{"type":"text","text":"Before writing your first smart contract with SpaceKit, ensure you have the necessary tools installed."}],"type":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Installing-SpaceKits-Dependencies","url":"\/tutorials\/spacekit\/installingtools#Installing-SpaceKits-Dependencies","title":"Installing SpaceKit's Dependencies","role":"pseudoSymbol"},"CodingFirstContractSection2Step4.swift":{"highlights":[{"line":4}],"content":["import SpaceKit","","@Controller public struct CounterController {","    @Storage(key: \"counter\") var counter: BigUint","}"],"syntax":"swift","type":"file","fileName":"lib.swift","fileType":"swift","identifier":"CodingFirstContractSection2Step4.swift"},"CodingFirstContractSection1Step4.png":{"variants":[{"url":"\/images\/SpaceKit\/CodingFirstContractSection1Step4.png","traits":["1x","light"]}],"alt":"Xcode's Product menu with 'Build' highlighted.","type":"image","identifier":"CodingFirstContractSection1Step4.png"},"doc://SpaceKit/tutorials/SpaceKit/InstallingTools":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools","kind":"project","type":"topic","abstract":[{"type":"text","text":"Before writing your first smart contract with SpaceKit, ensure you have the necessary tools installed."}],"role":"project","url":"\/tutorials\/spacekit\/installingtools","estimatedTime":"10min","title":"Install the Necessary Tools"},"doc://SpaceKit/tutorials/SpaceKit/InstallingTools#Setting-Up-the-SpaceKit-CLI":{"role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Setting-Up-the-SpaceKit-CLI","abstract":[{"type":"text","text":"Before writing your first smart contract with SpaceKit, ensure you have the necessary tools installed."}],"kind":"section","url":"\/tutorials\/spacekit\/installingtools#Setting-Up-the-SpaceKit-CLI","type":"section","title":"Setting Up the SpaceKit CLI"},"CodingFirstContractSection3Step14.png":{"identifier":"CodingFirstContractSection3Step14.png","type":"image","alt":"Xcode's test tab showing all tests passed.","variants":[{"url":"\/images\/SpaceKit\/CodingFirstContractSection3Step14.png","traits":["1x","light"]}]},"doc://SpaceKit/tutorials/SpaceKit/CodingYourFirstContract#Writing-the-Contract-Code":{"role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Writing-the-Contract-Code","abstract":[{"type":"text","text":"In this tutorial, you’ll create a simple smart contract that manages a counter. Users can increment or decrement the counter, and the changes are persisted across contract executions."}],"kind":"section","url":"\/tutorials\/spacekit\/codingyourfirstcontract#Writing-the-Contract-Code","type":"section","title":"Writing the Contract Code"},"doc://SpaceKit/tutorials/SpaceKit/SyncCalls#Declare-the-Callee-Proxy":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls#Declare-the-Callee-Proxy","url":"\/tutorials\/spacekit\/synccalls#Declare-the-Callee-Proxy","abstract":[{"type":"text","text":"Smart contracts can interact not only with users but also with other smart contracts. This enables more advanced protocols by leveraging existing ones. For example, you could integrate a decentralized exchange directly into your contract to perform token swaps. Decentralized applications often involve multiple contracts, each with a dedicated role, working together to achieve complex functionality—similar to microservices in backend systems."}],"kind":"section","title":"Declare the Callee Proxy","type":"section","role":"pseudoSymbol"},"InstallingToolsSection1Step1.png":{"variants":[{"url":"\/images\/SpaceKit\/InstallingToolsSection1Step1.png","traits":["1x","light"]}],"alt":"An empty terminal window.","type":"image","identifier":"InstallingToolsSection1Step1.png"},"doc://SpaceKit/tutorials/SpaceKit/OperationsOnFungibleTokens":{"title":"Managing Fungible Tokens","role":"project","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnFungibleTokens","kind":"project","type":"topic","estimatedTime":"15min","url":"\/tutorials\/spacekit\/operationsonfungibletokens","abstract":[{"type":"text","text":"Fungible tokens function similarly to traditional currencies, making them the simplest type of token to work with."}]},"CodingFirstContractSection3Step3.swift":{"highlights":[{"line":4},{"line":5}],"content":["import SpaceKit","import Counter","import SpaceKitTesting","","let COUNTER_ADDRESS = \"counter\""],"syntax":"swift","type":"file","fileName":"CounterTests.swift","fileType":"swift","identifier":"CodingFirstContractSection3Step3.swift"},"CodingFirstContractSection3Step8.swift":{"highlights":[{"line":26},{"line":27},{"line":28},{"line":29},{"line":30}],"content":["import SpaceKit","import Counter","import SpaceKitTesting","","let COUNTER_ADDRESS = \"counter\"","","final class CounterTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: COUNTER_ADDRESS,","                controllers: [","                    CounterController.self","                ]","            )","        ]","    }","    ","    func testDeployCounterInitialValueZero() throws {","        try self.deployContract(","            at: COUNTER_ADDRESS,","            arguments: [","                0 \/\/ Initial value","            ]","        )","        ","        let controller = self.instantiateController(","            CounterController.self,","            for: COUNTER_ADDRESS","        )!","    }","}"],"syntax":"swift","type":"file","fileName":"CounterTests.swift","fileType":"swift","identifier":"CodingFirstContractSection3Step8.swift"},"CodingFirstContractSection3Step9.swift":{"syntax":"swift","fileType":"swift","content":["import SpaceKit","import Counter","import SpaceKitTesting","","let COUNTER_ADDRESS = \"counter\"","","final class CounterTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: COUNTER_ADDRESS,","                controllers: [","                    CounterController.self","                ]","            )","        ]","    }","    ","    func testDeployCounterInitialValueZero() throws {","        try self.deployContract(","            at: COUNTER_ADDRESS,","            arguments: [","                0 \/\/ Initial value","            ]","        )","        ","        let controller = self.instantiateController(","            CounterController.self,","            for: COUNTER_ADDRESS","        )!","        ","        let result = try controller.getCounter()","        ","        XCTAssertEqual(result, 0)","    }","}"],"highlights":[{"line":31},{"line":32},{"line":33},{"line":34}],"fileName":"CounterTests.swift","type":"file","identifier":"CodingFirstContractSection3Step9.swift"},"CodingFirstContractSection2Step1.swift":{"syntax":"swift","fileType":"swift","content":[""],"highlights":[],"fileName":"lib.swift","type":"file","identifier":"CodingFirstContractSection2Step1.swift"},"doc://SpaceKit/tutorials/SpaceKit/Deep-Dive-into-SpaceKit-Concepts/Persisting-Data-Across-Executions":{"title":"Persisting Data Across Executions","url":"\/tutorials\/spacekit\/deep-dive-into-spacekit-concepts\/persisting-data-across-executions","role":"article","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Persisting-Data-Across-Executions","type":"topic","kind":"article","abstract":[]},"doc://SpaceKit/tutorials/SpaceKit/Deep-Dive-into-SpaceKit-Concepts/Retrieving-Information-from-the-Blockchain":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Retrieving-Information-from-the-Blockchain","kind":"article","type":"topic","abstract":[],"role":"article","url":"\/tutorials\/spacekit\/deep-dive-into-spacekit-concepts\/retrieving-information-from-the-blockchain","title":"Retrieving Information from the Blockchain"},"doc://SpaceKit/tutorials/SpaceKit/AsyncCalls#Perform-an-Asynchronous-Call":{"abstract":[{"text":"Blockchain platforms using SpaceVM enable seamless execution within a sharded environment. Sharding divides a blockchain’s global state and validation workload into smaller, manageable units known as shards. This method enhances scalability without compromising decentralization, allowing nodes to operate without significant computational resources.","type":"text"}],"url":"\/tutorials\/spacekit\/asynccalls#Perform-an-Asynchronous-Call","title":"Perform an Asynchronous Call","type":"section","kind":"section","role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls#Perform-an-Asynchronous-Call"},"doc://SpaceKit/tutorials/SpaceKit/StoreValues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage":{"role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage","abstract":[{"type":"text","text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory."}],"kind":"section","url":"\/tutorials\/spacekit\/storevalues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage","type":"section","title":"Leveraging @Mapping for Dynamic Key-Value Storage"},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Working-with-the-Vector-Type":{"abstract":[{"text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}],"url":"\/tutorials\/spacekit\/familiarizewithtypes#Working-with-the-Vector-Type","title":"Working with the Vector Type","type":"section","kind":"section","role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Working-with-the-Vector-Type"},"CodingFirstContractSection3Step4.swift":{"syntax":"swift","type":"file","identifier":"CodingFirstContractSection3Step4.swift","highlights":[{"line":6},{"line":7},{"line":8},{"line":9}],"fileType":"swift","fileName":"CounterTests.swift","content":["import SpaceKit","import Counter","import SpaceKitTesting","","let COUNTER_ADDRESS = \"counter\"","","final class CounterTests: ContractTestCase {","    ","}"]},"doc://SpaceKit/tutorials/SpaceKit/GetInfo#Accessing-Transaction-Context-Data":{"title":"Accessing Transaction Context Data","url":"\/tutorials\/spacekit\/getinfo#Accessing-Transaction-Context-Data","role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo#Accessing-Transaction-Context-Data","type":"section","kind":"section","abstract":[{"text":"Many smart contracts rely on contextual data to execute their operations effectively. This data can include input payments, the caller’s address, the current time, the balance of a specific account, or even the contract owner.","type":"text"}]},"doc://SpaceKit/tutorials/SpaceKit/GetInfo#Accessing-Blockchain-Context-Data":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo#Accessing-Blockchain-Context-Data","kind":"section","type":"section","abstract":[{"type":"text","text":"Many smart contracts rely on contextual data to execute their operations effectively. This data can include input payments, the caller’s address, the current time, the balance of a specific account, or even the contract owner."}],"role":"pseudoSymbol","url":"\/tutorials\/spacekit\/getinfo#Accessing-Blockchain-Context-Data","title":"Accessing Blockchain Context Data"},"doc://SpaceKit/tutorials/SpaceKit/TokenAttributes#Implementing-the-lockFunds-Endpoint":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/TokenAttributes#Implementing-the-lockFunds-Endpoint","kind":"section","abstract":[{"text":"The ESDT standard enables embedding custom data within non-fungible tokens, allowing developers to extend the functionality of their smart contracts. This additional data, referred to as “attributes,” is tied to the token and transfers along with it between wallets.","type":"text"}],"url":"\/tutorials\/spacekit\/tokenattributes#Implementing-the-lockFunds-Endpoint","title":"Implementing the lockFunds Endpoint","type":"section","role":"pseudoSymbol"},"doc://SpaceKit/tutorials/SpaceKit/TokenAttributes#Implementing-the-changeTokenLockDuration-Endpoint":{"title":"Implementing the changeTokenLockDuration Endpoint","role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/TokenAttributes#Implementing-the-changeTokenLockDuration-Endpoint","kind":"section","type":"section","url":"\/tutorials\/spacekit\/tokenattributes#Implementing-the-changeTokenLockDuration-Endpoint","abstract":[{"type":"text","text":"The ESDT standard enables embedding custom data within non-fungible tokens, allowing developers to extend the functionality of their smart contracts. This additional data, referred to as “attributes,” is tied to the token and transfers along with it between wallets."}]},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Understanding-the-Buffer-Type":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Understanding-the-Buffer-Type","url":"\/tutorials\/spacekit\/familiarizewithtypes#Understanding-the-Buffer-Type","abstract":[{"type":"text","text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM."}],"kind":"section","title":"Understanding the Buffer Type","type":"section","role":"pseudoSymbol"},"doc://SpaceKit/tutorials/SpaceKit/OperationsOnNonFungibleTokens#Add-Quantity-to-an-Existing-Nonce":{"title":"Add Quantity to an Existing Nonce","role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnNonFungibleTokens#Add-Quantity-to-an-Existing-Nonce","kind":"section","type":"section","url":"\/tutorials\/spacekit\/operationsonnonfungibletokens#Add-Quantity-to-an-Existing-Nonce","abstract":[{"type":"text","text":"Non-fungible tokens (NFTs) are unique digital assets that cannot be interchanged. Each NFT is associated with a unique identifier, known as a nonce. You can think of it like an airline ticket—each ticket is assigned to a specific passenger, with individual preferences and details."}]},"doc://SpaceKit/tutorials/SpaceKit/Create-and-Manage-Tokens/Enhancing-Contracts-with-Token-Attributes":{"abstract":[],"title":"Enhancing Contracts with Token Attributes","type":"topic","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Create-and-Manage-Tokens\/Enhancing-Contracts-with-Token-Attributes","url":"\/tutorials\/spacekit\/create-and-manage-tokens\/enhancing-contracts-with-token-attributes","kind":"article","role":"article"},"CodingFirstContractSection2Step8.swift":{"content":["import SpaceKit","","@Init func initialize(initialValue: BigUint) {","    var controller = CounterController()","    ","    controller.counter = initialValue","}","","@Controller public struct CounterController {","    @Storage(key: \"counter\") var counter: BigUint","    ","    public mutating func increase(value: BigUint) {","        self.counter = self.counter + value","    }","    ","    public mutating func decrease(value: BigUint) {","        self.counter = self.counter - value","    }","    ","    public func getCounter() -> BigUint {","        return self.counter","    }","}"],"type":"file","identifier":"CodingFirstContractSection2Step8.swift","highlights":[{"line":3},{"line":4},{"line":5},{"line":6},{"line":7},{"line":8}],"fileType":"swift","fileName":"lib.swift","syntax":"swift"},"doc://SpaceKit/tutorials/SpaceKit/TokenAttributes":{"abstract":[{"text":"The ESDT standard enables embedding custom data within non-fungible tokens, allowing developers to extend the functionality of their smart contracts. This additional data, referred to as “attributes,” is tied to the token and transfers along with it between wallets.","type":"text"}],"url":"\/tutorials\/spacekit\/tokenattributes","title":"Enhance Your Contracts with Token Attributes","type":"topic","kind":"project","estimatedTime":"15min","role":"project","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/TokenAttributes"},"doc://SpaceKit/tutorials/SpaceKit/Deep-Dive-into-SpaceKit-Concepts/Calling-Contracts-Across-Shards":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Calling-Contracts-Across-Shards","url":"\/tutorials\/spacekit\/deep-dive-into-spacekit-concepts\/calling-contracts-across-shards","abstract":[],"kind":"article","title":"Calling Contracts Across Shards","type":"topic","role":"article"},"doc://SpaceKit/tutorials/SpaceKit/Create-and-Manage-Tokens/Managing-Non-Fungible-Tokens":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Create-and-Manage-Tokens\/Managing-Non-Fungible-Tokens","url":"\/tutorials\/spacekit\/create-and-manage-tokens\/managing-non-fungible-tokens","abstract":[],"kind":"article","title":"Managing Non-Fungible Tokens","type":"topic","role":"article"},"CodingFirstContractSection3Step12.swift":{"syntax":"swift","fileType":"swift","highlights":[{"line":94},{"line":95},{"line":96},{"line":97},{"line":98},{"line":99},{"line":100},{"line":101},{"line":102},{"line":103},{"line":104},{"line":105},{"line":106},{"line":107},{"line":108},{"line":109},{"line":110},{"line":111},{"line":112},{"line":113},{"line":114},{"line":115},{"line":116},{"line":117},{"line":118},{"line":119},{"line":120},{"line":121},{"line":122},{"line":123},{"line":124},{"line":125},{"line":126},{"line":127},{"line":128},{"line":129},{"line":130},{"line":131},{"line":132},{"line":133}],"fileName":"CounterTests.swift","type":"file","identifier":"CodingFirstContractSection3Step12.swift","content":["import SpaceKit","import Counter","import SpaceKitTesting","","let COUNTER_ADDRESS = \"counter\"","","final class CounterTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: COUNTER_ADDRESS,","                controllers: [","                    CounterController.self","                ]","            )","        ]","    }","    ","    func testDeployCounterInitialValueZero() throws {","        try self.deployContract(","            at: COUNTER_ADDRESS,","            arguments: [","                0 \/\/ Initial value","            ]","        )","        ","        let controller = self.instantiateController(","            CounterController.self,","            for: COUNTER_ADDRESS","        )!","        ","        let result = try controller.getCounter()","        ","        XCTAssertEqual(result, 0)","    }","    ","    func testDeployCounterInitialValueNonZero() throws {","        try self.deployContract(","            at: COUNTER_ADDRESS,","            arguments: [","                15 \/\/ Initial value","            ]","        )","        ","        let controller = self.instantiateController(","            CounterController.self,","            for: COUNTER_ADDRESS","        )!","        ","        let result = try controller.getCounter()","        ","        XCTAssertEqual(result, 15)","    }","    ","    func testIncreaseZero() throws {","        try self.deployContract(","            at: COUNTER_ADDRESS,","            arguments: [","                15 \/\/ Initial value","            ]","        )","        ","        var controller = self.instantiateController(","            CounterController.self,","            for: COUNTER_ADDRESS","        )!","        ","        try controller.increase(value: 0)","        ","        let result = try controller.getCounter()","        ","        XCTAssertEqual(result, 15)","    }","    ","    func testIncreaseMoreThanZero() throws {","        try self.deployContract(","            at: COUNTER_ADDRESS,","            arguments: [","                15 \/\/ Initial value","            ]","        )","        ","        var controller = self.instantiateController(","            CounterController.self,","            for: COUNTER_ADDRESS","        )!","        ","        try controller.increase(value: 5)","        ","        let result = try controller.getCounter()","        ","        XCTAssertEqual(result, 20)","    }","    ","    func testDecreaseZero() throws {","        try self.deployContract(","            at: COUNTER_ADDRESS,","            arguments: [","                15 \/\/ Initial value","            ]","        )","        ","        var controller = self.instantiateController(","            CounterController.self,","            for: COUNTER_ADDRESS","        )!","        ","        try controller.decrease(value: 0)","        ","        let result = try controller.getCounter()","        ","        XCTAssertEqual(result, 15)","    }","    ","    func testDecreaseMoreThanZero() throws {","        try self.deployContract(","            at: COUNTER_ADDRESS,","            arguments: [","                15 \/\/ Initial value","            ]","        )","        ","        var controller = self.instantiateController(","            CounterController.self,","            for: COUNTER_ADDRESS","        )!","        ","        try controller.decrease(value: 5)","        ","        let result = try controller.getCounter()","        ","        XCTAssertEqual(result, 10)","    }","}"]},"doc://SpaceKit/tutorials/SpaceKit/Deep-Dive-into-SpaceKit-Concepts/Interacting-with-Other-Contracts":{"title":"Interacting with Other Contracts","url":"\/tutorials\/spacekit\/deep-dive-into-spacekit-concepts\/interacting-with-other-contracts","role":"article","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Interacting-with-Other-Contracts","type":"topic","kind":"article","abstract":[]},"CodingFirstContractSection3Step7.swift":{"content":["import SpaceKit","import Counter","import SpaceKitTesting","","let COUNTER_ADDRESS = \"counter\"","","final class CounterTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: COUNTER_ADDRESS,","                controllers: [","                    CounterController.self","                ]","            )","        ]","    }","    ","    func testDeployCounterInitialValueZero() throws {","        try self.deployContract(","            at: COUNTER_ADDRESS,","            arguments: [","                0 \/\/ Initial value","            ]","        )","    }","}"],"type":"file","identifier":"CodingFirstContractSection3Step7.swift","highlights":[{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25}],"fileType":"swift","fileName":"CounterTests.swift","syntax":"swift"},"doc://SpaceKit/tutorials/SpaceKit/Deep-Dive-into-SpaceKit-Concepts/Exploring-SpaceKit's-Types":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Exploring-SpaceKit's-Types","kind":"article","type":"topic","abstract":[],"role":"article","url":"\/tutorials\/spacekit\/deep-dive-into-spacekit-concepts\/exploring-spacekit's-types","title":"Exploring SpaceKit's Types"},"CodingFirstContractSection2Step5.swift":{"syntax":"swift","fileType":"swift","highlights":[{"line":5},{"line":6},{"line":7},{"line":8}],"fileName":"lib.swift","type":"file","identifier":"CodingFirstContractSection2Step5.swift","content":["import SpaceKit","","@Controller public struct CounterController {","    @Storage(key: \"counter\") var counter: BigUint","    ","    public mutating func increase(value: BigUint) {","        self.counter = self.counter + value","    }","}"]},"doc://SpaceKit/tutorials/SpaceKit/CodingYourFirstContract#Testing-the-Contract":{"abstract":[{"type":"text","text":"In this tutorial, you’ll create a simple smart contract that manages a counter. Users can increment or decrement the counter, and the changes are persisted across contract executions."}],"url":"\/tutorials\/spacekit\/codingyourfirstcontract#Testing-the-Contract","title":"Testing the Contract","kind":"section","type":"section","role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Testing-the-Contract"},"CodingFirstContractSection3Step13.swift":{"content":["import SpaceKit","import Counter","import SpaceKitTesting","","let COUNTER_ADDRESS = \"counter\"","","final class CounterTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: COUNTER_ADDRESS,","                controllers: [","                    CounterController.self","                ]","            )","        ]","    }","    ","    func testDeployCounterInitialValueZero() throws {","        try self.deployContract(","            at: COUNTER_ADDRESS,","            arguments: [","                0 \/\/ Initial value","            ]","        )","        ","        let controller = self.instantiateController(","            CounterController.self,","            for: COUNTER_ADDRESS","        )!","        ","        let result = try controller.getCounter()","        ","        XCTAssertEqual(result, 0)","    }","    ","    func testDeployCounterInitialValueNonZero() throws {","        try self.deployContract(","            at: COUNTER_ADDRESS,","            arguments: [","                15 \/\/ Initial value","            ]","        )","        ","        let controller = self.instantiateController(","            CounterController.self,","            for: COUNTER_ADDRESS","        )!","        ","        let result = try controller.getCounter()","        ","        XCTAssertEqual(result, 15)","    }","    ","    func testIncreaseZero() throws {","        try self.deployContract(","            at: COUNTER_ADDRESS,","            arguments: [","                15 \/\/ Initial value","            ]","        )","        ","        var controller = self.instantiateController(","            CounterController.self,","            for: COUNTER_ADDRESS","        )!","        ","        try controller.increase(value: 0)","        ","        let result = try controller.getCounter()","        ","        XCTAssertEqual(result, 15)","    }","    ","    func testIncreaseMoreThanZero() throws {","        try self.deployContract(","            at: COUNTER_ADDRESS,","            arguments: [","                15 \/\/ Initial value","            ]","        )","        ","        var controller = self.instantiateController(","            CounterController.self,","            for: COUNTER_ADDRESS","        )!","        ","        try controller.increase(value: 5)","        ","        let result = try controller.getCounter()","        ","        XCTAssertEqual(result, 20)","    }","    ","    func testDecreaseZero() throws {","        try self.deployContract(","            at: COUNTER_ADDRESS,","            arguments: [","                15 \/\/ Initial value","            ]","        )","        ","        var controller = self.instantiateController(","            CounterController.self,","            for: COUNTER_ADDRESS","        )!","        ","        try controller.decrease(value: 0)","        ","        let result = try controller.getCounter()","        ","        XCTAssertEqual(result, 15)","    }","    ","    func testDecreaseMoreThanZero() throws {","        try self.deployContract(","            at: COUNTER_ADDRESS,","            arguments: [","                15 \/\/ Initial value","            ]","        )","        ","        var controller = self.instantiateController(","            CounterController.self,","            for: COUNTER_ADDRESS","        )!","        ","        try controller.decrease(value: 5)","        ","        let result = try controller.getCounter()","        ","        XCTAssertEqual(result, 10)","    }","    ","    func testDecreaseTooMuchShouldFail() throws {","        try self.deployContract(","            at: COUNTER_ADDRESS,","            arguments: [","                15 \/\/ Initial value","            ]","        )","        ","        var controller = self.instantiateController(","            CounterController.self,","            for: COUNTER_ADDRESS","        )!","        ","        do {","            try controller.decrease(value: 16)","            ","            XCTFail() \/\/ Decrease fails, so this line should not be executed","        } catch {","            XCTAssertEqual(error, .userError(message: \"cannot subtract because result would be negative\"))","        }","    }","}"],"type":"file","identifier":"CodingFirstContractSection3Step13.swift","highlights":[{"line":134},{"line":135},{"line":136},{"line":137},{"line":138},{"line":139},{"line":140},{"line":141},{"line":142},{"line":143},{"line":144},{"line":145},{"line":146},{"line":147},{"line":148},{"line":149},{"line":150},{"line":151},{"line":152},{"line":153},{"line":154},{"line":155}],"fileType":"swift","fileName":"CounterTests.swift","syntax":"swift"},"doc://SpaceKit/tutorials/SpaceKit/OperationsOnNonFungibleTokens":{"abstract":[{"text":"Non-fungible tokens (NFTs) are unique digital assets that cannot be interchanged. Each NFT is associated with a unique identifier, known as a nonce. You can think of it like an airline ticket—each ticket is assigned to a specific passenger, with individual preferences and details.","type":"text"}],"url":"\/tutorials\/spacekit\/operationsonnonfungibletokens","title":"Managing Non-Fungible Tokens","type":"topic","kind":"project","estimatedTime":"15min","role":"project","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnNonFungibleTokens"},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Creating-Your-Own-Types":{"title":"Creating Your Own Types","role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Creating-Your-Own-Types","kind":"section","type":"section","url":"\/tutorials\/spacekit\/familiarizewithtypes#Creating-Your-Own-Types","abstract":[{"type":"text","text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM."}]},"doc://SpaceKit/tutorials/SpaceKit/UnderstandTokens#Issuing-a-Meta-ESDT-from-Your-Contract":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/UnderstandTokens#Issuing-a-Meta-ESDT-from-Your-Contract","kind":"section","type":"section","abstract":[{"type":"text","text":"Learn about the ESDT standard used in the SpaceKit framework, a token model that supports fungible tokens, non-fungible tokens (NFTs), semi-fungible tokens, and meta-esdt tokens."},{"type":"text","text":" "},{"type":"text","text":"The SpaceKit framework uses a token standard called ESDT. This standard defines four types of tokens: fungible, non-fungible (NFT), semi-fungible, and meta-esdt."}],"role":"pseudoSymbol","url":"\/tutorials\/spacekit\/understandtokens#Issuing-a-Meta-ESDT-from-Your-Contract","title":"Issuing a Meta ESDT from Your Contract"},"doc://SpaceKit/tutorials/SpaceKit/OperationsOnFungibleTokens#Burn-Tokens":{"role":"pseudoSymbol","abstract":[{"text":"Fungible tokens function similarly to traditional currencies, making them the simplest type of token to work with.","type":"text"}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnFungibleTokens#Burn-Tokens","kind":"section","url":"\/tutorials\/spacekit\/operationsonfungibletokens#Burn-Tokens","type":"section","title":"Burn Tokens"},"CodingFirstContractSection3Step5.swift":{"syntax":"swift","fileType":"swift","highlights":[{"line":8},{"line":9},{"line":10},{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17}],"fileName":"CounterTests.swift","type":"file","identifier":"CodingFirstContractSection3Step5.swift","content":["import SpaceKit","import Counter","import SpaceKitTesting","","let COUNTER_ADDRESS = \"counter\"","","final class CounterTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: COUNTER_ADDRESS,","                controllers: [","                    CounterController.self","                ]","            )","        ]","    }","}"]},"doc://SpaceKit/tutorials/SpaceKit/StoreValues":{"role":"project","estimatedTime":"15min","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues","abstract":[{"type":"text","text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory."}],"kind":"project","url":"\/tutorials\/spacekit\/storevalues","type":"topic","title":"Persist Values Between Executions"},"CodingFirstContractSection3Step6.swift":{"content":["import SpaceKit","import Counter","import SpaceKitTesting","","let COUNTER_ADDRESS = \"counter\"","","final class CounterTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: COUNTER_ADDRESS,","                controllers: [","                    CounterController.self","                ]","            )","        ]","    }","    ","    func testDeployCounterInitialValueZero() throws {","        ","    }","}"],"type":"file","identifier":"CodingFirstContractSection3Step6.swift","highlights":[{"line":18},{"line":19},{"line":20},{"line":21}],"fileType":"swift","fileName":"CounterTests.swift","syntax":"swift"},"doc://SpaceKit/tutorials/SpaceKit/UnderstandTokens#Issuing-a-Fungible-Token-from-Your-Contract":{"title":"Issuing a Fungible Token from Your Contract","role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/UnderstandTokens#Issuing-a-Fungible-Token-from-Your-Contract","kind":"section","type":"section","url":"\/tutorials\/spacekit\/understandtokens#Issuing-a-Fungible-Token-from-Your-Contract","abstract":[{"type":"text","text":"Learn about the ESDT standard used in the SpaceKit framework, a token model that supports fungible tokens, non-fungible tokens (NFTs), semi-fungible tokens, and meta-esdt tokens."},{"type":"text","text":" "},{"type":"text","text":"The SpaceKit framework uses a token standard called ESDT. This standard defines four types of tokens: fungible, non-fungible (NFT), semi-fungible, and meta-esdt."}]},"doc://SpaceKit/tutorials/SpaceKit/SyncCalls#Perform-a-Synchronous-Call":{"title":"Perform a Synchronous Call","url":"\/tutorials\/spacekit\/synccalls#Perform-a-Synchronous-Call","role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls#Perform-a-Synchronous-Call","type":"section","kind":"section","abstract":[{"text":"Smart contracts can interact not only with users but also with other smart contracts. This enables more advanced protocols by leveraging existing ones. For example, you could integrate a decentralized exchange directly into your contract to perform token swaps. Decentralized applications often involve multiple contracts, each with a dedicated role, working together to achieve complex functionality—similar to microservices in backend systems.","type":"text"}]}}}