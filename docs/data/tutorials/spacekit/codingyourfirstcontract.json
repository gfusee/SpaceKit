{"metadata":{"categoryPathComponent":"Space","category":"SpaceKit","title":"Building Your First Smart Contract","role":"project"},"kind":"project","sections":[{"title":"Building Your First Smart Contract","estimatedTimeInMinutes":20,"kind":"hero","content":[{"type":"paragraph","inlineContent":[{"text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user.","type":"text"}]}],"chapter":"Building Your First Smart Contract"},{"tasks":[{"anchor":"Initializing-the-Project","contentSection":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Before writing the contract, let’s initialize the project using the SpaceKit CLI."}]}],"kind":"contentAndMedia","mediaPosition":"trailing"}],"stepsSection":[{"type":"step","caption":[],"media":"InstallingToolsSection1Step1.png","code":null,"runtimePreview":null,"content":[{"inlineContent":[{"text":"Open a terminal.","type":"text"}],"type":"paragraph"}]},{"media":"CodingFirstContractSection1Step2.png","caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This command creates a new directory named “Counter.”"}]}],"type":"step","runtimePreview":null,"code":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Navigate to the desired directory, then run the command ","type":"text"},{"type":"codeVoice","code":"space init Counter"},{"text":".","type":"text"}]}]},{"code":null,"content":[{"inlineContent":[{"type":"text","text":"Open the project in your preferred Swift IDE by opening the “Counter” directory."}],"type":"paragraph"}],"type":"step","runtimePreview":null,"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We recommend Xcode or VSCode with the official Swift extension. In this tutorial, we’ll use Xcode. For other environments like VSCode on Linux or Windows, dedicated tutorials may be available."}]}],"media":"CodingFirstContractSection1Step3.png"},{"runtimePreview":null,"content":[{"inlineContent":[{"text":"(Optional) Build the project to enable macros and improve indexing in your IDE.","type":"text"}],"type":"paragraph"}],"type":"step","caption":[{"type":"paragraph","inlineContent":[{"text":"In Xcode, go to ","type":"text"},{"inlineContent":[{"text":"Product > Build","type":"text"}],"type":"strong"},{"text":" or press ","type":"text"},{"type":"codeVoice","code":"⌘ + B"},{"type":"text","text":"."}]}],"media":"CodingFirstContractSection1Step4.png","code":null}],"title":"Initializing the Project"},{"contentSection":[{"content":[{"inlineContent":[{"text":"Let’s start coding the smart contract.","type":"text"}],"type":"paragraph"}],"kind":"contentAndMedia","mediaPosition":"trailing"}],"stepsSection":[{"media":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Open the "},{"type":"codeVoice","code":"Contracts\/Counter\/Source\/lib.swift"},{"type":"text","text":" file and delete its contents."}]}],"code":"CodingFirstContractSection2Step1.swift","runtimePreview":null,"caption":[]},{"caption":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Note:","type":"text"}]},{"type":"text","text":" Only import the SpaceKit framework. Other libraries like Foundation are not compatible with SpaceVM."}],"type":"paragraph"}],"runtimePreview":null,"media":null,"type":"step","code":"CodingFirstContractSection2Step2.swift","content":[{"type":"paragraph","inlineContent":[{"text":"Import the framework by adding ","type":"text"},{"type":"codeVoice","code":"import SpaceKit"},{"type":"text","text":"."}]}]},{"type":"step","content":[{"inlineContent":[{"text":"Declare the contract by annotating a struct with ","type":"text"},{"type":"codeVoice","code":"@Contract"},{"text":". For this project, we’ll declare the ","type":"text"},{"type":"codeVoice","code":"Counter"},{"text":" contract.","type":"text"}],"type":"paragraph"}],"media":null,"code":"CodingFirstContractSection2Step3.swift","caption":[{"inlineContent":[{"inlineContent":[{"text":"Note:","type":"text"}],"type":"strong"},{"text":" You should have only one ","type":"text"},{"code":"@Contract","type":"codeVoice"},{"text":" struct. The logic can be spread across multiple files, but the ","type":"text"},{"code":"@Contract","type":"codeVoice"},{"text":" struct remains central.","type":"text"}],"type":"paragraph"}],"runtimePreview":null},{"caption":[{"inlineContent":[{"inlineContent":[{"text":"Note:","type":"text"}],"type":"strong"},{"text":" The ","type":"text"},{"code":"BigUint","type":"codeVoice"},{"text":" type handles arbitrarily large numbers, so there’s no risk of overflow.","type":"text"}],"type":"paragraph"}],"media":null,"type":"step","code":"CodingFirstContractSection2Step4.swift","runtimePreview":null,"content":[{"inlineContent":[{"text":"To persist the counter across executions, declare it in the contract’s storage with ","type":"text"},{"type":"codeVoice","code":"@Storage(key: \"counter\")"},{"type":"text","text":"."}],"type":"paragraph"}]},{"code":"CodingFirstContractSection2Step5.swift","caption":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Note:","type":"text"}],"type":"strong"},{"text":" The initializer is called only when the contract is deployed.","type":"text"}]}],"media":null,"type":"step","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Define the initializer for the contract, which is executed only once during deployment to set the initial counter value.","type":"text"}]}]},{"runtimePreview":null,"caption":[],"type":"step","code":"CodingFirstContractSection2Step6.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create an endpoint "},{"type":"codeVoice","code":"increase"},{"text":" to allow users to increment the counter. The function takes a single user-provided parameter indicating how much to increment the counter.","type":"text"}]}],"media":null},{"media":null,"caption":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Note:"}]},{"type":"text","text":" The "},{"code":"BigUint","type":"codeVoice"},{"type":"text","text":" type cannot be negative, so if the operation results in a negative value, the transaction will fail without changes being committed."}]}],"code":"CodingFirstContractSection2Step7.swift","content":[{"inlineContent":[{"type":"text","text":"Similarly, create the "},{"type":"codeVoice","code":"decrease"},{"type":"text","text":" endpoint to decrement the counter."}],"type":"paragraph"}],"type":"step","runtimePreview":null},{"type":"step","runtimePreview":null,"code":"CodingFirstContractSection2Step8.swift","content":[{"inlineContent":[{"type":"text","text":"To allow users or other contracts to retrieve the counter’s value, create a view function ("},{"type":"codeVoice","code":"getCounter"},{"type":"text","text":"), which does not modify the contract’s state."}],"type":"paragraph"}],"media":null,"caption":[]}],"anchor":"Writing-the-Contract-Code","title":"Writing the Contract Code"},{"title":"Testing the Contract","stepsSection":[{"runtimePreview":null,"media":"CodingFirstContractSection3Step1.png","content":[{"type":"paragraph","inlineContent":[{"text":"Open the ","type":"text"},{"type":"codeVoice","code":"Contracts\/Counter\/Tests\/CounterTests"},{"text":" directory. Delete any files and create a new file named ","type":"text"},{"type":"codeVoice","code":"CounterTests.swift"},{"type":"text","text":"."}]}],"caption":[],"code":null,"type":"step"},{"type":"step","media":null,"code":"CodingFirstContractSection3Step2.swift","content":[{"inlineContent":[{"text":"Import the necessary frameworks: SpaceKit, your contract, and XCTest.","type":"text"}],"type":"paragraph"}],"caption":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Note:","type":"text"}]},{"text":" XCTest is the official tool for writing unit tests in Swift.","type":"text"}],"type":"paragraph"}],"runtimePreview":null},{"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Declare the contract’s address, as SwiftVM assigns a deterministic address to our contract.","type":"text"}]}],"caption":[],"media":null,"type":"step","code":"CodingFirstContractSection3Step3.swift"},{"media":null,"content":[{"inlineContent":[{"text":"Create a class for the tests, inheriting from ","type":"text"},{"type":"codeVoice","code":"ContractTestCase"},{"type":"text","text":"."}],"type":"paragraph"}],"caption":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Note:"}]},{"type":"text","text":" Avoid overriding the "},{"type":"codeVoice","code":"setUp"},{"type":"text","text":" and "},{"type":"codeVoice","code":"tearDown"},{"text":" methods.","type":"text"}],"type":"paragraph"}],"code":"CodingFirstContractSection3Step4.swift","runtimePreview":null,"type":"step"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Override the "},{"type":"codeVoice","code":"initialAccounts"},{"type":"text","text":" property to declare the contract’s address in SwiftVM."}]}],"code":"CodingFirstContractSection3Step5.swift","runtimePreview":null,"caption":[],"type":"step","media":null},{"media":null,"code":"CodingFirstContractSection3Step6.swift","runtimePreview":null,"type":"step","caption":[],"content":[{"inlineContent":[{"type":"text","text":"Create the first unit test to verify deploying the contract with an initial counter value of zero."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Deploy the contract with an initial value of 0 using the generated "},{"type":"codeVoice","code":"testable"},{"type":"text","text":" function."}],"type":"paragraph"}],"caption":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Note:"}]},{"text":" This function allows you to catch any errors during execution.","type":"text"}]}],"type":"step","code":"CodingFirstContractSection3Step7.swift","media":null,"runtimePreview":null},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Call the "},{"code":"getCounter","type":"codeVoice"},{"text":" view to assert the counter is 0.","type":"text"}]}],"caption":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Note:"}],"type":"strong"},{"type":"text","text":" SpaceKit generates functions for contract views and endpoints."}]}],"media":null,"code":"CodingFirstContractSection3Step8.swift","runtimePreview":null},{"caption":[],"code":"CodingFirstContractSection3Step9.swift","media":null,"runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"Add a unit test to verify deploying the contract with a non-zero initial value."}],"type":"paragraph"}],"type":"step"},{"code":"CodingFirstContractSection3Step10.swift","media":null,"type":"step","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create unit tests for the "},{"code":"increase","type":"codeVoice"},{"text":" endpoint, similar to the deployment tests.","type":"text"}]}],"caption":[]},{"type":"step","content":[{"inlineContent":[{"type":"text","text":"Repeat for the "},{"type":"codeVoice","code":"decrease"},{"type":"text","text":" endpoint."}],"type":"paragraph"}],"media":null,"code":"CodingFirstContractSection3Step11.swift","runtimePreview":null,"caption":[]},{"type":"step","caption":[],"content":[{"type":"paragraph","inlineContent":[{"text":"Add a test to ensure failure when trying to decrease the counter below zero.","type":"text"}]}],"media":null,"code":"CodingFirstContractSection3Step12.swift","runtimePreview":null},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Run the tests to confirm your contract works correctly!"}]}],"caption":[],"code":null,"runtimePreview":null,"media":"CodingFirstContractSection3Step13.png","type":"step"}],"anchor":"Testing-the-Contract","contentSection":[{"mediaPosition":"trailing","kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"SpaceKit includes a built-in emulator called SwiftVM, which allows you to test your contract in the Swift environment."}]}]}]}],"kind":"tasks"}],"schemaVersion":{"minor":3,"patch":0,"major":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/tutorials\/spacekit\/codingyourfirstcontract"]}],"hierarchy":{"paths":[["doc:\/\/SpaceKit\/tutorials\/Space","doc:\/\/SpaceKit\/tutorials\/Space\/Getting-Started","doc:\/\/SpaceKit\/tutorials\/Space\/Getting-Started\/Building-Your-First-Smart-Contract"]],"reference":"doc:\/\/SpaceKit\/tutorials\/Space","modules":[{"reference":"doc:\/\/SpaceKit\/tutorials\/Space\/Getting-Started\/Installing-the-Tools","projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools","sections":[{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Installing-SpaceKits-Dependencies"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Setting-Up-the-SpaceKit-CLI","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract","kind":"task"}]}]},{"reference":"doc:\/\/SpaceKit\/tutorials\/Space\/Getting-Started\/Building-Your-First-Smart-Contract","projects":[{"sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Initializing-the-Project","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Writing-the-Contract-Code","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Testing-the-Contract","kind":"task"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract"}]},{"reference":"doc:\/\/SpaceKit\/tutorials\/Space\/Deep-Dive-into-SpaceKit-Concepts\/Exploring-SpaceKit's-Types","projects":[{"sections":[{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Understanding-the-Buffer-Type","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Working-with-the-BigUint-Type","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Working-with-the-Vector-Type"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Creating-Your-Own-Types"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes"}]},{"projects":[{"sections":[{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues#Working-with-Storage-for-Single-Value-Persistence"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage","kind":"task"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues"}],"reference":"doc:\/\/SpaceKit\/tutorials\/Space\/Deep-Dive-into-SpaceKit-Concepts\/Persisting-Data-Across-Executions"},{"reference":"doc:\/\/SpaceKit\/tutorials\/Space\/Deep-Dive-into-SpaceKit-Concepts\/Retrieving-Information-from-the-Blockchain","projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo","sections":[{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo#Accessing-Transaction-Context-Data"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo#Accessing-Blockchain-Context-Data"}]}]},{"projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls","sections":[{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls#Declare-the-Callee-Proxy"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls#Perform-a-Synchronous-Call","kind":"task"}]}],"reference":"doc:\/\/SpaceKit\/tutorials\/Space\/Deep-Dive-into-SpaceKit-Concepts\/Interacting-with-Other-Contracts"},{"projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls","sections":[{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls#Declare-the-Callee-Proxy"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls#Perform-an-Asynchronous-Call"}]}],"reference":"doc:\/\/SpaceKit\/tutorials\/Space\/Deep-Dive-into-SpaceKit-Concepts\/Calling-Contracts-Across-Shards"}]},"references":{"CodingFirstContractSection2Step3.swift":{"highlights":[{"line":2},{"line":3},{"line":4},{"line":5}],"syntax":"swift","type":"file","identifier":"CodingFirstContractSection2Step3.swift","fileName":"lib.swift","content":["import SpaceKit","","@Contract public struct Counter {","    ","}"],"fileType":"swift"},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges":{"title":"Handling Heap Allocation Challenges","type":"section","kind":"section","abstract":[{"text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges","url":"\/tutorials\/spacekit\/familiarizewithtypes#Handling-Heap-Allocation-Challenges","role":"pseudoSymbol"},"doc://SpaceKit/tutorials/SpaceKit/StoreValues#Working-with-Storage-for-Single-Value-Persistence":{"abstract":[{"text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory.","type":"text"}],"url":"\/tutorials\/spacekit\/storevalues#Working-with-Storage-for-Single-Value-Persistence","type":"section","role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues#Working-with-Storage-for-Single-Value-Persistence","title":"Working with @Storage for Single Value Persistence","kind":"section"},"CodingFirstContractSection3Step13.png":{"variants":[{"url":"\/images\/SpaceKit\/CodingFirstContractSection3Step13.png","traits":["1x","light"]}],"alt":"Xcode's test tab showing all tests passed.","identifier":"CodingFirstContractSection3Step13.png","type":"image"},"CodingFirstContractSection3Step2.swift":{"syntax":"swift","type":"file","fileType":"swift","fileName":"CounterTests.swift","highlights":[],"identifier":"CodingFirstContractSection3Step2.swift","content":["import SpaceKit","import Counter","import XCTest"]},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Working-with-the-Vector-Type":{"abstract":[{"type":"text","text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM."}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Working-with-the-Vector-Type","role":"pseudoSymbol","kind":"section","title":"Working with the Vector Type","type":"section","url":"\/tutorials\/spacekit\/familiarizewithtypes#Working-with-the-Vector-Type"},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Understanding-the-Buffer-Type":{"role":"pseudoSymbol","title":"Understanding the Buffer Type","kind":"section","type":"section","abstract":[{"text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Understanding-the-Buffer-Type","url":"\/tutorials\/spacekit\/familiarizewithtypes#Understanding-the-Buffer-Type"},"doc://SpaceKit/tutorials/SpaceKit/GetInfo#Accessing-Blockchain-Context-Data":{"type":"section","title":"Accessing Blockchain Context Data","url":"\/tutorials\/spacekit\/getinfo#Accessing-Blockchain-Context-Data","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo#Accessing-Blockchain-Context-Data","kind":"section","role":"pseudoSymbol","abstract":[{"type":"text","text":"Many smart contracts rely on contextual data to execute their operations effectively. This data can include input payments, the caller’s address, the current time, the balance of a specific account, or even the contract owner."}]},"doc://SpaceKit/tutorials/SpaceKit/GetInfo":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo","type":"topic","kind":"project","title":"Retrieving Information from the Blockchain","abstract":[{"text":"Many smart contracts rely on contextual data to execute their operations effectively. This data can include input payments, the caller’s address, the current time, the balance of a specific account, or even the contract owner.","type":"text"}],"role":"project","estimatedTime":"10min","url":"\/tutorials\/spacekit\/getinfo"},"doc://SpaceKit/tutorials/Space/Getting-Started/Building-Your-First-Smart-Contract":{"title":"Building Your First Smart Contract","type":"topic","url":"\/tutorials\/space\/getting-started\/building-your-first-smart-contract","kind":"article","abstract":[],"identifier":"doc:\/\/SpaceKit\/tutorials\/Space\/Getting-Started\/Building-Your-First-Smart-Contract","role":"article"},"CodingFirstContractSection3Step7.swift":{"syntax":"swift","content":["import SpaceKit","import Counter","import XCTest","","let COUNTER_ADDRESS = \"counter\"","","final class CounterTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(address: COUNTER_ADDRESS)","        ]","    }","    ","    func testDeployCounterInitialValueZero() throws {","        let contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 0","        )","    }","}"],"fileName":"CounterTests.swift","fileType":"swift","highlights":[{"line":15},{"line":16},{"line":17},{"line":18}],"identifier":"CodingFirstContractSection3Step7.swift","type":"file"},"doc://SpaceKit/tutorials/Space/Deep-Dive-into-SpaceKit-Concepts/Interacting-with-Other-Contracts":{"identifier":"doc:\/\/SpaceKit\/tutorials\/Space\/Deep-Dive-into-SpaceKit-Concepts\/Interacting-with-Other-Contracts","type":"topic","kind":"article","title":"Interacting with Other Contracts","abstract":[],"role":"article","url":"\/tutorials\/space\/deep-dive-into-spacekit-concepts\/interacting-with-other-contracts"},"doc://SpaceKit/tutorials/Space":{"kind":"overview","type":"topic","url":"\/tutorials\/space","identifier":"doc:\/\/SpaceKit\/tutorials\/Space","role":"overview","title":"Meet SpaceKit","abstract":[{"text":"Discover how SpaceKit simplifies blockchain development using Swift. Dive into the world of Web3 with ease and efficiency.","type":"text"}]},"CodingFirstContractSection2Step7.swift":{"syntax":"swift","type":"file","fileType":"swift","fileName":"lib.swift","highlights":[{"line":13},{"line":14},{"line":15},{"line":16}],"identifier":"CodingFirstContractSection2Step7.swift","content":["import SpaceKit","","@Contract public struct Counter {","    @Storage(key: \"counter\") var counter: BigUint","    ","    init(initialValue: BigUint) {","        self.counter = initialValue","    }","    ","    public mutating func increase(value: BigUint) {","        self.counter = self.counter + value","    }","    ","    public mutating func decrease(value: BigUint) {","        self.counter = self.counter - value","    }","}"]},"CodingFirstContractSection3Step10.swift":{"identifier":"CodingFirstContractSection3Step10.swift","fileName":"CounterTests.swift","syntax":"swift","highlights":[{"line":35},{"line":36},{"line":37},{"line":38},{"line":39},{"line":40},{"line":41},{"line":42},{"line":43},{"line":44},{"line":45},{"line":46},{"line":47},{"line":48},{"line":49},{"line":50},{"line":51},{"line":52},{"line":53},{"line":54},{"line":55},{"line":56},{"line":57},{"line":58},{"line":59},{"line":60}],"type":"file","fileType":"swift","content":["import SpaceKit","import Counter","import XCTest","","let COUNTER_ADDRESS = \"counter\"","","final class CounterTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(address: COUNTER_ADDRESS)","        ]","    }","    ","    func testDeployCounterInitialValueZero() throws {","        let contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 0","        )","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 0)","    }","    ","    func testDeployCounterInitialValueNonZero() throws {","        let contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 15","        )","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 15)","    }","    ","    func testIncreaseZero() throws {","        var contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 15","        )","        ","        try contract.increase(value: 0)","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 15)","    }","    ","    func testIncreaseMoreThanZero() throws {","        var contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 15","        )","        ","        try contract.increase(value: 5)","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 20)","    }","}"]},"doc://SpaceKit/tutorials/SpaceKit/CodingYourFirstContract#Initializing-the-Project":{"title":"Initializing the Project","type":"section","kind":"section","abstract":[{"text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user.","type":"text"}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Initializing-the-Project","url":"\/tutorials\/spacekit\/codingyourfirstcontract#Initializing-the-Project","role":"pseudoSymbol"},"CodingFirstContractSection3Step5.swift":{"syntax":"swift","type":"file","fileType":"swift","fileName":"CounterTests.swift","highlights":[{"line":8},{"line":9},{"line":10},{"line":11},{"line":12}],"identifier":"CodingFirstContractSection3Step5.swift","content":["import SpaceKit","import Counter","import XCTest","","let COUNTER_ADDRESS = \"counter\"","","final class CounterTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(address: COUNTER_ADDRESS)","        ]","    }","}"]},"CodingFirstContractSection2Step6.swift":{"syntax":"swift","content":["import SpaceKit","","@Contract public struct Counter {","    @Storage(key: \"counter\") var counter: BigUint","    ","    init(initialValue: BigUint) {","        self.counter = initialValue","    }","    ","    public mutating func increase(value: BigUint) {","        self.counter = self.counter + value","    }","}"],"fileName":"lib.swift","fileType":"swift","highlights":[{"line":9},{"line":10},{"line":11},{"line":12}],"identifier":"CodingFirstContractSection2Step6.swift","type":"file"},"doc://SpaceKit/tutorials/SpaceKit/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract":{"type":"section","abstract":[{"type":"text","text":"Before writing your first smart contract with SpaceKit, ensure you have the necessary tools installed."}],"url":"\/tutorials\/spacekit\/installingtools#Initializing-and-Compiling-Your-First-Smart-Contract","role":"pseudoSymbol","title":"Initializing and Compiling Your First Smart Contract","kind":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract"},"doc://SpaceKit/tutorials/SpaceKit/GetInfo#Accessing-Transaction-Context-Data":{"abstract":[{"type":"text","text":"Many smart contracts rely on contextual data to execute their operations effectively. This data can include input payments, the caller’s address, the current time, the balance of a specific account, or even the contract owner."}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo#Accessing-Transaction-Context-Data","role":"pseudoSymbol","kind":"section","title":"Accessing Transaction Context Data","type":"section","url":"\/tutorials\/spacekit\/getinfo#Accessing-Transaction-Context-Data"},"doc://SpaceKit/tutorials/SpaceKit/CodingYourFirstContract#Writing-the-Contract-Code":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Writing-the-Contract-Code","type":"section","kind":"section","title":"Writing the Contract Code","abstract":[{"text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user.","type":"text"}],"role":"pseudoSymbol","url":"\/tutorials\/spacekit\/codingyourfirstcontract#Writing-the-Contract-Code"},"CodingFirstContractSection1Step2.png":{"variants":[{"url":"\/images\/SpaceKit\/CodingFirstContractSection1Step2.png","traits":["1x","light"]}],"alt":"Output of `space init Counter` command.","identifier":"CodingFirstContractSection1Step2.png","type":"image"},"CodingFirstContractSection3Step12.swift":{"syntax":"swift","content":["import SpaceKit","import Counter","import XCTest","","let COUNTER_ADDRESS = \"counter\"","","final class CounterTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(address: COUNTER_ADDRESS)","        ]","    }","    ","    func testDeployCounterInitialValueZero() throws {","        let contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 0","        )","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 0)","    }","    ","    func testDeployCounterInitialValueNonZero() throws {","        let contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 15","        )","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 15)","    }","    ","    func testIncreaseZero() throws {","        var contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 15","        )","        ","        try contract.increase(value: 0)","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 15)","    }","    ","    func testIncreaseMoreThanZero() throws {","        var contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 15","        )","        ","        try contract.increase(value: 5)","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 20)","    }","    ","    func testDecreaseZero() throws {","        var contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 15","        )","        ","        try contract.decrease(value: 0)","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 15)","    }","    ","    func testDecreaseMoreThanZero() throws {","        var contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 15","        )","        ","        try contract.decrease(value: 5)","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 10)","    }","    ","    func testDecreaseTooMuchShouldFail() throws {","        var contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 15","        )","        ","        do {","            try contract.decrease(value: 16)","            ","            XCTFail() \/\/ Decrease fails, so this line should not be executed","        } catch {","            XCTAssertEqual(error, .userError(message: \"cannot subtract because result would be negative\"))","        }","    }","}"],"fileName":"CounterTests.swift","fileType":"swift","highlights":[{"line":87},{"line":88},{"line":89},{"line":90},{"line":91},{"line":92},{"line":93},{"line":94},{"line":95},{"line":96},{"line":97},{"line":98},{"line":99},{"line":100},{"line":101}],"identifier":"CodingFirstContractSection3Step12.swift","type":"file"},"CodingFirstContractSection3Step3.swift":{"syntax":"swift","type":"file","fileType":"swift","fileName":"CounterTests.swift","highlights":[{"line":4},{"line":5}],"identifier":"CodingFirstContractSection3Step3.swift","content":["import SpaceKit","import Counter","import XCTest","","let COUNTER_ADDRESS = \"counter\""]},"doc://SpaceKit/tutorials/SpaceKit/SyncCalls#Perform-a-Synchronous-Call":{"type":"section","title":"Perform a Synchronous Call","url":"\/tutorials\/spacekit\/synccalls#Perform-a-Synchronous-Call","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls#Perform-a-Synchronous-Call","kind":"section","role":"pseudoSymbol","abstract":[{"type":"text","text":"Smart contracts can interact not only with users but also with other smart contracts. This enables more advanced protocols by leveraging existing ones. For example, you could integrate a decentralized exchange directly into your contract to perform token swaps. Decentralized applications often involve multiple contracts, each with a dedicated role, working together to achieve complex functionality—similar to microservices in backend systems."}]},"doc://SpaceKit/tutorials/SpaceKit/AsyncCalls":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls","type":"topic","kind":"project","title":"Interacting with Contracts Across Shards","abstract":[{"text":"Blockchain platforms using SpaceVM enable seamless execution within a sharded environment. Sharding divides a blockchain’s global state and validation workload into smaller, manageable units known as shards. This method enhances scalability without compromising decentralization, allowing nodes to operate without significant computational resources.","type":"text"}],"role":"project","estimatedTime":"15min","url":"\/tutorials\/spacekit\/asynccalls"},"CodingFirstContractSection3Step6.swift":{"syntax":"swift","content":["import SpaceKit","import Counter","import XCTest","","let COUNTER_ADDRESS = \"counter\"","","final class CounterTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(address: COUNTER_ADDRESS)","        ]","    }","    ","    func testDeployCounterInitialValueZero() throws {","        ","    }","}"],"fileName":"CounterTests.swift","fileType":"swift","highlights":[{"line":13},{"line":14},{"line":15},{"line":16}],"identifier":"CodingFirstContractSection3Step6.swift","type":"file"},"CodingFirstContractSection1Step3.png":{"variants":[{"url":"\/images\/SpaceKit\/CodingFirstContractSection1Step3.png","traits":["1x","light"]}],"alt":"Xcode project selection screen with 'Counter' highlighted.","identifier":"CodingFirstContractSection1Step3.png","type":"image"},"doc://SpaceKit/tutorials/SpaceKit/InstallingTools#Setting-Up-the-SpaceKit-CLI":{"url":"\/tutorials\/spacekit\/installingtools#Setting-Up-the-SpaceKit-CLI","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Setting-Up-the-SpaceKit-CLI","type":"section","title":"Setting Up the SpaceKit CLI","abstract":[{"text":"Before writing your first smart contract with SpaceKit, ensure you have the necessary tools installed.","type":"text"}],"kind":"section","role":"pseudoSymbol"},"CodingFirstContractSection2Step4.swift":{"syntax":"swift","content":["import SpaceKit","","@Contract public struct Counter {","    @Storage(key: \"counter\") var counter: BigUint","}"],"fileName":"lib.swift","fileType":"swift","highlights":[{"line":4}],"identifier":"CodingFirstContractSection2Step4.swift","type":"file"},"doc://SpaceKit/tutorials/SpaceKit/AsyncCalls#Declare-the-Callee-Proxy":{"type":"section","abstract":[{"type":"text","text":"Blockchain platforms using SpaceVM enable seamless execution within a sharded environment. Sharding divides a blockchain’s global state and validation workload into smaller, manageable units known as shards. This method enhances scalability without compromising decentralization, allowing nodes to operate without significant computational resources."}],"url":"\/tutorials\/spacekit\/asynccalls#Declare-the-Callee-Proxy","role":"pseudoSymbol","title":"Declare the Callee Proxy","kind":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls#Declare-the-Callee-Proxy"},"doc://SpaceKit/tutorials/SpaceKit/StoreValues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage":{"title":"Leveraging @Mapping for Dynamic Key-Value Storage","type":"section","kind":"section","abstract":[{"text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory.","type":"text"}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage","url":"\/tutorials\/spacekit\/storevalues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage","role":"pseudoSymbol"},"doc://SpaceKit/tutorials/Space/Getting-Started/Installing-the-Tools":{"title":"Installing the Tools","type":"topic","kind":"article","abstract":[],"identifier":"doc:\/\/SpaceKit\/tutorials\/Space\/Getting-Started\/Installing-the-Tools","url":"\/tutorials\/space\/getting-started\/installing-the-tools","role":"article"},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes":{"kind":"project","type":"topic","url":"\/tutorials\/spacekit\/familiarizewithtypes","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes","role":"project","title":"Exploring SpaceKit's Types","estimatedTime":"20min","abstract":[{"text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}]},"CodingFirstContractSection3Step1.png":{"variants":[{"url":"\/images\/SpaceKit\/CodingFirstContractSection3Step1.png","traits":["1x","light"]}],"alt":"File tree showing newly created `CounterTests.swift`.","identifier":"CodingFirstContractSection3Step1.png","type":"image"},"CodingFirstContractSection3Step11.swift":{"identifier":"CodingFirstContractSection3Step11.swift","fileName":"CounterTests.swift","syntax":"swift","highlights":[{"line":61},{"line":62},{"line":63},{"line":64},{"line":65},{"line":66},{"line":67},{"line":68},{"line":69},{"line":70},{"line":71},{"line":72},{"line":73},{"line":74},{"line":75},{"line":76},{"line":77},{"line":78},{"line":79},{"line":80},{"line":81},{"line":82},{"line":83},{"line":84},{"line":85},{"line":86}],"type":"file","fileType":"swift","content":["import SpaceKit","import Counter","import XCTest","","let COUNTER_ADDRESS = \"counter\"","","final class CounterTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(address: COUNTER_ADDRESS)","        ]","    }","    ","    func testDeployCounterInitialValueZero() throws {","        let contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 0","        )","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 0)","    }","    ","    func testDeployCounterInitialValueNonZero() throws {","        let contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 15","        )","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 15)","    }","    ","    func testIncreaseZero() throws {","        var contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 15","        )","        ","        try contract.increase(value: 0)","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 15)","    }","    ","    func testIncreaseMoreThanZero() throws {","        var contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 15","        )","        ","        try contract.increase(value: 5)","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 20)","    }","    ","    func testDecreaseZero() throws {","        var contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 15","        )","        ","        try contract.decrease(value: 0)","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 15)","    }","    ","    func testDecreaseMoreThanZero() throws {","        var contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 15","        )","        ","        try contract.decrease(value: 5)","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 10)","    }","}"]},"doc://SpaceKit/tutorials/SpaceKit/InstallingTools#Installing-SpaceKits-Dependencies":{"title":"Installing SpaceKit's Dependencies","type":"section","kind":"section","abstract":[{"text":"Before writing your first smart contract with SpaceKit, ensure you have the necessary tools installed.","type":"text"}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Installing-SpaceKits-Dependencies","url":"\/tutorials\/spacekit\/installingtools#Installing-SpaceKits-Dependencies","role":"pseudoSymbol"},"CodingFirstContractSection3Step9.swift":{"syntax":"swift","type":"file","fileType":"swift","fileName":"CounterTests.swift","highlights":[{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34}],"identifier":"CodingFirstContractSection3Step9.swift","content":["import SpaceKit","import Counter","import XCTest","","let COUNTER_ADDRESS = \"counter\"","","final class CounterTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(address: COUNTER_ADDRESS)","        ]","    }","    ","    func testDeployCounterInitialValueZero() throws {","        let contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 0","        )","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 0)","    }","    ","    func testDeployCounterInitialValueNonZero() throws {","        let contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 15","        )","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 15)","    }","}"]},"InstallingToolsSection1Step1.png":{"variants":[{"url":"\/images\/SpaceKit\/InstallingToolsSection1Step1.png","traits":["1x","light"]}],"alt":"An empty terminal window.","identifier":"InstallingToolsSection1Step1.png","type":"image"},"doc://SpaceKit/tutorials/SpaceKit/AsyncCalls#Perform-an-Asynchronous-Call":{"role":"pseudoSymbol","title":"Perform an Asynchronous Call","kind":"section","type":"section","abstract":[{"text":"Blockchain platforms using SpaceVM enable seamless execution within a sharded environment. Sharding divides a blockchain’s global state and validation workload into smaller, manageable units known as shards. This method enhances scalability without compromising decentralization, allowing nodes to operate without significant computational resources.","type":"text"}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls#Perform-an-Asynchronous-Call","url":"\/tutorials\/spacekit\/asynccalls#Perform-an-Asynchronous-Call"},"CodingFirstContractSection2Step1.swift":{"syntax":"swift","type":"file","fileType":"swift","fileName":"lib.swift","highlights":[],"identifier":"CodingFirstContractSection2Step1.swift","content":[""]},"CodingFirstContractSection3Step8.swift":{"syntax":"swift","content":["import SpaceKit","import Counter","import XCTest","","let COUNTER_ADDRESS = \"counter\"","","final class CounterTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(address: COUNTER_ADDRESS)","        ]","    }","    ","    func testDeployCounterInitialValueZero() throws {","        let contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 0","        )","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 0)","    }","}"],"fileName":"CounterTests.swift","fileType":"swift","highlights":[{"line":19},{"line":20},{"line":21},{"line":22}],"identifier":"CodingFirstContractSection3Step8.swift","type":"file"},"CodingFirstContractSection2Step2.swift":{"syntax":"swift","type":"file","fileType":"swift","fileName":"lib.swift","highlights":[{"line":1}],"identifier":"CodingFirstContractSection2Step2.swift","content":["import SpaceKit"]},"CodingFirstContractSection1Step4.png":{"variants":[{"url":"\/images\/SpaceKit\/CodingFirstContractSection1Step4.png","traits":["1x","light"]}],"alt":"Xcode's Product menu with 'Build' highlighted.","identifier":"CodingFirstContractSection1Step4.png","type":"image"},"doc://SpaceKit/tutorials/SpaceKit/SyncCalls":{"abstract":[{"type":"text","text":"Smart contracts can interact not only with users but also with other smart contracts. This enables more advanced protocols by leveraging existing ones. For example, you could integrate a decentralized exchange directly into your contract to perform token swaps. Decentralized applications often involve multiple contracts, each with a dedicated role, working together to achieve complex functionality—similar to microservices in backend systems."}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls","estimatedTime":"15min","role":"project","kind":"project","title":"Interact with Other Contracts","type":"topic","url":"\/tutorials\/spacekit\/synccalls"},"doc://SpaceKit/tutorials/SpaceKit/StoreValues":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues","type":"topic","kind":"project","title":"Persist Values Between Executions","abstract":[{"text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory.","type":"text"}],"role":"project","estimatedTime":"15min","url":"\/tutorials\/spacekit\/storevalues"},"CodingFirstContractSection2Step5.swift":{"identifier":"CodingFirstContractSection2Step5.swift","fileName":"lib.swift","syntax":"swift","highlights":[{"line":5},{"line":6},{"line":7},{"line":8}],"type":"file","fileType":"swift","content":["import SpaceKit","","@Contract public struct Counter {","    @Storage(key: \"counter\") var counter: BigUint","    ","    init(initialValue: BigUint) {","        self.counter = initialValue","    }","}"]},"doc://SpaceKit/tutorials/SpaceKit/CodingYourFirstContract#Testing-the-Contract":{"role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Testing-the-Contract","type":"section","title":"Testing the Contract","abstract":[{"type":"text","text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user."}],"kind":"section","url":"\/tutorials\/spacekit\/codingyourfirstcontract#Testing-the-Contract"},"doc://SpaceKit/tutorials/SpaceKit/InstallingTools":{"role":"project","estimatedTime":"10min","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools","type":"topic","title":"Install the Necessary Tools","abstract":[{"type":"text","text":"Before writing your first smart contract with SpaceKit, ensure you have the necessary tools installed."}],"kind":"project","url":"\/tutorials\/spacekit\/installingtools"},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Creating-Your-Own-Types":{"role":"pseudoSymbol","title":"Creating Your Own Types","kind":"section","type":"section","abstract":[{"text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Creating-Your-Own-Types","url":"\/tutorials\/spacekit\/familiarizewithtypes#Creating-Your-Own-Types"},"doc://SpaceKit/tutorials/Space/Deep-Dive-into-SpaceKit-Concepts/Persisting-Data-Across-Executions":{"title":"Persisting Data Across Executions","type":"topic","kind":"article","abstract":[],"identifier":"doc:\/\/SpaceKit\/tutorials\/Space\/Deep-Dive-into-SpaceKit-Concepts\/Persisting-Data-Across-Executions","url":"\/tutorials\/space\/deep-dive-into-spacekit-concepts\/persisting-data-across-executions","role":"article"},"CodingFirstContractSection2Step8.swift":{"highlights":[{"line":17},{"line":18},{"line":19},{"line":20}],"syntax":"swift","fileType":"swift","identifier":"CodingFirstContractSection2Step8.swift","content":["import SpaceKit","","@Contract public struct Counter {","    @Storage(key: \"counter\") var counter: BigUint","    ","    init(initialValue: BigUint) {","        self.counter = initialValue","    }","    ","    public mutating func increase(value: BigUint) {","        self.counter = self.counter + value","    }","    ","    public mutating func decrease(value: BigUint) {","        self.counter = self.counter - value","    }","    ","    public func getCounter() -> BigUint {","        return self.counter","    }","}"],"fileName":"lib.swift","type":"file"},"doc://SpaceKit/tutorials/SpaceKit/SyncCalls#Declare-the-Callee-Proxy":{"role":"pseudoSymbol","title":"Declare the Callee Proxy","kind":"section","type":"section","abstract":[{"text":"Smart contracts can interact not only with users but also with other smart contracts. This enables more advanced protocols by leveraging existing ones. For example, you could integrate a decentralized exchange directly into your contract to perform token swaps. Decentralized applications often involve multiple contracts, each with a dedicated role, working together to achieve complex functionality—similar to microservices in backend systems.","type":"text"}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls#Declare-the-Callee-Proxy","url":"\/tutorials\/spacekit\/synccalls#Declare-the-Callee-Proxy"},"doc://SpaceKit/tutorials/Space/Deep-Dive-into-SpaceKit-Concepts/Exploring-SpaceKit's-Types":{"abstract":[],"identifier":"doc:\/\/SpaceKit\/tutorials\/Space\/Deep-Dive-into-SpaceKit-Concepts\/Exploring-SpaceKit's-Types","role":"article","kind":"article","title":"Exploring SpaceKit's Types","type":"topic","url":"\/tutorials\/space\/deep-dive-into-spacekit-concepts\/exploring-spacekit's-types"},"doc://SpaceKit/tutorials/SpaceKit/CodingYourFirstContract":{"role":"project","estimatedTime":"20min","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract","type":"topic","title":"Building Your First Smart Contract","abstract":[{"type":"text","text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user."}],"kind":"project","url":"\/tutorials\/spacekit\/codingyourfirstcontract"},"doc://SpaceKit/tutorials/Space/Deep-Dive-into-SpaceKit-Concepts/Retrieving-Information-from-the-Blockchain":{"kind":"article","type":"topic","url":"\/tutorials\/space\/deep-dive-into-spacekit-concepts\/retrieving-information-from-the-blockchain","identifier":"doc:\/\/SpaceKit\/tutorials\/Space\/Deep-Dive-into-SpaceKit-Concepts\/Retrieving-Information-from-the-Blockchain","role":"article","title":"Retrieving Information from the Blockchain","abstract":[]},"doc://SpaceKit/tutorials/Space/Deep-Dive-into-SpaceKit-Concepts/Calling-Contracts-Across-Shards":{"abstract":[],"url":"\/tutorials\/space\/deep-dive-into-spacekit-concepts\/calling-contracts-across-shards","type":"topic","role":"article","identifier":"doc:\/\/SpaceKit\/tutorials\/Space\/Deep-Dive-into-SpaceKit-Concepts\/Calling-Contracts-Across-Shards","title":"Calling Contracts Across Shards","kind":"article"},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Working-with-the-BigUint-Type":{"type":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Working-with-the-BigUint-Type","role":"pseudoSymbol","kind":"section","url":"\/tutorials\/spacekit\/familiarizewithtypes#Working-with-the-BigUint-Type","abstract":[{"text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}],"title":"Working with the BigUint Type"},"CodingFirstContractSection3Step4.swift":{"content":["import SpaceKit","import Counter","import XCTest","","let COUNTER_ADDRESS = \"counter\"","","final class CounterTests: ContractTestCase {","    ","}"],"highlights":[{"line":6},{"line":7},{"line":8},{"line":9}],"fileType":"swift","identifier":"CodingFirstContractSection3Step4.swift","type":"file","syntax":"swift","fileName":"CounterTests.swift"}}}