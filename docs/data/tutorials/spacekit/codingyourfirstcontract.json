{"sections":[{"estimatedTimeInMinutes":20,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In this tutorial, you’ll create a simple smart contract that manages a counter. Users can increment or decrement the counter, and the changes are persisted across contract executions."}]}],"title":"Building Your First Smart Contract","chapter":"Building Your First Smart Contract","kind":"hero"},{"tasks":[{"title":"Initializing the Project","anchor":"Initializing-the-Project","contentSection":[{"mediaPosition":"trailing","kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"text":"Before writing the contract, set up the project using the SpaceKit command-line tool.","type":"text"}]}]}],"stepsSection":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Open a terminal."}]}],"code":null,"caption":[],"type":"step","runtimePreview":null,"media":"InstallingToolsSection1Step1.png"},{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Navigate to your desired directory and execute the command "},{"type":"codeVoice","code":"space init Counter"},{"type":"text","text":"."}]}],"type":"step","runtimePreview":null,"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This command generates a new folder named “Counter.”"}]}],"media":"CodingFirstContractSection1Step2.png"},{"runtimePreview":null,"type":"step","code":null,"media":"CodingFirstContractSection1Step3.png","caption":[{"type":"paragraph","inlineContent":[{"text":"In this tutorial, Xcode is used. If using other environments, consult their respective guides.","type":"text"}]}],"content":[{"inlineContent":[{"text":"Open the “Counter” directory in your preferred Swift IDE. Xcode or VSCode (with the official Swift extension) are recommended.","type":"text"}],"type":"paragraph"}]},{"type":"step","code":null,"media":"CodingFirstContractSection1Step4.png","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"(Optional) Build the project for improved IDE performance and macro generation."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In Xcode, go to "},{"type":"strong","inlineContent":[{"type":"text","text":"Product > Build"}]},{"type":"text","text":" or use the shortcut "},{"type":"codeVoice","code":"⌘ + B"},{"text":".","type":"text"}]}]}]},{"contentSection":[{"kind":"contentAndMedia","content":[{"inlineContent":[{"text":"Let’s write the code for the smart contract.","type":"text"}],"type":"paragraph"}],"mediaPosition":"trailing"}],"title":"Writing the Contract Code","anchor":"Writing-the-Contract-Code","stepsSection":[{"media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Open the ","type":"text"},{"code":"Contracts\/Counter\/Source\/lib.swift","type":"codeVoice"},{"text":" file and clear its contents.","type":"text"}]}],"type":"step","code":"CodingFirstContractSection2Step1.swift","caption":[],"runtimePreview":null},{"content":[{"type":"paragraph","inlineContent":[{"text":"Import the SpaceKit framework by adding ","type":"text"},{"type":"codeVoice","code":"import SpaceKit"},{"text":" at the top of the file.","type":"text"}]}],"caption":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"Note:"}],"type":"strong"},{"text":" Only the SpaceKit library is compatible with SpaceVM. Avoid importing Foundation or other frameworks.","type":"text"}],"type":"paragraph"}],"type":"step","media":null,"runtimePreview":null,"code":"CodingFirstContractSection2Step2.swift"},{"code":"CodingFirstContractSection2Step3.swift","type":"step","runtimePreview":null,"caption":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Tip:","type":"text"}]},{"text":" You can define multiple controllers in a single or multiple files. A contract consists of all the controllers declared.","type":"text"}]}],"media":null,"content":[{"inlineContent":[{"text":"Define the contract by creating a struct annotated with ","type":"text"},{"code":"@Controller","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Add a storage property to persist the counter using ","type":"text"},{"code":"@Storage(key: \"counter\")","type":"codeVoice"},{"type":"text","text":"."}]}],"media":null,"type":"step","runtimePreview":null,"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the "},{"type":"codeVoice","code":"BigUint"},{"text":" type to handle arbitrarily large numbers.","type":"text"}]}],"code":"CodingFirstContractSection2Step4.swift"},{"media":null,"code":"CodingFirstContractSection2Step5.swift","runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"Create an "},{"code":"increase","type":"codeVoice"},{"type":"text","text":" endpoint to increment the counter. This endpoint accepts a parameter specifying the increment amount."}],"type":"paragraph"}],"type":"step","caption":[]},{"type":"step","content":[{"inlineContent":[{"text":"Add a ","type":"text"},{"type":"codeVoice","code":"decrease"},{"type":"text","text":" endpoint to decrement the counter."}],"type":"paragraph"}],"caption":[{"inlineContent":[{"inlineContent":[{"text":"Note:","type":"text"}],"type":"strong"},{"type":"text","text":" The "},{"code":"BigUint","type":"codeVoice"},{"type":"text","text":" type prevents negative values. If a decrement results in a negative value, the operation fails without any changes."}],"type":"paragraph"}],"code":"CodingFirstContractSection2Step6.swift","media":null,"runtimePreview":null},{"runtimePreview":null,"code":"CodingFirstContractSection2Step7.swift","caption":[{"inlineContent":[{"text":"This function does not modify the contract’s state, that’s why we call it “view”.","type":"text"}],"type":"paragraph"}],"type":"step","media":null,"content":[{"inlineContent":[{"type":"text","text":"Implement a view function "},{"type":"codeVoice","code":"getCounter"},{"text":" to retrieve the counter value.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add an initializer to set the initial counter value during contract deployment."}]}],"media":null,"runtimePreview":null,"caption":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Tip:","type":"text"}],"type":"strong"},{"text":" The initializer is a global function executed once during deployment. It is optional.","type":"text"}]}],"code":"CodingFirstContractSection2Step8.swift","type":"step"}]},{"contentSection":[{"kind":"contentAndMedia","content":[{"inlineContent":[{"text":"Test your contract using SpaceKit’s SwiftVM emulator.","type":"text"}],"type":"paragraph"}],"mediaPosition":"trailing"}],"anchor":"Testing-the-Contract","stepsSection":[{"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Open the ","type":"text"},{"code":"Contracts\/Counter\/Tests\/CounterTests","type":"codeVoice"},{"type":"text","text":" directory. Replace any files with a new file named "},{"code":"CounterTests.swift","type":"codeVoice"},{"type":"text","text":"."}]}],"type":"step","caption":[],"code":null,"media":"CodingFirstContractSection3Step1.png"},{"type":"step","media":null,"caption":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Note:","type":"text"}]},{"type":"text","text":" XCTest is the official framework for unit tests in Swift."}]}],"code":"CodingFirstContractSection3Step2.swift","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Import ","type":"text"},{"code":"SpaceKit","type":"codeVoice"},{"type":"text","text":", your contract, and "},{"code":"XCTest","type":"codeVoice"},{"text":" into the test file.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Define the contract address. SwiftVM assigns a deterministic address for your contract.","type":"text"}]}],"caption":[],"media":null,"runtimePreview":null,"type":"step","code":"CodingFirstContractSection3Step3.swift"},{"code":"CodingFirstContractSection3Step4.swift","type":"step","caption":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Important:"}]},{"type":"text","text":" Avoid overriding "},{"code":"setUp","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"tearDown"},{"type":"text","text":" methods."}]}],"runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"Create a test class inheriting from "},{"type":"codeVoice","code":"ContractTestCase"},{"text":".","type":"text"}],"type":"paragraph"}],"media":null},{"type":"step","media":null,"caption":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Important:"}]},{"type":"text","text":" Include all "},{"type":"codeVoice","code":"@Controller"},{"text":" annotated structs in the ","type":"text"},{"type":"codeVoice","code":"controllers"},{"type":"text","text":" parameter."}]}],"code":"CodingFirstContractSection3Step5.swift","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Override ","type":"text"},{"code":"initialAccounts","type":"codeVoice"},{"type":"text","text":" to define the contract address in SwiftVM."}]}]},{"media":null,"caption":[],"code":"CodingFirstContractSection3Step6.swift","runtimePreview":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Write a unit test for deploying the contract with an initial counter value of zero."}]}]},{"caption":[{"inlineContent":[{"text":"This calls your @Init function if defined and captures any deployment errors.","type":"text"}],"type":"paragraph"}],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Deploy the contract using "},{"code":"self.deployContract","type":"codeVoice"},{"text":".","type":"text"}]}],"media":null,"runtimePreview":null,"type":"step","code":"CodingFirstContractSection3Step7.swift"},{"type":"step","code":"CodingFirstContractSection3Step8.swift","runtimePreview":null,"caption":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Note:","type":"text"}]},{"text":" The instantiated controller includes, on each endpoint, optional parameters to mock transaction data.","type":"text"}],"type":"paragraph"}],"content":[{"inlineContent":[{"type":"text","text":"Instantiate the "},{"code":"CounterController","type":"codeVoice"},{"type":"text","text":" for interacting with the contract."}],"type":"paragraph"}],"media":null},{"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Verify the counter’s initial value with the "},{"type":"codeVoice","code":"getCounter"},{"text":" view.","type":"text"}]}],"type":"step","media":null,"code":"CodingFirstContractSection3Step9.swift","caption":[]},{"code":"CodingFirstContractSection3Step10.swift","type":"step","content":[{"inlineContent":[{"type":"text","text":"Add a unit test to verify deploying the contract with a non-zero initial value."}],"type":"paragraph"}],"runtimePreview":null,"caption":[],"media":null},{"type":"step","media":null,"runtimePreview":null,"caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create unit tests for the increase endpoint, similar to the deployment tests."}]}],"code":"CodingFirstContractSection3Step11.swift"},{"media":null,"caption":[],"content":[{"type":"paragraph","inlineContent":[{"text":"Repeat for the decrease endpoint.","type":"text"}]}],"code":"CodingFirstContractSection3Step12.swift","type":"step","runtimePreview":null},{"code":"CodingFirstContractSection3Step13.swift","caption":[],"content":[{"inlineContent":[{"type":"text","text":"Add a test to ensure failure when trying to decrease the counter below zero."}],"type":"paragraph"}],"type":"step","runtimePreview":null,"media":null},{"media":"CodingFirstContractSection3Step14.png","runtimePreview":null,"content":[{"inlineContent":[{"text":"Run the tests to confirm your contract works correctly!","type":"text"}],"type":"paragraph"}],"code":null,"type":"step","caption":[]}],"title":"Testing the Contract"}],"kind":"tasks"}],"metadata":{"category":"SpaceKit","role":"project","categoryPathComponent":"SpaceKit","title":"Building Your First Smart Contract"},"schemaVersion":{"patch":0,"minor":3,"major":0},"kind":"project","identifier":{"url":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/SpaceKit\/tutorials\/SpaceKit","doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Getting-Started","doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Getting-Started\/Building-Your-First-Smart-Contract"]],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit","modules":[{"projects":[{"sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Installing-SpaceKits-Dependencies","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Setting-Up-the-SpaceKit-CLI","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract","kind":"task"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Getting-Started\/Installing-the-Tools"},{"projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract","sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Initializing-the-Project","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Writing-the-Contract-Code","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Testing-the-Contract"}]}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Getting-Started\/Building-Your-First-Smart-Contract"},{"projects":[{"sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Understanding-the-Buffer-Type"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Working-with-the-BigUint-Type","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Working-with-the-Vector-Type","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Creating-Your-Own-Types","kind":"task"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Exploring-SpaceKit's-Types"},{"projects":[{"sections":[{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues#Working-with-Storage-for-Single-Value-Persistence"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Persisting-Data-Across-Executions"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Retrieving-Information-from-the-Blockchain","projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo","sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo#Accessing-Transaction-Context-Data","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo#Accessing-Blockchain-Context-Data","kind":"task"}]}]},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Interacting-with-Other-Contracts","projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls","sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls#Declare-the-Callee-Proxy","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls#Perform-a-Synchronous-Call"}]}]},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Calling-Contracts-Across-Shards","projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls","sections":[{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls#Declare-the-Callee-Proxy"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls#Perform-an-Asynchronous-Call"}]}]},{"projects":[{"sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/UnderstandTokens#Issuing-a-Fungible-Token-from-Your-Contract","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/UnderstandTokens#Issuing-a-Non-Fungible-Token-from-Your-Contract","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/UnderstandTokens#Issuing-a-Semi-Fungible-Token-from-Your-Contract","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/UnderstandTokens#Issuing-a-Meta-ESDT-from-Your-Contract"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/UnderstandTokens"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Create-and-Manage-Tokens\/Creating-and-Understanding-Tokens"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Create-and-Manage-Tokens\/Managing-Fungible-Tokens","projects":[{"sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnFungibleTokens#Assign-Mint-and-Burn-Roles","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnFungibleTokens#Mint-New-Tokens","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnFungibleTokens#Burn-Tokens","kind":"task"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnFungibleTokens"}]},{"projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnNonFungibleTokens","sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnNonFungibleTokens#Assign-Create-AddQuantity-and-Burn-Roles","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnNonFungibleTokens#Create-a-New-Nonce","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnNonFungibleTokens#Add-Quantity-to-an-Existing-Nonce"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnNonFungibleTokens#Burn-Tokens"}]}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Create-and-Manage-Tokens\/Managing-Non-Fungible-Tokens"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Create-and-Manage-Tokens\/Enhancing-Contracts-with-Token-Attributes","projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/TokenAttributes","sections":[{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/TokenAttributes#Implementing-the-lockFunds-Endpoint"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/TokenAttributes#Implementing-the-unlockFunds-Endpoint","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/TokenAttributes#Implementing-the-changeTokenLockDuration-Endpoint","kind":"task"}]}]}]},"variants":[{"paths":["\/tutorials\/spacekit\/codingyourfirstcontract"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"CodingFirstContractSection3Step3.swift":{"highlights":[{"line":4},{"line":5}],"type":"file","fileName":"CounterTests.swift","fileType":"swift","syntax":"swift","content":["import SpaceKit","import Counter","import SpaceKitTesting","","let COUNTER_ADDRESS = \"counter\""],"identifier":"CodingFirstContractSection3Step3.swift"},"doc://SpaceKit/tutorials/SpaceKit/SyncCalls#Perform-a-Synchronous-Call":{"role":"pseudoSymbol","type":"section","url":"\/tutorials\/spacekit\/synccalls#Perform-a-Synchronous-Call","kind":"section","title":"Perform a Synchronous Call","abstract":[{"text":"Smart contracts can interact not only with users but also with other smart contracts. This enables more advanced protocols by leveraging existing ones. For example, you could integrate a decentralized exchange directly into your contract to perform token swaps. Decentralized applications often involve multiple contracts, each with a dedicated role, working together to achieve complex functionality—similar to microservices in backend systems.","type":"text"}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls#Perform-a-Synchronous-Call"},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Working-with-the-Vector-Type":{"role":"pseudoSymbol","title":"Working with the Vector Type","kind":"section","url":"\/tutorials\/spacekit\/familiarizewithtypes#Working-with-the-Vector-Type","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Working-with-the-Vector-Type","abstract":[{"type":"text","text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM."}],"type":"section"},"doc://SpaceKit/tutorials/SpaceKit/UnderstandTokens":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/UnderstandTokens","abstract":[{"type":"text","text":"Learn about the ESDT standard used in the SpaceKit framework, a token model that supports fungible tokens, non-fungible tokens (NFTs), semi-fungible tokens, and meta-esdt tokens."},{"text":" ","type":"text"},{"type":"text","text":"The SpaceKit framework uses a token standard called ESDT. This standard defines four types of tokens: fungible, non-fungible (NFT), semi-fungible, and meta-esdt."}],"type":"topic","estimatedTime":"15min","title":"Understand the ESDT Standard","kind":"project","url":"\/tutorials\/spacekit\/understandtokens","role":"project"},"doc://SpaceKit/tutorials/SpaceKit/AsyncCalls#Perform-an-Asynchronous-Call":{"url":"\/tutorials\/spacekit\/asynccalls#Perform-an-Asynchronous-Call","kind":"section","type":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls#Perform-an-Asynchronous-Call","role":"pseudoSymbol","abstract":[{"text":"Blockchain platforms using SpaceVM enable seamless execution within a sharded environment. Sharding divides a blockchain’s global state and validation workload into smaller, manageable units known as shards. This method enhances scalability without compromising decentralization, allowing nodes to operate without significant computational resources.","type":"text"}],"title":"Perform an Asynchronous Call"},"CodingFirstContractSection3Step6.swift":{"highlights":[{"line":18},{"line":19},{"line":20},{"line":21}],"type":"file","content":["import SpaceKit","import Counter","import SpaceKitTesting","","let COUNTER_ADDRESS = \"counter\"","","final class CounterTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: COUNTER_ADDRESS,","                controllers: [","                    CounterController.self","                ]","            )","        ]","    }","    ","    func testDeployCounterInitialValueZero() throws {","        ","    }","}"],"fileType":"swift","fileName":"CounterTests.swift","syntax":"swift","identifier":"CodingFirstContractSection3Step6.swift"},"doc://SpaceKit/tutorials/SpaceKit/Deep-Dive-into-SpaceKit-Concepts/Persisting-Data-Across-Executions":{"url":"\/tutorials\/spacekit\/deep-dive-into-spacekit-concepts\/persisting-data-across-executions","kind":"article","type":"topic","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Persisting-Data-Across-Executions","role":"article","abstract":[],"title":"Persisting Data Across Executions"},"CodingFirstContractSection3Step10.swift":{"type":"file","highlights":[{"line":36},{"line":37},{"line":38},{"line":39},{"line":40},{"line":41},{"line":42},{"line":43},{"line":44},{"line":45},{"line":46},{"line":47},{"line":48},{"line":49},{"line":50},{"line":51},{"line":52},{"line":53}],"content":["import SpaceKit","import Counter","import SpaceKitTesting","","let COUNTER_ADDRESS = \"counter\"","","final class CounterTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: COUNTER_ADDRESS,","                controllers: [","                    CounterController.self","                ]","            )","        ]","    }","    ","    func testDeployCounterInitialValueZero() throws {","        try self.deployContract(","            at: COUNTER_ADDRESS,","            arguments: [","                0 \/\/ Initial value","            ]","        )","        ","        let controller = self.instantiateController(","            CounterController.self,","            for: COUNTER_ADDRESS","        )!","        ","        let result = try controller.getCounter()","        ","        XCTAssertEqual(result, 0)","    }","    ","    func testDeployCounterInitialValueNonZero() throws {","        try self.deployContract(","            at: COUNTER_ADDRESS,","            arguments: [","                15 \/\/ Initial value","            ]","        )","        ","        let controller = self.instantiateController(","            CounterController.self,","            for: COUNTER_ADDRESS","        )!","        ","        let result = try controller.getCounter()","        ","        XCTAssertEqual(result, 15)","    }","}"],"fileType":"swift","fileName":"CounterTests.swift","syntax":"swift","identifier":"CodingFirstContractSection3Step10.swift"},"doc://SpaceKit/tutorials/SpaceKit/AsyncCalls#Declare-the-Callee-Proxy":{"type":"section","url":"\/tutorials\/spacekit\/asynccalls#Declare-the-Callee-Proxy","abstract":[{"text":"Blockchain platforms using SpaceVM enable seamless execution within a sharded environment. Sharding divides a blockchain’s global state and validation workload into smaller, manageable units known as shards. This method enhances scalability without compromising decentralization, allowing nodes to operate without significant computational resources.","type":"text"}],"title":"Declare the Callee Proxy","kind":"section","role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls#Declare-the-Callee-Proxy"},"doc://SpaceKit/tutorials/SpaceKit/InstallingTools":{"type":"topic","title":"Install the Necessary Tools","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools","role":"project","url":"\/tutorials\/spacekit\/installingtools","abstract":[{"text":"Before writing your first smart contract with SpaceKit, ensure you have the necessary tools installed.","type":"text"}],"kind":"project","estimatedTime":"10min"},"doc://SpaceKit/tutorials/SpaceKit/StoreValues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage":{"role":"pseudoSymbol","type":"section","url":"\/tutorials\/spacekit\/storevalues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage","kind":"section","title":"Leveraging @Mapping for Dynamic Key-Value Storage","abstract":[{"text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory.","type":"text"}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage"},"doc://SpaceKit/tutorials/SpaceKit/CodingYourFirstContract#Testing-the-Contract":{"type":"section","url":"\/tutorials\/spacekit\/codingyourfirstcontract#Testing-the-Contract","abstract":[{"text":"In this tutorial, you’ll create a simple smart contract that manages a counter. Users can increment or decrement the counter, and the changes are persisted across contract executions.","type":"text"}],"title":"Testing the Contract","kind":"section","role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Testing-the-Contract"},"doc://SpaceKit/tutorials/SpaceKit/Getting-Started/Building-Your-First-Smart-Contract":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Getting-Started\/Building-Your-First-Smart-Contract","url":"\/tutorials\/spacekit\/getting-started\/building-your-first-smart-contract","abstract":[],"role":"article","type":"topic","kind":"article","title":"Building Your First Smart Contract"},"CodingFirstContractSection2Step8.swift":{"highlights":[{"line":3},{"line":4},{"line":5},{"line":6},{"line":7},{"line":8}],"type":"file","content":["import SpaceKit","","@Init func initialize(initialValue: BigUint) {","    var controller = CounterController()","    ","    controller.counter = initialValue","}","","@Controller public struct CounterController {","    @Storage(key: \"counter\") var counter: BigUint","    ","    public mutating func increase(value: BigUint) {","        self.counter = self.counter + value","    }","    ","    public mutating func decrease(value: BigUint) {","        self.counter = self.counter - value","    }","    ","    public func getCounter() -> BigUint {","        return self.counter","    }","}"],"fileType":"swift","fileName":"lib.swift","syntax":"swift","identifier":"CodingFirstContractSection2Step8.swift"},"doc://SpaceKit/tutorials/SpaceKit/UnderstandTokens#Issuing-a-Non-Fungible-Token-from-Your-Contract":{"role":"pseudoSymbol","type":"section","url":"\/tutorials\/spacekit\/understandtokens#Issuing-a-Non-Fungible-Token-from-Your-Contract","kind":"section","title":"Issuing a Non-Fungible Token from Your Contract","abstract":[{"text":"Learn about the ESDT standard used in the SpaceKit framework, a token model that supports fungible tokens, non-fungible tokens (NFTs), semi-fungible tokens, and meta-esdt tokens.","type":"text"},{"type":"text","text":" "},{"text":"The SpaceKit framework uses a token standard called ESDT. This standard defines four types of tokens: fungible, non-fungible (NFT), semi-fungible, and meta-esdt.","type":"text"}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/UnderstandTokens#Issuing-a-Non-Fungible-Token-from-Your-Contract"},"doc://SpaceKit/tutorials/SpaceKit/Deep-Dive-into-SpaceKit-Concepts/Calling-Contracts-Across-Shards":{"role":"article","url":"\/tutorials\/spacekit\/deep-dive-into-spacekit-concepts\/calling-contracts-across-shards","kind":"article","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Calling-Contracts-Across-Shards","type":"topic","abstract":[],"title":"Calling Contracts Across Shards"},"doc://SpaceKit/tutorials/SpaceKit/OperationsOnNonFungibleTokens#Burn-Tokens":{"type":"section","title":"Burn Tokens","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnNonFungibleTokens#Burn-Tokens","role":"pseudoSymbol","url":"\/tutorials\/spacekit\/operationsonnonfungibletokens#Burn-Tokens","abstract":[{"type":"text","text":"Non-fungible tokens (NFTs) are unique digital assets that cannot be interchanged. Each NFT is associated with a unique identifier, known as a nonce. You can think of it like an airline ticket—each ticket is assigned to a specific passenger, with individual preferences and details."}],"kind":"section"},"doc://SpaceKit/tutorials/SpaceKit/StoreValues":{"type":"topic","url":"\/tutorials\/spacekit\/storevalues","abstract":[{"text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory.","type":"text"}],"title":"Persist Values Between Executions","estimatedTime":"15min","kind":"project","role":"project","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues"},"CodingFirstContractSection3Step7.swift":{"highlights":[{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25}],"type":"file","fileName":"CounterTests.swift","fileType":"swift","syntax":"swift","content":["import SpaceKit","import Counter","import SpaceKitTesting","","let COUNTER_ADDRESS = \"counter\"","","final class CounterTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: COUNTER_ADDRESS,","                controllers: [","                    CounterController.self","                ]","            )","        ]","    }","    ","    func testDeployCounterInitialValueZero() throws {","        try self.deployContract(","            at: COUNTER_ADDRESS,","            arguments: [","                0 \/\/ Initial value","            ]","        )","    }","}"],"identifier":"CodingFirstContractSection3Step7.swift"},"doc://SpaceKit/tutorials/SpaceKit/OperationsOnFungibleTokens#Burn-Tokens":{"url":"\/tutorials\/spacekit\/operationsonfungibletokens#Burn-Tokens","kind":"section","type":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnFungibleTokens#Burn-Tokens","role":"pseudoSymbol","abstract":[{"text":"Fungible tokens function similarly to traditional currencies, making them the simplest type of token to work with.","type":"text"}],"title":"Burn Tokens"},"CodingFirstContractSection3Step14.png":{"alt":"Xcode's test tab showing all tests passed.","type":"image","variants":[{"url":"\/images\/SpaceKit\/CodingFirstContractSection3Step14.png","traits":["1x","light"]}],"identifier":"CodingFirstContractSection3Step14.png"},"doc://SpaceKit/tutorials/SpaceKit/UnderstandTokens#Issuing-a-Semi-Fungible-Token-from-Your-Contract":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/UnderstandTokens#Issuing-a-Semi-Fungible-Token-from-Your-Contract","title":"Issuing a Semi-Fungible Token from Your Contract","abstract":[{"text":"Learn about the ESDT standard used in the SpaceKit framework, a token model that supports fungible tokens, non-fungible tokens (NFTs), semi-fungible tokens, and meta-esdt tokens.","type":"text"},{"type":"text","text":" "},{"text":"The SpaceKit framework uses a token standard called ESDT. This standard defines four types of tokens: fungible, non-fungible (NFT), semi-fungible, and meta-esdt.","type":"text"}],"type":"section","role":"pseudoSymbol","url":"\/tutorials\/spacekit\/understandtokens#Issuing-a-Semi-Fungible-Token-from-Your-Contract","kind":"section"},"doc://SpaceKit/tutorials/SpaceKit/OperationsOnNonFungibleTokens#Assign-Create-AddQuantity-and-Burn-Roles":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnNonFungibleTokens#Assign-Create-AddQuantity-and-Burn-Roles","abstract":[{"type":"text","text":"Non-fungible tokens (NFTs) are unique digital assets that cannot be interchanged. Each NFT is associated with a unique identifier, known as a nonce. You can think of it like an airline ticket—each ticket is assigned to a specific passenger, with individual preferences and details."}],"type":"section","title":"Assign Create, AddQuantity, and Burn Roles","kind":"section","url":"\/tutorials\/spacekit\/operationsonnonfungibletokens#Assign-Create-AddQuantity-and-Burn-Roles","role":"pseudoSymbol"},"doc://SpaceKit/tutorials/SpaceKit/TokenAttributes#Implementing-the-unlockFunds-Endpoint":{"role":"pseudoSymbol","type":"section","url":"\/tutorials\/spacekit\/tokenattributes#Implementing-the-unlockFunds-Endpoint","kind":"section","title":"Implementing the unlockFunds Endpoint","abstract":[{"text":"The ESDT standard enables embedding custom data within non-fungible tokens, allowing developers to extend the functionality of their smart contracts. This additional data, referred to as “attributes,” is tied to the token and transfers along with it between wallets.","type":"text"}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/TokenAttributes#Implementing-the-unlockFunds-Endpoint"},"CodingFirstContractSection2Step3.swift":{"highlights":[{"line":2},{"line":3},{"line":4},{"line":5}],"type":"file","fileName":"lib.swift","fileType":"swift","syntax":"swift","content":["import SpaceKit","","@Controller public struct CounterController {","    ","}"],"identifier":"CodingFirstContractSection2Step3.swift"},"doc://SpaceKit/tutorials/SpaceKit/TokenAttributes#Implementing-the-changeTokenLockDuration-Endpoint":{"title":"Implementing the changeTokenLockDuration Endpoint","role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/TokenAttributes#Implementing-the-changeTokenLockDuration-Endpoint","type":"section","url":"\/tutorials\/spacekit\/tokenattributes#Implementing-the-changeTokenLockDuration-Endpoint","abstract":[{"type":"text","text":"The ESDT standard enables embedding custom data within non-fungible tokens, allowing developers to extend the functionality of their smart contracts. This additional data, referred to as “attributes,” is tied to the token and transfers along with it between wallets."}]},"doc://SpaceKit/tutorials/SpaceKit/AsyncCalls":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls","title":"Interacting with Contracts Across Shards","abstract":[{"text":"Blockchain platforms using SpaceVM enable seamless execution within a sharded environment. Sharding divides a blockchain’s global state and validation workload into smaller, manageable units known as shards. This method enhances scalability without compromising decentralization, allowing nodes to operate without significant computational resources.","type":"text"}],"type":"topic","estimatedTime":"15min","role":"project","url":"\/tutorials\/spacekit\/asynccalls","kind":"project"},"doc://SpaceKit/tutorials/SpaceKit/TokenAttributes":{"title":"Enhance Your Contracts with Token Attributes","role":"project","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/TokenAttributes","kind":"project","estimatedTime":"15min","type":"topic","url":"\/tutorials\/spacekit\/tokenattributes","abstract":[{"type":"text","text":"The ESDT standard enables embedding custom data within non-fungible tokens, allowing developers to extend the functionality of their smart contracts. This additional data, referred to as “attributes,” is tied to the token and transfers along with it between wallets."}]},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Creating-Your-Own-Types":{"role":"pseudoSymbol","url":"\/tutorials\/spacekit\/familiarizewithtypes#Creating-Your-Own-Types","kind":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Creating-Your-Own-Types","type":"section","abstract":[{"text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}],"title":"Creating Your Own Types"},"doc://SpaceKit/tutorials/SpaceKit/Deep-Dive-into-SpaceKit-Concepts/Interacting-with-Other-Contracts":{"type":"topic","title":"Interacting with Other Contracts","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Interacting-with-Other-Contracts","role":"article","url":"\/tutorials\/spacekit\/deep-dive-into-spacekit-concepts\/interacting-with-other-contracts","abstract":[],"kind":"article"},"CodingFirstContractSection3Step11.swift":{"content":["import SpaceKit","import Counter","import SpaceKitTesting","","let COUNTER_ADDRESS = \"counter\"","","final class CounterTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: COUNTER_ADDRESS,","                controllers: [","                    CounterController.self","                ]","            )","        ]","    }","    ","    func testDeployCounterInitialValueZero() throws {","        try self.deployContract(","            at: COUNTER_ADDRESS,","            arguments: [","                0 \/\/ Initial value","            ]","        )","        ","        let controller = self.instantiateController(","            CounterController.self,","            for: COUNTER_ADDRESS","        )!","        ","        let result = try controller.getCounter()","        ","        XCTAssertEqual(result, 0)","    }","    ","    func testDeployCounterInitialValueNonZero() throws {","        try self.deployContract(","            at: COUNTER_ADDRESS,","            arguments: [","                15 \/\/ Initial value","            ]","        )","        ","        let controller = self.instantiateController(","            CounterController.self,","            for: COUNTER_ADDRESS","        )!","        ","        let result = try controller.getCounter()","        ","        XCTAssertEqual(result, 15)","    }","    ","    func testIncreaseZero() throws {","        try self.deployContract(","            at: COUNTER_ADDRESS,","            arguments: [","                15 \/\/ Initial value","            ]","        )","        ","        var controller = self.instantiateController(","            CounterController.self,","            for: COUNTER_ADDRESS","        )!","        ","        try controller.increase(value: 0)","        ","        let result = try controller.getCounter()","        ","        XCTAssertEqual(result, 15)","    }","    ","    func testIncreaseMoreThanZero() throws {","        try self.deployContract(","            at: COUNTER_ADDRESS,","            arguments: [","                15 \/\/ Initial value","            ]","        )","        ","        var controller = self.instantiateController(","            CounterController.self,","            for: COUNTER_ADDRESS","        )!","        ","        try controller.increase(value: 5)","        ","        let result = try controller.getCounter()","        ","        XCTAssertEqual(result, 20)","    }","}"],"syntax":"swift","type":"file","identifier":"CodingFirstContractSection3Step11.swift","fileType":"swift","fileName":"CounterTests.swift","highlights":[{"line":54},{"line":55},{"line":56},{"line":57},{"line":58},{"line":59},{"line":60},{"line":61},{"line":62},{"line":63},{"line":64},{"line":65},{"line":66},{"line":67},{"line":68},{"line":69},{"line":70},{"line":71},{"line":72},{"line":73},{"line":74},{"line":75},{"line":76},{"line":77},{"line":78},{"line":79},{"line":80},{"line":81},{"line":82},{"line":83},{"line":84},{"line":85},{"line":86},{"line":87},{"line":88},{"line":89},{"line":90},{"line":91},{"line":92},{"line":93}]},"doc://SpaceKit/tutorials/SpaceKit/OperationsOnFungibleTokens#Assign-Mint-and-Burn-Roles":{"url":"\/tutorials\/spacekit\/operationsonfungibletokens#Assign-Mint-and-Burn-Roles","kind":"section","type":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnFungibleTokens#Assign-Mint-and-Burn-Roles","role":"pseudoSymbol","abstract":[{"type":"text","text":"Fungible tokens function similarly to traditional currencies, making them the simplest type of token to work with."}],"title":"Assign Mint and Burn Roles"},"CodingFirstContractSection2Step7.swift":{"highlights":[{"line":13},{"line":14},{"line":15},{"line":16}],"type":"file","fileName":"lib.swift","fileType":"swift","syntax":"swift","content":["import SpaceKit","","@Controller public struct CounterController {","    @Storage(key: \"counter\") var counter: BigUint","    ","    public mutating func increase(value: BigUint) {","        self.counter = self.counter + value","    }","    ","    public mutating func decrease(value: BigUint) {","        self.counter = self.counter - value","    }","    ","    public func getCounter() -> BigUint {","        return self.counter","    }","}"],"identifier":"CodingFirstContractSection2Step7.swift"},"doc://SpaceKit/tutorials/SpaceKit/OperationsOnFungibleTokens":{"title":"Managing Fungible Tokens","role":"project","kind":"project","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnFungibleTokens","estimatedTime":"15min","type":"topic","url":"\/tutorials\/spacekit\/operationsonfungibletokens","abstract":[{"type":"text","text":"Fungible tokens function similarly to traditional currencies, making them the simplest type of token to work with."}]},"doc://SpaceKit/tutorials/SpaceKit/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract","role":"pseudoSymbol","abstract":[{"type":"text","text":"Before writing your first smart contract with SpaceKit, ensure you have the necessary tools installed."}],"title":"Initializing and Compiling Your First Smart Contract","url":"\/tutorials\/spacekit\/installingtools#Initializing-and-Compiling-Your-First-Smart-Contract","type":"section","kind":"section"},"doc://SpaceKit/tutorials/SpaceKit/OperationsOnNonFungibleTokens#Add-Quantity-to-an-Existing-Nonce":{"url":"\/tutorials\/spacekit\/operationsonnonfungibletokens#Add-Quantity-to-an-Existing-Nonce","title":"Add Quantity to an Existing Nonce","kind":"section","abstract":[{"text":"Non-fungible tokens (NFTs) are unique digital assets that cannot be interchanged. Each NFT is associated with a unique identifier, known as a nonce. You can think of it like an airline ticket—each ticket is assigned to a specific passenger, with individual preferences and details.","type":"text"}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnNonFungibleTokens#Add-Quantity-to-an-Existing-Nonce","role":"pseudoSymbol","type":"section"},"CodingFirstContractSection3Step4.swift":{"content":["import SpaceKit","import Counter","import SpaceKitTesting","","let COUNTER_ADDRESS = \"counter\"","","final class CounterTests: ContractTestCase {","    ","}"],"type":"file","syntax":"swift","fileName":"CounterTests.swift","identifier":"CodingFirstContractSection3Step4.swift","highlights":[{"line":6},{"line":7},{"line":8},{"line":9}],"fileType":"swift"},"doc://SpaceKit/tutorials/SpaceKit/TokenAttributes#Implementing-the-lockFunds-Endpoint":{"type":"section","url":"\/tutorials\/spacekit\/tokenattributes#Implementing-the-lockFunds-Endpoint","abstract":[{"text":"The ESDT standard enables embedding custom data within non-fungible tokens, allowing developers to extend the functionality of their smart contracts. This additional data, referred to as “attributes,” is tied to the token and transfers along with it between wallets.","type":"text"}],"title":"Implementing the lockFunds Endpoint","kind":"section","role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/TokenAttributes#Implementing-the-lockFunds-Endpoint"},"doc://SpaceKit/tutorials/SpaceKit/UnderstandTokens#Issuing-a-Meta-ESDT-from-Your-Contract":{"url":"\/tutorials\/spacekit\/understandtokens#Issuing-a-Meta-ESDT-from-Your-Contract","kind":"section","type":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/UnderstandTokens#Issuing-a-Meta-ESDT-from-Your-Contract","role":"pseudoSymbol","abstract":[{"text":"Learn about the ESDT standard used in the SpaceKit framework, a token model that supports fungible tokens, non-fungible tokens (NFTs), semi-fungible tokens, and meta-esdt tokens.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The SpaceKit framework uses a token standard called ESDT. This standard defines four types of tokens: fungible, non-fungible (NFT), semi-fungible, and meta-esdt."}],"title":"Issuing a Meta ESDT from Your Contract"},"doc://SpaceKit/tutorials/SpaceKit/UnderstandTokens#Issuing-a-Fungible-Token-from-Your-Contract":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/UnderstandTokens#Issuing-a-Fungible-Token-from-Your-Contract","title":"Issuing a Fungible Token from Your Contract","abstract":[{"text":"Learn about the ESDT standard used in the SpaceKit framework, a token model that supports fungible tokens, non-fungible tokens (NFTs), semi-fungible tokens, and meta-esdt tokens.","type":"text"},{"type":"text","text":" "},{"text":"The SpaceKit framework uses a token standard called ESDT. This standard defines four types of tokens: fungible, non-fungible (NFT), semi-fungible, and meta-esdt.","type":"text"}],"type":"section","role":"pseudoSymbol","url":"\/tutorials\/spacekit\/understandtokens#Issuing-a-Fungible-Token-from-Your-Contract","kind":"section"},"doc://SpaceKit/tutorials/SpaceKit/CodingYourFirstContract#Writing-the-Contract-Code":{"role":"pseudoSymbol","url":"\/tutorials\/spacekit\/codingyourfirstcontract#Writing-the-Contract-Code","kind":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Writing-the-Contract-Code","type":"section","abstract":[{"text":"In this tutorial, you’ll create a simple smart contract that manages a counter. Users can increment or decrement the counter, and the changes are persisted across contract executions.","type":"text"}],"title":"Writing the Contract Code"},"doc://SpaceKit/tutorials/SpaceKit":{"role":"overview","type":"topic","url":"\/tutorials\/spacekit","kind":"overview","title":"Meet SpaceKit","abstract":[{"text":"Discover how SpaceKit simplifies blockchain development using Swift. Dive into the world of Web3 with ease and efficiency.","type":"text"}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit"},"doc://SpaceKit/tutorials/SpaceKit/Create-and-Manage-Tokens/Managing-Non-Fungible-Tokens":{"type":"topic","title":"Managing Non-Fungible Tokens","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Create-and-Manage-Tokens\/Managing-Non-Fungible-Tokens","role":"article","url":"\/tutorials\/spacekit\/create-and-manage-tokens\/managing-non-fungible-tokens","abstract":[],"kind":"article"},"doc://SpaceKit/tutorials/SpaceKit/OperationsOnNonFungibleTokens#Create-a-New-Nonce":{"kind":"section","role":"pseudoSymbol","title":"Create a New Nonce","url":"\/tutorials\/spacekit\/operationsonnonfungibletokens#Create-a-New-Nonce","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnNonFungibleTokens#Create-a-New-Nonce","abstract":[{"text":"Non-fungible tokens (NFTs) are unique digital assets that cannot be interchanged. Each NFT is associated with a unique identifier, known as a nonce. You can think of it like an airline ticket—each ticket is assigned to a specific passenger, with individual preferences and details.","type":"text"}],"type":"section"},"doc://SpaceKit/tutorials/SpaceKit/SyncCalls#Declare-the-Callee-Proxy":{"title":"Declare the Callee Proxy","role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls#Declare-the-Callee-Proxy","kind":"section","type":"section","url":"\/tutorials\/spacekit\/synccalls#Declare-the-Callee-Proxy","abstract":[{"type":"text","text":"Smart contracts can interact not only with users but also with other smart contracts. This enables more advanced protocols by leveraging existing ones. For example, you could integrate a decentralized exchange directly into your contract to perform token swaps. Decentralized applications often involve multiple contracts, each with a dedicated role, working together to achieve complex functionality—similar to microservices in backend systems."}]},"doc://SpaceKit/tutorials/SpaceKit/OperationsOnFungibleTokens#Mint-New-Tokens":{"url":"\/tutorials\/spacekit\/operationsonfungibletokens#Mint-New-Tokens","type":"section","abstract":[{"type":"text","text":"Fungible tokens function similarly to traditional currencies, making them the simplest type of token to work with."}],"kind":"section","title":"Mint New Tokens","role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnFungibleTokens#Mint-New-Tokens"},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges":{"kind":"section","url":"\/tutorials\/spacekit\/familiarizewithtypes#Handling-Heap-Allocation-Challenges","abstract":[{"type":"text","text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM."}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges","role":"pseudoSymbol","type":"section","title":"Handling Heap Allocation Challenges"},"doc://SpaceKit/tutorials/SpaceKit/OperationsOnNonFungibleTokens":{"url":"\/tutorials\/spacekit\/operationsonnonfungibletokens","kind":"project","type":"topic","estimatedTime":"15min","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnNonFungibleTokens","role":"project","abstract":[{"type":"text","text":"Non-fungible tokens (NFTs) are unique digital assets that cannot be interchanged. Each NFT is associated with a unique identifier, known as a nonce. You can think of it like an airline ticket—each ticket is assigned to a specific passenger, with individual preferences and details."}],"title":"Managing Non-Fungible Tokens"},"doc://SpaceKit/tutorials/SpaceKit/InstallingTools#Installing-SpaceKits-Dependencies":{"role":"pseudoSymbol","type":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Installing-SpaceKits-Dependencies","kind":"section","url":"\/tutorials\/spacekit\/installingtools#Installing-SpaceKits-Dependencies","title":"Installing SpaceKit's Dependencies","abstract":[{"text":"Before writing your first smart contract with SpaceKit, ensure you have the necessary tools installed.","type":"text"}]},"doc://SpaceKit/tutorials/SpaceKit/CodingYourFirstContract":{"type":"topic","abstract":[{"type":"text","text":"In this tutorial, you’ll create a simple smart contract that manages a counter. Users can increment or decrement the counter, and the changes are persisted across contract executions."}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract","estimatedTime":"20min","title":"Building Your First Smart Contract","kind":"project","url":"\/tutorials\/spacekit\/codingyourfirstcontract","role":"project"},"CodingFirstContractSection2Step2.swift":{"highlights":[{"line":1}],"type":"file","fileName":"lib.swift","fileType":"swift","syntax":"swift","content":["import SpaceKit"],"identifier":"CodingFirstContractSection2Step2.swift"},"doc://SpaceKit/tutorials/SpaceKit/GetInfo#Accessing-Blockchain-Context-Data":{"kind":"section","role":"pseudoSymbol","title":"Accessing Blockchain Context Data","url":"\/tutorials\/spacekit\/getinfo#Accessing-Blockchain-Context-Data","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo#Accessing-Blockchain-Context-Data","abstract":[{"text":"Many smart contracts rely on contextual data to execute their operations effectively. This data can include input payments, the caller’s address, the current time, the balance of a specific account, or even the contract owner.","type":"text"}],"type":"section"},"doc://SpaceKit/tutorials/SpaceKit/Create-and-Manage-Tokens/Managing-Fungible-Tokens":{"type":"topic","title":"Managing Fungible Tokens","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Create-and-Manage-Tokens\/Managing-Fungible-Tokens","role":"article","url":"\/tutorials\/spacekit\/create-and-manage-tokens\/managing-fungible-tokens","abstract":[],"kind":"article"},"doc://SpaceKit/tutorials/SpaceKit/Create-and-Manage-Tokens/Creating-and-Understanding-Tokens":{"role":"article","type":"topic","url":"\/tutorials\/spacekit\/create-and-manage-tokens\/creating-and-understanding-tokens","kind":"article","title":"Creating and Understanding Tokens","abstract":[],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Create-and-Manage-Tokens\/Creating-and-Understanding-Tokens"},"doc://SpaceKit/tutorials/SpaceKit/CodingYourFirstContract#Initializing-the-Project":{"url":"\/tutorials\/spacekit\/codingyourfirstcontract#Initializing-the-Project","kind":"section","type":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Initializing-the-Project","role":"pseudoSymbol","abstract":[{"text":"In this tutorial, you’ll create a simple smart contract that manages a counter. Users can increment or decrement the counter, and the changes are persisted across contract executions.","type":"text"}],"title":"Initializing the Project"},"CodingFirstContractSection3Step8.swift":{"highlights":[{"line":26},{"line":27},{"line":28},{"line":29},{"line":30}],"type":"file","content":["import SpaceKit","import Counter","import SpaceKitTesting","","let COUNTER_ADDRESS = \"counter\"","","final class CounterTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: COUNTER_ADDRESS,","                controllers: [","                    CounterController.self","                ]","            )","        ]","    }","    ","    func testDeployCounterInitialValueZero() throws {","        try self.deployContract(","            at: COUNTER_ADDRESS,","            arguments: [","                0 \/\/ Initial value","            ]","        )","        ","        let controller = self.instantiateController(","            CounterController.self,","            for: COUNTER_ADDRESS","        )!","    }","}"],"fileType":"swift","syntax":"swift","fileName":"CounterTests.swift","identifier":"CodingFirstContractSection3Step8.swift"},"CodingFirstContractSection3Step12.swift":{"highlights":[{"line":94},{"line":95},{"line":96},{"line":97},{"line":98},{"line":99},{"line":100},{"line":101},{"line":102},{"line":103},{"line":104},{"line":105},{"line":106},{"line":107},{"line":108},{"line":109},{"line":110},{"line":111},{"line":112},{"line":113},{"line":114},{"line":115},{"line":116},{"line":117},{"line":118},{"line":119},{"line":120},{"line":121},{"line":122},{"line":123},{"line":124},{"line":125},{"line":126},{"line":127},{"line":128},{"line":129},{"line":130},{"line":131},{"line":132},{"line":133}],"type":"file","fileName":"CounterTests.swift","fileType":"swift","syntax":"swift","content":["import SpaceKit","import Counter","import SpaceKitTesting","","let COUNTER_ADDRESS = \"counter\"","","final class CounterTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: COUNTER_ADDRESS,","                controllers: [","                    CounterController.self","                ]","            )","        ]","    }","    ","    func testDeployCounterInitialValueZero() throws {","        try self.deployContract(","            at: COUNTER_ADDRESS,","            arguments: [","                0 \/\/ Initial value","            ]","        )","        ","        let controller = self.instantiateController(","            CounterController.self,","            for: COUNTER_ADDRESS","        )!","        ","        let result = try controller.getCounter()","        ","        XCTAssertEqual(result, 0)","    }","    ","    func testDeployCounterInitialValueNonZero() throws {","        try self.deployContract(","            at: COUNTER_ADDRESS,","            arguments: [","                15 \/\/ Initial value","            ]","        )","        ","        let controller = self.instantiateController(","            CounterController.self,","            for: COUNTER_ADDRESS","        )!","        ","        let result = try controller.getCounter()","        ","        XCTAssertEqual(result, 15)","    }","    ","    func testIncreaseZero() throws {","        try self.deployContract(","            at: COUNTER_ADDRESS,","            arguments: [","                15 \/\/ Initial value","            ]","        )","        ","        var controller = self.instantiateController(","            CounterController.self,","            for: COUNTER_ADDRESS","        )!","        ","        try controller.increase(value: 0)","        ","        let result = try controller.getCounter()","        ","        XCTAssertEqual(result, 15)","    }","    ","    func testIncreaseMoreThanZero() throws {","        try self.deployContract(","            at: COUNTER_ADDRESS,","            arguments: [","                15 \/\/ Initial value","            ]","        )","        ","        var controller = self.instantiateController(","            CounterController.self,","            for: COUNTER_ADDRESS","        )!","        ","        try controller.increase(value: 5)","        ","        let result = try controller.getCounter()","        ","        XCTAssertEqual(result, 20)","    }","    ","    func testDecreaseZero() throws {","        try self.deployContract(","            at: COUNTER_ADDRESS,","            arguments: [","                15 \/\/ Initial value","            ]","        )","        ","        var controller = self.instantiateController(","            CounterController.self,","            for: COUNTER_ADDRESS","        )!","        ","        try controller.decrease(value: 0)","        ","        let result = try controller.getCounter()","        ","        XCTAssertEqual(result, 15)","    }","    ","    func testDecreaseMoreThanZero() throws {","        try self.deployContract(","            at: COUNTER_ADDRESS,","            arguments: [","                15 \/\/ Initial value","            ]","        )","        ","        var controller = self.instantiateController(","            CounterController.self,","            for: COUNTER_ADDRESS","        )!","        ","        try controller.decrease(value: 5)","        ","        let result = try controller.getCounter()","        ","        XCTAssertEqual(result, 10)","    }","}"],"identifier":"CodingFirstContractSection3Step12.swift"},"CodingFirstContractSection2Step1.swift":{"highlights":[],"type":"file","content":[""],"fileType":"swift","syntax":"swift","fileName":"lib.swift","identifier":"CodingFirstContractSection2Step1.swift"},"doc://SpaceKit/tutorials/SpaceKit/Create-and-Manage-Tokens/Enhancing-Contracts-with-Token-Attributes":{"kind":"article","role":"article","title":"Enhancing Contracts with Token Attributes","url":"\/tutorials\/spacekit\/create-and-manage-tokens\/enhancing-contracts-with-token-attributes","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Create-and-Manage-Tokens\/Enhancing-Contracts-with-Token-Attributes","abstract":[],"type":"topic"},"doc://SpaceKit/tutorials/SpaceKit/Deep-Dive-into-SpaceKit-Concepts/Exploring-SpaceKit's-Types":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Exploring-SpaceKit's-Types","role":"article","abstract":[],"title":"Exploring SpaceKit's Types","url":"\/tutorials\/spacekit\/deep-dive-into-spacekit-concepts\/exploring-spacekit's-types","type":"topic","kind":"article"},"doc://SpaceKit/tutorials/SpaceKit/GetInfo":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo","title":"Retrieving Information from the Blockchain","abstract":[{"text":"Many smart contracts rely on contextual data to execute their operations effectively. This data can include input payments, the caller’s address, the current time, the balance of a specific account, or even the contract owner.","type":"text"}],"type":"topic","estimatedTime":"10min","role":"project","url":"\/tutorials\/spacekit\/getinfo","kind":"project"},"CodingFirstContractSection2Step6.swift":{"highlights":[{"line":9},{"line":10},{"line":11},{"line":12}],"type":"file","fileName":"lib.swift","fileType":"swift","syntax":"swift","content":["import SpaceKit","","@Controller public struct CounterController {","    @Storage(key: \"counter\") var counter: BigUint","    ","    public mutating func increase(value: BigUint) {","        self.counter = self.counter + value","    }","    ","    public mutating func decrease(value: BigUint) {","        self.counter = self.counter - value","    }","}"],"identifier":"CodingFirstContractSection2Step6.swift"},"CodingFirstContractSection2Step5.swift":{"syntax":"swift","fileType":"swift","identifier":"CodingFirstContractSection2Step5.swift","fileName":"lib.swift","type":"file","content":["import SpaceKit","","@Controller public struct CounterController {","    @Storage(key: \"counter\") var counter: BigUint","    ","    public mutating func increase(value: BigUint) {","        self.counter = self.counter + value","    }","}"],"highlights":[{"line":5},{"line":6},{"line":7},{"line":8}]},"CodingFirstContractSection3Step13.swift":{"type":"file","highlights":[{"line":134},{"line":135},{"line":136},{"line":137},{"line":138},{"line":139},{"line":140},{"line":141},{"line":142},{"line":143},{"line":144},{"line":145},{"line":146},{"line":147},{"line":148},{"line":149},{"line":150},{"line":151},{"line":152},{"line":153},{"line":154},{"line":155}],"content":["import SpaceKit","import Counter","import SpaceKitTesting","","let COUNTER_ADDRESS = \"counter\"","","final class CounterTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: COUNTER_ADDRESS,","                controllers: [","                    CounterController.self","                ]","            )","        ]","    }","    ","    func testDeployCounterInitialValueZero() throws {","        try self.deployContract(","            at: COUNTER_ADDRESS,","            arguments: [","                0 \/\/ Initial value","            ]","        )","        ","        let controller = self.instantiateController(","            CounterController.self,","            for: COUNTER_ADDRESS","        )!","        ","        let result = try controller.getCounter()","        ","        XCTAssertEqual(result, 0)","    }","    ","    func testDeployCounterInitialValueNonZero() throws {","        try self.deployContract(","            at: COUNTER_ADDRESS,","            arguments: [","                15 \/\/ Initial value","            ]","        )","        ","        let controller = self.instantiateController(","            CounterController.self,","            for: COUNTER_ADDRESS","        )!","        ","        let result = try controller.getCounter()","        ","        XCTAssertEqual(result, 15)","    }","    ","    func testIncreaseZero() throws {","        try self.deployContract(","            at: COUNTER_ADDRESS,","            arguments: [","                15 \/\/ Initial value","            ]","        )","        ","        var controller = self.instantiateController(","            CounterController.self,","            for: COUNTER_ADDRESS","        )!","        ","        try controller.increase(value: 0)","        ","        let result = try controller.getCounter()","        ","        XCTAssertEqual(result, 15)","    }","    ","    func testIncreaseMoreThanZero() throws {","        try self.deployContract(","            at: COUNTER_ADDRESS,","            arguments: [","                15 \/\/ Initial value","            ]","        )","        ","        var controller = self.instantiateController(","            CounterController.self,","            for: COUNTER_ADDRESS","        )!","        ","        try controller.increase(value: 5)","        ","        let result = try controller.getCounter()","        ","        XCTAssertEqual(result, 20)","    }","    ","    func testDecreaseZero() throws {","        try self.deployContract(","            at: COUNTER_ADDRESS,","            arguments: [","                15 \/\/ Initial value","            ]","        )","        ","        var controller = self.instantiateController(","            CounterController.self,","            for: COUNTER_ADDRESS","        )!","        ","        try controller.decrease(value: 0)","        ","        let result = try controller.getCounter()","        ","        XCTAssertEqual(result, 15)","    }","    ","    func testDecreaseMoreThanZero() throws {","        try self.deployContract(","            at: COUNTER_ADDRESS,","            arguments: [","                15 \/\/ Initial value","            ]","        )","        ","        var controller = self.instantiateController(","            CounterController.self,","            for: COUNTER_ADDRESS","        )!","        ","        try controller.decrease(value: 5)","        ","        let result = try controller.getCounter()","        ","        XCTAssertEqual(result, 10)","    }","    ","    func testDecreaseTooMuchShouldFail() throws {","        try self.deployContract(","            at: COUNTER_ADDRESS,","            arguments: [","                15 \/\/ Initial value","            ]","        )","        ","        var controller = self.instantiateController(","            CounterController.self,","            for: COUNTER_ADDRESS","        )!","        ","        do {","            try controller.decrease(value: 16)","            ","            XCTFail() \/\/ Decrease fails, so this line should not be executed","        } catch {","            XCTAssertEqual(error, .userError(message: \"cannot subtract because result would be negative\"))","        }","    }","}"],"fileType":"swift","fileName":"CounterTests.swift","syntax":"swift","identifier":"CodingFirstContractSection3Step13.swift"},"CodingFirstContractSection1Step2.png":{"alt":"Output of the `space init Counter` command.","type":"image","variants":[{"traits":["1x","light"],"url":"\/images\/SpaceKit\/CodingFirstContractSection1Step2.png"}],"identifier":"CodingFirstContractSection1Step2.png"},"CodingFirstContractSection3Step5.swift":{"type":"file","highlights":[{"line":8},{"line":9},{"line":10},{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17}],"content":["import SpaceKit","import Counter","import SpaceKitTesting","","let COUNTER_ADDRESS = \"counter\"","","final class CounterTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: COUNTER_ADDRESS,","                controllers: [","                    CounterController.self","                ]","            )","        ]","    }","}"],"fileType":"swift","fileName":"CounterTests.swift","syntax":"swift","identifier":"CodingFirstContractSection3Step5.swift"},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Understanding-the-Buffer-Type":{"kind":"section","url":"\/tutorials\/spacekit\/familiarizewithtypes#Understanding-the-Buffer-Type","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Understanding-the-Buffer-Type","abstract":[{"type":"text","text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM."}],"role":"pseudoSymbol","type":"section","title":"Understanding the Buffer Type"},"CodingFirstContractSection1Step4.png":{"alt":"Xcode's Product menu with 'Build' highlighted.","type":"image","variants":[{"url":"\/images\/SpaceKit\/CodingFirstContractSection1Step4.png","traits":["1x","light"]}],"identifier":"CodingFirstContractSection1Step4.png"},"doc://SpaceKit/tutorials/SpaceKit/InstallingTools#Setting-Up-the-SpaceKit-CLI":{"role":"pseudoSymbol","type":"section","url":"\/tutorials\/spacekit\/installingtools#Setting-Up-the-SpaceKit-CLI","kind":"section","title":"Setting Up the SpaceKit CLI","abstract":[{"text":"Before writing your first smart contract with SpaceKit, ensure you have the necessary tools installed.","type":"text"}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Setting-Up-the-SpaceKit-CLI"},"InstallingToolsSection1Step1.png":{"alt":"An empty terminal window.","type":"image","variants":[{"traits":["1x","light"],"url":"\/images\/SpaceKit\/InstallingToolsSection1Step1.png"}],"identifier":"InstallingToolsSection1Step1.png"},"doc://SpaceKit/tutorials/SpaceKit/Getting-Started/Installing-the-Tools":{"type":"topic","title":"Installing the Tools","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Getting-Started\/Installing-the-Tools","role":"article","url":"\/tutorials\/spacekit\/getting-started\/installing-the-tools","abstract":[],"kind":"article"},"doc://SpaceKit/tutorials/SpaceKit/StoreValues#Working-with-Storage-for-Single-Value-Persistence":{"role":"pseudoSymbol","type":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues#Working-with-Storage-for-Single-Value-Persistence","kind":"section","url":"\/tutorials\/spacekit\/storevalues#Working-with-Storage-for-Single-Value-Persistence","title":"Working with @Storage for Single Value Persistence","abstract":[{"text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory.","type":"text"}]},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes":{"type":"topic","title":"Exploring SpaceKit's Types","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes","role":"project","url":"\/tutorials\/spacekit\/familiarizewithtypes","abstract":[{"type":"text","text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM."}],"kind":"project","estimatedTime":"20min"},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Working-with-the-BigUint-Type":{"url":"\/tutorials\/spacekit\/familiarizewithtypes#Working-with-the-BigUint-Type","kind":"section","type":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Working-with-the-BigUint-Type","role":"pseudoSymbol","abstract":[{"text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}],"title":"Working with the BigUint Type"},"CodingFirstContractSection1Step3.png":{"alt":"Xcode project selection screen with 'Counter' highlighted.","type":"image","variants":[{"url":"\/images\/SpaceKit\/CodingFirstContractSection1Step3.png","traits":["1x","light"]}],"identifier":"CodingFirstContractSection1Step3.png"},"CodingFirstContractSection3Step9.swift":{"highlights":[{"line":31},{"line":32},{"line":33},{"line":34}],"type":"file","fileName":"CounterTests.swift","fileType":"swift","syntax":"swift","content":["import SpaceKit","import Counter","import SpaceKitTesting","","let COUNTER_ADDRESS = \"counter\"","","final class CounterTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: COUNTER_ADDRESS,","                controllers: [","                    CounterController.self","                ]","            )","        ]","    }","    ","    func testDeployCounterInitialValueZero() throws {","        try self.deployContract(","            at: COUNTER_ADDRESS,","            arguments: [","                0 \/\/ Initial value","            ]","        )","        ","        let controller = self.instantiateController(","            CounterController.self,","            for: COUNTER_ADDRESS","        )!","        ","        let result = try controller.getCounter()","        ","        XCTAssertEqual(result, 0)","    }","}"],"identifier":"CodingFirstContractSection3Step9.swift"},"doc://SpaceKit/tutorials/SpaceKit/SyncCalls":{"role":"project","type":"topic","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls","kind":"project","url":"\/tutorials\/spacekit\/synccalls","estimatedTime":"15min","title":"Interact with Other Contracts","abstract":[{"text":"Smart contracts can interact not only with users but also with other smart contracts. This enables more advanced protocols by leveraging existing ones. For example, you could integrate a decentralized exchange directly into your contract to perform token swaps. Decentralized applications often involve multiple contracts, each with a dedicated role, working together to achieve complex functionality—similar to microservices in backend systems.","type":"text"}]},"CodingFirstContractSection3Step2.swift":{"highlights":[],"type":"file","content":["import SpaceKit","import Counter","import SpaceKitTesting"],"fileType":"swift","syntax":"swift","fileName":"CounterTests.swift","identifier":"CodingFirstContractSection3Step2.swift"},"doc://SpaceKit/tutorials/SpaceKit/Deep-Dive-into-SpaceKit-Concepts/Retrieving-Information-from-the-Blockchain":{"url":"\/tutorials\/spacekit\/deep-dive-into-spacekit-concepts\/retrieving-information-from-the-blockchain","kind":"article","type":"topic","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Retrieving-Information-from-the-Blockchain","role":"article","abstract":[],"title":"Retrieving Information from the Blockchain"},"doc://SpaceKit/tutorials/SpaceKit/GetInfo#Accessing-Transaction-Context-Data":{"role":"pseudoSymbol","type":"section","url":"\/tutorials\/spacekit\/getinfo#Accessing-Transaction-Context-Data","kind":"section","title":"Accessing Transaction Context Data","abstract":[{"text":"Many smart contracts rely on contextual data to execute their operations effectively. This data can include input payments, the caller’s address, the current time, the balance of a specific account, or even the contract owner.","type":"text"}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo#Accessing-Transaction-Context-Data"},"CodingFirstContractSection2Step4.swift":{"highlights":[{"line":4}],"type":"file","fileName":"lib.swift","fileType":"swift","syntax":"swift","content":["import SpaceKit","","@Controller public struct CounterController {","    @Storage(key: \"counter\") var counter: BigUint","}"],"identifier":"CodingFirstContractSection2Step4.swift"},"CodingFirstContractSection3Step1.png":{"alt":"File tree showing newly created `CounterTests.swift`.","type":"image","variants":[{"traits":["1x","light"],"url":"\/images\/SpaceKit\/CodingFirstContractSection3Step1.png"}],"identifier":"CodingFirstContractSection3Step1.png"}}}