{"sections":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user."}]}],"kind":"hero","estimatedTimeInMinutes":20,"title":"Building Your First Smart Contract","chapter":"Building Your First Smart Contract"},{"tasks":[{"title":"Initializing the Project","contentSection":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Before writing the contract, let’s initialize the project using the SpaceKit CLI."}]}],"mediaPosition":"trailing","kind":"contentAndMedia"}],"anchor":"Initializing-the-Project","stepsSection":[{"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Open a terminal.","type":"text"}]}],"code":null,"type":"step","caption":[],"media":"InstallingToolsSection1Step1.png"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Navigate to the desired directory, then run the command "},{"code":"space init Counter","type":"codeVoice"},{"type":"text","text":"."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This command creates a new directory named “Counter.”"}]}],"type":"step","runtimePreview":null,"code":null,"media":"CodingFirstContractSection1Step2.png"},{"code":null,"runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"Open the project in your preferred Swift IDE by opening the “Counter” directory."}],"type":"paragraph"}],"type":"step","media":"CodingFirstContractSection1Step3.png","caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We recommend Xcode or VSCode with the official Swift extension. In this tutorial, we’ll use Xcode. For other environments like VSCode on Linux or Windows, dedicated tutorials may be available."}]}]},{"caption":[{"type":"paragraph","inlineContent":[{"text":"In Xcode, go to ","type":"text"},{"inlineContent":[{"text":"Product > Build","type":"text"}],"type":"strong"},{"type":"text","text":" or press "},{"code":"⌘ + B","type":"codeVoice"},{"type":"text","text":"."}]}],"media":"CodingFirstContractSection1Step4.png","code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"(Optional) Build the project to enable macros and improve indexing in your IDE."}]}],"type":"step","runtimePreview":null}]},{"anchor":"Writing-the-Contract-Code","title":"Writing the Contract Code","stepsSection":[{"runtimePreview":null,"type":"step","media":null,"code":"CodingFirstContractSection2Step1.swift","caption":[],"content":[{"inlineContent":[{"type":"text","text":"Open the "},{"type":"codeVoice","code":"Contracts\/Counter\/Source\/lib.swift"},{"text":" file and delete its contents.","type":"text"}],"type":"paragraph"}]},{"media":null,"code":"CodingFirstContractSection2Step2.swift","runtimePreview":null,"content":[{"inlineContent":[{"text":"Import the framework by adding ","type":"text"},{"type":"codeVoice","code":"import SpaceKit"},{"text":".","type":"text"}],"type":"paragraph"}],"caption":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Note:"}],"type":"strong"},{"type":"text","text":" Only import the SpaceKit framework. Other libraries like Foundation are not compatible with SpaceVM."}]}],"type":"step"},{"caption":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Note:"}]},{"type":"text","text":" You should have only one "},{"type":"codeVoice","code":"@Contract"},{"text":" struct. The logic can be spread across multiple files, but the ","type":"text"},{"type":"codeVoice","code":"@Contract"},{"type":"text","text":" struct remains central."}]}],"runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"Declare the contract by annotating a struct with "},{"code":"@Contract","type":"codeVoice"},{"type":"text","text":". For this project, we’ll declare the "},{"code":"Counter","type":"codeVoice"},{"type":"text","text":" contract."}],"type":"paragraph"}],"media":null,"type":"step","code":"CodingFirstContractSection2Step3.swift"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"To persist the counter across executions, declare it in the contract’s storage with "},{"type":"codeVoice","code":"@Storage(key: \"counter\")"},{"type":"text","text":"."}]}],"media":null,"code":"CodingFirstContractSection2Step4.swift","runtimePreview":null,"type":"step","caption":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Note:","type":"text"}]},{"type":"text","text":" The "},{"type":"codeVoice","code":"BigUint"},{"type":"text","text":" type handles arbitrarily large numbers, so there’s no risk of overflow."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Define the initializer for the contract, which is executed only once during deployment to set the initial counter value."}]}],"type":"step","media":null,"code":"CodingFirstContractSection2Step5.swift","caption":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Note:"}],"type":"strong"},{"text":" The initializer is called only when the contract is deployed.","type":"text"}]}],"runtimePreview":null},{"caption":[],"code":"CodingFirstContractSection2Step6.swift","runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"Create an endpoint "},{"type":"codeVoice","code":"increase"},{"text":" to allow users to increment the counter. The function takes a single user-provided parameter indicating how much to increment the counter.","type":"text"}],"type":"paragraph"}],"type":"step","media":null},{"type":"step","media":null,"caption":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Note:"}]},{"type":"text","text":" The "},{"type":"codeVoice","code":"BigUint"},{"type":"text","text":" type cannot be negative, so if the operation results in a negative value, the transaction will fail without changes being committed."}]}],"content":[{"inlineContent":[{"type":"text","text":"Similarly, create the "},{"type":"codeVoice","code":"decrease"},{"type":"text","text":" endpoint to decrement the counter."}],"type":"paragraph"}],"code":"CodingFirstContractSection2Step7.swift","runtimePreview":null},{"code":"CodingFirstContractSection2Step8.swift","caption":[],"media":null,"runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"To allow users or other contracts to retrieve the counter’s value, create a view function ("},{"code":"getCounter","type":"codeVoice"},{"text":"), which does not modify the contract’s state.","type":"text"}],"type":"paragraph"}],"type":"step"}],"contentSection":[{"content":[{"inlineContent":[{"text":"Let’s start coding the smart contract.","type":"text"}],"type":"paragraph"}],"mediaPosition":"trailing","kind":"contentAndMedia"}]},{"stepsSection":[{"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Open the ","type":"text"},{"code":"Contracts\/Counter\/Tests\/CounterTests","type":"codeVoice"},{"type":"text","text":" directory. Delete any files and create a new file named "},{"type":"codeVoice","code":"CounterTests.swift"},{"type":"text","text":"."}]}],"code":null,"runtimePreview":null,"media":"CodingFirstContractSection3Step1.png","caption":[]},{"caption":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Note:","type":"text"}]},{"type":"text","text":" XCTest is the official tool for writing unit tests in Swift."}]}],"media":null,"code":"CodingFirstContractSection3Step2.swift","type":"step","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Import the necessary frameworks: SpaceKit, your contract, and XCTest."}]}]},{"media":null,"caption":[],"type":"step","content":[{"inlineContent":[{"type":"text","text":"Declare the contract’s address, as SwiftVM assigns a deterministic address to our contract."}],"type":"paragraph"}],"code":"CodingFirstContractSection3Step3.swift","runtimePreview":null},{"code":"CodingFirstContractSection3Step4.swift","runtimePreview":null,"media":null,"content":[{"inlineContent":[{"text":"Create a class for the tests, inheriting from ","type":"text"},{"type":"codeVoice","code":"ContractTestCase"},{"text":".","type":"text"}],"type":"paragraph"}],"type":"step","caption":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Note:"}]},{"type":"text","text":" Avoid overriding the "},{"code":"setUp","type":"codeVoice"},{"type":"text","text":" and "},{"code":"tearDown","type":"codeVoice"},{"text":" methods.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Override the "},{"type":"codeVoice","code":"initialAccounts"},{"text":" property to declare the contract’s address in SwiftVM.","type":"text"}],"type":"paragraph"}],"media":null,"runtimePreview":null,"code":"CodingFirstContractSection3Step5.swift","type":"step","caption":[]},{"caption":[],"media":null,"type":"step","content":[{"inlineContent":[{"type":"text","text":"Create the first unit test to verify deploying the contract with an initial counter value of zero."}],"type":"paragraph"}],"code":"CodingFirstContractSection3Step6.swift","runtimePreview":null},{"content":[{"inlineContent":[{"text":"Deploy the contract with an initial value of 0 using the generated ","type":"text"},{"type":"codeVoice","code":"testable"},{"type":"text","text":" function."}],"type":"paragraph"}],"caption":[{"inlineContent":[{"inlineContent":[{"text":"Note:","type":"text"}],"type":"strong"},{"text":" This function allows you to catch any errors during execution.","type":"text"}],"type":"paragraph"}],"type":"step","media":null,"runtimePreview":null,"code":"CodingFirstContractSection3Step7.swift"},{"media":null,"content":[{"inlineContent":[{"text":"Call the ","type":"text"},{"type":"codeVoice","code":"getCounter"},{"type":"text","text":" view to assert the counter is 0."}],"type":"paragraph"}],"code":"CodingFirstContractSection3Step8.swift","type":"step","caption":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Note:","type":"text"}],"type":"strong"},{"type":"text","text":" SpaceKit generates functions for contract views and endpoints."}]}],"runtimePreview":null},{"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Add a unit test to verify deploying the contract with a non-zero initial value.","type":"text"}]}],"caption":[],"code":"CodingFirstContractSection3Step9.swift","media":null,"type":"step"},{"caption":[],"type":"step","media":null,"runtimePreview":null,"code":"CodingFirstContractSection3Step10.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create unit tests for the "},{"type":"codeVoice","code":"increase"},{"text":" endpoint, similar to the deployment tests.","type":"text"}]}]},{"runtimePreview":null,"caption":[],"content":[{"inlineContent":[{"text":"Repeat for the ","type":"text"},{"code":"decrease","type":"codeVoice"},{"type":"text","text":" endpoint."}],"type":"paragraph"}],"code":"CodingFirstContractSection3Step11.swift","type":"step","media":null},{"media":null,"caption":[],"type":"step","content":[{"inlineContent":[{"type":"text","text":"Add a test to ensure failure when trying to decrease the counter below zero."}],"type":"paragraph"}],"code":"CodingFirstContractSection3Step12.swift","runtimePreview":null},{"caption":[],"media":"CodingFirstContractSection3Step13.png","content":[{"type":"paragraph","inlineContent":[{"text":"Run the tests to confirm your contract works correctly!","type":"text"}]}],"type":"step","code":null,"runtimePreview":null}],"anchor":"Testing-the-Contract","contentSection":[{"mediaPosition":"trailing","content":[{"type":"paragraph","inlineContent":[{"text":"SpaceKit includes a built-in emulator called SwiftVM, which allows you to test your contract in the Swift environment.","type":"text"}]}],"kind":"contentAndMedia"}],"title":"Testing the Contract"}],"kind":"tasks"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract"},"kind":"project","schemaVersion":{"patch":0,"major":0,"minor":3},"variants":[{"paths":["\/tutorials\/spacekit\/codingyourfirstcontract"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/SpaceKit\/tutorials\/SpaceKit","doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Getting-Started","doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Getting-Started\/Building-Your-First-Smart-Contract"]],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit","modules":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Getting-Started\/Installing-the-Tools","projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools","sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Installing-SpaceKits-Dependencies","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Setting-Up-the-SpaceKit-CLI","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract","kind":"task"}]}]},{"projects":[{"sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Initializing-the-Project","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Writing-the-Contract-Code"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Testing-the-Contract"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Getting-Started\/Building-Your-First-Smart-Contract"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Exploring-SpaceKit's-Types","projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes","sections":[{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Understanding-the-Buffer-Type"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Working-with-the-BigUint-Type"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Working-with-the-Vector-Type"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Creating-Your-Own-Types","kind":"task"}]}]},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Persisting-Data-Across-Executions","projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues","sections":[{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues#Working-with-Storage-for-Single-Value-Persistence"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage","kind":"task"}]}]},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Retrieving-Information-from-the-Blockchain","projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo","sections":[{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo#Accessing-Transaction-Context-Data"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo#Accessing-Blockchain-Context-Data","kind":"task"}]}]},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Interacting-with-Other-Contracts","projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls","sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls#Declare-the-Callee-Proxy","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls#Perform-a-Synchronous-Call","kind":"task"}]}]},{"projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls","sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls#Declare-the-Callee-Proxy","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls#Perform-an-Asynchronous-Call","kind":"task"}]}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Calling-Contracts-Across-Shards"}]},"metadata":{"categoryPathComponent":"SpaceKit","category":"SpaceKit","title":"Building Your First Smart Contract","role":"project"},"references":{"doc://SpaceKit/tutorials/SpaceKit/CodingYourFirstContract":{"abstract":[{"type":"text","text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user."}],"kind":"project","url":"\/tutorials\/spacekit\/codingyourfirstcontract","title":"Building Your First Smart Contract","role":"project","estimatedTime":"20min","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract","type":"topic"},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes":{"url":"\/tutorials\/spacekit\/familiarizewithtypes","type":"topic","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes","kind":"project","abstract":[{"type":"text","text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM."}],"role":"project","estimatedTime":"20min","title":"Exploring SpaceKit's Types"},"CodingFirstContractSection3Step7.swift":{"highlights":[{"line":15},{"line":16},{"line":17},{"line":18}],"type":"file","identifier":"CodingFirstContractSection3Step7.swift","syntax":"swift","fileName":"CounterTests.swift","content":["import SpaceKit","import Counter","import XCTest","","let COUNTER_ADDRESS = \"counter\"","","final class CounterTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(address: COUNTER_ADDRESS)","        ]","    }","    ","    func testDeployCounterInitialValueZero() throws {","        let contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 0","        )","    }","}"],"fileType":"swift"},"doc://SpaceKit/tutorials/SpaceKit/Deep-Dive-into-SpaceKit-Concepts/Interacting-with-Other-Contracts":{"role":"article","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Interacting-with-Other-Contracts","url":"\/tutorials\/spacekit\/deep-dive-into-spacekit-concepts\/interacting-with-other-contracts","type":"topic","title":"Interacting with Other Contracts","kind":"article","abstract":[]},"CodingFirstContractSection1Step4.png":{"type":"image","alt":"Xcode's Product menu with 'Build' highlighted.","identifier":"CodingFirstContractSection1Step4.png","variants":[{"url":"\/images\/SpaceKit\/CodingFirstContractSection1Step4.png","traits":["1x","light"]}]},"doc://SpaceKit/tutorials/SpaceKit/Deep-Dive-into-SpaceKit-Concepts/Persisting-Data-Across-Executions":{"type":"topic","role":"article","kind":"article","abstract":[],"url":"\/tutorials\/spacekit\/deep-dive-into-spacekit-concepts\/persisting-data-across-executions","title":"Persisting Data Across Executions","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Persisting-Data-Across-Executions"},"CodingFirstContractSection3Step13.png":{"type":"image","alt":"Xcode's test tab showing all tests passed.","identifier":"CodingFirstContractSection3Step13.png","variants":[{"traits":["1x","light"],"url":"\/images\/SpaceKit\/CodingFirstContractSection3Step13.png"}]},"CodingFirstContractSection3Step1.png":{"type":"image","alt":"File tree showing newly created `CounterTests.swift`.","identifier":"CodingFirstContractSection3Step1.png","variants":[{"url":"\/images\/SpaceKit\/CodingFirstContractSection3Step1.png","traits":["1x","light"]}]},"doc://SpaceKit/tutorials/SpaceKit/InstallingTools#Setting-Up-the-SpaceKit-CLI":{"title":"Setting Up the SpaceKit CLI","role":"pseudoSymbol","url":"\/tutorials\/spacekit\/installingtools#Setting-Up-the-SpaceKit-CLI","kind":"section","type":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Setting-Up-the-SpaceKit-CLI","abstract":[{"type":"text","text":"Before writing your first smart contract with SpaceKit, ensure you have the necessary tools installed."}]},"doc://SpaceKit/tutorials/SpaceKit/StoreValues":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues","abstract":[{"type":"text","text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory."}],"type":"topic","role":"project","estimatedTime":"15min","title":"Persist Values Between Executions","kind":"project","url":"\/tutorials\/spacekit\/storevalues"},"CodingFirstContractSection3Step3.swift":{"fileName":"CounterTests.swift","content":["import SpaceKit","import Counter","import XCTest","","let COUNTER_ADDRESS = \"counter\""],"highlights":[{"line":4},{"line":5}],"type":"file","identifier":"CodingFirstContractSection3Step3.swift","fileType":"swift","syntax":"swift"},"doc://SpaceKit/tutorials/SpaceKit/Getting-Started/Installing-the-Tools":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Getting-Started\/Installing-the-Tools","abstract":[],"type":"topic","role":"article","title":"Installing the Tools","kind":"article","url":"\/tutorials\/spacekit\/getting-started\/installing-the-tools"},"CodingFirstContractSection3Step4.swift":{"fileName":"CounterTests.swift","content":["import SpaceKit","import Counter","import XCTest","","let COUNTER_ADDRESS = \"counter\"","","final class CounterTests: ContractTestCase {","    ","}"],"highlights":[{"line":6},{"line":7},{"line":8},{"line":9}],"type":"file","identifier":"CodingFirstContractSection3Step4.swift","fileType":"swift","syntax":"swift"},"doc://SpaceKit/tutorials/SpaceKit/SyncCalls":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls","abstract":[{"type":"text","text":"Smart contracts can interact not only with users but also with other smart contracts. This enables more advanced protocols by leveraging existing ones. For example, you could integrate a decentralized exchange directly into your contract to perform token swaps. Decentralized applications often involve multiple contracts, each with a dedicated role, working together to achieve complex functionality—similar to microservices in backend systems."}],"type":"topic","role":"project","estimatedTime":"15min","title":"Interact with Other Contracts","kind":"project","url":"\/tutorials\/spacekit\/synccalls"},"doc://SpaceKit/tutorials/SpaceKit/AsyncCalls":{"title":"Interacting with Contracts Across Shards","role":"project","kind":"project","url":"\/tutorials\/spacekit\/asynccalls","type":"topic","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls","abstract":[{"type":"text","text":"Blockchain platforms using SpaceVM enable seamless execution within a sharded environment. Sharding divides a blockchain’s global state and validation workload into smaller, manageable units known as shards. This method enhances scalability without compromising decentralization, allowing nodes to operate without significant computational resources."}],"estimatedTime":"15min"},"CodingFirstContractSection3Step2.swift":{"identifier":"CodingFirstContractSection3Step2.swift","fileName":"CounterTests.swift","type":"file","fileType":"swift","content":["import SpaceKit","import Counter","import XCTest"],"syntax":"swift","highlights":[]},"doc://SpaceKit/tutorials/SpaceKit/StoreValues#Working-with-Storage-for-Single-Value-Persistence":{"title":"Working with @Storage for Single Value Persistence","role":"pseudoSymbol","kind":"section","url":"\/tutorials\/spacekit\/storevalues#Working-with-Storage-for-Single-Value-Persistence","type":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues#Working-with-Storage-for-Single-Value-Persistence","abstract":[{"type":"text","text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory."}]},"doc://SpaceKit/tutorials/SpaceKit/Deep-Dive-into-SpaceKit-Concepts/Exploring-SpaceKit's-Types":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Exploring-SpaceKit's-Types","abstract":[],"type":"topic","role":"article","title":"Exploring SpaceKit's Types","kind":"article","url":"\/tutorials\/spacekit\/deep-dive-into-spacekit-concepts\/exploring-spacekit's-types"},"InstallingToolsSection1Step1.png":{"type":"image","variants":[{"traits":["1x","light"],"url":"\/images\/SpaceKit\/InstallingToolsSection1Step1.png"}],"identifier":"InstallingToolsSection1Step1.png","alt":"An empty terminal window."},"doc://SpaceKit/tutorials/SpaceKit/InstallingTools":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools","abstract":[{"text":"Before writing your first smart contract with SpaceKit, ensure you have the necessary tools installed.","type":"text"}],"type":"topic","role":"project","estimatedTime":"10min","title":"Install the Necessary Tools","kind":"project","url":"\/tutorials\/spacekit\/installingtools"},"CodingFirstContractSection2Step3.swift":{"fileName":"lib.swift","content":["import SpaceKit","","@Contract public struct Counter {","    ","}"],"highlights":[{"line":2},{"line":3},{"line":4},{"line":5}],"type":"file","identifier":"CodingFirstContractSection2Step3.swift","fileType":"swift","syntax":"swift"},"CodingFirstContractSection2Step8.swift":{"identifier":"CodingFirstContractSection2Step8.swift","fileName":"lib.swift","type":"file","fileType":"swift","content":["import SpaceKit","","@Contract public struct Counter {","    @Storage(key: \"counter\") var counter: BigUint","    ","    init(initialValue: BigUint) {","        self.counter = initialValue","    }","    ","    public mutating func increase(value: BigUint) {","        self.counter = self.counter + value","    }","    ","    public mutating func decrease(value: BigUint) {","        self.counter = self.counter - value","    }","    ","    public func getCounter() -> BigUint {","        return self.counter","    }","}"],"syntax":"swift","highlights":[{"line":17},{"line":18},{"line":19},{"line":20}]},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges":{"title":"Handling Heap Allocation Challenges","role":"pseudoSymbol","kind":"section","url":"\/tutorials\/spacekit\/familiarizewithtypes#Handling-Heap-Allocation-Challenges","type":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges","abstract":[{"text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}]},"doc://SpaceKit/tutorials/SpaceKit/SyncCalls#Perform-a-Synchronous-Call":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls#Perform-a-Synchronous-Call","abstract":[{"text":"Smart contracts can interact not only with users but also with other smart contracts. This enables more advanced protocols by leveraging existing ones. For example, you could integrate a decentralized exchange directly into your contract to perform token swaps. Decentralized applications often involve multiple contracts, each with a dedicated role, working together to achieve complex functionality—similar to microservices in backend systems.","type":"text"}],"type":"section","role":"pseudoSymbol","title":"Perform a Synchronous Call","kind":"section","url":"\/tutorials\/spacekit\/synccalls#Perform-a-Synchronous-Call"},"doc://SpaceKit/tutorials/SpaceKit/StoreValues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage":{"title":"Leveraging @Mapping for Dynamic Key-Value Storage","role":"pseudoSymbol","kind":"section","url":"\/tutorials\/spacekit\/storevalues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage","type":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage","abstract":[{"text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory.","type":"text"}]},"CodingFirstContractSection3Step11.swift":{"type":"file","syntax":"swift","highlights":[{"line":61},{"line":62},{"line":63},{"line":64},{"line":65},{"line":66},{"line":67},{"line":68},{"line":69},{"line":70},{"line":71},{"line":72},{"line":73},{"line":74},{"line":75},{"line":76},{"line":77},{"line":78},{"line":79},{"line":80},{"line":81},{"line":82},{"line":83},{"line":84},{"line":85},{"line":86}],"content":["import SpaceKit","import Counter","import XCTest","","let COUNTER_ADDRESS = \"counter\"","","final class CounterTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(address: COUNTER_ADDRESS)","        ]","    }","    ","    func testDeployCounterInitialValueZero() throws {","        let contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 0","        )","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 0)","    }","    ","    func testDeployCounterInitialValueNonZero() throws {","        let contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 15","        )","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 15)","    }","    ","    func testIncreaseZero() throws {","        var contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 15","        )","        ","        try contract.increase(value: 0)","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 15)","    }","    ","    func testIncreaseMoreThanZero() throws {","        var contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 15","        )","        ","        try contract.increase(value: 5)","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 20)","    }","    ","    func testDecreaseZero() throws {","        var contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 15","        )","        ","        try contract.decrease(value: 0)","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 15)","    }","    ","    func testDecreaseMoreThanZero() throws {","        var contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 15","        )","        ","        try contract.decrease(value: 5)","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 10)","    }","}"],"fileName":"CounterTests.swift","fileType":"swift","identifier":"CodingFirstContractSection3Step11.swift"},"doc://SpaceKit/tutorials/SpaceKit/CodingYourFirstContract#Testing-the-Contract":{"kind":"section","title":"Testing the Contract","url":"\/tutorials\/spacekit\/codingyourfirstcontract#Testing-the-Contract","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Testing-the-Contract","abstract":[{"text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user.","type":"text"}],"type":"section","role":"pseudoSymbol"},"doc://SpaceKit/tutorials/SpaceKit/AsyncCalls#Perform-an-Asynchronous-Call":{"kind":"section","abstract":[{"text":"Blockchain platforms using SpaceVM enable seamless execution within a sharded environment. Sharding divides a blockchain’s global state and validation workload into smaller, manageable units known as shards. This method enhances scalability without compromising decentralization, allowing nodes to operate without significant computational resources.","type":"text"}],"title":"Perform an Asynchronous Call","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls#Perform-an-Asynchronous-Call","url":"\/tutorials\/spacekit\/asynccalls#Perform-an-Asynchronous-Call","type":"section","role":"pseudoSymbol"},"doc://SpaceKit/tutorials/SpaceKit/SyncCalls#Declare-the-Callee-Proxy":{"kind":"section","title":"Declare the Callee Proxy","url":"\/tutorials\/spacekit\/synccalls#Declare-the-Callee-Proxy","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls#Declare-the-Callee-Proxy","abstract":[{"text":"Smart contracts can interact not only with users but also with other smart contracts. This enables more advanced protocols by leveraging existing ones. For example, you could integrate a decentralized exchange directly into your contract to perform token swaps. Decentralized applications often involve multiple contracts, each with a dedicated role, working together to achieve complex functionality—similar to microservices in backend systems.","type":"text"}],"type":"section","role":"pseudoSymbol"},"CodingFirstContractSection3Step8.swift":{"fileType":"swift","identifier":"CodingFirstContractSection3Step8.swift","content":["import SpaceKit","import Counter","import XCTest","","let COUNTER_ADDRESS = \"counter\"","","final class CounterTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(address: COUNTER_ADDRESS)","        ]","    }","    ","    func testDeployCounterInitialValueZero() throws {","        let contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 0","        )","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 0)","    }","}"],"syntax":"swift","type":"file","highlights":[{"line":19},{"line":20},{"line":21},{"line":22}],"fileName":"CounterTests.swift"},"CodingFirstContractSection2Step1.swift":{"fileType":"swift","identifier":"CodingFirstContractSection2Step1.swift","content":[""],"syntax":"swift","type":"file","highlights":[],"fileName":"lib.swift"},"doc://SpaceKit/tutorials/SpaceKit/GetInfo#Accessing-Blockchain-Context-Data":{"kind":"section","abstract":[{"text":"Many smart contracts rely on contextual data to execute their operations effectively. This data can include input payments, the caller’s address, the current time, the balance of a specific account, or even the contract owner.","type":"text"}],"title":"Accessing Blockchain Context Data","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo#Accessing-Blockchain-Context-Data","url":"\/tutorials\/spacekit\/getinfo#Accessing-Blockchain-Context-Data","type":"section","role":"pseudoSymbol"},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Working-with-the-BigUint-Type":{"role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Working-with-the-BigUint-Type","url":"\/tutorials\/spacekit\/familiarizewithtypes#Working-with-the-BigUint-Type","type":"section","title":"Working with the BigUint Type","kind":"section","abstract":[{"text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}]},"CodingFirstContractSection2Step6.swift":{"fileType":"swift","fileName":"lib.swift","syntax":"swift","content":["import SpaceKit","","@Contract public struct Counter {","    @Storage(key: \"counter\") var counter: BigUint","    ","    init(initialValue: BigUint) {","        self.counter = initialValue","    }","    ","    public mutating func increase(value: BigUint) {","        self.counter = self.counter + value","    }","}"],"identifier":"CodingFirstContractSection2Step6.swift","highlights":[{"line":9},{"line":10},{"line":11},{"line":12}],"type":"file"},"CodingFirstContractSection2Step2.swift":{"syntax":"swift","identifier":"CodingFirstContractSection2Step2.swift","content":["import SpaceKit"],"fileName":"lib.swift","highlights":[{"line":1}],"fileType":"swift","type":"file"},"CodingFirstContractSection3Step6.swift":{"fileName":"CounterTests.swift","content":["import SpaceKit","import Counter","import XCTest","","let COUNTER_ADDRESS = \"counter\"","","final class CounterTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(address: COUNTER_ADDRESS)","        ]","    }","    ","    func testDeployCounterInitialValueZero() throws {","        ","    }","}"],"type":"file","fileType":"swift","highlights":[{"line":13},{"line":14},{"line":15},{"line":16}],"syntax":"swift","identifier":"CodingFirstContractSection3Step6.swift"},"doc://SpaceKit/tutorials/SpaceKit/AsyncCalls#Declare-the-Callee-Proxy":{"abstract":[{"text":"Blockchain platforms using SpaceVM enable seamless execution within a sharded environment. Sharding divides a blockchain’s global state and validation workload into smaller, manageable units known as shards. This method enhances scalability without compromising decentralization, allowing nodes to operate without significant computational resources.","type":"text"}],"title":"Declare the Callee Proxy","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls#Declare-the-Callee-Proxy","url":"\/tutorials\/spacekit\/asynccalls#Declare-the-Callee-Proxy","type":"section","role":"pseudoSymbol","kind":"section"},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Creating-Your-Own-Types":{"title":"Creating Your Own Types","abstract":[{"text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}],"url":"\/tutorials\/spacekit\/familiarizewithtypes#Creating-Your-Own-Types","type":"section","role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Creating-Your-Own-Types"},"doc://SpaceKit/tutorials/SpaceKit/GetInfo":{"abstract":[{"text":"Many smart contracts rely on contextual data to execute their operations effectively. This data can include input payments, the caller’s address, the current time, the balance of a specific account, or even the contract owner.","type":"text"}],"title":"Retrieving Information from the Blockchain","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo","url":"\/tutorials\/spacekit\/getinfo","estimatedTime":"10min","type":"topic","role":"project","kind":"project"},"doc://SpaceKit/tutorials/SpaceKit/GetInfo#Accessing-Transaction-Context-Data":{"title":"Accessing Transaction Context Data","abstract":[{"text":"Many smart contracts rely on contextual data to execute their operations effectively. This data can include input payments, the caller’s address, the current time, the balance of a specific account, or even the contract owner.","type":"text"}],"url":"\/tutorials\/spacekit\/getinfo#Accessing-Transaction-Context-Data","type":"section","role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo#Accessing-Transaction-Context-Data"},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Understanding-the-Buffer-Type":{"abstract":[{"text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}],"title":"Understanding the Buffer Type","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Understanding-the-Buffer-Type","url":"\/tutorials\/spacekit\/familiarizewithtypes#Understanding-the-Buffer-Type","type":"section","role":"pseudoSymbol","kind":"section"},"CodingFirstContractSection2Step7.swift":{"highlights":[{"line":13},{"line":14},{"line":15},{"line":16}],"identifier":"CodingFirstContractSection2Step7.swift","syntax":"swift","type":"file","fileType":"swift","fileName":"lib.swift","content":["import SpaceKit","","@Contract public struct Counter {","    @Storage(key: \"counter\") var counter: BigUint","    ","    init(initialValue: BigUint) {","        self.counter = initialValue","    }","    ","    public mutating func increase(value: BigUint) {","        self.counter = self.counter + value","    }","    ","    public mutating func decrease(value: BigUint) {","        self.counter = self.counter - value","    }","}"]},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Working-with-the-Vector-Type":{"abstract":[{"text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}],"title":"Working with the Vector Type","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Working-with-the-Vector-Type","url":"\/tutorials\/spacekit\/familiarizewithtypes#Working-with-the-Vector-Type","type":"section","role":"pseudoSymbol","kind":"section"},"doc://SpaceKit/tutorials/SpaceKit/CodingYourFirstContract#Writing-the-Contract-Code":{"role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Writing-the-Contract-Code","kind":"section","url":"\/tutorials\/spacekit\/codingyourfirstcontract#Writing-the-Contract-Code","type":"section","abstract":[{"text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user.","type":"text"}],"title":"Writing the Contract Code"},"doc://SpaceKit/tutorials/SpaceKit/Deep-Dive-into-SpaceKit-Concepts/Calling-Contracts-Across-Shards":{"abstract":[],"title":"Calling Contracts Across Shards","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Calling-Contracts-Across-Shards","url":"\/tutorials\/spacekit\/deep-dive-into-spacekit-concepts\/calling-contracts-across-shards","type":"topic","role":"article","kind":"article"},"doc://SpaceKit/tutorials/SpaceKit/InstallingTools#Installing-SpaceKits-Dependencies":{"role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Installing-SpaceKits-Dependencies","kind":"section","url":"\/tutorials\/spacekit\/installingtools#Installing-SpaceKits-Dependencies","type":"section","abstract":[{"text":"Before writing your first smart contract with SpaceKit, ensure you have the necessary tools installed.","type":"text"}],"title":"Installing SpaceKit's Dependencies"},"CodingFirstContractSection3Step10.swift":{"identifier":"CodingFirstContractSection3Step10.swift","fileName":"CounterTests.swift","type":"file","highlights":[{"line":35},{"line":36},{"line":37},{"line":38},{"line":39},{"line":40},{"line":41},{"line":42},{"line":43},{"line":44},{"line":45},{"line":46},{"line":47},{"line":48},{"line":49},{"line":50},{"line":51},{"line":52},{"line":53},{"line":54},{"line":55},{"line":56},{"line":57},{"line":58},{"line":59},{"line":60}],"syntax":"swift","content":["import SpaceKit","import Counter","import XCTest","","let COUNTER_ADDRESS = \"counter\"","","final class CounterTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(address: COUNTER_ADDRESS)","        ]","    }","    ","    func testDeployCounterInitialValueZero() throws {","        let contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 0","        )","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 0)","    }","    ","    func testDeployCounterInitialValueNonZero() throws {","        let contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 15","        )","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 15)","    }","    ","    func testIncreaseZero() throws {","        var contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 15","        )","        ","        try contract.increase(value: 0)","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 15)","    }","    ","    func testIncreaseMoreThanZero() throws {","        var contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 15","        )","        ","        try contract.increase(value: 5)","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 20)","    }","}"],"fileType":"swift"},"doc://SpaceKit/tutorials/SpaceKit/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract","role":"pseudoSymbol","kind":"section","type":"section","title":"Initializing and Compiling Your First Smart Contract","url":"\/tutorials\/spacekit\/installingtools#Initializing-and-Compiling-Your-First-Smart-Contract","abstract":[{"text":"Before writing your first smart contract with SpaceKit, ensure you have the necessary tools installed.","type":"text"}]},"doc://SpaceKit/tutorials/SpaceKit/CodingYourFirstContract#Initializing-the-Project":{"role":"pseudoSymbol","title":"Initializing the Project","type":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Initializing-the-Project","kind":"section","url":"\/tutorials\/spacekit\/codingyourfirstcontract#Initializing-the-Project","abstract":[{"type":"text","text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user."}]},"CodingFirstContractSection1Step3.png":{"type":"image","identifier":"CodingFirstContractSection1Step3.png","alt":"Xcode project selection screen with 'Counter' highlighted.","variants":[{"url":"\/images\/SpaceKit\/CodingFirstContractSection1Step3.png","traits":["1x","light"]}]},"CodingFirstContractSection3Step9.swift":{"type":"file","fileName":"CounterTests.swift","content":["import SpaceKit","import Counter","import XCTest","","let COUNTER_ADDRESS = \"counter\"","","final class CounterTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(address: COUNTER_ADDRESS)","        ]","    }","    ","    func testDeployCounterInitialValueZero() throws {","        let contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 0","        )","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 0)","    }","    ","    func testDeployCounterInitialValueNonZero() throws {","        let contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 15","        )","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 15)","    }","}"],"fileType":"swift","identifier":"CodingFirstContractSection3Step9.swift","syntax":"swift","highlights":[{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34}]},"CodingFirstContractSection3Step12.swift":{"identifier":"CodingFirstContractSection3Step12.swift","type":"file","highlights":[{"line":87},{"line":88},{"line":89},{"line":90},{"line":91},{"line":92},{"line":93},{"line":94},{"line":95},{"line":96},{"line":97},{"line":98},{"line":99},{"line":100},{"line":101}],"fileName":"CounterTests.swift","syntax":"swift","content":["import SpaceKit","import Counter","import XCTest","","let COUNTER_ADDRESS = \"counter\"","","final class CounterTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(address: COUNTER_ADDRESS)","        ]","    }","    ","    func testDeployCounterInitialValueZero() throws {","        let contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 0","        )","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 0)","    }","    ","    func testDeployCounterInitialValueNonZero() throws {","        let contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 15","        )","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 15)","    }","    ","    func testIncreaseZero() throws {","        var contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 15","        )","        ","        try contract.increase(value: 0)","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 15)","    }","    ","    func testIncreaseMoreThanZero() throws {","        var contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 15","        )","        ","        try contract.increase(value: 5)","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 20)","    }","    ","    func testDecreaseZero() throws {","        var contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 15","        )","        ","        try contract.decrease(value: 0)","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 15)","    }","    ","    func testDecreaseMoreThanZero() throws {","        var contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 15","        )","        ","        try contract.decrease(value: 5)","        ","        let result = try contract.getCounter()","        ","        XCTAssertEqual(result, 10)","    }","    ","    func testDecreaseTooMuchShouldFail() throws {","        var contract = try Counter.testable(","            COUNTER_ADDRESS,","            initialValue: 15","        )","        ","        do {","            try contract.decrease(value: 16)","            ","            XCTFail() \/\/ Decrease fails, so this line should not be executed","        } catch {","            XCTAssertEqual(error, .userError(message: \"cannot subtract because result would be negative\"))","        }","    }","}"],"fileType":"swift"},"CodingFirstContractSection3Step5.swift":{"identifier":"CodingFirstContractSection3Step5.swift","fileName":"CounterTests.swift","fileType":"swift","highlights":[{"line":8},{"line":9},{"line":10},{"line":11},{"line":12}],"type":"file","content":["import SpaceKit","import Counter","import XCTest","","let COUNTER_ADDRESS = \"counter\"","","final class CounterTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(address: COUNTER_ADDRESS)","        ]","    }","}"],"syntax":"swift"},"CodingFirstContractSection2Step5.swift":{"syntax":"swift","fileName":"lib.swift","fileType":"swift","content":["import SpaceKit","","@Contract public struct Counter {","    @Storage(key: \"counter\") var counter: BigUint","    ","    init(initialValue: BigUint) {","        self.counter = initialValue","    }","}"],"highlights":[{"line":5},{"line":6},{"line":7},{"line":8}],"type":"file","identifier":"CodingFirstContractSection2Step5.swift"},"doc://SpaceKit/tutorials/SpaceKit":{"url":"\/tutorials\/spacekit","kind":"overview","title":"Meet SpaceKit","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit","type":"topic","role":"overview","abstract":[{"text":"Discover how SpaceKit simplifies blockchain development using Swift. Dive into the world of Web3 with ease and efficiency.","type":"text"}]},"CodingFirstContractSection2Step4.swift":{"highlights":[{"line":4}],"fileType":"swift","content":["import SpaceKit","","@Contract public struct Counter {","    @Storage(key: \"counter\") var counter: BigUint","}"],"type":"file","identifier":"CodingFirstContractSection2Step4.swift","syntax":"swift","fileName":"lib.swift"},"CodingFirstContractSection1Step2.png":{"type":"image","variants":[{"traits":["1x","light"],"url":"\/images\/SpaceKit\/CodingFirstContractSection1Step2.png"}],"identifier":"CodingFirstContractSection1Step2.png","alt":"Output of `space init Counter` command."},"doc://SpaceKit/tutorials/SpaceKit/Deep-Dive-into-SpaceKit-Concepts/Retrieving-Information-from-the-Blockchain":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Retrieving-Information-from-the-Blockchain","abstract":[],"kind":"article","type":"topic","url":"\/tutorials\/spacekit\/deep-dive-into-spacekit-concepts\/retrieving-information-from-the-blockchain","title":"Retrieving Information from the Blockchain","role":"article"},"doc://SpaceKit/tutorials/SpaceKit/Getting-Started/Building-Your-First-Smart-Contract":{"role":"article","title":"Building Your First Smart Contract","type":"topic","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Getting-Started\/Building-Your-First-Smart-Contract","kind":"article","url":"\/tutorials\/spacekit\/getting-started\/building-your-first-smart-contract","abstract":[]}}}