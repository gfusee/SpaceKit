{"identifier":{"url":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract","interfaceLanguage":"swift"},"schemaVersion":{"patch":0,"major":0,"minor":3},"kind":"project","sections":[{"title":"Building Your First Smart Contract","content":[{"inlineContent":[{"type":"text","text":"In this tutorial, you’ll create a simple smart contract that manages a counter. Users can increment or decrement the counter, and the changes are persisted across contract executions."}],"type":"paragraph"}],"kind":"hero","chapter":"Building Your First Smart Contract","estimatedTimeInMinutes":20},{"kind":"tasks","tasks":[{"title":"Initializing the Project","contentSection":[{"mediaPosition":"trailing","kind":"contentAndMedia","content":[{"inlineContent":[{"text":"Before writing the contract, set up the project using the SpaceKit command-line tool.","type":"text"}],"type":"paragraph"}]}],"stepsSection":[{"type":"step","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Open a terminal."}]}],"media":"InstallingToolsSection1Step1.png","caption":[],"code":null},{"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This command generates a new folder named “Counter.”"}]}],"code":null,"content":[{"inlineContent":[{"type":"text","text":"Navigate to your desired directory and execute the command "},{"type":"codeVoice","code":"space init Counter"},{"type":"text","text":"."}],"type":"paragraph"}],"type":"step","runtimePreview":null,"media":"CodingFirstContractSection1Step2.png"},{"type":"step","caption":[{"type":"paragraph","inlineContent":[{"text":"In this tutorial, Xcode is used. If using other environments, consult their respective guides.","type":"text"}]}],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Open the “Counter” directory in your preferred Swift IDE. Xcode or VSCode (with the official Swift extension) are recommended."}]}],"media":"CodingFirstContractSection1Step3.png","code":null,"runtimePreview":null},{"type":"step","code":null,"media":"CodingFirstContractSection1Step4.png","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"(Optional) Build the project for improved IDE performance and macro generation."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In Xcode, go to "},{"type":"strong","inlineContent":[{"text":"Product > Build","type":"text"}]},{"text":" or use the shortcut ","type":"text"},{"code":"⌘ + B","type":"codeVoice"},{"text":".","type":"text"}]}],"runtimePreview":null}],"anchor":"Initializing-the-Project"},{"title":"Writing the Contract Code","stepsSection":[{"caption":[],"media":null,"type":"step","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Open the "},{"code":"Contracts\/Counter\/Source\/lib.swift","type":"codeVoice"},{"text":" file and clear its contents.","type":"text"}]}],"code":"CodingFirstContractSection2Step1.swift"},{"code":"CodingFirstContractSection2Step2.swift","caption":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"Note:"}],"type":"strong"},{"type":"text","text":" Only the SpaceKit library is compatible with SpaceVM. Avoid importing Foundation or other frameworks."}],"type":"paragraph"}],"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Import the SpaceKit framework by adding "},{"type":"codeVoice","code":"import SpaceKit"},{"type":"text","text":" at the top of the file."}]}],"media":null,"runtimePreview":null},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Define the contract by creating a struct annotated with "},{"type":"codeVoice","code":"@Controller"},{"text":".","type":"text"}]}],"media":null,"caption":[{"inlineContent":[{"inlineContent":[{"text":"Tip:","type":"text"}],"type":"strong"},{"type":"text","text":" You can define multiple controllers in a single or multiple files. A contract consists of all the controllers declared."}],"type":"paragraph"}],"type":"step","code":"CodingFirstContractSection2Step3.swift","runtimePreview":null},{"runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"Add a storage property to persist the counter using "},{"type":"codeVoice","code":"@Storage(key: \"counter\")"},{"type":"text","text":"."}],"type":"paragraph"}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the "},{"code":"BigUint","type":"codeVoice"},{"type":"text","text":" type to handle arbitrarily large numbers."}]}],"type":"step","media":null,"code":"CodingFirstContractSection2Step4.swift"},{"media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create an "},{"type":"codeVoice","code":"increase"},{"text":" endpoint to increment the counter. This endpoint accepts a parameter specifying the increment amount.","type":"text"}]}],"type":"step","runtimePreview":null,"caption":[],"code":"CodingFirstContractSection2Step5.swift"},{"type":"step","code":"CodingFirstContractSection2Step6.swift","content":[{"inlineContent":[{"text":"Add a ","type":"text"},{"code":"decrease","type":"codeVoice"},{"text":" endpoint to decrement the counter.","type":"text"}],"type":"paragraph"}],"runtimePreview":null,"caption":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Note:"}],"type":"strong"},{"type":"text","text":" The "},{"type":"codeVoice","code":"BigUint"},{"text":" type prevents negative values. If a decrement results in a negative value, the operation fails without any changes.","type":"text"}]}],"media":null},{"code":"CodingFirstContractSection2Step7.swift","type":"step","media":null,"content":[{"inlineContent":[{"type":"text","text":"Implement a view function "},{"code":"getCounter","type":"codeVoice"},{"type":"text","text":" to retrieve the counter value."}],"type":"paragraph"}],"runtimePreview":null,"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This function does not modify the contract’s state, that’s why we call it “view”."}]}]},{"caption":[{"inlineContent":[{"inlineContent":[{"text":"Tip:","type":"text"}],"type":"strong"},{"type":"text","text":" The initializer is a global function executed once during deployment. It is optional."}],"type":"paragraph"}],"type":"step","code":"CodingFirstContractSection2Step8.swift","content":[{"type":"paragraph","inlineContent":[{"text":"Add an initializer to set the initial counter value during contract deployment.","type":"text"}]}],"runtimePreview":null,"media":null}],"contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"text":"Let’s write the code for the smart contract.","type":"text"}]}],"mediaPosition":"trailing"}],"anchor":"Writing-the-Contract-Code"},{"stepsSection":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Open the ","type":"text"},{"type":"codeVoice","code":"Contracts\/Counter\/Tests\/CounterTests"},{"type":"text","text":" directory. Replace any files with a new file named "},{"type":"codeVoice","code":"CounterTests.swift"},{"type":"text","text":"."}]}],"code":null,"runtimePreview":null,"type":"step","caption":[],"media":"CodingFirstContractSection3Step1.png"},{"media":null,"caption":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Note:","type":"text"}]},{"type":"text","text":" XCTest is the official framework for unit tests in Swift."}]}],"content":[{"inlineContent":[{"text":"Import ","type":"text"},{"code":"SpaceKit","type":"codeVoice"},{"type":"text","text":", your contract, and "},{"code":"XCTest","type":"codeVoice"},{"text":" into the test file.","type":"text"}],"type":"paragraph"}],"type":"step","code":"CodingFirstContractSection3Step2.swift","runtimePreview":null},{"type":"step","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Define the contract address. SwiftVM assigns a deterministic address for your contract."}]}],"caption":[],"code":"CodingFirstContractSection3Step3.swift","media":null},{"media":null,"caption":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Important:","type":"text"}],"type":"strong"},{"text":" Avoid overriding ","type":"text"},{"type":"codeVoice","code":"setUp"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"tearDown"},{"type":"text","text":" methods."}]}],"code":"CodingFirstContractSection3Step4.swift","runtimePreview":null,"type":"step","content":[{"inlineContent":[{"type":"text","text":"Create a test class inheriting from "},{"type":"codeVoice","code":"ContractTestCase"},{"text":".","type":"text"}],"type":"paragraph"}]},{"type":"step","media":null,"caption":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Important:"}]},{"text":" Include all ","type":"text"},{"code":"@Controller","type":"codeVoice"},{"type":"text","text":" annotated structs in the "},{"type":"codeVoice","code":"controllers"},{"type":"text","text":" parameter."}]}],"content":[{"inlineContent":[{"type":"text","text":"Override "},{"type":"codeVoice","code":"initialAccounts"},{"text":" to define the contract address in SwiftVM.","type":"text"}],"type":"paragraph"}],"code":"CodingFirstContractSection3Step5.swift","runtimePreview":null},{"caption":[],"content":[{"inlineContent":[{"type":"text","text":"Write a unit test for deploying the contract with an initial counter value of zero."}],"type":"paragraph"}],"media":null,"type":"step","code":"CodingFirstContractSection3Step6.swift","runtimePreview":null},{"media":null,"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This calls your @Init function if defined and captures any deployment errors."}]}],"content":[{"type":"paragraph","inlineContent":[{"text":"Deploy the contract using ","type":"text"},{"code":"self.deployContract","type":"codeVoice"},{"text":".","type":"text"}]}],"type":"step","runtimePreview":null,"code":"CodingFirstContractSection3Step7.swift"},{"runtimePreview":null,"media":null,"caption":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Note:"}]},{"text":" The instantiated controller includes, on each endpoint, optional parameters to mock transaction data.","type":"text"}]}],"content":[{"inlineContent":[{"text":"Instantiate the ","type":"text"},{"type":"codeVoice","code":"CounterController"},{"text":" for interacting with the contract.","type":"text"}],"type":"paragraph"}],"type":"step","code":"CodingFirstContractSection3Step8.swift"},{"caption":[],"media":null,"type":"step","content":[{"inlineContent":[{"text":"Verify the counter’s initial value with the ","type":"text"},{"type":"codeVoice","code":"getCounter"},{"text":" view.","type":"text"}],"type":"paragraph"}],"runtimePreview":null,"code":"CodingFirstContractSection3Step9.swift"},{"caption":[],"media":null,"content":[{"inlineContent":[{"type":"text","text":"Add a unit test to verify deploying the contract with a non-zero initial value."}],"type":"paragraph"}],"type":"step","runtimePreview":null,"code":"CodingFirstContractSection3Step10.swift"},{"content":[{"type":"paragraph","inlineContent":[{"text":"Create unit tests for the increase endpoint, similar to the deployment tests.","type":"text"}]}],"code":"CodingFirstContractSection3Step11.swift","type":"step","caption":[],"media":null,"runtimePreview":null},{"code":"CodingFirstContractSection3Step12.swift","content":[{"type":"paragraph","inlineContent":[{"text":"Repeat for the decrease endpoint.","type":"text"}]}],"runtimePreview":null,"type":"step","caption":[],"media":null},{"caption":[],"code":"CodingFirstContractSection3Step13.swift","runtimePreview":null,"type":"step","media":null,"content":[{"inlineContent":[{"type":"text","text":"Add a test to ensure failure when trying to decrease the counter below zero."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Run the tests to confirm your contract works correctly!"}],"type":"paragraph"}],"code":null,"type":"step","caption":[],"media":"CodingFirstContractSection3Step14.png","runtimePreview":null}],"contentSection":[{"mediaPosition":"trailing","kind":"contentAndMedia","content":[{"inlineContent":[{"type":"text","text":"Test your contract using SpaceKit’s SwiftVM emulator."}],"type":"paragraph"}]}],"anchor":"Testing-the-Contract","title":"Testing the Contract"}]}],"hierarchy":{"paths":[["doc:\/\/SpaceKit\/tutorials\/SpaceKit","doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Getting-Started","doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Getting-Started\/Building-Your-First-Smart-Contract"]],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit","modules":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Getting-Started\/Installing-the-Tools","projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools","sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Installing-SpaceKits-Dependencies","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Setting-Up-the-SpaceKit-CLI"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract"}]}]},{"projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract","sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Initializing-the-Project","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Writing-the-Contract-Code"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Testing-the-Contract"}]}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Getting-Started\/Building-Your-First-Smart-Contract"},{"projects":[{"sections":[{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Understanding-the-Buffer-Type","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Working-with-the-BigUint-Type","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Working-with-the-Vector-Type","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Creating-Your-Own-Types"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Exploring-SpaceKit's-Types"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Persisting-Data-Across-Executions","projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues","sections":[{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues#Working-with-Storage-for-Single-Value-Persistence"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage","kind":"task"}]}]},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Retrieving-Information-from-the-Blockchain","projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo","sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo#Accessing-Transaction-Context-Data","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo#Accessing-Blockchain-Context-Data"}]}]},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Interacting-with-Other-Contracts","projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls","sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls#Declare-the-Callee-Proxy","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls#Perform-a-Synchronous-Call","kind":"task"}]}]},{"projects":[{"sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls#Declare-the-Callee-Proxy","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls#Perform-an-Asynchronous-Call","kind":"task"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Calling-Contracts-Across-Shards"}]},"variants":[{"paths":["\/tutorials\/spacekit\/codingyourfirstcontract"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"role":"project","categoryPathComponent":"SpaceKit","category":"SpaceKit","title":"Building Your First Smart Contract"},"references":{"InstallingToolsSection1Step1.png":{"type":"image","identifier":"InstallingToolsSection1Step1.png","alt":"An empty terminal window.","variants":[{"url":"\/images\/SpaceKit\/InstallingToolsSection1Step1.png","traits":["1x","light"]}]},"doc://SpaceKit/tutorials/SpaceKit/Getting-Started/Installing-the-Tools":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Getting-Started\/Installing-the-Tools","role":"article","url":"\/tutorials\/spacekit\/getting-started\/installing-the-tools","abstract":[],"kind":"article","type":"topic","title":"Installing the Tools"},"CodingFirstContractSection3Step2.swift":{"type":"file","syntax":"swift","fileName":"CounterTests.swift","identifier":"CodingFirstContractSection3Step2.swift","highlights":[],"fileType":"swift","content":["import SpaceKit","import Counter","import XCTest"]},"CodingFirstContractSection3Step5.swift":{"content":["import SpaceKit","import Counter","import XCTest","","let COUNTER_ADDRESS = \"counter\"","","final class CounterTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: COUNTER_ADDRESS,","                controllers: [","                    CounterController.self","                ]","            )","        ]","    }","}"],"identifier":"CodingFirstContractSection3Step5.swift","highlights":[{"line":8},{"line":9},{"line":10},{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17}],"fileType":"swift","type":"file","syntax":"swift","fileName":"CounterTests.swift"},"CodingFirstContractSection1Step3.png":{"type":"image","identifier":"CodingFirstContractSection1Step3.png","alt":"Xcode project selection screen with 'Counter' highlighted.","variants":[{"url":"\/images\/SpaceKit\/CodingFirstContractSection1Step3.png","traits":["1x","light"]}]},"doc://SpaceKit/tutorials/SpaceKit/Deep-Dive-into-SpaceKit-Concepts/Interacting-with-Other-Contracts":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Interacting-with-Other-Contracts","role":"article","url":"\/tutorials\/spacekit\/deep-dive-into-spacekit-concepts\/interacting-with-other-contracts","abstract":[],"kind":"article","type":"topic","title":"Interacting with Other Contracts"},"CodingFirstContractSection3Step10.swift":{"identifier":"CodingFirstContractSection3Step10.swift","content":["import SpaceKit","import Counter","import XCTest","","let COUNTER_ADDRESS = \"counter\"","","final class CounterTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: COUNTER_ADDRESS,","                controllers: [","                    CounterController.self","                ]","            )","        ]","    }","    ","    func testDeployCounterInitialValueZero() throws {","        try self.deployContract(","            at: COUNTER_ADDRESS,","            arguments: [","                0 \/\/ Initial value","            ]","        )","        ","        let controller = self.instantiateController(","            CounterController.self,","            for: COUNTER_ADDRESS","        )!","        ","        let result = try controller.getCounter()","        ","        XCTAssertEqual(result, 0)","    }","    ","    func testDeployCounterInitialValueNonZero() throws {","        try self.deployContract(","            at: COUNTER_ADDRESS,","            arguments: [","                15 \/\/ Initial value","            ]","        )","        ","        let controller = self.instantiateController(","            CounterController.self,","            for: COUNTER_ADDRESS","        )!","        ","        let result = try controller.getCounter()","        ","        XCTAssertEqual(result, 15)","    }","}"],"syntax":"swift","highlights":[{"line":36},{"line":37},{"line":38},{"line":39},{"line":40},{"line":41},{"line":42},{"line":43},{"line":44},{"line":45},{"line":46},{"line":47},{"line":48},{"line":49},{"line":50},{"line":51},{"line":52},{"line":53}],"type":"file","fileName":"CounterTests.swift","fileType":"swift"},"CodingFirstContractSection3Step9.swift":{"type":"file","syntax":"swift","fileName":"CounterTests.swift","identifier":"CodingFirstContractSection3Step9.swift","highlights":[{"line":31},{"line":32},{"line":33},{"line":34}],"fileType":"swift","content":["import SpaceKit","import Counter","import XCTest","","let COUNTER_ADDRESS = \"counter\"","","final class CounterTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: COUNTER_ADDRESS,","                controllers: [","                    CounterController.self","                ]","            )","        ]","    }","    ","    func testDeployCounterInitialValueZero() throws {","        try self.deployContract(","            at: COUNTER_ADDRESS,","            arguments: [","                0 \/\/ Initial value","            ]","        )","        ","        let controller = self.instantiateController(","            CounterController.self,","            for: COUNTER_ADDRESS","        )!","        ","        let result = try controller.getCounter()","        ","        XCTAssertEqual(result, 0)","    }","}"]},"doc://SpaceKit/tutorials/SpaceKit/CodingYourFirstContract#Testing-the-Contract":{"type":"section","kind":"section","abstract":[{"text":"In this tutorial, you’ll create a simple smart contract that manages a counter. Users can increment or decrement the counter, and the changes are persisted across contract executions.","type":"text"}],"url":"\/tutorials\/spacekit\/codingyourfirstcontract#Testing-the-Contract","role":"pseudoSymbol","title":"Testing the Contract","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Testing-the-Contract"},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Creating-Your-Own-Types":{"type":"section","kind":"section","abstract":[{"text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}],"url":"\/tutorials\/spacekit\/familiarizewithtypes#Creating-Your-Own-Types","role":"pseudoSymbol","title":"Creating Your Own Types","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Creating-Your-Own-Types"},"CodingFirstContractSection3Step4.swift":{"identifier":"CodingFirstContractSection3Step4.swift","type":"file","syntax":"swift","fileName":"CounterTests.swift","fileType":"swift","content":["import SpaceKit","import Counter","import XCTest","","let COUNTER_ADDRESS = \"counter\"","","final class CounterTests: ContractTestCase {","    ","}"],"highlights":[{"line":6},{"line":7},{"line":8},{"line":9}]},"doc://SpaceKit/tutorials/SpaceKit/SyncCalls#Perform-a-Synchronous-Call":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls#Perform-a-Synchronous-Call","type":"section","url":"\/tutorials\/spacekit\/synccalls#Perform-a-Synchronous-Call","kind":"section","abstract":[{"text":"Smart contracts can interact not only with users but also with other smart contracts. This enables more advanced protocols by leveraging existing ones. For example, you could integrate a decentralized exchange directly into your contract to perform token swaps. Decentralized applications often involve multiple contracts, each with a dedicated role, working together to achieve complex functionality—similar to microservices in backend systems.","type":"text"}],"role":"pseudoSymbol","title":"Perform a Synchronous Call"},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Working-with-the-Vector-Type":{"abstract":[{"text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}],"url":"\/tutorials\/spacekit\/familiarizewithtypes#Working-with-the-Vector-Type","kind":"section","title":"Working with the Vector Type","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Working-with-the-Vector-Type","type":"section","role":"pseudoSymbol"},"CodingFirstContractSection2Step5.swift":{"content":["import SpaceKit","","@Controller public struct CounterController {","    @Storage(key: \"counter\") var counter: BigUint","    ","    public mutating func increase(value: BigUint) {","        self.counter = self.counter + value","    }","}"],"fileName":"lib.swift","identifier":"CodingFirstContractSection2Step5.swift","syntax":"swift","fileType":"swift","highlights":[{"line":5},{"line":6},{"line":7},{"line":8}],"type":"file"},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Working-with-the-BigUint-Type":{"abstract":[{"text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}],"url":"\/tutorials\/spacekit\/familiarizewithtypes#Working-with-the-BigUint-Type","kind":"section","title":"Working with the BigUint Type","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Working-with-the-BigUint-Type","type":"section","role":"pseudoSymbol"},"CodingFirstContractSection2Step8.swift":{"type":"file","fileType":"swift","identifier":"CodingFirstContractSection2Step8.swift","content":["import SpaceKit","","@Init func initialize(initialValue: BigUint) {","    var controller = CounterController()","    ","    controller.counter = initialValue","}","","@Controller public struct CounterController {","    @Storage(key: \"counter\") var counter: BigUint","    ","    public mutating func increase(value: BigUint) {","        self.counter = self.counter + value","    }","    ","    public mutating func decrease(value: BigUint) {","        self.counter = self.counter - value","    }","    ","    public func getCounter() -> BigUint {","        return self.counter","    }","}"],"fileName":"lib.swift","syntax":"swift","highlights":[{"line":3},{"line":4},{"line":5},{"line":6},{"line":7},{"line":8}]},"CodingFirstContractSection3Step12.swift":{"content":["import SpaceKit","import Counter","import XCTest","","let COUNTER_ADDRESS = \"counter\"","","final class CounterTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: COUNTER_ADDRESS,","                controllers: [","                    CounterController.self","                ]","            )","        ]","    }","    ","    func testDeployCounterInitialValueZero() throws {","        try self.deployContract(","            at: COUNTER_ADDRESS,","            arguments: [","                0 \/\/ Initial value","            ]","        )","        ","        let controller = self.instantiateController(","            CounterController.self,","            for: COUNTER_ADDRESS","        )!","        ","        let result = try controller.getCounter()","        ","        XCTAssertEqual(result, 0)","    }","    ","    func testDeployCounterInitialValueNonZero() throws {","        try self.deployContract(","            at: COUNTER_ADDRESS,","            arguments: [","                15 \/\/ Initial value","            ]","        )","        ","        let controller = self.instantiateController(","            CounterController.self,","            for: COUNTER_ADDRESS","        )!","        ","        let result = try controller.getCounter()","        ","        XCTAssertEqual(result, 15)","    }","    ","    func testIncreaseZero() throws {","        try self.deployContract(","            at: COUNTER_ADDRESS,","            arguments: [","                15 \/\/ Initial value","            ]","        )","        ","        var controller = self.instantiateController(","            CounterController.self,","            for: COUNTER_ADDRESS","        )!","        ","        try controller.increase(value: 0)","        ","        let result = try controller.getCounter()","        ","        XCTAssertEqual(result, 15)","    }","    ","    func testIncreaseMoreThanZero() throws {","        try self.deployContract(","            at: COUNTER_ADDRESS,","            arguments: [","                15 \/\/ Initial value","            ]","        )","        ","        var controller = self.instantiateController(","            CounterController.self,","            for: COUNTER_ADDRESS","        )!","        ","        try controller.increase(value: 5)","        ","        let result = try controller.getCounter()","        ","        XCTAssertEqual(result, 20)","    }","    ","    func testDecreaseZero() throws {","        try self.deployContract(","            at: COUNTER_ADDRESS,","            arguments: [","                15 \/\/ Initial value","            ]","        )","        ","        var controller = self.instantiateController(","            CounterController.self,","            for: COUNTER_ADDRESS","        )!","        ","        try controller.decrease(value: 0)","        ","        let result = try controller.getCounter()","        ","        XCTAssertEqual(result, 15)","    }","    ","    func testDecreaseMoreThanZero() throws {","        try self.deployContract(","            at: COUNTER_ADDRESS,","            arguments: [","                15 \/\/ Initial value","            ]","        )","        ","        var controller = self.instantiateController(","            CounterController.self,","            for: COUNTER_ADDRESS","        )!","        ","        try controller.decrease(value: 5)","        ","        let result = try controller.getCounter()","        ","        XCTAssertEqual(result, 10)","    }","}"],"type":"file","fileType":"swift","identifier":"CodingFirstContractSection3Step12.swift","highlights":[{"line":94},{"line":95},{"line":96},{"line":97},{"line":98},{"line":99},{"line":100},{"line":101},{"line":102},{"line":103},{"line":104},{"line":105},{"line":106},{"line":107},{"line":108},{"line":109},{"line":110},{"line":111},{"line":112},{"line":113},{"line":114},{"line":115},{"line":116},{"line":117},{"line":118},{"line":119},{"line":120},{"line":121},{"line":122},{"line":123},{"line":124},{"line":125},{"line":126},{"line":127},{"line":128},{"line":129},{"line":130},{"line":131},{"line":132},{"line":133}],"syntax":"swift","fileName":"CounterTests.swift"},"doc://SpaceKit/tutorials/SpaceKit/AsyncCalls#Declare-the-Callee-Proxy":{"title":"Declare the Callee Proxy","role":"pseudoSymbol","url":"\/tutorials\/spacekit\/asynccalls#Declare-the-Callee-Proxy","abstract":[{"type":"text","text":"Blockchain platforms using SpaceVM enable seamless execution within a sharded environment. Sharding divides a blockchain’s global state and validation workload into smaller, manageable units known as shards. This method enhances scalability without compromising decentralization, allowing nodes to operate without significant computational resources."}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls#Declare-the-Callee-Proxy","type":"section","kind":"section"},"CodingFirstContractSection3Step1.png":{"identifier":"CodingFirstContractSection3Step1.png","type":"image","alt":"File tree showing newly created `CounterTests.swift`.","variants":[{"url":"\/images\/SpaceKit\/CodingFirstContractSection3Step1.png","traits":["1x","light"]}]},"CodingFirstContractSection3Step11.swift":{"identifier":"CodingFirstContractSection3Step11.swift","highlights":[{"line":54},{"line":55},{"line":56},{"line":57},{"line":58},{"line":59},{"line":60},{"line":61},{"line":62},{"line":63},{"line":64},{"line":65},{"line":66},{"line":67},{"line":68},{"line":69},{"line":70},{"line":71},{"line":72},{"line":73},{"line":74},{"line":75},{"line":76},{"line":77},{"line":78},{"line":79},{"line":80},{"line":81},{"line":82},{"line":83},{"line":84},{"line":85},{"line":86},{"line":87},{"line":88},{"line":89},{"line":90},{"line":91},{"line":92},{"line":93}],"content":["import SpaceKit","import Counter","import XCTest","","let COUNTER_ADDRESS = \"counter\"","","final class CounterTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: COUNTER_ADDRESS,","                controllers: [","                    CounterController.self","                ]","            )","        ]","    }","    ","    func testDeployCounterInitialValueZero() throws {","        try self.deployContract(","            at: COUNTER_ADDRESS,","            arguments: [","                0 \/\/ Initial value","            ]","        )","        ","        let controller = self.instantiateController(","            CounterController.self,","            for: COUNTER_ADDRESS","        )!","        ","        let result = try controller.getCounter()","        ","        XCTAssertEqual(result, 0)","    }","    ","    func testDeployCounterInitialValueNonZero() throws {","        try self.deployContract(","            at: COUNTER_ADDRESS,","            arguments: [","                15 \/\/ Initial value","            ]","        )","        ","        let controller = self.instantiateController(","            CounterController.self,","            for: COUNTER_ADDRESS","        )!","        ","        let result = try controller.getCounter()","        ","        XCTAssertEqual(result, 15)","    }","    ","    func testIncreaseZero() throws {","        try self.deployContract(","            at: COUNTER_ADDRESS,","            arguments: [","                15 \/\/ Initial value","            ]","        )","        ","        var controller = self.instantiateController(","            CounterController.self,","            for: COUNTER_ADDRESS","        )!","        ","        try controller.increase(value: 0)","        ","        let result = try controller.getCounter()","        ","        XCTAssertEqual(result, 15)","    }","    ","    func testIncreaseMoreThanZero() throws {","        try self.deployContract(","            at: COUNTER_ADDRESS,","            arguments: [","                15 \/\/ Initial value","            ]","        )","        ","        var controller = self.instantiateController(","            CounterController.self,","            for: COUNTER_ADDRESS","        )!","        ","        try controller.increase(value: 5)","        ","        let result = try controller.getCounter()","        ","        XCTAssertEqual(result, 20)","    }","}"],"type":"file","syntax":"swift","fileName":"CounterTests.swift","fileType":"swift"},"CodingFirstContractSection1Step4.png":{"identifier":"CodingFirstContractSection1Step4.png","type":"image","alt":"Xcode's Product menu with 'Build' highlighted.","variants":[{"url":"\/images\/SpaceKit\/CodingFirstContractSection1Step4.png","traits":["1x","light"]}]},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes":{"url":"\/tutorials\/spacekit\/familiarizewithtypes","title":"Exploring SpaceKit's Types","type":"topic","kind":"project","abstract":[{"text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}],"estimatedTime":"20min","role":"project","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes"},"doc://SpaceKit/tutorials/SpaceKit/GetInfo#Accessing-Transaction-Context-Data":{"kind":"section","role":"pseudoSymbol","abstract":[{"type":"text","text":"Many smart contracts rely on contextual data to execute their operations effectively. This data can include input payments, the caller’s address, the current time, the balance of a specific account, or even the contract owner."}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo#Accessing-Transaction-Context-Data","url":"\/tutorials\/spacekit\/getinfo#Accessing-Transaction-Context-Data","type":"section","title":"Accessing Transaction Context Data"},"CodingFirstContractSection2Step6.swift":{"identifier":"CodingFirstContractSection2Step6.swift","highlights":[{"line":9},{"line":10},{"line":11},{"line":12}],"content":["import SpaceKit","","@Controller public struct CounterController {","    @Storage(key: \"counter\") var counter: BigUint","    ","    public mutating func increase(value: BigUint) {","        self.counter = self.counter + value","    }","    ","    public mutating func decrease(value: BigUint) {","        self.counter = self.counter - value","    }","}"],"type":"file","syntax":"swift","fileName":"lib.swift","fileType":"swift"},"CodingFirstContractSection1Step2.png":{"identifier":"CodingFirstContractSection1Step2.png","type":"image","alt":"Output of the `space init Counter` command.","variants":[{"url":"\/images\/SpaceKit\/CodingFirstContractSection1Step2.png","traits":["1x","light"]}]},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Understanding-the-Buffer-Type":{"url":"\/tutorials\/spacekit\/familiarizewithtypes#Understanding-the-Buffer-Type","abstract":[{"type":"text","text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM."}],"title":"Understanding the Buffer Type","kind":"section","type":"section","role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Understanding-the-Buffer-Type"},"doc://SpaceKit/tutorials/SpaceKit/Deep-Dive-into-SpaceKit-Concepts/Exploring-SpaceKit's-Types":{"type":"topic","role":"article","title":"Exploring SpaceKit's Types","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Exploring-SpaceKit's-Types","kind":"article","url":"\/tutorials\/spacekit\/deep-dive-into-spacekit-concepts\/exploring-spacekit's-types","abstract":[]},"CodingFirstContractSection2Step7.swift":{"identifier":"CodingFirstContractSection2Step7.swift","highlights":[{"line":13},{"line":14},{"line":15},{"line":16}],"content":["import SpaceKit","","@Controller public struct CounterController {","    @Storage(key: \"counter\") var counter: BigUint","    ","    public mutating func increase(value: BigUint) {","        self.counter = self.counter + value","    }","    ","    public mutating func decrease(value: BigUint) {","        self.counter = self.counter - value","    }","    ","    public func getCounter() -> BigUint {","        return self.counter","    }","}"],"type":"file","syntax":"swift","fileName":"lib.swift","fileType":"swift"},"doc://SpaceKit/tutorials/SpaceKit/SyncCalls":{"abstract":[{"text":"Smart contracts can interact not only with users but also with other smart contracts. This enables more advanced protocols by leveraging existing ones. For example, you could integrate a decentralized exchange directly into your contract to perform token swaps. Decentralized applications often involve multiple contracts, each with a dedicated role, working together to achieve complex functionality—similar to microservices in backend systems.","type":"text"}],"url":"\/tutorials\/spacekit\/synccalls","kind":"project","title":"Interact with Other Contracts","estimatedTime":"15min","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls","type":"topic","role":"project"},"doc://SpaceKit/tutorials/SpaceKit/InstallingTools#Setting-Up-the-SpaceKit-CLI":{"abstract":[{"text":"Before writing your first smart contract with SpaceKit, ensure you have the necessary tools installed.","type":"text"}],"url":"\/tutorials\/spacekit\/installingtools#Setting-Up-the-SpaceKit-CLI","kind":"section","title":"Setting Up the SpaceKit CLI","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Setting-Up-the-SpaceKit-CLI","type":"section","role":"pseudoSymbol"},"doc://SpaceKit/tutorials/SpaceKit/SyncCalls#Declare-the-Callee-Proxy":{"title":"Declare the Callee Proxy","role":"pseudoSymbol","url":"\/tutorials\/spacekit\/synccalls#Declare-the-Callee-Proxy","abstract":[{"type":"text","text":"Smart contracts can interact not only with users but also with other smart contracts. This enables more advanced protocols by leveraging existing ones. For example, you could integrate a decentralized exchange directly into your contract to perform token swaps. Decentralized applications often involve multiple contracts, each with a dedicated role, working together to achieve complex functionality—similar to microservices in backend systems."}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls#Declare-the-Callee-Proxy","type":"section","kind":"section"},"doc://SpaceKit/tutorials/SpaceKit/CodingYourFirstContract":{"type":"topic","kind":"project","abstract":[{"text":"In this tutorial, you’ll create a simple smart contract that manages a counter. Users can increment or decrement the counter, and the changes are persisted across contract executions.","type":"text"}],"url":"\/tutorials\/spacekit\/codingyourfirstcontract","role":"project","title":"Building Your First Smart Contract","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract","estimatedTime":"20min"},"CodingFirstContractSection2Step2.swift":{"fileType":"swift","highlights":[{"line":1}],"syntax":"swift","identifier":"CodingFirstContractSection2Step2.swift","type":"file","content":["import SpaceKit"],"fileName":"lib.swift"},"doc://SpaceKit/tutorials/SpaceKit/StoreValues#Working-with-Storage-for-Single-Value-Persistence":{"url":"\/tutorials\/spacekit\/storevalues#Working-with-Storage-for-Single-Value-Persistence","role":"pseudoSymbol","type":"section","title":"Working with @Storage for Single Value Persistence","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues#Working-with-Storage-for-Single-Value-Persistence","kind":"section","abstract":[{"text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory.","type":"text"}]},"doc://SpaceKit/tutorials/SpaceKit/InstallingTools#Installing-SpaceKits-Dependencies":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Installing-SpaceKits-Dependencies","type":"section","url":"\/tutorials\/spacekit\/installingtools#Installing-SpaceKits-Dependencies","kind":"section","abstract":[{"text":"Before writing your first smart contract with SpaceKit, ensure you have the necessary tools installed.","type":"text"}],"role":"pseudoSymbol","title":"Installing SpaceKit's Dependencies"},"doc://SpaceKit/tutorials/SpaceKit/Deep-Dive-into-SpaceKit-Concepts/Retrieving-Information-from-the-Blockchain":{"abstract":[],"url":"\/tutorials\/spacekit\/deep-dive-into-spacekit-concepts\/retrieving-information-from-the-blockchain","kind":"article","title":"Retrieving Information from the Blockchain","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Retrieving-Information-from-the-Blockchain","type":"topic","role":"article"},"doc://SpaceKit/tutorials/SpaceKit/GetInfo#Accessing-Blockchain-Context-Data":{"type":"section","kind":"section","abstract":[{"type":"text","text":"Many smart contracts rely on contextual data to execute their operations effectively. This data can include input payments, the caller’s address, the current time, the balance of a specific account, or even the contract owner."}],"url":"\/tutorials\/spacekit\/getinfo#Accessing-Blockchain-Context-Data","role":"pseudoSymbol","title":"Accessing Blockchain Context Data","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo#Accessing-Blockchain-Context-Data"},"doc://SpaceKit/tutorials/SpaceKit/InstallingTools":{"title":"Install the Necessary Tools","role":"project","url":"\/tutorials\/spacekit\/installingtools","abstract":[{"type":"text","text":"Before writing your first smart contract with SpaceKit, ensure you have the necessary tools installed."}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools","type":"topic","kind":"project","estimatedTime":"10min"},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges":{"type":"section","kind":"section","abstract":[{"text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}],"url":"\/tutorials\/spacekit\/familiarizewithtypes#Handling-Heap-Allocation-Challenges","role":"pseudoSymbol","title":"Handling Heap Allocation Challenges","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges"},"doc://SpaceKit/tutorials/SpaceKit/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract":{"url":"\/tutorials\/spacekit\/installingtools#Initializing-and-Compiling-Your-First-Smart-Contract","title":"Initializing and Compiling Your First Smart Contract","type":"section","kind":"section","abstract":[{"text":"Before writing your first smart contract with SpaceKit, ensure you have the necessary tools installed.","type":"text"}],"role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract"},"doc://SpaceKit/tutorials/SpaceKit/CodingYourFirstContract#Writing-the-Contract-Code":{"kind":"section","abstract":[{"type":"text","text":"In this tutorial, you’ll create a simple smart contract that manages a counter. Users can increment or decrement the counter, and the changes are persisted across contract executions."}],"title":"Writing the Contract Code","url":"\/tutorials\/spacekit\/codingyourfirstcontract#Writing-the-Contract-Code","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Writing-the-Contract-Code","role":"pseudoSymbol","type":"section"},"doc://SpaceKit/tutorials/SpaceKit/StoreValues":{"kind":"project","estimatedTime":"15min","role":"project","abstract":[{"type":"text","text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory."}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues","url":"\/tutorials\/spacekit\/storevalues","type":"topic","title":"Persist Values Between Executions"},"CodingFirstContractSection3Step7.swift":{"identifier":"CodingFirstContractSection3Step7.swift","highlights":[{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25}],"content":["import SpaceKit","import Counter","import XCTest","","let COUNTER_ADDRESS = \"counter\"","","final class CounterTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: COUNTER_ADDRESS,","                controllers: [","                    CounterController.self","                ]","            )","        ]","    }","    ","    func testDeployCounterInitialValueZero() throws {","        try self.deployContract(","            at: COUNTER_ADDRESS,","            arguments: [","                0 \/\/ Initial value","            ]","        )","    }","}"],"type":"file","syntax":"swift","fileName":"CounterTests.swift","fileType":"swift"},"CodingFirstContractSection3Step13.swift":{"fileType":"swift","highlights":[{"line":134},{"line":135},{"line":136},{"line":137},{"line":138},{"line":139},{"line":140},{"line":141},{"line":142},{"line":143},{"line":144},{"line":145},{"line":146},{"line":147},{"line":148},{"line":149},{"line":150},{"line":151},{"line":152},{"line":153},{"line":154},{"line":155}],"syntax":"swift","identifier":"CodingFirstContractSection3Step13.swift","type":"file","content":["import SpaceKit","import Counter","import XCTest","","let COUNTER_ADDRESS = \"counter\"","","final class CounterTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: COUNTER_ADDRESS,","                controllers: [","                    CounterController.self","                ]","            )","        ]","    }","    ","    func testDeployCounterInitialValueZero() throws {","        try self.deployContract(","            at: COUNTER_ADDRESS,","            arguments: [","                0 \/\/ Initial value","            ]","        )","        ","        let controller = self.instantiateController(","            CounterController.self,","            for: COUNTER_ADDRESS","        )!","        ","        let result = try controller.getCounter()","        ","        XCTAssertEqual(result, 0)","    }","    ","    func testDeployCounterInitialValueNonZero() throws {","        try self.deployContract(","            at: COUNTER_ADDRESS,","            arguments: [","                15 \/\/ Initial value","            ]","        )","        ","        let controller = self.instantiateController(","            CounterController.self,","            for: COUNTER_ADDRESS","        )!","        ","        let result = try controller.getCounter()","        ","        XCTAssertEqual(result, 15)","    }","    ","    func testIncreaseZero() throws {","        try self.deployContract(","            at: COUNTER_ADDRESS,","            arguments: [","                15 \/\/ Initial value","            ]","        )","        ","        var controller = self.instantiateController(","            CounterController.self,","            for: COUNTER_ADDRESS","        )!","        ","        try controller.increase(value: 0)","        ","        let result = try controller.getCounter()","        ","        XCTAssertEqual(result, 15)","    }","    ","    func testIncreaseMoreThanZero() throws {","        try self.deployContract(","            at: COUNTER_ADDRESS,","            arguments: [","                15 \/\/ Initial value","            ]","        )","        ","        var controller = self.instantiateController(","            CounterController.self,","            for: COUNTER_ADDRESS","        )!","        ","        try controller.increase(value: 5)","        ","        let result = try controller.getCounter()","        ","        XCTAssertEqual(result, 20)","    }","    ","    func testDecreaseZero() throws {","        try self.deployContract(","            at: COUNTER_ADDRESS,","            arguments: [","                15 \/\/ Initial value","            ]","        )","        ","        var controller = self.instantiateController(","            CounterController.self,","            for: COUNTER_ADDRESS","        )!","        ","        try controller.decrease(value: 0)","        ","        let result = try controller.getCounter()","        ","        XCTAssertEqual(result, 15)","    }","    ","    func testDecreaseMoreThanZero() throws {","        try self.deployContract(","            at: COUNTER_ADDRESS,","            arguments: [","                15 \/\/ Initial value","            ]","        )","        ","        var controller = self.instantiateController(","            CounterController.self,","            for: COUNTER_ADDRESS","        )!","        ","        try controller.decrease(value: 5)","        ","        let result = try controller.getCounter()","        ","        XCTAssertEqual(result, 10)","    }","    ","    func testDecreaseTooMuchShouldFail() throws {","        try self.deployContract(","            at: COUNTER_ADDRESS,","            arguments: [","                15 \/\/ Initial value","            ]","        )","        ","        var controller = self.instantiateController(","            CounterController.self,","            for: COUNTER_ADDRESS","        )!","        ","        do {","            try controller.decrease(value: 16)","            ","            XCTFail() \/\/ Decrease fails, so this line should not be executed","        } catch {","            XCTAssertEqual(error, .userError(message: \"cannot subtract because result would be negative\"))","        }","    }","}"],"fileName":"CounterTests.swift"},"CodingFirstContractSection2Step3.swift":{"identifier":"CodingFirstContractSection2Step3.swift","highlights":[{"line":2},{"line":3},{"line":4},{"line":5}],"content":["import SpaceKit","","@Controller public struct CounterController {","    ","}"],"type":"file","syntax":"swift","fileName":"lib.swift","fileType":"swift"},"doc://SpaceKit/tutorials/SpaceKit/GetInfo":{"abstract":[{"text":"Many smart contracts rely on contextual data to execute their operations effectively. This data can include input payments, the caller’s address, the current time, the balance of a specific account, or even the contract owner.","type":"text"}],"url":"\/tutorials\/spacekit\/getinfo","kind":"project","title":"Retrieving Information from the Blockchain","estimatedTime":"10min","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo","type":"topic","role":"project"},"CodingFirstContractSection3Step6.swift":{"fileType":"swift","highlights":[{"line":18},{"line":19},{"line":20},{"line":21}],"syntax":"swift","identifier":"CodingFirstContractSection3Step6.swift","type":"file","content":["import SpaceKit","import Counter","import XCTest","","let COUNTER_ADDRESS = \"counter\"","","final class CounterTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: COUNTER_ADDRESS,","                controllers: [","                    CounterController.self","                ]","            )","        ]","    }","    ","    func testDeployCounterInitialValueZero() throws {","        ","    }","}"],"fileName":"CounterTests.swift"},"doc://SpaceKit/tutorials/SpaceKit/Deep-Dive-into-SpaceKit-Concepts/Calling-Contracts-Across-Shards":{"url":"\/tutorials\/spacekit\/deep-dive-into-spacekit-concepts\/calling-contracts-across-shards","abstract":[],"title":"Calling Contracts Across Shards","kind":"article","type":"topic","role":"article","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Calling-Contracts-Across-Shards"},"doc://SpaceKit/tutorials/SpaceKit/Getting-Started/Building-Your-First-Smart-Contract":{"type":"topic","role":"article","title":"Building Your First Smart Contract","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Getting-Started\/Building-Your-First-Smart-Contract","kind":"article","url":"\/tutorials\/spacekit\/getting-started\/building-your-first-smart-contract","abstract":[]},"CodingFirstContractSection2Step1.swift":{"identifier":"CodingFirstContractSection2Step1.swift","highlights":[],"content":[""],"type":"file","syntax":"swift","fileName":"lib.swift","fileType":"swift"},"doc://SpaceKit/tutorials/SpaceKit":{"url":"\/tutorials\/spacekit","abstract":[{"type":"text","text":"Discover how SpaceKit simplifies blockchain development using Swift. Dive into the world of Web3 with ease and efficiency."}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit","title":"Meet SpaceKit","kind":"overview","type":"topic","role":"overview"},"doc://SpaceKit/tutorials/SpaceKit/AsyncCalls":{"kind":"project","abstract":[{"type":"text","text":"Blockchain platforms using SpaceVM enable seamless execution within a sharded environment. Sharding divides a blockchain’s global state and validation workload into smaller, manageable units known as shards. This method enhances scalability without compromising decentralization, allowing nodes to operate without significant computational resources."}],"title":"Interacting with Contracts Across Shards","url":"\/tutorials\/spacekit\/asynccalls","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls","role":"project","type":"topic","estimatedTime":"15min"},"CodingFirstContractSection3Step3.swift":{"highlights":[{"line":4},{"line":5}],"type":"file","syntax":"swift","fileType":"swift","content":["import SpaceKit","import Counter","import XCTest","","let COUNTER_ADDRESS = \"counter\""],"fileName":"CounterTests.swift","identifier":"CodingFirstContractSection3Step3.swift"},"doc://SpaceKit/tutorials/SpaceKit/Deep-Dive-into-SpaceKit-Concepts/Persisting-Data-Across-Executions":{"type":"topic","kind":"article","abstract":[],"url":"\/tutorials\/spacekit\/deep-dive-into-spacekit-concepts\/persisting-data-across-executions","role":"article","title":"Persisting Data Across Executions","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Persisting-Data-Across-Executions"},"CodingFirstContractSection3Step14.png":{"type":"image","identifier":"CodingFirstContractSection3Step14.png","alt":"Xcode's test tab showing all tests passed.","variants":[{"traits":["1x","light"],"url":"\/images\/SpaceKit\/CodingFirstContractSection3Step14.png"}]},"doc://SpaceKit/tutorials/SpaceKit/AsyncCalls#Perform-an-Asynchronous-Call":{"url":"\/tutorials\/spacekit\/asynccalls#Perform-an-Asynchronous-Call","title":"Perform an Asynchronous Call","type":"section","kind":"section","abstract":[{"text":"Blockchain platforms using SpaceVM enable seamless execution within a sharded environment. Sharding divides a blockchain’s global state and validation workload into smaller, manageable units known as shards. This method enhances scalability without compromising decentralization, allowing nodes to operate without significant computational resources.","type":"text"}],"role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls#Perform-an-Asynchronous-Call"},"doc://SpaceKit/tutorials/SpaceKit/CodingYourFirstContract#Initializing-the-Project":{"url":"\/tutorials\/spacekit\/codingyourfirstcontract#Initializing-the-Project","abstract":[{"type":"text","text":"In this tutorial, you’ll create a simple smart contract that manages a counter. Users can increment or decrement the counter, and the changes are persisted across contract executions."}],"title":"Initializing the Project","kind":"section","type":"section","role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Initializing-the-Project"},"doc://SpaceKit/tutorials/SpaceKit/StoreValues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage":{"type":"section","kind":"section","abstract":[{"text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory.","type":"text"}],"url":"\/tutorials\/spacekit\/storevalues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage","role":"pseudoSymbol","title":"Leveraging @Mapping for Dynamic Key-Value Storage","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage"},"CodingFirstContractSection2Step4.swift":{"type":"file","fileName":"lib.swift","fileType":"swift","identifier":"CodingFirstContractSection2Step4.swift","syntax":"swift","content":["import SpaceKit","","@Controller public struct CounterController {","    @Storage(key: \"counter\") var counter: BigUint","}"],"highlights":[{"line":4}]},"CodingFirstContractSection3Step8.swift":{"type":"file","highlights":[{"line":26},{"line":27},{"line":28},{"line":29},{"line":30}],"identifier":"CodingFirstContractSection3Step8.swift","syntax":"swift","fileType":"swift","content":["import SpaceKit","import Counter","import XCTest","","let COUNTER_ADDRESS = \"counter\"","","final class CounterTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: COUNTER_ADDRESS,","                controllers: [","                    CounterController.self","                ]","            )","        ]","    }","    ","    func testDeployCounterInitialValueZero() throws {","        try self.deployContract(","            at: COUNTER_ADDRESS,","            arguments: [","                0 \/\/ Initial value","            ]","        )","        ","        let controller = self.instantiateController(","            CounterController.self,","            for: COUNTER_ADDRESS","        )!","    }","}"],"fileName":"CounterTests.swift"}}}