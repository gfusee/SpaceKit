{"sections":[{"estimatedTimeInMinutes":10,"kind":"hero","chapter":"Installing the Tools","title":"Install the Necessary Tools","content":[{"inlineContent":[{"text":"Before writing your first smart contract with Space, ensure you have the necessary tools installed.","type":"text"}],"type":"paragraph"}]},{"tasks":[{"anchor":"Installing-Spaces-Dependencies","title":"Installing Space's Dependencies","contentSection":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Space relies on several dependencies, which you need to install on your system."}]}],"kind":"contentAndMedia","mediaPosition":"trailing"}],"stepsSection":[{"runtimePreview":null,"caption":[],"media":"InstallingToolsSection1Step1.png","code":null,"content":[{"inlineContent":[{"text":"Open a terminal to begin.","type":"text"}],"type":"paragraph"}],"type":"step"},{"runtimePreview":null,"media":"InstallingToolsSection1Step2.png","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Check the Swift version by running "},{"type":"codeVoice","code":"swift --version"},{"type":"text","text":". Space requires Swift 6 or later."}]}],"code":null,"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If necessary, install or update Swift by following the instructions on "},{"identifier":"https:\/\/www.swift.org\/install\/macos\/","isActive":true,"type":"reference"},{"text":".","type":"text"}]}],"type":"step"},{"content":[{"type":"paragraph","inlineContent":[{"text":"Ensure ","type":"text"},{"type":"codeVoice","code":"git"},{"type":"text","text":" is installed. The Space CLI requires it to retrieve important files."}]}],"media":"InstallingToolsSection1Step3.png","type":"step","runtimePreview":null,"code":null,"caption":[{"type":"paragraph","inlineContent":[{"text":"If ","type":"text"},{"type":"codeVoice","code":"git"},{"text":" is not installed, use your preferred method to install it.","type":"text"}]}]},{"runtimePreview":null,"type":"step","media":"InstallingToolsSection1Step4.png","caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If Docker is not installed, you can download and install it by following the steps on "},{"type":"reference","identifier":"https:\/\/docs.docker.com\/get-started\/get-docker\/","isActive":true},{"type":"text","text":"."}]}],"content":[{"inlineContent":[{"type":"text","text":"Ensure that Docker is installed and running. Docker is required by the Space CLI to compile smart contracts."}],"type":"paragraph"}],"code":null}]},{"stepsSection":[{"media":"InstallingToolsSection1Step1.png","caption":[],"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Open a terminal.","type":"text"}]}],"code":null,"runtimePreview":null},{"content":[{"inlineContent":[{"type":"text","text":"Run the installation command: "},{"code":"curl -sSL https:\/\/raw.githubusercontent.com\/gfusee\/space-cli\/refs\/heads\/main\/install.sh | bash","type":"codeVoice"}],"type":"paragraph"}],"media":"InstallingToolsSection2Step2.png","code":null,"runtimePreview":null,"caption":[{"type":"paragraph","inlineContent":[{"text":"After the installation, please restart your terminal to reload your PATH environment variable.","type":"text"}]}],"type":"step"},{"caption":[],"media":"InstallingToolsSection2Step3.png","code":null,"runtimePreview":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Verify the Space CLI installation by running ","type":"text"},{"code":"space --help","type":"codeVoice"},{"type":"text","text":"."}]}]}],"contentSection":[{"kind":"contentAndMedia","content":[{"inlineContent":[{"text":"The Space CLI is your primary tool for using the Space framework. You’ll use it to initialize and compile your smart contracts.","type":"text"}],"type":"paragraph"}],"mediaPosition":"trailing"}],"title":"Setting Up the Space CLI","anchor":"Setting-Up-the-Space-CLI"},{"contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Now, use the Space CLI to create and compile your first smart contract project."}]}],"mediaPosition":"trailing"}],"title":"Initializing and Compiling Your First Smart Contract","anchor":"Initializing-and-Compiling-Your-First-Smart-Contract","stepsSection":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Open a terminal."}]}],"type":"step","caption":[],"runtimePreview":null,"media":"InstallingToolsSection1Step1.png","code":null},{"type":"step","media":"InstallingToolsSection3Step2.png","code":null,"runtimePreview":null,"caption":[{"inlineContent":[{"text":"This command creates a new project directory named ","type":"text"},{"type":"codeVoice","code":"MyFirstSpaceProject"},{"type":"text","text":"."}],"type":"paragraph"}],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Navigate to the desired directory and run "},{"type":"codeVoice","code":"space init MyFirstSpaceProject"},{"text":".","type":"text"}]}]},{"type":"step","caption":[],"code":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Navigate to the newly created ","type":"text"},{"type":"codeVoice","code":"MyFirstSpaceProject"},{"type":"text","text":" directory."}]}],"media":"InstallingToolsSection3Step3.png","runtimePreview":null},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Build the smart contract by running "},{"type":"codeVoice","code":"space contract build"},{"type":"text","text":"."}]}],"type":"step","code":null,"media":"InstallingToolsSection3Step4.png","caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Look for the “WASM output:” line, which indicates a successful compilation. The "},{"type":"codeVoice","code":".wasm"},{"text":" file is your compiled contract.","type":"text"}]}],"runtimePreview":null}]}],"kind":"tasks"},{"kind":"callToAction","action":{"overridingTitle":"Get started","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract","isActive":true,"overridingTitleInlineContent":[{"text":"Get started","type":"text"}],"type":"reference"},"featuredEyebrow":"Tutorial","title":"Building Your First Smart Contract","abstract":[{"type":"text","text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user."}]}],"metadata":{"categoryPathComponent":"Space","title":"Install the Necessary Tools","role":"project","category":"Space"},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools"},"schemaVersion":{"minor":3,"major":0,"patch":0},"hierarchy":{"paths":[["doc:\/\/SpaceKit\/tutorials\/Space","doc:\/\/SpaceKit\/tutorials\/Space\/Getting-Started","doc:\/\/SpaceKit\/tutorials\/Space\/Getting-Started\/Installing-the-Tools"]],"reference":"doc:\/\/SpaceKit\/tutorials\/Space","modules":[{"reference":"doc:\/\/SpaceKit\/tutorials\/Space\/Getting-Started\/Installing-the-Tools","projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools","sections":[{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Installing-Spaces-Dependencies"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Setting-Up-the-Space-CLI","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract","kind":"task"}]}]},{"projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract","sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Initializing-the-Project","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Writing-the-Contract-Code"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Testing-the-Contract"}]}],"reference":"doc:\/\/SpaceKit\/tutorials\/Space\/Getting-Started\/Building-Your-First-Smart-Contract"},{"projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes","sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Understanding-the-Buffer-Type","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Working-with-the-BigUint-Type"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Working-with-the-Vector-Type"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Creating-Your-Own-Types","kind":"task"}]}],"reference":"doc:\/\/SpaceKit\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Exploring-Space's-Types"},{"reference":"doc:\/\/SpaceKit\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Persisting-Data-Across-Executions","projects":[{"sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues#Working-with-Storage-for-Single-Value-Persistence","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues"}]},{"reference":"doc:\/\/SpaceKit\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Retrieving-Information-from-the-Blockchain","projects":[{"sections":[{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo#Accessing-Transaction-Context-Data"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo#Accessing-Blockchain-Context-Data","kind":"task"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo"}]},{"projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls","sections":[{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls#Declare-the-Callee-Proxy"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls#Perform-a-Synchronous-Call"}]}],"reference":"doc:\/\/SpaceKit\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Interacting-with-Other-Contracts"},{"projects":[{"sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls#Declare-the-Callee-Proxy","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls#Perform-an-Asynchronous-Call"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls"}],"reference":"doc:\/\/SpaceKit\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Calling-Contracts-Across-Shards"}]},"kind":"project","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/tutorials\/spacekit\/installingtools"]}],"references":{"doc://SpaceKit/tutorials/SpaceKit/SyncCalls#Perform-a-Synchronous-Call":{"url":"\/tutorials\/spacekit\/synccalls#Perform-a-Synchronous-Call","title":"Perform a Synchronous Call","type":"section","abstract":[{"type":"text","text":"Smart contracts can interact not only with users but also with other smart contracts. This enables more advanced protocols by leveraging existing ones. For example, you could integrate a decentralized exchange directly into your contract to perform token swaps. Decentralized applications often involve multiple contracts, each with a dedicated role, working together to achieve complex functionality—similar to microservices in backend systems."}],"role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls#Perform-a-Synchronous-Call"},"InstallingToolsSection1Step4.png":{"alt":"Terminal output showing Docker is running.","type":"image","identifier":"InstallingToolsSection1Step4.png","variants":[{"url":"\/images\/SpaceKit\/InstallingToolsSection1Step4.png","traits":["1x","light"]}]},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Creating-Your-Own-Types":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Creating-Your-Own-Types","role":"pseudoSymbol","title":"Creating Your Own Types","type":"section","abstract":[{"type":"text","text":"Space provides types that allow you to leverage the full potential of the SpaceVM."}],"url":"\/tutorials\/spacekit\/familiarizewithtypes#Creating-Your-Own-Types","kind":"section"},"https://docs.docker.com/get-started/get-docker/":{"url":"https:\/\/docs.docker.com\/get-started\/get-docker\/","titleInlineContent":[{"text":"Docker’s official site","type":"text"}],"title":"Docker’s official site","identifier":"https:\/\/docs.docker.com\/get-started\/get-docker\/","type":"link"},"doc://SpaceKit/tutorials/SpaceKit/CodingYourFirstContract#Testing-the-Contract":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Testing-the-Contract","kind":"section","url":"\/tutorials\/spacekit\/codingyourfirstcontract#Testing-the-Contract","abstract":[{"type":"text","text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user."}],"type":"section","role":"pseudoSymbol","title":"Testing the Contract"},"doc://SpaceKit/tutorials/SpaceKit/StoreValues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage":{"kind":"section","role":"pseudoSymbol","abstract":[{"text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory.","type":"text"}],"url":"\/tutorials\/spacekit\/storevalues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage","title":"Leveraging @Mapping for Dynamic Key-Value Storage","type":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage"},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Working-with-the-BigUint-Type":{"kind":"section","role":"pseudoSymbol","type":"section","url":"\/tutorials\/spacekit\/familiarizewithtypes#Working-with-the-BigUint-Type","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Working-with-the-BigUint-Type","abstract":[{"text":"Space provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}],"title":"Working with the BigUint Type"},"doc://SpaceKit/tutorials/SpaceKit/GetInfo#Accessing-Transaction-Context-Data":{"type":"section","abstract":[{"type":"text","text":"Many smart contracts rely on contextual data to execute their operations effectively. This data can include input payments, the caller’s address, the current time, the balance of a specific account, or even the contract owner."}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo#Accessing-Transaction-Context-Data","role":"pseudoSymbol","url":"\/tutorials\/spacekit\/getinfo#Accessing-Transaction-Context-Data","title":"Accessing Transaction Context Data","kind":"section"},"doc://SpaceKit/tutorials/SpaceKit/CodingYourFirstContract":{"estimatedTime":"20min","role":"project","type":"topic","title":"Building Your First Smart Contract","abstract":[{"type":"text","text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user."}],"kind":"project","url":"\/tutorials\/spacekit\/codingyourfirstcontract","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract"},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges":{"abstract":[{"text":"Space provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}],"role":"pseudoSymbol","url":"\/tutorials\/spacekit\/familiarizewithtypes#Handling-Heap-Allocation-Challenges","title":"Handling Heap Allocation Challenges","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges","kind":"section","type":"section"},"doc://SpaceKit/tutorials/Space/Getting-Started/Installing-the-Tools":{"type":"topic","abstract":[],"identifier":"doc:\/\/SpaceKit\/tutorials\/Space\/Getting-Started\/Installing-the-Tools","role":"article","url":"\/tutorials\/space\/getting-started\/installing-the-tools","title":"Installing the Tools","kind":"article"},"doc://SpaceKit/tutorials/SpaceKit/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract","role":"pseudoSymbol","title":"Initializing and Compiling Your First Smart Contract","type":"section","abstract":[{"type":"text","text":"Before writing your first smart contract with Space, ensure you have the necessary tools installed."}],"url":"\/tutorials\/spacekit\/installingtools#Initializing-and-Compiling-Your-First-Smart-Contract","kind":"section"},"InstallingToolsSection3Step4.png":{"alt":"Output of `space contract build`.","variants":[{"traits":["1x","light"],"url":"\/images\/SpaceKit\/InstallingToolsSection3Step4.png"}],"identifier":"InstallingToolsSection3Step4.png","type":"image"},"InstallingToolsSection2Step3.png":{"alt":"Output of `space --help`.","variants":[{"url":"\/images\/SpaceKit\/InstallingToolsSection2Step3.png","traits":["1x","light"]}],"identifier":"InstallingToolsSection2Step3.png","type":"image"},"doc://SpaceKit/tutorials/Space/Getting-Started/Building-Your-First-Smart-Contract":{"identifier":"doc:\/\/SpaceKit\/tutorials\/Space\/Getting-Started\/Building-Your-First-Smart-Contract","role":"article","title":"Building Your First Smart Contract","type":"topic","abstract":[],"url":"\/tutorials\/space\/getting-started\/building-your-first-smart-contract","kind":"article"},"InstallingToolsSection1Step1.png":{"alt":"An empty terminal window.","type":"image","identifier":"InstallingToolsSection1Step1.png","variants":[{"url":"\/images\/SpaceKit\/InstallingToolsSection1Step1.png","traits":["1x","light"]}]},"doc://SpaceKit/tutorials/SpaceKit/InstallingTools#Installing-Spaces-Dependencies":{"kind":"section","role":"pseudoSymbol","type":"section","title":"Installing Space's Dependencies","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Installing-Spaces-Dependencies","abstract":[{"text":"Before writing your first smart contract with Space, ensure you have the necessary tools installed.","type":"text"}],"url":"\/tutorials\/spacekit\/installingtools#Installing-Spaces-Dependencies"},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes":{"abstract":[{"type":"text","text":"Space provides types that allow you to leverage the full potential of the SpaceVM."}],"url":"\/tutorials\/spacekit\/familiarizewithtypes","title":"Exploring Space's Types","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes","role":"project","estimatedTime":"20min","kind":"project","type":"topic"},"doc://SpaceKit/tutorials/Space/Deep-Dive-into-Space-Concepts/Interacting-with-Other-Contracts":{"url":"\/tutorials\/space\/deep-dive-into-space-concepts\/interacting-with-other-contracts","identifier":"doc:\/\/SpaceKit\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Interacting-with-Other-Contracts","abstract":[],"title":"Interacting with Other Contracts","role":"article","kind":"article","type":"topic"},"doc://SpaceKit/tutorials/SpaceKit/AsyncCalls#Declare-the-Callee-Proxy":{"kind":"section","role":"pseudoSymbol","type":"section","title":"Declare the Callee Proxy","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls#Declare-the-Callee-Proxy","abstract":[{"text":"Blockchain platforms using SpaceVM enable seamless execution within a sharded environment. Sharding divides a blockchain’s global state and validation workload into smaller, manageable units known as shards. This method enhances scalability without compromising decentralization, allowing nodes to operate without significant computational resources.","type":"text"}],"url":"\/tutorials\/spacekit\/asynccalls#Declare-the-Callee-Proxy"},"InstallingToolsSection3Step3.png":{"alt":"Command output after navigating to the directory.","variants":[{"url":"\/images\/SpaceKit\/InstallingToolsSection3Step3.png","traits":["1x","light"]}],"identifier":"InstallingToolsSection3Step3.png","type":"image"},"doc://SpaceKit/tutorials/SpaceKit/AsyncCalls#Perform-an-Asynchronous-Call":{"abstract":[{"text":"Blockchain platforms using SpaceVM enable seamless execution within a sharded environment. Sharding divides a blockchain’s global state and validation workload into smaller, manageable units known as shards. This method enhances scalability without compromising decentralization, allowing nodes to operate without significant computational resources.","type":"text"}],"role":"pseudoSymbol","url":"\/tutorials\/spacekit\/asynccalls#Perform-an-Asynchronous-Call","title":"Perform an Asynchronous Call","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls#Perform-an-Asynchronous-Call","kind":"section","type":"section"},"https://www.swift.org/install/macos/":{"url":"https:\/\/www.swift.org\/install\/macos\/","type":"link","identifier":"https:\/\/www.swift.org\/install\/macos\/","title":"the official Swift website","titleInlineContent":[{"type":"text","text":"the official Swift website"}]},"doc://SpaceKit/tutorials/SpaceKit/StoreValues#Working-with-Storage-for-Single-Value-Persistence":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues#Working-with-Storage-for-Single-Value-Persistence","title":"Working with @Storage for Single Value Persistence","type":"section","abstract":[{"type":"text","text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory."}],"role":"pseudoSymbol","url":"\/tutorials\/spacekit\/storevalues#Working-with-Storage-for-Single-Value-Persistence","kind":"section"},"doc://SpaceKit/tutorials/SpaceKit/InstallingTools":{"estimatedTime":"10min","role":"project","type":"topic","title":"Install the Necessary Tools","abstract":[{"type":"text","text":"Before writing your first smart contract with Space, ensure you have the necessary tools installed."}],"kind":"project","url":"\/tutorials\/spacekit\/installingtools","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools"},"doc://SpaceKit/tutorials/Space/Deep-Dive-into-Space-Concepts/Persisting-Data-Across-Executions":{"role":"article","kind":"article","abstract":[],"identifier":"doc:\/\/SpaceKit\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Persisting-Data-Across-Executions","url":"\/tutorials\/space\/deep-dive-into-space-concepts\/persisting-data-across-executions","type":"topic","title":"Persisting Data Across Executions"},"InstallingToolsSection1Step3.png":{"alt":"Output of `git --version`.","variants":[{"url":"\/images\/SpaceKit\/InstallingToolsSection1Step3.png","traits":["1x","light"]}],"identifier":"InstallingToolsSection1Step3.png","type":"image"},"doc://SpaceKit/tutorials/SpaceKit/GetInfo#Accessing-Blockchain-Context-Data":{"abstract":[{"type":"text","text":"Many smart contracts rely on contextual data to execute their operations effectively. This data can include input payments, the caller’s address, the current time, the balance of a specific account, or even the contract owner."}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo#Accessing-Blockchain-Context-Data","type":"section","kind":"section","title":"Accessing Blockchain Context Data","role":"pseudoSymbol","url":"\/tutorials\/spacekit\/getinfo#Accessing-Blockchain-Context-Data"},"doc://SpaceKit/tutorials/SpaceKit/GetInfo":{"estimatedTime":"10min","role":"project","type":"topic","title":"Retrieving Information from the Blockchain","abstract":[{"type":"text","text":"Many smart contracts rely on contextual data to execute their operations effectively. This data can include input payments, the caller’s address, the current time, the balance of a specific account, or even the contract owner."}],"kind":"project","url":"\/tutorials\/spacekit\/getinfo","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo"},"doc://SpaceKit/tutorials/Space":{"role":"overview","type":"topic","title":"Meet Space","abstract":[{"type":"text","text":"Discover how Space simplifies blockchain development using Swift. Dive into the world of Web3 with ease and efficiency."}],"kind":"overview","url":"\/tutorials\/space","identifier":"doc:\/\/SpaceKit\/tutorials\/Space"},"doc://SpaceKit/tutorials/SpaceKit/InstallingTools#Setting-Up-the-Space-CLI":{"type":"section","abstract":[{"type":"text","text":"Before writing your first smart contract with Space, ensure you have the necessary tools installed."}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Setting-Up-the-Space-CLI","role":"pseudoSymbol","url":"\/tutorials\/spacekit\/installingtools#Setting-Up-the-Space-CLI","title":"Setting Up the Space CLI","kind":"section"},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Working-with-the-Vector-Type":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Working-with-the-Vector-Type","title":"Working with the Vector Type","type":"section","abstract":[{"type":"text","text":"Space provides types that allow you to leverage the full potential of the SpaceVM."}],"role":"pseudoSymbol","url":"\/tutorials\/spacekit\/familiarizewithtypes#Working-with-the-Vector-Type","kind":"section"},"doc://SpaceKit/tutorials/SpaceKit/CodingYourFirstContract#Initializing-the-Project":{"abstract":[{"type":"text","text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user."}],"kind":"section","role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Initializing-the-Project","type":"section","title":"Initializing the Project","url":"\/tutorials\/spacekit\/codingyourfirstcontract#Initializing-the-Project"},"doc://SpaceKit/tutorials/Space/Deep-Dive-into-Space-Concepts/Calling-Contracts-Across-Shards":{"kind":"article","role":"article","type":"topic","title":"Calling Contracts Across Shards","identifier":"doc:\/\/SpaceKit\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Calling-Contracts-Across-Shards","abstract":[],"url":"\/tutorials\/space\/deep-dive-into-space-concepts\/calling-contracts-across-shards"},"InstallingToolsSection3Step2.png":{"alt":"Output of `space init MyFirstSpaceProject`.","type":"image","identifier":"InstallingToolsSection3Step2.png","variants":[{"url":"\/images\/SpaceKit\/InstallingToolsSection3Step2.png","traits":["1x","light"]}]},"InstallingToolsSection1Step2.png":{"alt":"Output of `swift --version`.","variants":[{"url":"\/images\/SpaceKit\/InstallingToolsSection1Step2.png","traits":["1x","light"]}],"identifier":"InstallingToolsSection1Step2.png","type":"image"},"doc://SpaceKit/tutorials/Space/Deep-Dive-into-Space-Concepts/Exploring-Space's-Types":{"kind":"article","type":"topic","url":"\/tutorials\/space\/deep-dive-into-space-concepts\/exploring-space's-types","identifier":"doc:\/\/SpaceKit\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Exploring-Space's-Types","role":"article","title":"Exploring Space's Types","abstract":[]},"doc://SpaceKit/tutorials/SpaceKit/SyncCalls#Declare-the-Callee-Proxy":{"kind":"section","role":"pseudoSymbol","type":"section","url":"\/tutorials\/spacekit\/synccalls#Declare-the-Callee-Proxy","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls#Declare-the-Callee-Proxy","abstract":[{"text":"Smart contracts can interact not only with users but also with other smart contracts. This enables more advanced protocols by leveraging existing ones. For example, you could integrate a decentralized exchange directly into your contract to perform token swaps. Decentralized applications often involve multiple contracts, each with a dedicated role, working together to achieve complex functionality—similar to microservices in backend systems.","type":"text"}],"title":"Declare the Callee Proxy"},"doc://SpaceKit/tutorials/SpaceKit/CodingYourFirstContract#Writing-the-Contract-Code":{"role":"pseudoSymbol","url":"\/tutorials\/spacekit\/codingyourfirstcontract#Writing-the-Contract-Code","type":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Writing-the-Contract-Code","title":"Writing the Contract Code","kind":"section","abstract":[{"text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user.","type":"text"}]},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Understanding-the-Buffer-Type":{"type":"section","abstract":[{"type":"text","text":"Space provides types that allow you to leverage the full potential of the SpaceVM."}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Understanding-the-Buffer-Type","role":"pseudoSymbol","url":"\/tutorials\/spacekit\/familiarizewithtypes#Understanding-the-Buffer-Type","title":"Understanding the Buffer Type","kind":"section"},"InstallingToolsSection2Step2.png":{"alt":"Output of `space --help`.","type":"image","identifier":"InstallingToolsSection2Step2.png","variants":[{"url":"\/images\/SpaceKit\/InstallingToolsSection2Step2.png","traits":["1x","light"]}]},"doc://SpaceKit/tutorials/Space/Deep-Dive-into-Space-Concepts/Retrieving-Information-from-the-Blockchain":{"kind":"article","role":"article","type":"topic","abstract":[],"identifier":"doc:\/\/SpaceKit\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Retrieving-Information-from-the-Blockchain","url":"\/tutorials\/space\/deep-dive-into-space-concepts\/retrieving-information-from-the-blockchain","title":"Retrieving Information from the Blockchain"},"doc://SpaceKit/tutorials/SpaceKit/StoreValues":{"abstract":[{"type":"text","text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory."}],"url":"\/tutorials\/spacekit\/storevalues","title":"Persist Values Between Executions","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues","role":"project","estimatedTime":"15min","kind":"project","type":"topic"},"doc://SpaceKit/tutorials/SpaceKit/SyncCalls":{"type":"topic","url":"\/tutorials\/spacekit\/synccalls","title":"Interact with Other Contracts","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls","role":"project","estimatedTime":"15min","kind":"project","abstract":[{"type":"text","text":"Smart contracts can interact not only with users but also with other smart contracts. This enables more advanced protocols by leveraging existing ones. For example, you could integrate a decentralized exchange directly into your contract to perform token swaps. Decentralized applications often involve multiple contracts, each with a dedicated role, working together to achieve complex functionality—similar to microservices in backend systems."}]},"doc://SpaceKit/tutorials/SpaceKit/AsyncCalls":{"abstract":[{"type":"text","text":"Blockchain platforms using SpaceVM enable seamless execution within a sharded environment. Sharding divides a blockchain’s global state and validation workload into smaller, manageable units known as shards. This method enhances scalability without compromising decentralization, allowing nodes to operate without significant computational resources."}],"url":"\/tutorials\/spacekit\/asynccalls","title":"Interacting with Contracts Across Shards","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls","role":"project","estimatedTime":"15min","kind":"project","type":"topic"}}}