{"schemaVersion":{"minor":3,"major":0,"patch":0},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/tutorials\/spacekit\/flipcontracttestthegame"]}],"hierarchy":{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit","modules":[{"projects":[{"sections":[{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Installing-SpaceKits-Dependencies"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Setting-Up-the-SpaceKit-CLI","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Getting-Started\/Installing-the-Tools"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Getting-Started\/Building-Your-First-Smart-Contract","projects":[{"sections":[{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Initializing-the-Project"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Writing-the-Contract-Code"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Testing-the-Contract","kind":"task"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract"}]},{"projects":[{"sections":[{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Understanding-the-Buffer-Type","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Working-with-the-BigUint-Type"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Working-with-the-Vector-Type"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Creating-Your-Own-Types"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Exploring-SpaceKit's-Types"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Persisting-Data-Across-Executions","projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues","sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues#Working-with-Storage-for-Single-Value-Persistence","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage"}]}]},{"projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo","sections":[{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo#Accessing-Transaction-Context-Data"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo#Accessing-Blockchain-Context-Data","kind":"task"}]}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Retrieving-Information-from-the-Blockchain"},{"projects":[{"sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls#Declare-the-Callee-Proxy","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls#Perform-a-Synchronous-Call","kind":"task"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Interacting-with-Other-Contracts"},{"projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls","sections":[{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls#Declare-the-Callee-Proxy"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls#Perform-an-Asynchronous-Call","kind":"task"}]}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Calling-Contracts-Across-Shards"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Create-and-Manage-Tokens\/Creating-and-Understanding-Tokens","projects":[{"sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/UnderstandTokens#Issuing-a-Fungible-Token-from-Your-Contract","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/UnderstandTokens#Issuing-a-Non-Fungible-Token-from-Your-Contract","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/UnderstandTokens#Issuing-a-Semi-Fungible-Token-from-Your-Contract"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/UnderstandTokens#Issuing-a-Meta-ESDT-from-Your-Contract","kind":"task"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/UnderstandTokens"}]},{"projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnFungibleTokens","sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnFungibleTokens#Assign-Mint-and-Burn-Roles","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnFungibleTokens#Mint-New-Tokens","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnFungibleTokens#Burn-Tokens","kind":"task"}]}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Create-and-Manage-Tokens\/Managing-Fungible-Tokens"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Create-and-Manage-Tokens\/Managing-Non-Fungible-Tokens","projects":[{"sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnNonFungibleTokens#Assign-Create-AddQuantity-and-Burn-Roles","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnNonFungibleTokens#Create-a-New-Nonce"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnNonFungibleTokens#Add-Quantity-to-an-Existing-Nonce","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnNonFungibleTokens#Burn-Tokens","kind":"task"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnNonFungibleTokens"}]},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Create-and-Manage-Tokens\/Enhancing-Contracts-with-Token-Attributes","projects":[{"sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/TokenAttributes#Implementing-the-lockFunds-Endpoint","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/TokenAttributes#Implementing-the-unlockFunds-Endpoint","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/TokenAttributes#Implementing-the-changeTokenLockDuration-Endpoint"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/TokenAttributes"}]},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Build-a-Coin-Flip-Contract\/Build-a-Coin-Flip-Smart-Contract","projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractIntro","sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractIntro#Set-Up-the-Project","kind":"task"}]}]},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Build-a-Coin-Flip-Contract\/Define-the-Storage-for-the-Flip-Contract","projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteTheStorage","sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteTheStorage#Define-the-Flip-Structure","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteTheStorage#Implement-Contract-Storage"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteTheStorage#Define-the-Contract-Init"}]}]},{"projects":[{"sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteAdmin#Set-the-Minimum-Block-Bounty-Delay","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteAdmin#Set-Maximum-Bet-Limits"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteAdmin#Increase-Contract-Reserves","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteAdmin#Withdraw-Contract-Reserves"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteAdmin"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Build-a-Coin-Flip-Contract\/Add-Administrative-Endpoints-to-the-Flip-Contract"},{"projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteTheGame","sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteTheGame#Implement-the-flip-Endpoint","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteTheGame#Implement-the-makeFlip-Function"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteTheGame#Define-the-bounty-Endpoint"}]}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Build-a-Coin-Flip-Contract\/Implement-the-Game-Logic-for-the-Flip-Contract"},{"projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractInitTests","sections":[{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractInitTests#Set-Up-the-Test-Project"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractInitTests#Declare-Constants-for-the-Test-Environment","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractInitTests#Configure-the-Initial-Blockchain-State"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractInitTests#Create-Helper-Functions-to-Deploy-and-Configure-the-Contract","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractInitTests#Write-Tests-for-the-Setup-Helpers","kind":"task"}]}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Build-a-Coin-Flip-Contract\/Set-Up-Testing-in-the-SwiftVM"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Build-a-Coin-Flip-Contract\/Test-the-Admin-Endpoints","projects":[{"sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractTestAdmin#Verify-That-Only-the-Owner-Can-Access-Admin-Endpoints","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractTestAdmin#Verify-the-Maximum-Bet-Configuration-Endpoints","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractTestAdmin#Test-the-increaseReserve-Endpoint","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractTestAdmin#Test-the-withdrawReserve-Endpoint"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractTestAdmin"}]},{"projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractTestTheGame","sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractTestTheGame#Create-Utility-Functions-for-flip-and-bounty","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractTestTheGame#Test-Failure-Cases-for-the-flip-Endpoint"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractTestTheGame#Test-Successful-Calls-to-the-flip-Endpoint","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractTestTheGame#Test-Failure-Case-for-the-bounty-Endpoint"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractTestTheGame#Test-the-bounty-Endpoint","kind":"task"}]}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Build-a-Coin-Flip-Contract\/Test-the-Game-Logic-for-the-Flip-Contract"}],"paths":[["doc:\/\/SpaceKit\/tutorials\/SpaceKit","doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Build-a-Coin-Flip-Contract","doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Build-a-Coin-Flip-Contract\/Test-the-Game-Logic-for-the-Flip-Contract"]]},"sections":[{"content":[{"inlineContent":[{"type":"text","text":"This final chapter of the testing tutorial focuses on validating the core game logic implemented in the "},{"type":"codeVoice","code":"GameController"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"You’ll learn how to simulate time progression within the SwiftVM and control randomness in a deterministic way—both essential for reliably testing coin flip outcomes.","type":"text"}]}],"kind":"hero","estimatedTimeInMinutes":20,"chapter":"Test the Game Logic for the Flip Contract","title":"Test the Game Logic for the Flip Contract"},{"kind":"tasks","tasks":[{"anchor":"Create-Utility-Functions-for-flip-and-bounty","contentSection":[{"kind":"contentAndMedia","mediaPosition":"trailing","content":[{"inlineContent":[{"type":"text","text":"Before writing the actual tests, define helper functions to streamline interaction with the contract’s game logic:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"flipSingleEgld"},{"type":"text","text":": Invokes the "},{"type":"codeVoice","code":"flip"},{"type":"text","text":" endpoint with "},{"code":"PLAYER_ADDRESS","type":"codeVoice"},{"text":" as the caller and takes an ","type":"text"},{"code":"amount","type":"codeVoice"},{"type":"text","text":" as input."}]}]},{"content":[{"inlineContent":[{"code":"flipSingleUsdc","type":"codeVoice"},{"type":"text","text":": Similar to "},{"type":"codeVoice","code":"flipSingleEgld"},{"type":"text","text":", but flips USDC instead of EGLD."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"bounty","type":"codeVoice"},{"type":"text","text":": Calls the "},{"code":"bounty","type":"codeVoice"},{"type":"text","text":" endpoint with "},{"code":"BOUNTY_ADDRESS","type":"codeVoice"},{"type":"text","text":" as the caller."}]}]}]}]}],"stepsSection":[{"type":"step","code":"FlipContractTestAdminSection4Step8.swift","content":[{"type":"paragraph","inlineContent":[{"text":"Start with the code from the previous chapter.","type":"text"}]}],"runtimePreview":null,"media":null,"caption":[]},{"type":"step","caption":[],"code":"FlipContractTestTheGameSection1Step2.swift","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Define the ","type":"text"},{"code":"flipSingleEgld","type":"codeVoice"},{"type":"text","text":" utility function."}]}],"media":null},{"caption":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Note:","type":"text"}],"type":"strong"},{"type":"text","text":" This assumes the contract has already been deployed and initialized."}]}],"type":"step","media":null,"runtimePreview":null,"code":"FlipContractTestTheGameSection1Step3.swift","content":[{"inlineContent":[{"type":"text","text":"Instantiate the "},{"type":"codeVoice","code":"GameController"},{"type":"text","text":"."}],"type":"paragraph"}]},{"media":null,"code":"FlipContractTestTheGameSection1Step4.swift","type":"step","caption":[],"content":[{"inlineContent":[{"type":"text","text":"Call the "},{"type":"codeVoice","code":"flip"},{"text":" endpoint, setting ","type":"text"},{"code":"PLAYER_ADDRESS","type":"codeVoice"},{"type":"text","text":" as the caller."}],"type":"paragraph"}],"runtimePreview":null},{"content":[{"type":"paragraph","inlineContent":[{"text":"Create the ","type":"text"},{"code":"flipSingleUsdc","type":"codeVoice"},{"text":" utility using the same approach.","type":"text"}]}],"media":null,"type":"step","caption":[],"code":"FlipContractTestTheGameSection1Step5.swift","runtimePreview":null},{"code":"FlipContractTestTheGameSection1Step6.swift","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Define the "},{"type":"codeVoice","code":"bounty"},{"text":" helper function.","type":"text"}]}],"caption":[],"media":null,"type":"step"},{"runtimePreview":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Instantiate the "},{"type":"codeVoice","code":"GameController"},{"type":"text","text":"."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Note:"}]},{"text":" This assumes the contract has already been deployed and initialized.","type":"text"}]}],"media":null,"code":"FlipContractTestTheGameSection1Step7.swift"},{"type":"step","content":[{"inlineContent":[{"text":"Call the ","type":"text"},{"type":"codeVoice","code":"bounty"},{"text":" endpoint, using ","type":"text"},{"code":"BOUNTY_ADDRESS","type":"codeVoice"},{"type":"text","text":" as the caller."}],"type":"paragraph"}],"runtimePreview":null,"caption":[],"code":"FlipContractTestTheGameSection1Step8.swift","media":null}],"title":"Create Utility Functions for flip and bounty"},{"anchor":"Test-Failure-Cases-for-the-flip-Endpoint","title":"Test Failure Cases for the flip Endpoint","stepsSection":[{"media":null,"caption":[],"code":"FlipContractTestTheGameSection1Step8.swift","runtimePreview":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Start with the code from the previous section.","type":"text"}]}]},{"type":"step","content":[{"inlineContent":[{"type":"text","text":"Define a test that ensures the "},{"type":"codeVoice","code":"flip"},{"type":"text","text":" endpoint fails when the bet exceeds the configured maximum absolute value."}],"type":"paragraph"}],"media":null,"runtimePreview":null,"code":"FlipContractTestTheGameSection2Step2.swift","caption":[]},{"code":"FlipContractTestTheGameSection2Step3.swift","caption":[],"media":null,"runtimePreview":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Initialize the contract and instantiate the "},{"type":"codeVoice","code":"AdminController"},{"type":"text","text":"."}]}]},{"media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Set the ","type":"text"},{"type":"codeVoice","code":"maximumBet"},{"text":" storage value to ","type":"text"},{"type":"codeVoice","code":"1_000"},{"text":".","type":"text"}]}],"code":"FlipContractTestTheGameSection2Step4.swift","type":"step","runtimePreview":null,"caption":[]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Set the "},{"code":"maximumBetPercent","type":"codeVoice"},{"text":" to ","type":"text"},{"type":"codeVoice","code":"100_000"},{"text":".","type":"text"}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This value is intentionally higher than the 100% cap ("},{"type":"codeVoice","code":"10_000"},{"text":") to ensure the percentage-based limit won’t apply.","type":"text"}]}],"type":"step","media":null,"code":"FlipContractTestTheGameSection2Step5.swift","runtimePreview":null},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Instantiate the "},{"code":"GameController","type":"codeVoice"},{"type":"text","text":"."}]}],"type":"step","media":null,"runtimePreview":null,"caption":[],"code":"FlipContractTestTheGameSection2Step6.swift"},{"media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a "},{"code":"do","type":"codeVoice"},{"type":"text","text":"…"},{"type":"codeVoice","code":"catch"},{"text":" block to catch the expected failure from calling the ","type":"text"},{"code":"flip","type":"codeVoice"},{"type":"text","text":" endpoint."}]}],"code":"FlipContractTestTheGameSection2Step7.swift","runtimePreview":null,"caption":[],"type":"step"},{"code":"FlipContractTestTheGameSection2Step8.swift","media":null,"runtimePreview":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Within the ","type":"text"},{"code":"do","type":"codeVoice"},{"type":"text","text":" block, call the "},{"code":"flip","type":"codeVoice"},{"type":"text","text":" endpoint with a value greater than the allowed maximum."}]}],"caption":[]},{"code":"FlipContractTestTheGameSection2Step9.swift","runtimePreview":null,"type":"step","caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Call "},{"code":"XCTFail()","type":"codeVoice"},{"type":"text","text":" immediately after the "},{"code":"flip","type":"codeVoice"},{"type":"text","text":" call to ensure it fails as expected."}]}],"media":null},{"content":[{"inlineContent":[{"text":"In the ","type":"text"},{"type":"codeVoice","code":"catch"},{"text":" block, verify that the thrown error matches the expected failure condition.","type":"text"}],"type":"paragraph"}],"code":"FlipContractTestTheGameSection2Step10.swift","media":null,"type":"step","runtimePreview":null,"caption":[]}],"contentSection":[{"content":[{"type":"paragraph","inlineContent":[{"text":"In this section, you’ll write tests that confirm the ","type":"text"},{"type":"codeVoice","code":"flip"},{"text":" endpoint behaves correctly when it should fail.","type":"text"}]},{"inlineContent":[{"text":"Specifically, you’ll test the following scenarios:","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"The bet amount exceeds the configured maximum absolute value."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"The bet amount exceeds the allowed percentage of the contract’s token reserve."}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Note:"}]},{"text":" To keep this tutorial concise, we’ll skip additional edge cases—such as sending unsupported tokens—but in production environments, it’s essential to cover every failure path with thorough testing.","type":"text"}]}],"kind":"contentAndMedia","mediaPosition":"trailing"}]},{"stepsSection":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Start with the code from the previous section.","type":"text"}]}],"type":"step","caption":[],"media":null,"code":"FlipContractTestTheGameSection2Step11.swift","runtimePreview":null},{"code":"FlipContractTestTheGameSection3Step2.swift","runtimePreview":null,"type":"step","caption":[],"media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Write a test that verifies the "},{"type":"codeVoice","code":"flip"},{"type":"text","text":" endpoint works correctly when using EGLD."}]}]},{"caption":[],"type":"step","code":"FlipContractTestTheGameSection3Step3.swift","media":null,"content":[{"inlineContent":[{"text":"Write a test that verifies the ","type":"text"},{"code":"flip","type":"codeVoice"},{"text":" endpoint works correctly when using USDC.","type":"text"}],"type":"paragraph"}],"runtimePreview":null},{"type":"step","code":"FlipContractTestTheGameSection3Step4.swift","caption":[],"content":[{"inlineContent":[{"text":"Simulate a flip with ","type":"text"},{"code":"PLAYER_ADDRESS","type":"codeVoice"},{"type":"text","text":" betting "},{"code":"100_000","type":"codeVoice"},{"text":" EGLD using the ","type":"text"},{"code":"flipSingleEgld","type":"codeVoice"},{"type":"text","text":" helper."}],"type":"paragraph"}],"media":null,"runtimePreview":null},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Instantiate a "},{"type":"codeVoice","code":"StorageController"},{"type":"text","text":"."}]}],"media":null,"caption":[],"code":"FlipContractTestTheGameSection3Step5.swift","type":"step","runtimePreview":null},{"media":null,"type":"step","runtimePreview":null,"caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Retrieve the stored value of the EGLD token reserve."}]}],"code":"FlipContractTestTheGameSection3Step6.swift"},{"caption":[{"inlineContent":[{"type":"text","text":"From the "},{"code":"100_000","type":"codeVoice"},{"text":" EGLD bet, ","type":"text"},{"type":"codeVoice","code":"5_000"},{"type":"text","text":" go to the owner (5% fee). "},{"type":"codeVoice","code":"1_000"},{"text":" are reserved as a bounty reward (1% fee). ","type":"text"},{"type":"codeVoice","code":"94_000"},{"type":"text","text":" are the effective bet amount, deducted from the reserve."}],"type":"paragraph"}],"code":"FlipContractTestTheGameSection3Step7.swift","content":[{"type":"paragraph","inlineContent":[{"text":"Confirm that the EGLD reserve has decreased by the expected amount.","type":"text"}]}],"media":null,"runtimePreview":null,"type":"step"},{"code":"FlipContractTestTheGameSection3Step8.swift","content":[{"inlineContent":[{"type":"text","text":"Create a similar test to confirm the "},{"type":"codeVoice","code":"flip"},{"text":" endpoint works correctly when flipping with USDC.","type":"text"}],"type":"paragraph"}],"type":"step","runtimePreview":null,"media":null,"caption":[]}],"anchor":"Test-Successful-Calls-to-the-flip-Endpoint","contentSection":[{"kind":"contentAndMedia","mediaPosition":"trailing","content":[{"inlineContent":[{"text":"In this section, you’ll write tests to confirm that the ","type":"text"},{"type":"codeVoice","code":"flip"},{"type":"text","text":" endpoint behaves correctly when provided with valid input."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You’ll test the behavior when flipping with both EGLD and USDC tokens."}]}]}],"title":"Test Successful Calls to the flip Endpoint"},{"anchor":"Test-Failure-Case-for-the-bounty-Endpoint","stepsSection":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Start with the code from the previous section."}]}],"type":"step","code":"FlipContractTestTheGameSection3Step8.swift","runtimePreview":null,"caption":[],"media":null},{"media":null,"code":"FlipContractTestTheGameSection4Step2.swift","runtimePreview":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Define a test that verifies the "},{"type":"codeVoice","code":"bounty"},{"type":"text","text":" endpoint fails when not enough blocks have passed since the flip."}]}],"caption":[]},{"type":"step","content":[{"inlineContent":[{"type":"text","text":"Initialize the contract and perform a "},{"code":"flip","type":"codeVoice"},{"type":"text","text":" with a value of "},{"type":"codeVoice","code":"100_000"},{"type":"text","text":"."}],"type":"paragraph"}],"media":null,"code":"FlipContractTestTheGameSection4Step3.swift","runtimePreview":null,"caption":[]},{"media":null,"code":"FlipContractTestTheGameSection4Step4.swift","caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Instantiate the "},{"code":"GameController","type":"codeVoice"},{"text":".","type":"text"}]}],"runtimePreview":null,"type":"step"},{"content":[{"inlineContent":[{"type":"text","text":"Create a "},{"type":"codeVoice","code":"do"},{"type":"text","text":"…"},{"type":"codeVoice","code":"catch"},{"text":" block to capture the error thrown by the ","type":"text"},{"type":"codeVoice","code":"bounty"},{"type":"text","text":" call."}],"type":"paragraph"}],"caption":[],"media":null,"type":"step","runtimePreview":null,"code":"FlipContractTestTheGameSection4Step5.swift"},{"media":null,"type":"step","code":"FlipContractTestTheGameSection4Step6.swift","caption":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Note:"}]},{"type":"text","text":" You’ll learn how to simulate block advancement in the next section."}],"type":"paragraph"}],"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Call the "},{"type":"codeVoice","code":"bounty"},{"text":" endpoint. This call is expected to fail because no new blocks have passed since the flip.","type":"text"}]}]},{"code":"FlipContractTestTheGameSection4Step7.swift","content":[{"inlineContent":[{"text":"Add a call to ","type":"text"},{"type":"codeVoice","code":"XCTFail()"},{"text":" after the endpoint call to ensure the test fails if no error is thrown.","type":"text"}],"type":"paragraph"}],"media":null,"runtimePreview":null,"type":"step","caption":[]},{"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"In the ","type":"text"},{"code":"catch","type":"codeVoice"},{"text":" block, verify that the thrown error matches the expected outcome.","type":"text"}]}],"caption":[],"type":"step","media":null,"code":"FlipContractTestTheGameSection4Step8.swift"}],"title":"Test Failure Case for the bounty Endpoint","contentSection":[{"content":[{"inlineContent":[{"type":"text","text":"With the "},{"type":"codeVoice","code":"flip"},{"text":" endpoint verified, it’s time to test the ","type":"text"},{"code":"bounty","type":"codeVoice"},{"text":" endpoint—starting with its failure cases.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"In this section, you’ll write a test that ensures the "},{"code":"bounty","type":"codeVoice"},{"text":" endpoint fails if it’s called before the required number of blocks has passed.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Note:","type":"text"}]},{"type":"text","text":" As with earlier sections, we’ll keep this tutorial focused by skipping redundant or edge case tests. Be sure to include comprehensive coverage when writing production-grade tests."}]}],"mediaPosition":"trailing","kind":"contentAndMedia"}]},{"contentSection":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"After confirming that the "},{"type":"codeVoice","code":"bounty"},{"type":"text","text":" endpoint fails when called too early, it’s now time to verify that it behaves correctly in successful cases."}]},{"inlineContent":[{"type":"text","text":"In this section, you’ll test both winning and losing outcomes for flips using EGLD and USDC. To do so, you’ll simulate block advancement and deterministic randomness using the SwiftVM."}],"type":"paragraph"},{"inlineContent":[{"text":"The SwiftVM provides a method called ","type":"text"},{"code":"self.setBlockInfos","type":"codeVoice"},{"type":"text","text":" to manually set block-related metadata, including:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"nonce"},{"text":": The block number, which determines the delay between a flip and when it becomes bountiable.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"randomSeed"},{"type":"text","text":": A 48-byte seed that influences the randomness used in flip outcomes."}],"type":"paragraph"}]}]},{"inlineContent":[{"text":"By adjusting the block’s ","type":"text"},{"type":"codeVoice","code":"nonce"},{"type":"text","text":", you can simulate the passage of time. By choosing specific "},{"type":"codeVoice","code":"randomSeed"},{"type":"text","text":" values, you can control whether the flip results in a win or a loss."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You’ll also learn how to construct a valid "},{"code":"randomSeed","type":"codeVoice"},{"type":"text","text":" using an "},{"type":"codeVoice","code":"Array<UInt8>"},{"text":" of length 48.","type":"text"}]}],"kind":"contentAndMedia","mediaPosition":"trailing"}],"title":"Test the bounty Endpoint","anchor":"Test-the-bounty-Endpoint","stepsSection":[{"caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Start with the code from the previous section."}]}],"type":"step","media":null,"code":"FlipContractTestTheGameSection4Step8.swift","runtimePreview":null},{"type":"step","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Create a test that verifies a successful ","type":"text"},{"type":"codeVoice","code":"bounty"},{"type":"text","text":" call for an EGLD flip that results in a win."}]}],"caption":[],"media":null,"code":"FlipContractTestTheGameSection5Step2.swift"},{"type":"step","caption":[],"runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"Deploy and initialize the contract, and submit a flip with an amount of "},{"type":"codeVoice","code":"100_000"},{"type":"text","text":"."}],"type":"paragraph"}],"media":null,"code":"FlipContractTestTheGameSection5Step3.swift"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Define a block random seed that will produce a win outcome."}]}],"type":"step","code":"FlipContractTestTheGameSection5Step4.swift","runtimePreview":null,"media":null,"caption":[{"type":"paragraph","inlineContent":[{"text":"Use a fixed ","type":"text"},{"code":"Array<UInt8>","type":"codeVoice"},{"text":" with 48 elements. Finding a seed that results in a win requires trial and error.","type":"text"}]}]},{"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This simulates the block conditions under which the flip can be bountied."}]}],"media":null,"type":"step","code":"FlipContractTestTheGameSection5Step5.swift","runtimePreview":null,"content":[{"inlineContent":[{"text":"Advance the blockchain to the next block by setting a higher ","type":"text"},{"code":"nonce","type":"codeVoice"},{"type":"text","text":" (e.g., "},{"code":"1","type":"codeVoice"},{"text":") and apply the selected ","type":"text"},{"type":"codeVoice","code":"randomSeed"},{"text":".","type":"text"}],"type":"paragraph"}]},{"runtimePreview":null,"media":null,"caption":[],"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Call the ","type":"text"},{"type":"codeVoice","code":"bounty"},{"text":" endpoint using the utility method you defined earlier.","type":"text"}]}],"code":"FlipContractTestTheGameSection5Step6.swift"},{"type":"step","runtimePreview":null,"caption":[],"content":[{"type":"paragraph","inlineContent":[{"text":"Instantiate a ","type":"text"},{"type":"codeVoice","code":"StorageController"},{"type":"text","text":"."}]}],"media":null,"code":"FlipContractTestTheGameSection5Step7.swift"},{"type":"step","runtimePreview":null,"caption":[],"media":null,"content":[{"inlineContent":[{"type":"text","text":"Retrieve the balances of all involved accounts and the token reserve from storage."}],"type":"paragraph"}],"code":"FlipContractTestTheGameSection5Step8.swift"},{"code":"FlipContractTestTheGameSection5Step9.swift","caption":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Note:","type":"text"}],"type":"strong"},{"text":" When no flips are pending, the stored token reserve should match the contract’s actual token balance.","type":"text"}]}],"media":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Verify that all values reflect the expected result."}]}],"runtimePreview":null},{"caption":[],"code":"FlipContractTestTheGameSection5Step10.swift","runtimePreview":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Write a similar test for a winning USDC flip."}]}],"media":null},{"caption":[],"code":"FlipContractTestTheGameSection5Step11.swift","type":"step","runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"Write a test for a losing EGLD flip by selecting a different "},{"code":"randomSeed","type":"codeVoice"},{"text":" and adjusting the expected values accordingly.","type":"text"}],"type":"paragraph"}],"media":null},{"type":"step","media":null,"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Write a similar test to cover the losing case for a USDC flip.","type":"text"}]}],"caption":[],"code":"FlipContractTestTheGameSection5Step12.swift"}]}]}],"kind":"project","metadata":{"category":"SpaceKit","categoryPathComponent":"SpaceKit","title":"Test the Game Logic for the Flip Contract","role":"project"},"identifier":{"url":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractTestTheGame","interfaceLanguage":"swift"},"references":{"doc://SpaceKit/tutorials/SpaceKit/InstallingTools":{"title":"Install the Necessary Tools","estimatedTime":"10min","url":"\/tutorials\/spacekit\/installingtools","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools","abstract":[{"text":"Before writing your first smart contract with SpaceKit, ensure you have the necessary tools installed.","type":"text"}],"role":"project","kind":"project","type":"topic"},"doc://SpaceKit/tutorials/SpaceKit/FlipContractTestAdmin":{"title":"Test the Admin Endpoints","type":"topic","role":"project","abstract":[{"type":"text","text":"Admin endpoints are critical to the contract’s integrity. They not only control configuration parameters, but also grant access to withdraw the contract’s token reserves."}],"kind":"project","estimatedTime":"20min","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractTestAdmin","url":"\/tutorials\/spacekit\/flipcontracttestadmin"},"FlipContractTestTheGameSection1Step5.swift":{"syntax":"swift","fileType":"swift","identifier":"FlipContractTestTheGameSection1Step5.swift","content":["import SpaceKitTesting","import Flip","","private let PLAYER_ADDRESS = \"player\"","private let BOUNTY_ADDRESS = \"bounty\"","private let OWNER_ADDRESS = \"owner\"","private let CONTRACT_ADDRESS = \"contract\"","private let USDC_TOKEN_IDENTIFIER_STRING = \"USDC-abcdef\"","private var USDC_TOKEN_IDENTIFIER: TokenIdentifier {","    \"\\(USDC_TOKEN_IDENTIFIER_STRING)\"","}","","final class FlipTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: PLAYER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: BOUNTY_ADDRESS,","                balance: 0","            ),","            WorldAccount(","                address: OWNER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: CONTRACT_ADDRESS,","                balance: 0,","                controllers: [","                    AdminController.self,","                    GameController.self,","                    StorageController.self","                ]","            )","        ]","    }","    ","    func testInitEgld() throws {","        try self.initContract()","        try self.setupEgld()","    }","    ","    func testInitUsdc() throws {","        try self.initContract()","        try self.setupUsdc()","    }","    ","    func testSetMaximumBet() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBet = try storageController.getMaximumBet(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBet, 100)","    }","    ","    func testSetMaximumBetPercent() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBetPercent = try storageController.getMaximumBetPercent(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBetPercent, 100)","    }","    ","    func testIncreaseEgldReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 1_000","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        ","        XCTAssertEqual(tokenReserve, 1_000)","        XCTAssertEqual(contractBalance, 1_000)","    }","    ","    func testIncreaseUsdcReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 1_000","                    )","                ]","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        ","        XCTAssertEqual(tokenReserve, 1_000)","        XCTAssertEqual(contractBalance, 1_000)","    }","    ","    func testWithdrawEgldReserve() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.withdrawReserve(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 10_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        let ownerBalance = self.getAccount(address: OWNER_ADDRESS)!.balance","        ","        XCTAssertEqual(tokenReserve, 90_000_000)","        XCTAssertEqual(contractBalance, 90_000_000)","        XCTAssertEqual(ownerBalance, 10_000_000)","    }","    ","    func testWithdrawUsdcReserve() throws {","        try self.initContract()","        try self.setupUsdc()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.withdrawReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 10_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        let ownerBalance = self.getAccount(address: OWNER_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        ","        XCTAssertEqual(tokenReserve, 90_000_000)","        XCTAssertEqual(contractBalance, 90_000_000)","        XCTAssertEqual(ownerBalance, 10_000_000)","    }","","    ","    func testSetMaximumBetNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBet(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testSetMaximumBetPercentNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBetPercent(","                tokenIdentifier: .egld,","                nonce: 0,","                percent: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testIncreaseReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.increaseReserve()","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testWithdrawReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.withdrawReserve(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 100","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    private func initContract() throws {","        try self.deployContract(","            at: CONTRACT_ADDRESS,","            arguments: [","               500,","               100,","               1","            ],","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","    }","    ","    private func setupEgld() throws {","        let adminController = self.instantiateController(","            AdminController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 100_000_000","            )","        )","    }","    ","    private func setupUsdc() throws {","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 100_000_000","                    )","                ]","            )","        )","    }","    ","    private func flipSingleEgld(","        amount: BigUint","    ) throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.flip(","            transactionInput: ContractCallTransactionInput(","                callerAddress: PLAYER_ADDRESS,","                egldValue: amount","            )","        )","    }","    ","    private func flipSingleUsdc(amount: BigUint) throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.flip(","            transactionInput: ContractCallTransactionInput(","                callerAddress: PLAYER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: amount","                    )","                ]","            )","        )","    }","}"],"fileName":"FlipTest.swift","type":"file","highlights":[{"line":389},{"line":390},{"line":391},{"line":392},{"line":393},{"line":394},{"line":395},{"line":396},{"line":397},{"line":398},{"line":399},{"line":400},{"line":401},{"line":402},{"line":403},{"line":404},{"line":405},{"line":406},{"line":407},{"line":408}]},"doc://SpaceKit/tutorials/SpaceKit/Create-and-Manage-Tokens/Managing-Non-Fungible-Tokens":{"url":"\/tutorials\/spacekit\/create-and-manage-tokens\/managing-non-fungible-tokens","kind":"article","type":"topic","role":"article","title":"Managing Non-Fungible Tokens","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Create-and-Manage-Tokens\/Managing-Non-Fungible-Tokens","abstract":[]},"doc://SpaceKit/tutorials/SpaceKit/OperationsOnFungibleTokens":{"type":"topic","estimatedTime":"15min","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnFungibleTokens","role":"project","abstract":[{"type":"text","text":"Fungible tokens function similarly to traditional currencies, making them the simplest type of token to work with."}],"url":"\/tutorials\/spacekit\/operationsonfungibletokens","kind":"project","title":"Managing Fungible Tokens"},"doc://SpaceKit/tutorials/SpaceKit/StoreValues#Working-with-Storage-for-Single-Value-Persistence":{"title":"Working with @Storage for Single Value Persistence","role":"pseudoSymbol","abstract":[{"type":"text","text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory."}],"kind":"section","url":"\/tutorials\/spacekit\/storevalues#Working-with-Storage-for-Single-Value-Persistence","type":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues#Working-with-Storage-for-Single-Value-Persistence"},"doc://SpaceKit/tutorials/SpaceKit/FlipContractWriteTheGame#Implement-the-makeFlip-Function":{"url":"\/tutorials\/spacekit\/flipcontractwritethegame#Implement-the-makeFlip-Function","type":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteTheGame#Implement-the-makeFlip-Function","kind":"section","abstract":[{"type":"text","text":"With the storage and administrative endpoints complete, it’s time to build the core gameplay mechanics."}],"role":"pseudoSymbol","title":"Implement the makeFlip Function"},"doc://SpaceKit/tutorials/SpaceKit/TokenAttributes#Implementing-the-unlockFunds-Endpoint":{"type":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/TokenAttributes#Implementing-the-unlockFunds-Endpoint","url":"\/tutorials\/spacekit\/tokenattributes#Implementing-the-unlockFunds-Endpoint","title":"Implementing the unlockFunds Endpoint","kind":"section","abstract":[{"text":"The ESDT standard enables embedding custom data within non-fungible tokens, allowing developers to extend the functionality of their smart contracts. This additional data, referred to as “attributes,” is tied to the token and transfers along with it between wallets.","type":"text"}],"role":"pseudoSymbol"},"FlipContractTestTheGameSection4Step2.swift":{"fileName":"FlipTest.swift","type":"file","content":["import SpaceKitTesting","import Flip","","private let PLAYER_ADDRESS = \"player\"","private let BOUNTY_ADDRESS = \"bounty\"","private let OWNER_ADDRESS = \"owner\"","private let CONTRACT_ADDRESS = \"contract\"","private let USDC_TOKEN_IDENTIFIER_STRING = \"USDC-abcdef\"","private var USDC_TOKEN_IDENTIFIER: TokenIdentifier {","    \"\\(USDC_TOKEN_IDENTIFIER_STRING)\"","}","","final class FlipTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: PLAYER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: BOUNTY_ADDRESS,","                balance: 0","            ),","            WorldAccount(","                address: OWNER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: CONTRACT_ADDRESS,","                balance: 0,","                controllers: [","                    AdminController.self,","                    GameController.self,","                    StorageController.self","                ]","            )","        ]","    }","    ","    func testInitEgld() throws {","        try self.initContract()","        try self.setupEgld()","    }","    ","    func testInitUsdc() throws {","        try self.initContract()","        try self.setupUsdc()","    }","    ","    func testFlipSingleEgld() throws {","        try self.initContract()","        try self.setupEgld()","        try self.flipSingleEgld(amount: 100_000)","        ","        let storageController = self.instantiateController(","            StorageController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        let egldTokenReserve = try storageController","            .getTokenReserve(","                tokenIdentifier: .egld,","                tokenNonce: 0","            )","        ","        XCTAssertEqual(egldTokenReserve, 99_906_000)","    }","    ","    func testFlipSingleUsdc() throws {","        try self.initContract()","        try self.setupUsdc()","        try self.flipSingleUsdc(amount: 100_000)","        ","        let storageController = self.instantiateController(","            StorageController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        let usdcTokenReserve = try storageController","            .getTokenReserve(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                tokenNonce: 0","            )","        ","        XCTAssertEqual(usdcTokenReserve, 99_906_000)","    }","    ","    func testBountyTooEarly() throws {","    }","    ","    func testFlipTooHighBetAbsoluteValue() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 100_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let gameController = self.instantiateController(GameController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try gameController.flip(","                transactionInput: ContractCallTransactionInput(","                    callerAddress: PLAYER_ADDRESS,","                    egldValue: 1_500","                )","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Bet is too high. Maximum allowed bet: 1000\"))","        }","    }","    ","    func testFlipTooHighBetPercent() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 10,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let gameController = self.instantiateController(GameController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try gameController.flip(","                transactionInput: ContractCallTransactionInput(","                    callerAddress: PLAYER_ADDRESS,","                    egldValue: 150_000","                )","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Bet is too high. Maximum allowed bet: 100000\"))","        }","    }","    ","    func testSetMaximumBet() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBet = try storageController.getMaximumBet(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBet, 100)","    }","    ","    func testSetMaximumBetPercent() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBetPercent = try storageController.getMaximumBetPercent(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBetPercent, 100)","    }","    ","    func testIncreaseEgldReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 1_000","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        ","        XCTAssertEqual(tokenReserve, 1_000)","        XCTAssertEqual(contractBalance, 1_000)","    }","    ","    func testIncreaseUsdcReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 1_000","                    )","                ]","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        ","        XCTAssertEqual(tokenReserve, 1_000)","        XCTAssertEqual(contractBalance, 1_000)","    }","    ","    func testWithdrawEgldReserve() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.withdrawReserve(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 10_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        let ownerBalance = self.getAccount(address: OWNER_ADDRESS)!.balance","        ","        XCTAssertEqual(tokenReserve, 90_000_000)","        XCTAssertEqual(contractBalance, 90_000_000)","        XCTAssertEqual(ownerBalance, 10_000_000)","    }","    ","    func testWithdrawUsdcReserve() throws {","        try self.initContract()","        try self.setupUsdc()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.withdrawReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 10_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        let ownerBalance = self.getAccount(address: OWNER_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        ","        XCTAssertEqual(tokenReserve, 90_000_000)","        XCTAssertEqual(contractBalance, 90_000_000)","        XCTAssertEqual(ownerBalance, 10_000_000)","    }","","    ","    func testSetMaximumBetNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBet(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testSetMaximumBetPercentNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBetPercent(","                tokenIdentifier: .egld,","                nonce: 0,","                percent: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testIncreaseReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.increaseReserve()","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testWithdrawReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.withdrawReserve(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 100","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    private func initContract() throws {","        try self.deployContract(","            at: CONTRACT_ADDRESS,","            arguments: [","               500,","               100,","               1","            ],","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","    }","    ","    private func setupEgld() throws {","        let adminController = self.instantiateController(","            AdminController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 100_000_000","            )","        )","    }","    ","    private func setupUsdc() throws {","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 100_000_000","                    )","                ]","            )","        )","    }","    ","    private func flipSingleEgld(","        amount: BigUint","    ) throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.flip(","            transactionInput: ContractCallTransactionInput(","                callerAddress: PLAYER_ADDRESS,","                egldValue: amount","            )","        )","    }","    ","    private func flipSingleUsdc(amount: BigUint) throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.flip(","            transactionInput: ContractCallTransactionInput(","                callerAddress: PLAYER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: amount","                    )","                ]","            )","        )","    }","    ","    private func bounty() throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.bounty(","            transactionInput: ContractCallTransactionInput(","                callerAddress: BOUNTY_ADDRESS","            )","        )","    }","}"],"highlights":[{"line":104},{"line":105},{"line":106}],"syntax":"swift","fileType":"swift","identifier":"FlipContractTestTheGameSection4Step2.swift"},"doc://SpaceKit/tutorials/SpaceKit/GetInfo#Accessing-Transaction-Context-Data":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo#Accessing-Transaction-Context-Data","role":"pseudoSymbol","url":"\/tutorials\/spacekit\/getinfo#Accessing-Transaction-Context-Data","abstract":[{"type":"text","text":"Many smart contracts rely on contextual data to execute their operations effectively. This data can include input payments, the caller’s address, the current time, the balance of a specific account, or even the contract owner."}],"title":"Accessing Transaction Context Data","type":"section","kind":"section"},"doc://SpaceKit/tutorials/SpaceKit/GetInfo#Accessing-Blockchain-Context-Data":{"abstract":[{"type":"text","text":"Many smart contracts rely on contextual data to execute their operations effectively. This data can include input payments, the caller’s address, the current time, the balance of a specific account, or even the contract owner."}],"url":"\/tutorials\/spacekit\/getinfo#Accessing-Blockchain-Context-Data","role":"pseudoSymbol","title":"Accessing Blockchain Context Data","kind":"section","type":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo#Accessing-Blockchain-Context-Data"},"doc://SpaceKit/tutorials/SpaceKit/FlipContractIntro":{"type":"topic","url":"\/tutorials\/spacekit\/flipcontractintro","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractIntro","estimatedTime":"20min","role":"project","kind":"project","title":"Build a Coin Flip Smart Contract","abstract":[{"text":"In this tutorial, you’ll write and test a complete smart contract that relies on random number generation to implement a coin flip mechanic. Players wager a chosen amount of any token and face a 50% chance of doubling their bet—or losing it. A small fee is deducted from each wager and sent to the developer’s wallet.","type":"text"}]},"doc://SpaceKit/tutorials/SpaceKit/FlipContractInitTests#Configure-the-Initial-Blockchain-State":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractInitTests#Configure-the-Initial-Blockchain-State","role":"pseudoSymbol","url":"\/tutorials\/spacekit\/flipcontractinittests#Configure-the-Initial-Blockchain-State","type":"section","title":"Configure the Initial Blockchain State","abstract":[{"type":"text","text":"Smart contracts are permissionless programs that often manage valuable assets. Because of this, writing comprehensive tests for both successful and failure scenarios is essential."}],"kind":"section"},"FlipContractTestTheGameSection1Step8.swift":{"syntax":"swift","fileType":"swift","identifier":"FlipContractTestTheGameSection1Step8.swift","content":["import SpaceKitTesting","import Flip","","private let PLAYER_ADDRESS = \"player\"","private let BOUNTY_ADDRESS = \"bounty\"","private let OWNER_ADDRESS = \"owner\"","private let CONTRACT_ADDRESS = \"contract\"","private let USDC_TOKEN_IDENTIFIER_STRING = \"USDC-abcdef\"","private var USDC_TOKEN_IDENTIFIER: TokenIdentifier {","    \"\\(USDC_TOKEN_IDENTIFIER_STRING)\"","}","","final class FlipTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: PLAYER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: BOUNTY_ADDRESS,","                balance: 0","            ),","            WorldAccount(","                address: OWNER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: CONTRACT_ADDRESS,","                balance: 0,","                controllers: [","                    AdminController.self,","                    GameController.self,","                    StorageController.self","                ]","            )","        ]","    }","    ","    func testInitEgld() throws {","        try self.initContract()","        try self.setupEgld()","    }","    ","    func testInitUsdc() throws {","        try self.initContract()","        try self.setupUsdc()","    }","    ","    func testSetMaximumBet() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBet = try storageController.getMaximumBet(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBet, 100)","    }","    ","    func testSetMaximumBetPercent() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBetPercent = try storageController.getMaximumBetPercent(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBetPercent, 100)","    }","    ","    func testIncreaseEgldReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 1_000","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        ","        XCTAssertEqual(tokenReserve, 1_000)","        XCTAssertEqual(contractBalance, 1_000)","    }","    ","    func testIncreaseUsdcReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 1_000","                    )","                ]","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        ","        XCTAssertEqual(tokenReserve, 1_000)","        XCTAssertEqual(contractBalance, 1_000)","    }","    ","    func testWithdrawEgldReserve() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.withdrawReserve(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 10_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        let ownerBalance = self.getAccount(address: OWNER_ADDRESS)!.balance","        ","        XCTAssertEqual(tokenReserve, 90_000_000)","        XCTAssertEqual(contractBalance, 90_000_000)","        XCTAssertEqual(ownerBalance, 10_000_000)","    }","    ","    func testWithdrawUsdcReserve() throws {","        try self.initContract()","        try self.setupUsdc()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.withdrawReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 10_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        let ownerBalance = self.getAccount(address: OWNER_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        ","        XCTAssertEqual(tokenReserve, 90_000_000)","        XCTAssertEqual(contractBalance, 90_000_000)","        XCTAssertEqual(ownerBalance, 10_000_000)","    }","","    ","    func testSetMaximumBetNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBet(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testSetMaximumBetPercentNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBetPercent(","                tokenIdentifier: .egld,","                nonce: 0,","                percent: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testIncreaseReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.increaseReserve()","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testWithdrawReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.withdrawReserve(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 100","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    private func initContract() throws {","        try self.deployContract(","            at: CONTRACT_ADDRESS,","            arguments: [","               500,","               100,","               1","            ],","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","    }","    ","    private func setupEgld() throws {","        let adminController = self.instantiateController(","            AdminController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 100_000_000","            )","        )","    }","    ","    private func setupUsdc() throws {","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 100_000_000","                    )","                ]","            )","        )","    }","    ","    private func flipSingleEgld(","        amount: BigUint","    ) throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.flip(","            transactionInput: ContractCallTransactionInput(","                callerAddress: PLAYER_ADDRESS,","                egldValue: amount","            )","        )","    }","    ","    private func flipSingleUsdc(amount: BigUint) throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.flip(","            transactionInput: ContractCallTransactionInput(","                callerAddress: PLAYER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: amount","                    )","                ]","            )","        )","    }","    ","    private func bounty() throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.bounty(","            transactionInput: ContractCallTransactionInput(","                callerAddress: BOUNTY_ADDRESS","            )","        )","    }","}"],"fileName":"FlipTest.swift","type":"file","highlights":[]},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes":{"type":"topic","url":"\/tutorials\/spacekit\/familiarizewithtypes","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes","estimatedTime":"20min","role":"project","kind":"project","title":"Exploring SpaceKit's Types","abstract":[{"text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}]},"doc://SpaceKit/tutorials/SpaceKit/SyncCalls#Declare-the-Callee-Proxy":{"type":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls#Declare-the-Callee-Proxy","url":"\/tutorials\/spacekit\/synccalls#Declare-the-Callee-Proxy","title":"Declare the Callee Proxy","kind":"section","abstract":[{"text":"Smart contracts can interact not only with users but also with other smart contracts. This enables more advanced protocols by leveraging existing ones. For example, you could integrate a decentralized exchange directly into your contract to perform token swaps. Decentralized applications often involve multiple contracts, each with a dedicated role, working together to achieve complex functionality—similar to microservices in backend systems.","type":"text"}],"role":"pseudoSymbol"},"doc://SpaceKit/tutorials/SpaceKit/OperationsOnNonFungibleTokens#Burn-Tokens":{"title":"Burn Tokens","role":"pseudoSymbol","kind":"section","abstract":[{"text":"Non-fungible tokens (NFTs) are unique digital assets that cannot be interchanged. Each NFT is associated with a unique identifier, known as a nonce. You can think of it like an airline ticket—each ticket is assigned to a specific passenger, with individual preferences and details.","type":"text"}],"type":"section","url":"\/tutorials\/spacekit\/operationsonnonfungibletokens#Burn-Tokens","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnNonFungibleTokens#Burn-Tokens"},"doc://SpaceKit/tutorials/SpaceKit/FlipContractInitTests#Set-Up-the-Test-Project":{"title":"Set Up the Test Project","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractInitTests#Set-Up-the-Test-Project","abstract":[{"type":"text","text":"Smart contracts are permissionless programs that often manage valuable assets. Because of this, writing comprehensive tests for both successful and failure scenarios is essential."}],"url":"\/tutorials\/spacekit\/flipcontractinittests#Set-Up-the-Test-Project","type":"section","kind":"section","role":"pseudoSymbol"},"FlipContractTestTheGameSection5Step8.swift":{"fileName":"FlipTest.swift","type":"file","content":["import SpaceKitTesting","import Flip","","private let PLAYER_ADDRESS = \"player\"","private let BOUNTY_ADDRESS = \"bounty\"","private let OWNER_ADDRESS = \"owner\"","private let CONTRACT_ADDRESS = \"contract\"","private let USDC_TOKEN_IDENTIFIER_STRING = \"USDC-abcdef\"","private var USDC_TOKEN_IDENTIFIER: TokenIdentifier {","    \"\\(USDC_TOKEN_IDENTIFIER_STRING)\"","}","","final class FlipTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: PLAYER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: BOUNTY_ADDRESS,","                balance: 0","            ),","            WorldAccount(","                address: OWNER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: CONTRACT_ADDRESS,","                balance: 0,","                controllers: [","                    AdminController.self,","                    GameController.self,","                    StorageController.self","                ]","            )","        ]","    }","    ","    func testInitEgld() throws {","        try self.initContract()","        try self.setupEgld()","    }","    ","    func testInitUsdc() throws {","        try self.initContract()","        try self.setupUsdc()","    }","    ","    func testFlipSingleEgld() throws {","        try self.initContract()","        try self.setupEgld()","        try self.flipSingleEgld(amount: 100_000)","        ","        let storageController = self.instantiateController(","            StorageController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        let egldTokenReserve = try storageController","            .getTokenReserve(","                tokenIdentifier: .egld,","                tokenNonce: 0","            )","        ","        XCTAssertEqual(egldTokenReserve, 99_906_000)","    }","    ","    func testFlipSingleUsdc() throws {","        try self.initContract()","        try self.setupUsdc()","        try self.flipSingleUsdc(amount: 100_000)","        ","        let storageController = self.instantiateController(","            StorageController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        let usdcTokenReserve = try storageController","            .getTokenReserve(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                tokenNonce: 0","            )","        ","        XCTAssertEqual(usdcTokenReserve, 99_906_000)","    }","    ","    func testBountyTooEarly() throws {","        try self.initContract()","        try self.setupEgld()","        try self.flipSingleEgld(amount: 100_000)","        ","        let gameController = self.instantiateController(GameController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try gameController.bounty(","                transactionInput: ContractCallTransactionInput(","                    callerAddress: BOUNTY_ADDRESS","                )","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"No flip can be bounty.\"))","        }","    }","    ","    func testBountySingleWinEgld() throws {","        try self.initContract()","        try self.setupEgld()","        try self.flipSingleEgld(amount: 100_000)","        ","        let blockRandomSeed = Array(repeating: UInt8(0), count: 47) + [6]","        ","        self.setBlockInfos(","            nonce: 1,","            randomSeed: Data(blockRandomSeed)","        )","        ","        try self.bounty()","        ","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        let flipContractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        let ownerBalance = self.getAccount(address: OWNER_ADDRESS)!.balance","        let playerBalance = self.getAccount(address: PLAYER_ADDRESS)!.balance","        let bountyBalance = self.getAccount(address: BOUNTY_ADDRESS)!.balance","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","    }","    ","    func testFlipTooHighBetAbsoluteValue() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 100_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let gameController = self.instantiateController(GameController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try gameController.flip(","                transactionInput: ContractCallTransactionInput(","                    callerAddress: PLAYER_ADDRESS,","                    egldValue: 1_500","                )","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Bet is too high. Maximum allowed bet: 1000\"))","        }","    }","    ","    func testFlipTooHighBetPercent() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 10,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let gameController = self.instantiateController(GameController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try gameController.flip(","                transactionInput: ContractCallTransactionInput(","                    callerAddress: PLAYER_ADDRESS,","                    egldValue: 150_000","                )","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Bet is too high. Maximum allowed bet: 100000\"))","        }","    }","    ","    func testSetMaximumBet() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBet = try storageController.getMaximumBet(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBet, 100)","    }","    ","    func testSetMaximumBetPercent() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBetPercent = try storageController.getMaximumBetPercent(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBetPercent, 100)","    }","    ","    func testIncreaseEgldReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 1_000","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        ","        XCTAssertEqual(tokenReserve, 1_000)","        XCTAssertEqual(contractBalance, 1_000)","    }","    ","    func testIncreaseUsdcReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 1_000","                    )","                ]","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        ","        XCTAssertEqual(tokenReserve, 1_000)","        XCTAssertEqual(contractBalance, 1_000)","    }","    ","    func testWithdrawEgldReserve() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.withdrawReserve(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 10_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        let ownerBalance = self.getAccount(address: OWNER_ADDRESS)!.balance","        ","        XCTAssertEqual(tokenReserve, 90_000_000)","        XCTAssertEqual(contractBalance, 90_000_000)","        XCTAssertEqual(ownerBalance, 10_000_000)","    }","    ","    func testWithdrawUsdcReserve() throws {","        try self.initContract()","        try self.setupUsdc()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.withdrawReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 10_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        let ownerBalance = self.getAccount(address: OWNER_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        ","        XCTAssertEqual(tokenReserve, 90_000_000)","        XCTAssertEqual(contractBalance, 90_000_000)","        XCTAssertEqual(ownerBalance, 10_000_000)","    }","","    ","    func testSetMaximumBetNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBet(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testSetMaximumBetPercentNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBetPercent(","                tokenIdentifier: .egld,","                nonce: 0,","                percent: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testIncreaseReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.increaseReserve()","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testWithdrawReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.withdrawReserve(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 100","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    private func initContract() throws {","        try self.deployContract(","            at: CONTRACT_ADDRESS,","            arguments: [","               500,","               100,","               1","            ],","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","    }","    ","    private func setupEgld() throws {","        let adminController = self.instantiateController(","            AdminController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 100_000_000","            )","        )","    }","    ","    private func setupUsdc() throws {","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 100_000_000","                    )","                ]","            )","        )","    }","    ","    private func flipSingleEgld(","        amount: BigUint","    ) throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.flip(","            transactionInput: ContractCallTransactionInput(","                callerAddress: PLAYER_ADDRESS,","                egldValue: amount","            )","        )","    }","    ","    private func flipSingleUsdc(amount: BigUint) throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.flip(","            transactionInput: ContractCallTransactionInput(","                callerAddress: PLAYER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: amount","                    )","                ]","            )","        )","    }","    ","    private func bounty() throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.bounty(","            transactionInput: ContractCallTransactionInput(","                callerAddress: BOUNTY_ADDRESS","            )","        )","    }","}"],"highlights":[{"line":139},{"line":140},{"line":141},{"line":142},{"line":143},{"line":144},{"line":145},{"line":146},{"line":147},{"line":148}],"syntax":"swift","fileType":"swift","identifier":"FlipContractTestTheGameSection5Step8.swift"},"FlipContractTestTheGameSection3Step7.swift":{"syntax":"swift","fileType":"swift","identifier":"FlipContractTestTheGameSection3Step7.swift","content":["import SpaceKitTesting","import Flip","","private let PLAYER_ADDRESS = \"player\"","private let BOUNTY_ADDRESS = \"bounty\"","private let OWNER_ADDRESS = \"owner\"","private let CONTRACT_ADDRESS = \"contract\"","private let USDC_TOKEN_IDENTIFIER_STRING = \"USDC-abcdef\"","private var USDC_TOKEN_IDENTIFIER: TokenIdentifier {","    \"\\(USDC_TOKEN_IDENTIFIER_STRING)\"","}","","final class FlipTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: PLAYER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: BOUNTY_ADDRESS,","                balance: 0","            ),","            WorldAccount(","                address: OWNER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: CONTRACT_ADDRESS,","                balance: 0,","                controllers: [","                    AdminController.self,","                    GameController.self,","                    StorageController.self","                ]","            )","        ]","    }","    ","    func testInitEgld() throws {","        try self.initContract()","        try self.setupEgld()","    }","    ","    func testInitUsdc() throws {","        try self.initContract()","        try self.setupUsdc()","    }","    ","    func testFlipSingleEgld() throws {","        try self.initContract()","        try self.setupEgld()","        try self.flipSingleEgld(amount: 100_000)","        ","        let storageController = self.instantiateController(","            StorageController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        let egldTokenReserve = try storageController","            .getTokenReserve(","                tokenIdentifier: .egld,","                tokenNonce: 0","            )","        ","        XCTAssertEqual(egldTokenReserve, 99_906_000)","    }","    ","    func testFlipTooHighBetAbsoluteValue() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 100_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let gameController = self.instantiateController(GameController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try gameController.flip(","                transactionInput: ContractCallTransactionInput(","                    callerAddress: PLAYER_ADDRESS,","                    egldValue: 1_500","                )","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Bet is too high. Maximum allowed bet: 1000\"))","        }","    }","    ","    func testFlipTooHighBetPercent() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 10,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let gameController = self.instantiateController(GameController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try gameController.flip(","                transactionInput: ContractCallTransactionInput(","                    callerAddress: PLAYER_ADDRESS,","                    egldValue: 150_000","                )","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Bet is too high. Maximum allowed bet: 100000\"))","        }","    }","    ","    func testSetMaximumBet() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBet = try storageController.getMaximumBet(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBet, 100)","    }","    ","    func testSetMaximumBetPercent() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBetPercent = try storageController.getMaximumBetPercent(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBetPercent, 100)","    }","    ","    func testIncreaseEgldReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 1_000","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        ","        XCTAssertEqual(tokenReserve, 1_000)","        XCTAssertEqual(contractBalance, 1_000)","    }","    ","    func testIncreaseUsdcReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 1_000","                    )","                ]","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        ","        XCTAssertEqual(tokenReserve, 1_000)","        XCTAssertEqual(contractBalance, 1_000)","    }","    ","    func testWithdrawEgldReserve() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.withdrawReserve(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 10_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        let ownerBalance = self.getAccount(address: OWNER_ADDRESS)!.balance","        ","        XCTAssertEqual(tokenReserve, 90_000_000)","        XCTAssertEqual(contractBalance, 90_000_000)","        XCTAssertEqual(ownerBalance, 10_000_000)","    }","    ","    func testWithdrawUsdcReserve() throws {","        try self.initContract()","        try self.setupUsdc()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.withdrawReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 10_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        let ownerBalance = self.getAccount(address: OWNER_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        ","        XCTAssertEqual(tokenReserve, 90_000_000)","        XCTAssertEqual(contractBalance, 90_000_000)","        XCTAssertEqual(ownerBalance, 10_000_000)","    }","","    ","    func testSetMaximumBetNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBet(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testSetMaximumBetPercentNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBetPercent(","                tokenIdentifier: .egld,","                nonce: 0,","                percent: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testIncreaseReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.increaseReserve()","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testWithdrawReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.withdrawReserve(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 100","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    private func initContract() throws {","        try self.deployContract(","            at: CONTRACT_ADDRESS,","            arguments: [","               500,","               100,","               1","            ],","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","    }","    ","    private func setupEgld() throws {","        let adminController = self.instantiateController(","            AdminController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 100_000_000","            )","        )","    }","    ","    private func setupUsdc() throws {","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 100_000_000","                    )","                ]","            )","        )","    }","    ","    private func flipSingleEgld(","        amount: BigUint","    ) throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.flip(","            transactionInput: ContractCallTransactionInput(","                callerAddress: PLAYER_ADDRESS,","                egldValue: amount","            )","        )","    }","    ","    private func flipSingleUsdc(amount: BigUint) throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.flip(","            transactionInput: ContractCallTransactionInput(","                callerAddress: PLAYER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: amount","                    )","                ]","            )","        )","    }","    ","    private func bounty() throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.bounty(","            transactionInput: ContractCallTransactionInput(","                callerAddress: BOUNTY_ADDRESS","            )","        )","    }","}"],"fileName":"FlipTest.swift","type":"file","highlights":[{"line":81},{"line":82}]},"doc://SpaceKit/tutorials/SpaceKit/Create-and-Manage-Tokens/Creating-and-Understanding-Tokens":{"url":"\/tutorials\/spacekit\/create-and-manage-tokens\/creating-and-understanding-tokens","kind":"article","type":"topic","role":"article","title":"Creating and Understanding Tokens","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Create-and-Manage-Tokens\/Creating-and-Understanding-Tokens","abstract":[]},"FlipContractTestTheGameSection2Step3.swift":{"fileName":"FlipTest.swift","type":"file","content":["import SpaceKitTesting","import Flip","","private let PLAYER_ADDRESS = \"player\"","private let BOUNTY_ADDRESS = \"bounty\"","private let OWNER_ADDRESS = \"owner\"","private let CONTRACT_ADDRESS = \"contract\"","private let USDC_TOKEN_IDENTIFIER_STRING = \"USDC-abcdef\"","private var USDC_TOKEN_IDENTIFIER: TokenIdentifier {","    \"\\(USDC_TOKEN_IDENTIFIER_STRING)\"","}","","final class FlipTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: PLAYER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: BOUNTY_ADDRESS,","                balance: 0","            ),","            WorldAccount(","                address: OWNER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: CONTRACT_ADDRESS,","                balance: 0,","                controllers: [","                    AdminController.self,","                    GameController.self,","                    StorageController.self","                ]","            )","        ]","    }","    ","    func testInitEgld() throws {","        try self.initContract()","        try self.setupEgld()","    }","    ","    func testInitUsdc() throws {","        try self.initContract()","        try self.setupUsdc()","    }","    ","    func testFlipTooHighBetAbsoluteValue() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","    }","    ","    func testSetMaximumBet() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBet = try storageController.getMaximumBet(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBet, 100)","    }","    ","    func testSetMaximumBetPercent() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBetPercent = try storageController.getMaximumBetPercent(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBetPercent, 100)","    }","    ","    func testIncreaseEgldReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 1_000","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        ","        XCTAssertEqual(tokenReserve, 1_000)","        XCTAssertEqual(contractBalance, 1_000)","    }","    ","    func testIncreaseUsdcReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 1_000","                    )","                ]","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        ","        XCTAssertEqual(tokenReserve, 1_000)","        XCTAssertEqual(contractBalance, 1_000)","    }","    ","    func testWithdrawEgldReserve() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.withdrawReserve(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 10_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        let ownerBalance = self.getAccount(address: OWNER_ADDRESS)!.balance","        ","        XCTAssertEqual(tokenReserve, 90_000_000)","        XCTAssertEqual(contractBalance, 90_000_000)","        XCTAssertEqual(ownerBalance, 10_000_000)","    }","    ","    func testWithdrawUsdcReserve() throws {","        try self.initContract()","        try self.setupUsdc()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.withdrawReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 10_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        let ownerBalance = self.getAccount(address: OWNER_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        ","        XCTAssertEqual(tokenReserve, 90_000_000)","        XCTAssertEqual(contractBalance, 90_000_000)","        XCTAssertEqual(ownerBalance, 10_000_000)","    }","","    ","    func testSetMaximumBetNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBet(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testSetMaximumBetPercentNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBetPercent(","                tokenIdentifier: .egld,","                nonce: 0,","                percent: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testIncreaseReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.increaseReserve()","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testWithdrawReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.withdrawReserve(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 100","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    private func initContract() throws {","        try self.deployContract(","            at: CONTRACT_ADDRESS,","            arguments: [","               500,","               100,","               1","            ],","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","    }","    ","    private func setupEgld() throws {","        let adminController = self.instantiateController(","            AdminController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 100_000_000","            )","        )","    }","    ","    private func setupUsdc() throws {","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 100_000_000","                    )","                ]","            )","        )","    }","    ","    private func flipSingleEgld(","        amount: BigUint","    ) throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.flip(","            transactionInput: ContractCallTransactionInput(","                callerAddress: PLAYER_ADDRESS,","                egldValue: amount","            )","        )","    }","    ","    private func flipSingleUsdc(amount: BigUint) throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.flip(","            transactionInput: ContractCallTransactionInput(","                callerAddress: PLAYER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: amount","                    )","                ]","            )","        )","    }","    ","    private func bounty() throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.bounty(","            transactionInput: ContractCallTransactionInput(","                callerAddress: BOUNTY_ADDRESS","            )","        )","    }","}"],"highlights":[{"line":67},{"line":68},{"line":69},{"line":70}],"syntax":"swift","fileType":"swift","identifier":"FlipContractTestTheGameSection2Step3.swift"},"doc://SpaceKit/tutorials/SpaceKit/Deep-Dive-into-SpaceKit-Concepts/Retrieving-Information-from-the-Blockchain":{"type":"topic","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Retrieving-Information-from-the-Blockchain","role":"article","abstract":[],"url":"\/tutorials\/spacekit\/deep-dive-into-spacekit-concepts\/retrieving-information-from-the-blockchain","kind":"article","title":"Retrieving Information from the Blockchain"},"doc://SpaceKit/tutorials/SpaceKit/Deep-Dive-into-SpaceKit-Concepts/Interacting-with-Other-Contracts":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Interacting-with-Other-Contracts","title":"Interacting with Other Contracts","kind":"article","url":"\/tutorials\/spacekit\/deep-dive-into-spacekit-concepts\/interacting-with-other-contracts","abstract":[],"type":"topic","role":"article"},"doc://SpaceKit/tutorials/SpaceKit/Build-a-Coin-Flip-Contract/Implement-the-Game-Logic-for-the-Flip-Contract":{"title":"Implement the Game Logic for the Flip Contract","role":"article","kind":"article","abstract":[],"type":"topic","url":"\/tutorials\/spacekit\/build-a-coin-flip-contract\/implement-the-game-logic-for-the-flip-contract","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Build-a-Coin-Flip-Contract\/Implement-the-Game-Logic-for-the-Flip-Contract"},"doc://SpaceKit/tutorials/SpaceKit/Create-and-Manage-Tokens/Managing-Fungible-Tokens":{"url":"\/tutorials\/spacekit\/create-and-manage-tokens\/managing-fungible-tokens","type":"topic","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Create-and-Manage-Tokens\/Managing-Fungible-Tokens","kind":"article","abstract":[],"role":"article","title":"Managing Fungible Tokens"},"doc://SpaceKit/tutorials/SpaceKit/FlipContractWriteTheGame#Define-the-bounty-Endpoint":{"abstract":[{"text":"With the storage and administrative endpoints complete, it’s time to build the core gameplay mechanics.","type":"text"}],"kind":"section","role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteTheGame#Define-the-bounty-Endpoint","type":"section","title":"Define the bounty Endpoint","url":"\/tutorials\/spacekit\/flipcontractwritethegame#Define-the-bounty-Endpoint"},"FlipContractTestTheGameSection4Step3.swift":{"syntax":"swift","fileType":"swift","identifier":"FlipContractTestTheGameSection4Step3.swift","content":["import SpaceKitTesting","import Flip","","private let PLAYER_ADDRESS = \"player\"","private let BOUNTY_ADDRESS = \"bounty\"","private let OWNER_ADDRESS = \"owner\"","private let CONTRACT_ADDRESS = \"contract\"","private let USDC_TOKEN_IDENTIFIER_STRING = \"USDC-abcdef\"","private var USDC_TOKEN_IDENTIFIER: TokenIdentifier {","    \"\\(USDC_TOKEN_IDENTIFIER_STRING)\"","}","","final class FlipTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: PLAYER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: BOUNTY_ADDRESS,","                balance: 0","            ),","            WorldAccount(","                address: OWNER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: CONTRACT_ADDRESS,","                balance: 0,","                controllers: [","                    AdminController.self,","                    GameController.self,","                    StorageController.self","                ]","            )","        ]","    }","    ","    func testInitEgld() throws {","        try self.initContract()","        try self.setupEgld()","    }","    ","    func testInitUsdc() throws {","        try self.initContract()","        try self.setupUsdc()","    }","    ","    func testFlipSingleEgld() throws {","        try self.initContract()","        try self.setupEgld()","        try self.flipSingleEgld(amount: 100_000)","        ","        let storageController = self.instantiateController(","            StorageController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        let egldTokenReserve = try storageController","            .getTokenReserve(","                tokenIdentifier: .egld,","                tokenNonce: 0","            )","        ","        XCTAssertEqual(egldTokenReserve, 99_906_000)","    }","    ","    func testFlipSingleUsdc() throws {","        try self.initContract()","        try self.setupUsdc()","        try self.flipSingleUsdc(amount: 100_000)","        ","        let storageController = self.instantiateController(","            StorageController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        let usdcTokenReserve = try storageController","            .getTokenReserve(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                tokenNonce: 0","            )","        ","        XCTAssertEqual(usdcTokenReserve, 99_906_000)","    }","    ","    func testBountyTooEarly() throws {","        try self.initContract()","        try self.setupEgld()","        try self.flipSingleEgld(amount: 100_000)","    }","    ","    func testFlipTooHighBetAbsoluteValue() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 100_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let gameController = self.instantiateController(GameController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try gameController.flip(","                transactionInput: ContractCallTransactionInput(","                    callerAddress: PLAYER_ADDRESS,","                    egldValue: 1_500","                )","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Bet is too high. Maximum allowed bet: 1000\"))","        }","    }","    ","    func testFlipTooHighBetPercent() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 10,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let gameController = self.instantiateController(GameController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try gameController.flip(","                transactionInput: ContractCallTransactionInput(","                    callerAddress: PLAYER_ADDRESS,","                    egldValue: 150_000","                )","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Bet is too high. Maximum allowed bet: 100000\"))","        }","    }","    ","    func testSetMaximumBet() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBet = try storageController.getMaximumBet(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBet, 100)","    }","    ","    func testSetMaximumBetPercent() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBetPercent = try storageController.getMaximumBetPercent(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBetPercent, 100)","    }","    ","    func testIncreaseEgldReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 1_000","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        ","        XCTAssertEqual(tokenReserve, 1_000)","        XCTAssertEqual(contractBalance, 1_000)","    }","    ","    func testIncreaseUsdcReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 1_000","                    )","                ]","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        ","        XCTAssertEqual(tokenReserve, 1_000)","        XCTAssertEqual(contractBalance, 1_000)","    }","    ","    func testWithdrawEgldReserve() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.withdrawReserve(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 10_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        let ownerBalance = self.getAccount(address: OWNER_ADDRESS)!.balance","        ","        XCTAssertEqual(tokenReserve, 90_000_000)","        XCTAssertEqual(contractBalance, 90_000_000)","        XCTAssertEqual(ownerBalance, 10_000_000)","    }","    ","    func testWithdrawUsdcReserve() throws {","        try self.initContract()","        try self.setupUsdc()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.withdrawReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 10_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        let ownerBalance = self.getAccount(address: OWNER_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        ","        XCTAssertEqual(tokenReserve, 90_000_000)","        XCTAssertEqual(contractBalance, 90_000_000)","        XCTAssertEqual(ownerBalance, 10_000_000)","    }","","    ","    func testSetMaximumBetNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBet(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testSetMaximumBetPercentNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBetPercent(","                tokenIdentifier: .egld,","                nonce: 0,","                percent: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testIncreaseReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.increaseReserve()","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testWithdrawReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.withdrawReserve(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 100","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    private func initContract() throws {","        try self.deployContract(","            at: CONTRACT_ADDRESS,","            arguments: [","               500,","               100,","               1","            ],","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","    }","    ","    private func setupEgld() throws {","        let adminController = self.instantiateController(","            AdminController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 100_000_000","            )","        )","    }","    ","    private func setupUsdc() throws {","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 100_000_000","                    )","                ]","            )","        )","    }","    ","    private func flipSingleEgld(","        amount: BigUint","    ) throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.flip(","            transactionInput: ContractCallTransactionInput(","                callerAddress: PLAYER_ADDRESS,","                egldValue: amount","            )","        )","    }","    ","    private func flipSingleUsdc(amount: BigUint) throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.flip(","            transactionInput: ContractCallTransactionInput(","                callerAddress: PLAYER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: amount","                    )","                ]","            )","        )","    }","    ","    private func bounty() throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.bounty(","            transactionInput: ContractCallTransactionInput(","                callerAddress: BOUNTY_ADDRESS","            )","        )","    }","}"],"fileName":"FlipTest.swift","type":"file","highlights":[{"line":105},{"line":106},{"line":107}]},"doc://SpaceKit/tutorials/SpaceKit/Build-a-Coin-Flip-Contract/Define-the-Storage-for-the-Flip-Contract":{"title":"Define the Storage for the Flip Contract","role":"article","kind":"article","abstract":[],"type":"topic","url":"\/tutorials\/spacekit\/build-a-coin-flip-contract\/define-the-storage-for-the-flip-contract","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Build-a-Coin-Flip-Contract\/Define-the-Storage-for-the-Flip-Contract"},"FlipContractTestTheGameSection4Step7.swift":{"fileName":"FlipTest.swift","type":"file","content":["import SpaceKitTesting","import Flip","","private let PLAYER_ADDRESS = \"player\"","private let BOUNTY_ADDRESS = \"bounty\"","private let OWNER_ADDRESS = \"owner\"","private let CONTRACT_ADDRESS = \"contract\"","private let USDC_TOKEN_IDENTIFIER_STRING = \"USDC-abcdef\"","private var USDC_TOKEN_IDENTIFIER: TokenIdentifier {","    \"\\(USDC_TOKEN_IDENTIFIER_STRING)\"","}","","final class FlipTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: PLAYER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: BOUNTY_ADDRESS,","                balance: 0","            ),","            WorldAccount(","                address: OWNER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: CONTRACT_ADDRESS,","                balance: 0,","                controllers: [","                    AdminController.self,","                    GameController.self,","                    StorageController.self","                ]","            )","        ]","    }","    ","    func testInitEgld() throws {","        try self.initContract()","        try self.setupEgld()","    }","    ","    func testInitUsdc() throws {","        try self.initContract()","        try self.setupUsdc()","    }","    ","    func testFlipSingleEgld() throws {","        try self.initContract()","        try self.setupEgld()","        try self.flipSingleEgld(amount: 100_000)","        ","        let storageController = self.instantiateController(","            StorageController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        let egldTokenReserve = try storageController","            .getTokenReserve(","                tokenIdentifier: .egld,","                tokenNonce: 0","            )","        ","        XCTAssertEqual(egldTokenReserve, 99_906_000)","    }","    ","    func testFlipSingleUsdc() throws {","        try self.initContract()","        try self.setupUsdc()","        try self.flipSingleUsdc(amount: 100_000)","        ","        let storageController = self.instantiateController(","            StorageController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        let usdcTokenReserve = try storageController","            .getTokenReserve(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                tokenNonce: 0","            )","        ","        XCTAssertEqual(usdcTokenReserve, 99_906_000)","    }","    ","    func testBountyTooEarly() throws {","        try self.initContract()","        try self.setupEgld()","        try self.flipSingleEgld(amount: 100_000)","        ","        let gameController = self.instantiateController(GameController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try gameController.bounty(","                transactionInput: ContractCallTransactionInput(","                    callerAddress: BOUNTY_ADDRESS","                )","            )","            ","            XCTFail()","        } catch {","            ","        }","    }","    ","    func testFlipTooHighBetAbsoluteValue() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 100_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let gameController = self.instantiateController(GameController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try gameController.flip(","                transactionInput: ContractCallTransactionInput(","                    callerAddress: PLAYER_ADDRESS,","                    egldValue: 1_500","                )","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Bet is too high. Maximum allowed bet: 1000\"))","        }","    }","    ","    func testFlipTooHighBetPercent() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 10,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let gameController = self.instantiateController(GameController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try gameController.flip(","                transactionInput: ContractCallTransactionInput(","                    callerAddress: PLAYER_ADDRESS,","                    egldValue: 150_000","                )","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Bet is too high. Maximum allowed bet: 100000\"))","        }","    }","    ","    func testSetMaximumBet() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBet = try storageController.getMaximumBet(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBet, 100)","    }","    ","    func testSetMaximumBetPercent() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBetPercent = try storageController.getMaximumBetPercent(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBetPercent, 100)","    }","    ","    func testIncreaseEgldReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 1_000","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        ","        XCTAssertEqual(tokenReserve, 1_000)","        XCTAssertEqual(contractBalance, 1_000)","    }","    ","    func testIncreaseUsdcReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 1_000","                    )","                ]","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        ","        XCTAssertEqual(tokenReserve, 1_000)","        XCTAssertEqual(contractBalance, 1_000)","    }","    ","    func testWithdrawEgldReserve() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.withdrawReserve(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 10_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        let ownerBalance = self.getAccount(address: OWNER_ADDRESS)!.balance","        ","        XCTAssertEqual(tokenReserve, 90_000_000)","        XCTAssertEqual(contractBalance, 90_000_000)","        XCTAssertEqual(ownerBalance, 10_000_000)","    }","    ","    func testWithdrawUsdcReserve() throws {","        try self.initContract()","        try self.setupUsdc()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.withdrawReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 10_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        let ownerBalance = self.getAccount(address: OWNER_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        ","        XCTAssertEqual(tokenReserve, 90_000_000)","        XCTAssertEqual(contractBalance, 90_000_000)","        XCTAssertEqual(ownerBalance, 10_000_000)","    }","","    ","    func testSetMaximumBetNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBet(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testSetMaximumBetPercentNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBetPercent(","                tokenIdentifier: .egld,","                nonce: 0,","                percent: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testIncreaseReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.increaseReserve()","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testWithdrawReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.withdrawReserve(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 100","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    private func initContract() throws {","        try self.deployContract(","            at: CONTRACT_ADDRESS,","            arguments: [","               500,","               100,","               1","            ],","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","    }","    ","    private func setupEgld() throws {","        let adminController = self.instantiateController(","            AdminController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 100_000_000","            )","        )","    }","    ","    private func setupUsdc() throws {","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 100_000_000","                    )","                ]","            )","        )","    }","    ","    private func flipSingleEgld(","        amount: BigUint","    ) throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.flip(","            transactionInput: ContractCallTransactionInput(","                callerAddress: PLAYER_ADDRESS,","                egldValue: amount","            )","        )","    }","    ","    private func flipSingleUsdc(amount: BigUint) throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.flip(","            transactionInput: ContractCallTransactionInput(","                callerAddress: PLAYER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: amount","                    )","                ]","            )","        )","    }","    ","    private func bounty() throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.bounty(","            transactionInput: ContractCallTransactionInput(","                callerAddress: BOUNTY_ADDRESS","            )","        )","    }","}"],"highlights":[{"line":117},{"line":118}],"syntax":"swift","fileType":"swift","identifier":"FlipContractTestTheGameSection4Step7.swift"},"doc://SpaceKit/tutorials/SpaceKit/UnderstandTokens":{"url":"\/tutorials\/spacekit\/understandtokens","estimatedTime":"15min","role":"project","kind":"project","title":"Understand the ESDT Standard","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/UnderstandTokens","type":"topic","abstract":[{"text":"Learn about the ESDT standard used in the SpaceKit framework, a token model that supports fungible tokens, non-fungible tokens (NFTs), semi-fungible tokens, and meta-esdt tokens.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The SpaceKit framework uses a token standard called ESDT. This standard defines four types of tokens: fungible, non-fungible (NFT), semi-fungible, and meta-esdt."}]},"doc://SpaceKit/tutorials/SpaceKit/TokenAttributes#Implementing-the-changeTokenLockDuration-Endpoint":{"abstract":[{"type":"text","text":"The ESDT standard enables embedding custom data within non-fungible tokens, allowing developers to extend the functionality of their smart contracts. This additional data, referred to as “attributes,” is tied to the token and transfers along with it between wallets."}],"role":"pseudoSymbol","kind":"section","url":"\/tutorials\/spacekit\/tokenattributes#Implementing-the-changeTokenLockDuration-Endpoint","type":"section","title":"Implementing the changeTokenLockDuration Endpoint","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/TokenAttributes#Implementing-the-changeTokenLockDuration-Endpoint"},"FlipContractTestTheGameSection4Step8.swift":{"syntax":"swift","fileType":"swift","identifier":"FlipContractTestTheGameSection4Step8.swift","content":["import SpaceKitTesting","import Flip","","private let PLAYER_ADDRESS = \"player\"","private let BOUNTY_ADDRESS = \"bounty\"","private let OWNER_ADDRESS = \"owner\"","private let CONTRACT_ADDRESS = \"contract\"","private let USDC_TOKEN_IDENTIFIER_STRING = \"USDC-abcdef\"","private var USDC_TOKEN_IDENTIFIER: TokenIdentifier {","    \"\\(USDC_TOKEN_IDENTIFIER_STRING)\"","}","","final class FlipTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: PLAYER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: BOUNTY_ADDRESS,","                balance: 0","            ),","            WorldAccount(","                address: OWNER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: CONTRACT_ADDRESS,","                balance: 0,","                controllers: [","                    AdminController.self,","                    GameController.self,","                    StorageController.self","                ]","            )","        ]","    }","    ","    func testInitEgld() throws {","        try self.initContract()","        try self.setupEgld()","    }","    ","    func testInitUsdc() throws {","        try self.initContract()","        try self.setupUsdc()","    }","    ","    func testFlipSingleEgld() throws {","        try self.initContract()","        try self.setupEgld()","        try self.flipSingleEgld(amount: 100_000)","        ","        let storageController = self.instantiateController(","            StorageController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        let egldTokenReserve = try storageController","            .getTokenReserve(","                tokenIdentifier: .egld,","                tokenNonce: 0","            )","        ","        XCTAssertEqual(egldTokenReserve, 99_906_000)","    }","    ","    func testFlipSingleUsdc() throws {","        try self.initContract()","        try self.setupUsdc()","        try self.flipSingleUsdc(amount: 100_000)","        ","        let storageController = self.instantiateController(","            StorageController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        let usdcTokenReserve = try storageController","            .getTokenReserve(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                tokenNonce: 0","            )","        ","        XCTAssertEqual(usdcTokenReserve, 99_906_000)","    }","    ","    func testBountyTooEarly() throws {","        try self.initContract()","        try self.setupEgld()","        try self.flipSingleEgld(amount: 100_000)","        ","        let gameController = self.instantiateController(GameController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try gameController.bounty(","                transactionInput: ContractCallTransactionInput(","                    callerAddress: BOUNTY_ADDRESS","                )","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"No flip can be bounty.\"))","        }","    }","    ","    func testFlipTooHighBetAbsoluteValue() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 100_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let gameController = self.instantiateController(GameController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try gameController.flip(","                transactionInput: ContractCallTransactionInput(","                    callerAddress: PLAYER_ADDRESS,","                    egldValue: 1_500","                )","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Bet is too high. Maximum allowed bet: 1000\"))","        }","    }","    ","    func testFlipTooHighBetPercent() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 10,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let gameController = self.instantiateController(GameController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try gameController.flip(","                transactionInput: ContractCallTransactionInput(","                    callerAddress: PLAYER_ADDRESS,","                    egldValue: 150_000","                )","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Bet is too high. Maximum allowed bet: 100000\"))","        }","    }","    ","    func testSetMaximumBet() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBet = try storageController.getMaximumBet(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBet, 100)","    }","    ","    func testSetMaximumBetPercent() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBetPercent = try storageController.getMaximumBetPercent(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBetPercent, 100)","    }","    ","    func testIncreaseEgldReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 1_000","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        ","        XCTAssertEqual(tokenReserve, 1_000)","        XCTAssertEqual(contractBalance, 1_000)","    }","    ","    func testIncreaseUsdcReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 1_000","                    )","                ]","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        ","        XCTAssertEqual(tokenReserve, 1_000)","        XCTAssertEqual(contractBalance, 1_000)","    }","    ","    func testWithdrawEgldReserve() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.withdrawReserve(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 10_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        let ownerBalance = self.getAccount(address: OWNER_ADDRESS)!.balance","        ","        XCTAssertEqual(tokenReserve, 90_000_000)","        XCTAssertEqual(contractBalance, 90_000_000)","        XCTAssertEqual(ownerBalance, 10_000_000)","    }","    ","    func testWithdrawUsdcReserve() throws {","        try self.initContract()","        try self.setupUsdc()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.withdrawReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 10_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        let ownerBalance = self.getAccount(address: OWNER_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        ","        XCTAssertEqual(tokenReserve, 90_000_000)","        XCTAssertEqual(contractBalance, 90_000_000)","        XCTAssertEqual(ownerBalance, 10_000_000)","    }","","    ","    func testSetMaximumBetNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBet(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testSetMaximumBetPercentNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBetPercent(","                tokenIdentifier: .egld,","                nonce: 0,","                percent: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testIncreaseReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.increaseReserve()","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testWithdrawReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.withdrawReserve(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 100","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    private func initContract() throws {","        try self.deployContract(","            at: CONTRACT_ADDRESS,","            arguments: [","               500,","               100,","               1","            ],","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","    }","    ","    private func setupEgld() throws {","        let adminController = self.instantiateController(","            AdminController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 100_000_000","            )","        )","    }","    ","    private func setupUsdc() throws {","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 100_000_000","                    )","                ]","            )","        )","    }","    ","    private func flipSingleEgld(","        amount: BigUint","    ) throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.flip(","            transactionInput: ContractCallTransactionInput(","                callerAddress: PLAYER_ADDRESS,","                egldValue: amount","            )","        )","    }","    ","    private func flipSingleUsdc(amount: BigUint) throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.flip(","            transactionInput: ContractCallTransactionInput(","                callerAddress: PLAYER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: amount","                    )","                ]","            )","        )","    }","    ","    private func bounty() throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.bounty(","            transactionInput: ContractCallTransactionInput(","                callerAddress: BOUNTY_ADDRESS","            )","        )","    }","}"],"fileName":"FlipTest.swift","type":"file","highlights":[]},"doc://SpaceKit/tutorials/SpaceKit/FlipContractTestAdmin#Verify-the-Maximum-Bet-Configuration-Endpoints":{"url":"\/tutorials\/spacekit\/flipcontracttestadmin#Verify-the-Maximum-Bet-Configuration-Endpoints","type":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractTestAdmin#Verify-the-Maximum-Bet-Configuration-Endpoints","kind":"section","abstract":[{"type":"text","text":"Admin endpoints are critical to the contract’s integrity. They not only control configuration parameters, but also grant access to withdraw the contract’s token reserves."}],"role":"pseudoSymbol","title":"Verify the Maximum Bet Configuration Endpoints"},"doc://SpaceKit/tutorials/SpaceKit/InstallingTools#Setting-Up-the-SpaceKit-CLI":{"url":"\/tutorials\/spacekit\/installingtools#Setting-Up-the-SpaceKit-CLI","type":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Setting-Up-the-SpaceKit-CLI","kind":"section","abstract":[{"type":"text","text":"Before writing your first smart contract with SpaceKit, ensure you have the necessary tools installed."}],"role":"pseudoSymbol","title":"Setting Up the SpaceKit CLI"},"FlipContractTestTheGameSection5Step3.swift":{"fileName":"FlipTest.swift","type":"file","content":["import SpaceKitTesting","import Flip","","private let PLAYER_ADDRESS = \"player\"","private let BOUNTY_ADDRESS = \"bounty\"","private let OWNER_ADDRESS = \"owner\"","private let CONTRACT_ADDRESS = \"contract\"","private let USDC_TOKEN_IDENTIFIER_STRING = \"USDC-abcdef\"","private var USDC_TOKEN_IDENTIFIER: TokenIdentifier {","    \"\\(USDC_TOKEN_IDENTIFIER_STRING)\"","}","","final class FlipTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: PLAYER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: BOUNTY_ADDRESS,","                balance: 0","            ),","            WorldAccount(","                address: OWNER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: CONTRACT_ADDRESS,","                balance: 0,","                controllers: [","                    AdminController.self,","                    GameController.self,","                    StorageController.self","                ]","            )","        ]","    }","    ","    func testInitEgld() throws {","        try self.initContract()","        try self.setupEgld()","    }","    ","    func testInitUsdc() throws {","        try self.initContract()","        try self.setupUsdc()","    }","    ","    func testFlipSingleEgld() throws {","        try self.initContract()","        try self.setupEgld()","        try self.flipSingleEgld(amount: 100_000)","        ","        let storageController = self.instantiateController(","            StorageController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        let egldTokenReserve = try storageController","            .getTokenReserve(","                tokenIdentifier: .egld,","                tokenNonce: 0","            )","        ","        XCTAssertEqual(egldTokenReserve, 99_906_000)","    }","    ","    func testFlipSingleUsdc() throws {","        try self.initContract()","        try self.setupUsdc()","        try self.flipSingleUsdc(amount: 100_000)","        ","        let storageController = self.instantiateController(","            StorageController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        let usdcTokenReserve = try storageController","            .getTokenReserve(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                tokenNonce: 0","            )","        ","        XCTAssertEqual(usdcTokenReserve, 99_906_000)","    }","    ","    func testBountyTooEarly() throws {","        try self.initContract()","        try self.setupEgld()","        try self.flipSingleEgld(amount: 100_000)","        ","        let gameController = self.instantiateController(GameController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try gameController.bounty(","                transactionInput: ContractCallTransactionInput(","                    callerAddress: BOUNTY_ADDRESS","                )","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"No flip can be bounty.\"))","        }","    }","    ","    func testBountySingleWinEgld() throws {","        try self.initContract()","        try self.setupEgld()","        try self.flipSingleEgld(amount: 100_000)","    }","    ","    func testFlipTooHighBetAbsoluteValue() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 100_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let gameController = self.instantiateController(GameController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try gameController.flip(","                transactionInput: ContractCallTransactionInput(","                    callerAddress: PLAYER_ADDRESS,","                    egldValue: 1_500","                )","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Bet is too high. Maximum allowed bet: 1000\"))","        }","    }","    ","    func testFlipTooHighBetPercent() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 10,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let gameController = self.instantiateController(GameController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try gameController.flip(","                transactionInput: ContractCallTransactionInput(","                    callerAddress: PLAYER_ADDRESS,","                    egldValue: 150_000","                )","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Bet is too high. Maximum allowed bet: 100000\"))","        }","    }","    ","    func testSetMaximumBet() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBet = try storageController.getMaximumBet(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBet, 100)","    }","    ","    func testSetMaximumBetPercent() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBetPercent = try storageController.getMaximumBetPercent(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBetPercent, 100)","    }","    ","    func testIncreaseEgldReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 1_000","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        ","        XCTAssertEqual(tokenReserve, 1_000)","        XCTAssertEqual(contractBalance, 1_000)","    }","    ","    func testIncreaseUsdcReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 1_000","                    )","                ]","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        ","        XCTAssertEqual(tokenReserve, 1_000)","        XCTAssertEqual(contractBalance, 1_000)","    }","    ","    func testWithdrawEgldReserve() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.withdrawReserve(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 10_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        let ownerBalance = self.getAccount(address: OWNER_ADDRESS)!.balance","        ","        XCTAssertEqual(tokenReserve, 90_000_000)","        XCTAssertEqual(contractBalance, 90_000_000)","        XCTAssertEqual(ownerBalance, 10_000_000)","    }","    ","    func testWithdrawUsdcReserve() throws {","        try self.initContract()","        try self.setupUsdc()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.withdrawReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 10_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        let ownerBalance = self.getAccount(address: OWNER_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        ","        XCTAssertEqual(tokenReserve, 90_000_000)","        XCTAssertEqual(contractBalance, 90_000_000)","        XCTAssertEqual(ownerBalance, 10_000_000)","    }","","    ","    func testSetMaximumBetNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBet(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testSetMaximumBetPercentNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBetPercent(","                tokenIdentifier: .egld,","                nonce: 0,","                percent: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testIncreaseReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.increaseReserve()","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testWithdrawReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.withdrawReserve(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 100","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    private func initContract() throws {","        try self.deployContract(","            at: CONTRACT_ADDRESS,","            arguments: [","               500,","               100,","               1","            ],","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","    }","    ","    private func setupEgld() throws {","        let adminController = self.instantiateController(","            AdminController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 100_000_000","            )","        )","    }","    ","    private func setupUsdc() throws {","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 100_000_000","                    )","                ]","            )","        )","    }","    ","    private func flipSingleEgld(","        amount: BigUint","    ) throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.flip(","            transactionInput: ContractCallTransactionInput(","                callerAddress: PLAYER_ADDRESS,","                egldValue: amount","            )","        )","    }","    ","    private func flipSingleUsdc(amount: BigUint) throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.flip(","            transactionInput: ContractCallTransactionInput(","                callerAddress: PLAYER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: amount","                    )","                ]","            )","        )","    }","    ","    private func bounty() throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.bounty(","            transactionInput: ContractCallTransactionInput(","                callerAddress: BOUNTY_ADDRESS","            )","        )","    }","}"],"highlights":[{"line":125},{"line":126},{"line":127}],"syntax":"swift","fileType":"swift","identifier":"FlipContractTestTheGameSection5Step3.swift"},"doc://SpaceKit/tutorials/SpaceKit/FlipContractWriteAdmin#Set-Maximum-Bet-Limits":{"kind":"section","abstract":[{"type":"text","text":"Now that your storage is fully set up, it’s time to define the administrative endpoints that allow the contract owner to manage critical values and assets."}],"type":"section","url":"\/tutorials\/spacekit\/flipcontractwriteadmin#Set-Maximum-Bet-Limits","role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteAdmin#Set-Maximum-Bet-Limits","title":"Set Maximum Bet Limits"},"doc://SpaceKit/tutorials/SpaceKit/FlipContractTestTheGame#Test-Successful-Calls-to-the-flip-Endpoint":{"title":"Test Successful Calls to the flip Endpoint","role":"pseudoSymbol","kind":"section","abstract":[{"text":"This final chapter of the testing tutorial focuses on validating the core game logic implemented in the ","type":"text"},{"type":"codeVoice","code":"GameController"},{"type":"text","text":"."}],"type":"section","url":"\/tutorials\/spacekit\/flipcontracttestthegame#Test-Successful-Calls-to-the-flip-Endpoint","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractTestTheGame#Test-Successful-Calls-to-the-flip-Endpoint"},"doc://SpaceKit/tutorials/SpaceKit/AsyncCalls":{"title":"Interacting with Contracts Across Shards","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls","abstract":[{"type":"text","text":"Blockchain platforms using SpaceVM enable seamless execution within a sharded environment. Sharding divides a blockchain’s global state and validation workload into smaller, manageable units known as shards. This method enhances scalability without compromising decentralization, allowing nodes to operate without significant computational resources."}],"kind":"project","role":"project","estimatedTime":"15min","type":"topic","url":"\/tutorials\/spacekit\/asynccalls"},"FlipContractTestTheGameSection2Step6.swift":{"syntax":"swift","fileType":"swift","identifier":"FlipContractTestTheGameSection2Step6.swift","content":["import SpaceKitTesting","import Flip","","private let PLAYER_ADDRESS = \"player\"","private let BOUNTY_ADDRESS = \"bounty\"","private let OWNER_ADDRESS = \"owner\"","private let CONTRACT_ADDRESS = \"contract\"","private let USDC_TOKEN_IDENTIFIER_STRING = \"USDC-abcdef\"","private var USDC_TOKEN_IDENTIFIER: TokenIdentifier {","    \"\\(USDC_TOKEN_IDENTIFIER_STRING)\"","}","","final class FlipTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: PLAYER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: BOUNTY_ADDRESS,","                balance: 0","            ),","            WorldAccount(","                address: OWNER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: CONTRACT_ADDRESS,","                balance: 0,","                controllers: [","                    AdminController.self,","                    GameController.self,","                    StorageController.self","                ]","            )","        ]","    }","    ","    func testInitEgld() throws {","        try self.initContract()","        try self.setupEgld()","    }","    ","    func testInitUsdc() throws {","        try self.initContract()","        try self.setupUsdc()","    }","    ","    func testFlipTooHighBetAbsoluteValue() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 100_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let gameController = self.instantiateController(GameController.self, for: CONTRACT_ADDRESS)!","    }","    ","    func testSetMaximumBet() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBet = try storageController.getMaximumBet(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBet, 100)","    }","    ","    func testSetMaximumBetPercent() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBetPercent = try storageController.getMaximumBetPercent(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBetPercent, 100)","    }","    ","    func testIncreaseEgldReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 1_000","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        ","        XCTAssertEqual(tokenReserve, 1_000)","        XCTAssertEqual(contractBalance, 1_000)","    }","    ","    func testIncreaseUsdcReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 1_000","                    )","                ]","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        ","        XCTAssertEqual(tokenReserve, 1_000)","        XCTAssertEqual(contractBalance, 1_000)","    }","    ","    func testWithdrawEgldReserve() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.withdrawReserve(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 10_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        let ownerBalance = self.getAccount(address: OWNER_ADDRESS)!.balance","        ","        XCTAssertEqual(tokenReserve, 90_000_000)","        XCTAssertEqual(contractBalance, 90_000_000)","        XCTAssertEqual(ownerBalance, 10_000_000)","    }","    ","    func testWithdrawUsdcReserve() throws {","        try self.initContract()","        try self.setupUsdc()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.withdrawReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 10_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        let ownerBalance = self.getAccount(address: OWNER_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        ","        XCTAssertEqual(tokenReserve, 90_000_000)","        XCTAssertEqual(contractBalance, 90_000_000)","        XCTAssertEqual(ownerBalance, 10_000_000)","    }","","    ","    func testSetMaximumBetNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBet(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testSetMaximumBetPercentNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBetPercent(","                tokenIdentifier: .egld,","                nonce: 0,","                percent: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testIncreaseReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.increaseReserve()","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testWithdrawReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.withdrawReserve(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 100","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    private func initContract() throws {","        try self.deployContract(","            at: CONTRACT_ADDRESS,","            arguments: [","               500,","               100,","               1","            ],","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","    }","    ","    private func setupEgld() throws {","        let adminController = self.instantiateController(","            AdminController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 100_000_000","            )","        )","    }","    ","    private func setupUsdc() throws {","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 100_000_000","                    )","                ]","            )","        )","    }","    ","    private func flipSingleEgld(","        amount: BigUint","    ) throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.flip(","            transactionInput: ContractCallTransactionInput(","                callerAddress: PLAYER_ADDRESS,","                egldValue: amount","            )","        )","    }","    ","    private func flipSingleUsdc(amount: BigUint) throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.flip(","            transactionInput: ContractCallTransactionInput(","                callerAddress: PLAYER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: amount","                    )","                ]","            )","        )","    }","    ","    private func bounty() throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.bounty(","            transactionInput: ContractCallTransactionInput(","                callerAddress: BOUNTY_ADDRESS","            )","        )","    }","}"],"fileName":"FlipTest.swift","type":"file","highlights":[{"line":89},{"line":90}]},"FlipContractTestTheGameSection1Step2.swift":{"fileName":"FlipTest.swift","type":"file","content":["import SpaceKitTesting","import Flip","","private let PLAYER_ADDRESS = \"player\"","private let BOUNTY_ADDRESS = \"bounty\"","private let OWNER_ADDRESS = \"owner\"","private let CONTRACT_ADDRESS = \"contract\"","private let USDC_TOKEN_IDENTIFIER_STRING = \"USDC-abcdef\"","private var USDC_TOKEN_IDENTIFIER: TokenIdentifier {","    \"\\(USDC_TOKEN_IDENTIFIER_STRING)\"","}","","final class FlipTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: PLAYER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: BOUNTY_ADDRESS,","                balance: 0","            ),","            WorldAccount(","                address: OWNER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: CONTRACT_ADDRESS,","                balance: 0,","                controllers: [","                    AdminController.self,","                    GameController.self,","                    StorageController.self","                ]","            )","        ]","    }","    ","    func testInitEgld() throws {","        try self.initContract()","        try self.setupEgld()","    }","    ","    func testInitUsdc() throws {","        try self.initContract()","        try self.setupUsdc()","    }","    ","    func testSetMaximumBet() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBet = try storageController.getMaximumBet(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBet, 100)","    }","    ","    func testSetMaximumBetPercent() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBetPercent = try storageController.getMaximumBetPercent(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBetPercent, 100)","    }","    ","    func testIncreaseEgldReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 1_000","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        ","        XCTAssertEqual(tokenReserve, 1_000)","        XCTAssertEqual(contractBalance, 1_000)","    }","    ","    func testIncreaseUsdcReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 1_000","                    )","                ]","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        ","        XCTAssertEqual(tokenReserve, 1_000)","        XCTAssertEqual(contractBalance, 1_000)","    }","    ","    func testWithdrawEgldReserve() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.withdrawReserve(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 10_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        let ownerBalance = self.getAccount(address: OWNER_ADDRESS)!.balance","        ","        XCTAssertEqual(tokenReserve, 90_000_000)","        XCTAssertEqual(contractBalance, 90_000_000)","        XCTAssertEqual(ownerBalance, 10_000_000)","    }","    ","    func testWithdrawUsdcReserve() throws {","        try self.initContract()","        try self.setupUsdc()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.withdrawReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 10_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        let ownerBalance = self.getAccount(address: OWNER_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        ","        XCTAssertEqual(tokenReserve, 90_000_000)","        XCTAssertEqual(contractBalance, 90_000_000)","        XCTAssertEqual(ownerBalance, 10_000_000)","    }","","    ","    func testSetMaximumBetNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBet(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testSetMaximumBetPercentNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBetPercent(","                tokenIdentifier: .egld,","                nonce: 0,","                percent: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testIncreaseReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.increaseReserve()","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testWithdrawReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.withdrawReserve(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 100","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    private func initContract() throws {","        try self.deployContract(","            at: CONTRACT_ADDRESS,","            arguments: [","               500,","               100,","               1","            ],","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","    }","    ","    private func setupEgld() throws {","        let adminController = self.instantiateController(","            AdminController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 100_000_000","            )","        )","    }","    ","    private func setupUsdc() throws {","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 100_000_000","                    )","                ]","            )","        )","    }","    ","    private func flipSingleEgld(","        amount: BigUint","    ) throws {","    }","}"],"highlights":[{"line":373},{"line":374},{"line":375},{"line":376},{"line":377}],"syntax":"swift","fileType":"swift","identifier":"FlipContractTestTheGameSection1Step2.swift"},"FlipContractTestTheGameSection2Step11.swift":{"syntax":"swift","fileType":"swift","identifier":"FlipContractTestTheGameSection2Step11.swift","content":["import SpaceKitTesting","import Flip","","private let PLAYER_ADDRESS = \"player\"","private let BOUNTY_ADDRESS = \"bounty\"","private let OWNER_ADDRESS = \"owner\"","private let CONTRACT_ADDRESS = \"contract\"","private let USDC_TOKEN_IDENTIFIER_STRING = \"USDC-abcdef\"","private var USDC_TOKEN_IDENTIFIER: TokenIdentifier {","    \"\\(USDC_TOKEN_IDENTIFIER_STRING)\"","}","","final class FlipTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: PLAYER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: BOUNTY_ADDRESS,","                balance: 0","            ),","            WorldAccount(","                address: OWNER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: CONTRACT_ADDRESS,","                balance: 0,","                controllers: [","                    AdminController.self,","                    GameController.self,","                    StorageController.self","                ]","            )","        ]","    }","    ","    func testInitEgld() throws {","        try self.initContract()","        try self.setupEgld()","    }","    ","    func testInitUsdc() throws {","        try self.initContract()","        try self.setupUsdc()","    }","    ","    func testFlipTooHighBetAbsoluteValue() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 100_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let gameController = self.instantiateController(GameController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try gameController.flip(","                transactionInput: ContractCallTransactionInput(","                    callerAddress: PLAYER_ADDRESS,","                    egldValue: 1_500","                )","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Bet is too high. Maximum allowed bet: 1000\"))","        }","    }","    ","    func testFlipTooHighBetPercent() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 10,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let gameController = self.instantiateController(GameController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try gameController.flip(","                transactionInput: ContractCallTransactionInput(","                    callerAddress: PLAYER_ADDRESS,","                    egldValue: 150_000","                )","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Bet is too high. Maximum allowed bet: 100000\"))","        }","    }","    ","    func testSetMaximumBet() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBet = try storageController.getMaximumBet(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBet, 100)","    }","    ","    func testSetMaximumBetPercent() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBetPercent = try storageController.getMaximumBetPercent(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBetPercent, 100)","    }","    ","    func testIncreaseEgldReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 1_000","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        ","        XCTAssertEqual(tokenReserve, 1_000)","        XCTAssertEqual(contractBalance, 1_000)","    }","    ","    func testIncreaseUsdcReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 1_000","                    )","                ]","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        ","        XCTAssertEqual(tokenReserve, 1_000)","        XCTAssertEqual(contractBalance, 1_000)","    }","    ","    func testWithdrawEgldReserve() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.withdrawReserve(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 10_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        let ownerBalance = self.getAccount(address: OWNER_ADDRESS)!.balance","        ","        XCTAssertEqual(tokenReserve, 90_000_000)","        XCTAssertEqual(contractBalance, 90_000_000)","        XCTAssertEqual(ownerBalance, 10_000_000)","    }","    ","    func testWithdrawUsdcReserve() throws {","        try self.initContract()","        try self.setupUsdc()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.withdrawReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 10_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        let ownerBalance = self.getAccount(address: OWNER_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        ","        XCTAssertEqual(tokenReserve, 90_000_000)","        XCTAssertEqual(contractBalance, 90_000_000)","        XCTAssertEqual(ownerBalance, 10_000_000)","    }","","    ","    func testSetMaximumBetNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBet(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testSetMaximumBetPercentNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBetPercent(","                tokenIdentifier: .egld,","                nonce: 0,","                percent: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testIncreaseReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.increaseReserve()","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testWithdrawReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.withdrawReserve(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 100","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    private func initContract() throws {","        try self.deployContract(","            at: CONTRACT_ADDRESS,","            arguments: [","               500,","               100,","               1","            ],","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","    }","    ","    private func setupEgld() throws {","        let adminController = self.instantiateController(","            AdminController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 100_000_000","            )","        )","    }","    ","    private func setupUsdc() throws {","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 100_000_000","                    )","                ]","            )","        )","    }","    ","    private func flipSingleEgld(","        amount: BigUint","    ) throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.flip(","            transactionInput: ContractCallTransactionInput(","                callerAddress: PLAYER_ADDRESS,","                egldValue: amount","            )","        )","    }","    ","    private func flipSingleUsdc(amount: BigUint) throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.flip(","            transactionInput: ContractCallTransactionInput(","                callerAddress: PLAYER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: amount","                    )","                ]","            )","        )","    }","    ","    private func bounty() throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.bounty(","            transactionInput: ContractCallTransactionInput(","                callerAddress: BOUNTY_ADDRESS","            )","        )","    }","}"],"fileName":"FlipTest.swift","type":"file","highlights":[]},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Understanding-the-Buffer-Type":{"title":"Understanding the Buffer Type","role":"pseudoSymbol","kind":"section","abstract":[{"type":"text","text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM."}],"type":"section","url":"\/tutorials\/spacekit\/familiarizewithtypes#Understanding-the-Buffer-Type","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Understanding-the-Buffer-Type"},"doc://SpaceKit/tutorials/SpaceKit/Build-a-Coin-Flip-Contract/Add-Administrative-Endpoints-to-the-Flip-Contract":{"url":"\/tutorials\/spacekit\/build-a-coin-flip-contract\/add-administrative-endpoints-to-the-flip-contract","type":"topic","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Build-a-Coin-Flip-Contract\/Add-Administrative-Endpoints-to-the-Flip-Contract","kind":"article","abstract":[],"role":"article","title":"Add Administrative Endpoints to the Flip Contract"},"doc://SpaceKit/tutorials/SpaceKit/UnderstandTokens#Issuing-a-Semi-Fungible-Token-from-Your-Contract":{"title":"Issuing a Semi-Fungible Token from Your Contract","type":"section","role":"pseudoSymbol","abstract":[{"text":"Learn about the ESDT standard used in the SpaceKit framework, a token model that supports fungible tokens, non-fungible tokens (NFTs), semi-fungible tokens, and meta-esdt tokens.","type":"text"},{"text":" ","type":"text"},{"text":"The SpaceKit framework uses a token standard called ESDT. This standard defines four types of tokens: fungible, non-fungible (NFT), semi-fungible, and meta-esdt.","type":"text"}],"kind":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/UnderstandTokens#Issuing-a-Semi-Fungible-Token-from-Your-Contract","url":"\/tutorials\/spacekit\/understandtokens#Issuing-a-Semi-Fungible-Token-from-Your-Contract"},"FlipContractTestTheGameSection2Step7.swift":{"fileName":"FlipTest.swift","type":"file","content":["import SpaceKitTesting","import Flip","","private let PLAYER_ADDRESS = \"player\"","private let BOUNTY_ADDRESS = \"bounty\"","private let OWNER_ADDRESS = \"owner\"","private let CONTRACT_ADDRESS = \"contract\"","private let USDC_TOKEN_IDENTIFIER_STRING = \"USDC-abcdef\"","private var USDC_TOKEN_IDENTIFIER: TokenIdentifier {","    \"\\(USDC_TOKEN_IDENTIFIER_STRING)\"","}","","final class FlipTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: PLAYER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: BOUNTY_ADDRESS,","                balance: 0","            ),","            WorldAccount(","                address: OWNER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: CONTRACT_ADDRESS,","                balance: 0,","                controllers: [","                    AdminController.self,","                    GameController.self,","                    StorageController.self","                ]","            )","        ]","    }","    ","    func testInitEgld() throws {","        try self.initContract()","        try self.setupEgld()","    }","    ","    func testInitUsdc() throws {","        try self.initContract()","        try self.setupUsdc()","    }","    ","    func testFlipTooHighBetAbsoluteValue() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 100_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let gameController = self.instantiateController(GameController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            ","        } catch {","            ","        }","    }","    ","    func testSetMaximumBet() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBet = try storageController.getMaximumBet(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBet, 100)","    }","    ","    func testSetMaximumBetPercent() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBetPercent = try storageController.getMaximumBetPercent(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBetPercent, 100)","    }","    ","    func testIncreaseEgldReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 1_000","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        ","        XCTAssertEqual(tokenReserve, 1_000)","        XCTAssertEqual(contractBalance, 1_000)","    }","    ","    func testIncreaseUsdcReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 1_000","                    )","                ]","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        ","        XCTAssertEqual(tokenReserve, 1_000)","        XCTAssertEqual(contractBalance, 1_000)","    }","    ","    func testWithdrawEgldReserve() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.withdrawReserve(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 10_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        let ownerBalance = self.getAccount(address: OWNER_ADDRESS)!.balance","        ","        XCTAssertEqual(tokenReserve, 90_000_000)","        XCTAssertEqual(contractBalance, 90_000_000)","        XCTAssertEqual(ownerBalance, 10_000_000)","    }","    ","    func testWithdrawUsdcReserve() throws {","        try self.initContract()","        try self.setupUsdc()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.withdrawReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 10_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        let ownerBalance = self.getAccount(address: OWNER_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        ","        XCTAssertEqual(tokenReserve, 90_000_000)","        XCTAssertEqual(contractBalance, 90_000_000)","        XCTAssertEqual(ownerBalance, 10_000_000)","    }","","    ","    func testSetMaximumBetNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBet(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testSetMaximumBetPercentNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBetPercent(","                tokenIdentifier: .egld,","                nonce: 0,","                percent: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testIncreaseReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.increaseReserve()","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testWithdrawReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.withdrawReserve(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 100","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    private func initContract() throws {","        try self.deployContract(","            at: CONTRACT_ADDRESS,","            arguments: [","               500,","               100,","               1","            ],","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","    }","    ","    private func setupEgld() throws {","        let adminController = self.instantiateController(","            AdminController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 100_000_000","            )","        )","    }","    ","    private func setupUsdc() throws {","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 100_000_000","                    )","                ]","            )","        )","    }","    ","    private func flipSingleEgld(","        amount: BigUint","    ) throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.flip(","            transactionInput: ContractCallTransactionInput(","                callerAddress: PLAYER_ADDRESS,","                egldValue: amount","            )","        )","    }","    ","    private func flipSingleUsdc(amount: BigUint) throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.flip(","            transactionInput: ContractCallTransactionInput(","                callerAddress: PLAYER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: amount","                    )","                ]","            )","        )","    }","    ","    private func bounty() throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.bounty(","            transactionInput: ContractCallTransactionInput(","                callerAddress: BOUNTY_ADDRESS","            )","        )","    }","}"],"highlights":[{"line":91},{"line":92},{"line":93},{"line":94},{"line":95},{"line":96}],"syntax":"swift","fileType":"swift","identifier":"FlipContractTestTheGameSection2Step7.swift"},"doc://SpaceKit/tutorials/SpaceKit/FlipContractTestTheGame":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractTestTheGame","title":"Test the Game Logic for the Flip Contract","kind":"project","estimatedTime":"20min","url":"\/tutorials\/spacekit\/flipcontracttestthegame","abstract":[{"type":"text","text":"This final chapter of the testing tutorial focuses on validating the core game logic implemented in the "},{"type":"codeVoice","code":"GameController"},{"type":"text","text":"."}],"type":"topic","role":"project"},"doc://SpaceKit/tutorials/SpaceKit/OperationsOnNonFungibleTokens#Add-Quantity-to-an-Existing-Nonce":{"title":"Add Quantity to an Existing Nonce","role":"pseudoSymbol","kind":"section","abstract":[{"text":"Non-fungible tokens (NFTs) are unique digital assets that cannot be interchanged. Each NFT is associated with a unique identifier, known as a nonce. You can think of it like an airline ticket—each ticket is assigned to a specific passenger, with individual preferences and details.","type":"text"}],"type":"section","url":"\/tutorials\/spacekit\/operationsonnonfungibletokens#Add-Quantity-to-an-Existing-Nonce","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnNonFungibleTokens#Add-Quantity-to-an-Existing-Nonce"},"FlipContractTestTheGameSection3Step5.swift":{"syntax":"swift","fileType":"swift","identifier":"FlipContractTestTheGameSection3Step5.swift","content":["import SpaceKitTesting","import Flip","","private let PLAYER_ADDRESS = \"player\"","private let BOUNTY_ADDRESS = \"bounty\"","private let OWNER_ADDRESS = \"owner\"","private let CONTRACT_ADDRESS = \"contract\"","private let USDC_TOKEN_IDENTIFIER_STRING = \"USDC-abcdef\"","private var USDC_TOKEN_IDENTIFIER: TokenIdentifier {","    \"\\(USDC_TOKEN_IDENTIFIER_STRING)\"","}","","final class FlipTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: PLAYER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: BOUNTY_ADDRESS,","                balance: 0","            ),","            WorldAccount(","                address: OWNER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: CONTRACT_ADDRESS,","                balance: 0,","                controllers: [","                    AdminController.self,","                    GameController.self,","                    StorageController.self","                ]","            )","        ]","    }","    ","    func testInitEgld() throws {","        try self.initContract()","        try self.setupEgld()","    }","    ","    func testInitUsdc() throws {","        try self.initContract()","        try self.setupUsdc()","    }","    ","    func testFlipSingleEgld() throws {","        try self.initContract()","        try self.setupEgld()","        try self.flipSingleEgld(amount: 100_000)","        ","        let storageController = self.instantiateController(","            StorageController.self,","            for: CONTRACT_ADDRESS","        )!","    }","    ","    func testFlipTooHighBetAbsoluteValue() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 100_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let gameController = self.instantiateController(GameController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try gameController.flip(","                transactionInput: ContractCallTransactionInput(","                    callerAddress: PLAYER_ADDRESS,","                    egldValue: 1_500","                )","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Bet is too high. Maximum allowed bet: 1000\"))","        }","    }","    ","    func testFlipTooHighBetPercent() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 10,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let gameController = self.instantiateController(GameController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try gameController.flip(","                transactionInput: ContractCallTransactionInput(","                    callerAddress: PLAYER_ADDRESS,","                    egldValue: 150_000","                )","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Bet is too high. Maximum allowed bet: 100000\"))","        }","    }","    ","    func testSetMaximumBet() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBet = try storageController.getMaximumBet(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBet, 100)","    }","    ","    func testSetMaximumBetPercent() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBetPercent = try storageController.getMaximumBetPercent(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBetPercent, 100)","    }","    ","    func testIncreaseEgldReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 1_000","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        ","        XCTAssertEqual(tokenReserve, 1_000)","        XCTAssertEqual(contractBalance, 1_000)","    }","    ","    func testIncreaseUsdcReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 1_000","                    )","                ]","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        ","        XCTAssertEqual(tokenReserve, 1_000)","        XCTAssertEqual(contractBalance, 1_000)","    }","    ","    func testWithdrawEgldReserve() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.withdrawReserve(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 10_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        let ownerBalance = self.getAccount(address: OWNER_ADDRESS)!.balance","        ","        XCTAssertEqual(tokenReserve, 90_000_000)","        XCTAssertEqual(contractBalance, 90_000_000)","        XCTAssertEqual(ownerBalance, 10_000_000)","    }","    ","    func testWithdrawUsdcReserve() throws {","        try self.initContract()","        try self.setupUsdc()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.withdrawReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 10_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        let ownerBalance = self.getAccount(address: OWNER_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        ","        XCTAssertEqual(tokenReserve, 90_000_000)","        XCTAssertEqual(contractBalance, 90_000_000)","        XCTAssertEqual(ownerBalance, 10_000_000)","    }","","    ","    func testSetMaximumBetNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBet(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testSetMaximumBetPercentNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBetPercent(","                tokenIdentifier: .egld,","                nonce: 0,","                percent: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testIncreaseReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.increaseReserve()","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testWithdrawReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.withdrawReserve(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 100","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    private func initContract() throws {","        try self.deployContract(","            at: CONTRACT_ADDRESS,","            arguments: [","               500,","               100,","               1","            ],","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","    }","    ","    private func setupEgld() throws {","        let adminController = self.instantiateController(","            AdminController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 100_000_000","            )","        )","    }","    ","    private func setupUsdc() throws {","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 100_000_000","                    )","                ]","            )","        )","    }","    ","    private func flipSingleEgld(","        amount: BigUint","    ) throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.flip(","            transactionInput: ContractCallTransactionInput(","                callerAddress: PLAYER_ADDRESS,","                egldValue: amount","            )","        )","    }","    ","    private func flipSingleUsdc(amount: BigUint) throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.flip(","            transactionInput: ContractCallTransactionInput(","                callerAddress: PLAYER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: amount","                    )","                ]","            )","        )","    }","    ","    private func bounty() throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.bounty(","            transactionInput: ContractCallTransactionInput(","                callerAddress: BOUNTY_ADDRESS","            )","        )","    }","}"],"fileName":"FlipTest.swift","type":"file","highlights":[{"line":70},{"line":71},{"line":72},{"line":73},{"line":74}]},"doc://SpaceKit/tutorials/SpaceKit/FlipContractTestAdmin#Test-the-withdrawReserve-Endpoint":{"type":"section","kind":"section","abstract":[{"type":"text","text":"Admin endpoints are critical to the contract’s integrity. They not only control configuration parameters, but also grant access to withdraw the contract’s token reserves."}],"title":"Test the withdrawReserve Endpoint","role":"pseudoSymbol","url":"\/tutorials\/spacekit\/flipcontracttestadmin#Test-the-withdrawReserve-Endpoint","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractTestAdmin#Test-the-withdrawReserve-Endpoint"},"doc://SpaceKit/tutorials/SpaceKit/FlipContractTestTheGame#Test-the-bounty-Endpoint":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractTestTheGame#Test-the-bounty-Endpoint","abstract":[{"type":"text","text":"This final chapter of the testing tutorial focuses on validating the core game logic implemented in the "},{"type":"codeVoice","code":"GameController"},{"text":".","type":"text"}],"role":"pseudoSymbol","title":"Test the bounty Endpoint","kind":"section","url":"\/tutorials\/spacekit\/flipcontracttestthegame#Test-the-bounty-Endpoint","type":"section"},"doc://SpaceKit/tutorials/SpaceKit/FlipContractTestTheGame#Test-Failure-Case-for-the-bounty-Endpoint":{"url":"\/tutorials\/spacekit\/flipcontracttestthegame#Test-Failure-Case-for-the-bounty-Endpoint","role":"pseudoSymbol","kind":"section","title":"Test Failure Case for the bounty Endpoint","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractTestTheGame#Test-Failure-Case-for-the-bounty-Endpoint","type":"section","abstract":[{"type":"text","text":"This final chapter of the testing tutorial focuses on validating the core game logic implemented in the "},{"type":"codeVoice","code":"GameController"},{"text":".","type":"text"}]},"FlipContractTestTheGameSection5Step6.swift":{"fileName":"FlipTest.swift","type":"file","content":["import SpaceKitTesting","import Flip","","private let PLAYER_ADDRESS = \"player\"","private let BOUNTY_ADDRESS = \"bounty\"","private let OWNER_ADDRESS = \"owner\"","private let CONTRACT_ADDRESS = \"contract\"","private let USDC_TOKEN_IDENTIFIER_STRING = \"USDC-abcdef\"","private var USDC_TOKEN_IDENTIFIER: TokenIdentifier {","    \"\\(USDC_TOKEN_IDENTIFIER_STRING)\"","}","","final class FlipTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: PLAYER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: BOUNTY_ADDRESS,","                balance: 0","            ),","            WorldAccount(","                address: OWNER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: CONTRACT_ADDRESS,","                balance: 0,","                controllers: [","                    AdminController.self,","                    GameController.self,","                    StorageController.self","                ]","            )","        ]","    }","    ","    func testInitEgld() throws {","        try self.initContract()","        try self.setupEgld()","    }","    ","    func testInitUsdc() throws {","        try self.initContract()","        try self.setupUsdc()","    }","    ","    func testFlipSingleEgld() throws {","        try self.initContract()","        try self.setupEgld()","        try self.flipSingleEgld(amount: 100_000)","        ","        let storageController = self.instantiateController(","            StorageController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        let egldTokenReserve = try storageController","            .getTokenReserve(","                tokenIdentifier: .egld,","                tokenNonce: 0","            )","        ","        XCTAssertEqual(egldTokenReserve, 99_906_000)","    }","    ","    func testFlipSingleUsdc() throws {","        try self.initContract()","        try self.setupUsdc()","        try self.flipSingleUsdc(amount: 100_000)","        ","        let storageController = self.instantiateController(","            StorageController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        let usdcTokenReserve = try storageController","            .getTokenReserve(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                tokenNonce: 0","            )","        ","        XCTAssertEqual(usdcTokenReserve, 99_906_000)","    }","    ","    func testBountyTooEarly() throws {","        try self.initContract()","        try self.setupEgld()","        try self.flipSingleEgld(amount: 100_000)","        ","        let gameController = self.instantiateController(GameController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try gameController.bounty(","                transactionInput: ContractCallTransactionInput(","                    callerAddress: BOUNTY_ADDRESS","                )","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"No flip can be bounty.\"))","        }","    }","    ","    func testBountySingleWinEgld() throws {","        try self.initContract()","        try self.setupEgld()","        try self.flipSingleEgld(amount: 100_000)","        ","        let blockRandomSeed = Array(repeating: UInt8(0), count: 47) + [6]","        ","        self.setBlockInfos(","            nonce: 1,","            randomSeed: Data(blockRandomSeed)","        )","        ","        try self.bounty()","    }","    ","    func testFlipTooHighBetAbsoluteValue() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 100_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let gameController = self.instantiateController(GameController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try gameController.flip(","                transactionInput: ContractCallTransactionInput(","                    callerAddress: PLAYER_ADDRESS,","                    egldValue: 1_500","                )","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Bet is too high. Maximum allowed bet: 1000\"))","        }","    }","    ","    func testFlipTooHighBetPercent() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 10,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let gameController = self.instantiateController(GameController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try gameController.flip(","                transactionInput: ContractCallTransactionInput(","                    callerAddress: PLAYER_ADDRESS,","                    egldValue: 150_000","                )","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Bet is too high. Maximum allowed bet: 100000\"))","        }","    }","    ","    func testSetMaximumBet() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBet = try storageController.getMaximumBet(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBet, 100)","    }","    ","    func testSetMaximumBetPercent() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBetPercent = try storageController.getMaximumBetPercent(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBetPercent, 100)","    }","    ","    func testIncreaseEgldReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 1_000","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        ","        XCTAssertEqual(tokenReserve, 1_000)","        XCTAssertEqual(contractBalance, 1_000)","    }","    ","    func testIncreaseUsdcReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 1_000","                    )","                ]","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        ","        XCTAssertEqual(tokenReserve, 1_000)","        XCTAssertEqual(contractBalance, 1_000)","    }","    ","    func testWithdrawEgldReserve() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.withdrawReserve(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 10_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        let ownerBalance = self.getAccount(address: OWNER_ADDRESS)!.balance","        ","        XCTAssertEqual(tokenReserve, 90_000_000)","        XCTAssertEqual(contractBalance, 90_000_000)","        XCTAssertEqual(ownerBalance, 10_000_000)","    }","    ","    func testWithdrawUsdcReserve() throws {","        try self.initContract()","        try self.setupUsdc()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.withdrawReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 10_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        let ownerBalance = self.getAccount(address: OWNER_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        ","        XCTAssertEqual(tokenReserve, 90_000_000)","        XCTAssertEqual(contractBalance, 90_000_000)","        XCTAssertEqual(ownerBalance, 10_000_000)","    }","","    ","    func testSetMaximumBetNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBet(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testSetMaximumBetPercentNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBetPercent(","                tokenIdentifier: .egld,","                nonce: 0,","                percent: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testIncreaseReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.increaseReserve()","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testWithdrawReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.withdrawReserve(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 100","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    private func initContract() throws {","        try self.deployContract(","            at: CONTRACT_ADDRESS,","            arguments: [","               500,","               100,","               1","            ],","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","    }","    ","    private func setupEgld() throws {","        let adminController = self.instantiateController(","            AdminController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 100_000_000","            )","        )","    }","    ","    private func setupUsdc() throws {","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 100_000_000","                    )","                ]","            )","        )","    }","    ","    private func flipSingleEgld(","        amount: BigUint","    ) throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.flip(","            transactionInput: ContractCallTransactionInput(","                callerAddress: PLAYER_ADDRESS,","                egldValue: amount","            )","        )","    }","    ","    private func flipSingleUsdc(amount: BigUint) throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.flip(","            transactionInput: ContractCallTransactionInput(","                callerAddress: PLAYER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: amount","                    )","                ]","            )","        )","    }","    ","    private func bounty() throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.bounty(","            transactionInput: ContractCallTransactionInput(","                callerAddress: BOUNTY_ADDRESS","            )","        )","    }","}"],"highlights":[{"line":135},{"line":136}],"syntax":"swift","fileType":"swift","identifier":"FlipContractTestTheGameSection5Step6.swift"},"FlipContractTestTheGameSection1Step3.swift":{"syntax":"swift","fileType":"swift","identifier":"FlipContractTestTheGameSection1Step3.swift","content":["import SpaceKitTesting","import Flip","","private let PLAYER_ADDRESS = \"player\"","private let BOUNTY_ADDRESS = \"bounty\"","private let OWNER_ADDRESS = \"owner\"","private let CONTRACT_ADDRESS = \"contract\"","private let USDC_TOKEN_IDENTIFIER_STRING = \"USDC-abcdef\"","private var USDC_TOKEN_IDENTIFIER: TokenIdentifier {","    \"\\(USDC_TOKEN_IDENTIFIER_STRING)\"","}","","final class FlipTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: PLAYER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: BOUNTY_ADDRESS,","                balance: 0","            ),","            WorldAccount(","                address: OWNER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: CONTRACT_ADDRESS,","                balance: 0,","                controllers: [","                    AdminController.self,","                    GameController.self,","                    StorageController.self","                ]","            )","        ]","    }","    ","    func testInitEgld() throws {","        try self.initContract()","        try self.setupEgld()","    }","    ","    func testInitUsdc() throws {","        try self.initContract()","        try self.setupUsdc()","    }","    ","    func testSetMaximumBet() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBet = try storageController.getMaximumBet(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBet, 100)","    }","    ","    func testSetMaximumBetPercent() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBetPercent = try storageController.getMaximumBetPercent(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBetPercent, 100)","    }","    ","    func testIncreaseEgldReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 1_000","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        ","        XCTAssertEqual(tokenReserve, 1_000)","        XCTAssertEqual(contractBalance, 1_000)","    }","    ","    func testIncreaseUsdcReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 1_000","                    )","                ]","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        ","        XCTAssertEqual(tokenReserve, 1_000)","        XCTAssertEqual(contractBalance, 1_000)","    }","    ","    func testWithdrawEgldReserve() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.withdrawReserve(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 10_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        let ownerBalance = self.getAccount(address: OWNER_ADDRESS)!.balance","        ","        XCTAssertEqual(tokenReserve, 90_000_000)","        XCTAssertEqual(contractBalance, 90_000_000)","        XCTAssertEqual(ownerBalance, 10_000_000)","    }","    ","    func testWithdrawUsdcReserve() throws {","        try self.initContract()","        try self.setupUsdc()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.withdrawReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 10_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        let ownerBalance = self.getAccount(address: OWNER_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        ","        XCTAssertEqual(tokenReserve, 90_000_000)","        XCTAssertEqual(contractBalance, 90_000_000)","        XCTAssertEqual(ownerBalance, 10_000_000)","    }","","    ","    func testSetMaximumBetNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBet(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testSetMaximumBetPercentNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBetPercent(","                tokenIdentifier: .egld,","                nonce: 0,","                percent: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testIncreaseReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.increaseReserve()","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testWithdrawReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.withdrawReserve(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 100","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    private func initContract() throws {","        try self.deployContract(","            at: CONTRACT_ADDRESS,","            arguments: [","               500,","               100,","               1","            ],","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","    }","    ","    private func setupEgld() throws {","        let adminController = self.instantiateController(","            AdminController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 100_000_000","            )","        )","    }","    ","    private func setupUsdc() throws {","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 100_000_000","                    )","                ]","            )","        )","    }","    ","    private func flipSingleEgld(","        amount: BigUint","    ) throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","    }","}"],"fileName":"FlipTest.swift","type":"file","highlights":[{"line":377},{"line":378},{"line":379},{"line":380}]},"doc://SpaceKit/tutorials/SpaceKit/StoreValues":{"abstract":[{"type":"text","text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory."}],"role":"project","estimatedTime":"15min","kind":"project","url":"\/tutorials\/spacekit\/storevalues","type":"topic","title":"Persist Values Between Executions","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues"},"FlipContractTestTheGameSection3Step8.swift":{"fileName":"FlipTest.swift","type":"file","content":["import SpaceKitTesting","import Flip","","private let PLAYER_ADDRESS = \"player\"","private let BOUNTY_ADDRESS = \"bounty\"","private let OWNER_ADDRESS = \"owner\"","private let CONTRACT_ADDRESS = \"contract\"","private let USDC_TOKEN_IDENTIFIER_STRING = \"USDC-abcdef\"","private var USDC_TOKEN_IDENTIFIER: TokenIdentifier {","    \"\\(USDC_TOKEN_IDENTIFIER_STRING)\"","}","","final class FlipTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: PLAYER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: BOUNTY_ADDRESS,","                balance: 0","            ),","            WorldAccount(","                address: OWNER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: CONTRACT_ADDRESS,","                balance: 0,","                controllers: [","                    AdminController.self,","                    GameController.self,","                    StorageController.self","                ]","            )","        ]","    }","    ","    func testInitEgld() throws {","        try self.initContract()","        try self.setupEgld()","    }","    ","    func testInitUsdc() throws {","        try self.initContract()","        try self.setupUsdc()","    }","    ","    func testFlipSingleEgld() throws {","        try self.initContract()","        try self.setupEgld()","        try self.flipSingleEgld(amount: 100_000)","        ","        let storageController = self.instantiateController(","            StorageController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        let egldTokenReserve = try storageController","            .getTokenReserve(","                tokenIdentifier: .egld,","                tokenNonce: 0","            )","        ","        XCTAssertEqual(egldTokenReserve, 99_906_000)","    }","    ","    func testFlipSingleUsdc() throws {","        try self.initContract()","        try self.setupUsdc()","        try self.flipSingleUsdc(amount: 100_000)","        ","        let storageController = self.instantiateController(","            StorageController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        let usdcTokenReserve = try storageController","            .getTokenReserve(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                tokenNonce: 0","            )","        ","        XCTAssertEqual(usdcTokenReserve, 99_906_000)","    }","    ","    func testFlipTooHighBetAbsoluteValue() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 100_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let gameController = self.instantiateController(GameController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try gameController.flip(","                transactionInput: ContractCallTransactionInput(","                    callerAddress: PLAYER_ADDRESS,","                    egldValue: 1_500","                )","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Bet is too high. Maximum allowed bet: 1000\"))","        }","    }","    ","    func testFlipTooHighBetPercent() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 10,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let gameController = self.instantiateController(GameController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try gameController.flip(","                transactionInput: ContractCallTransactionInput(","                    callerAddress: PLAYER_ADDRESS,","                    egldValue: 150_000","                )","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Bet is too high. Maximum allowed bet: 100000\"))","        }","    }","    ","    func testSetMaximumBet() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBet = try storageController.getMaximumBet(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBet, 100)","    }","    ","    func testSetMaximumBetPercent() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBetPercent = try storageController.getMaximumBetPercent(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBetPercent, 100)","    }","    ","    func testIncreaseEgldReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 1_000","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        ","        XCTAssertEqual(tokenReserve, 1_000)","        XCTAssertEqual(contractBalance, 1_000)","    }","    ","    func testIncreaseUsdcReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 1_000","                    )","                ]","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        ","        XCTAssertEqual(tokenReserve, 1_000)","        XCTAssertEqual(contractBalance, 1_000)","    }","    ","    func testWithdrawEgldReserve() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.withdrawReserve(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 10_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        let ownerBalance = self.getAccount(address: OWNER_ADDRESS)!.balance","        ","        XCTAssertEqual(tokenReserve, 90_000_000)","        XCTAssertEqual(contractBalance, 90_000_000)","        XCTAssertEqual(ownerBalance, 10_000_000)","    }","    ","    func testWithdrawUsdcReserve() throws {","        try self.initContract()","        try self.setupUsdc()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.withdrawReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 10_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        let ownerBalance = self.getAccount(address: OWNER_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        ","        XCTAssertEqual(tokenReserve, 90_000_000)","        XCTAssertEqual(contractBalance, 90_000_000)","        XCTAssertEqual(ownerBalance, 10_000_000)","    }","","    ","    func testSetMaximumBetNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBet(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testSetMaximumBetPercentNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBetPercent(","                tokenIdentifier: .egld,","                nonce: 0,","                percent: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testIncreaseReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.increaseReserve()","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testWithdrawReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.withdrawReserve(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 100","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    private func initContract() throws {","        try self.deployContract(","            at: CONTRACT_ADDRESS,","            arguments: [","               500,","               100,","               1","            ],","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","    }","    ","    private func setupEgld() throws {","        let adminController = self.instantiateController(","            AdminController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 100_000_000","            )","        )","    }","    ","    private func setupUsdc() throws {","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 100_000_000","                    )","                ]","            )","        )","    }","    ","    private func flipSingleEgld(","        amount: BigUint","    ) throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.flip(","            transactionInput: ContractCallTransactionInput(","                callerAddress: PLAYER_ADDRESS,","                egldValue: amount","            )","        )","    }","    ","    private func flipSingleUsdc(amount: BigUint) throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.flip(","            transactionInput: ContractCallTransactionInput(","                callerAddress: PLAYER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: amount","                    )","                ]","            )","        )","    }","    ","    private func bounty() throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.bounty(","            transactionInput: ContractCallTransactionInput(","                callerAddress: BOUNTY_ADDRESS","            )","        )","    }","}"],"highlights":[],"syntax":"swift","fileType":"swift","identifier":"FlipContractTestTheGameSection3Step8.swift"},"doc://SpaceKit/tutorials/SpaceKit/FlipContractTestAdmin#Verify-That-Only-the-Owner-Can-Access-Admin-Endpoints":{"url":"\/tutorials\/spacekit\/flipcontracttestadmin#Verify-That-Only-the-Owner-Can-Access-Admin-Endpoints","kind":"section","type":"section","role":"pseudoSymbol","title":"Verify That Only the Owner Can Access Admin Endpoints","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractTestAdmin#Verify-That-Only-the-Owner-Can-Access-Admin-Endpoints","abstract":[{"type":"text","text":"Admin endpoints are critical to the contract’s integrity. They not only control configuration parameters, but also grant access to withdraw the contract’s token reserves."}]},"doc://SpaceKit/tutorials/SpaceKit/OperationsOnFungibleTokens#Assign-Mint-and-Burn-Roles":{"abstract":[{"type":"text","text":"Fungible tokens function similarly to traditional currencies, making them the simplest type of token to work with."}],"role":"pseudoSymbol","url":"\/tutorials\/spacekit\/operationsonfungibletokens#Assign-Mint-and-Burn-Roles","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnFungibleTokens#Assign-Mint-and-Burn-Roles","kind":"section","type":"section","title":"Assign Mint and Burn Roles"},"doc://SpaceKit/tutorials/SpaceKit/Create-and-Manage-Tokens/Enhancing-Contracts-with-Token-Attributes":{"abstract":[],"role":"article","kind":"article","url":"\/tutorials\/spacekit\/create-and-manage-tokens\/enhancing-contracts-with-token-attributes","type":"topic","title":"Enhancing Contracts with Token Attributes","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Create-and-Manage-Tokens\/Enhancing-Contracts-with-Token-Attributes"},"FlipContractTestTheGameSection2Step9.swift":{"syntax":"swift","fileType":"swift","identifier":"FlipContractTestTheGameSection2Step9.swift","content":["import SpaceKitTesting","import Flip","","private let PLAYER_ADDRESS = \"player\"","private let BOUNTY_ADDRESS = \"bounty\"","private let OWNER_ADDRESS = \"owner\"","private let CONTRACT_ADDRESS = \"contract\"","private let USDC_TOKEN_IDENTIFIER_STRING = \"USDC-abcdef\"","private var USDC_TOKEN_IDENTIFIER: TokenIdentifier {","    \"\\(USDC_TOKEN_IDENTIFIER_STRING)\"","}","","final class FlipTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: PLAYER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: BOUNTY_ADDRESS,","                balance: 0","            ),","            WorldAccount(","                address: OWNER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: CONTRACT_ADDRESS,","                balance: 0,","                controllers: [","                    AdminController.self,","                    GameController.self,","                    StorageController.self","                ]","            )","        ]","    }","    ","    func testInitEgld() throws {","        try self.initContract()","        try self.setupEgld()","    }","    ","    func testInitUsdc() throws {","        try self.initContract()","        try self.setupUsdc()","    }","    ","    func testFlipTooHighBetAbsoluteValue() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 100_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let gameController = self.instantiateController(GameController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try gameController.flip(","                transactionInput: ContractCallTransactionInput(","                    callerAddress: PLAYER_ADDRESS,","                    egldValue: 1_500","                )","            )","            ","            XCTFail()","        } catch {","            ","        }","    }","    ","    func testSetMaximumBet() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBet = try storageController.getMaximumBet(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBet, 100)","    }","    ","    func testSetMaximumBetPercent() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBetPercent = try storageController.getMaximumBetPercent(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBetPercent, 100)","    }","    ","    func testIncreaseEgldReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 1_000","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        ","        XCTAssertEqual(tokenReserve, 1_000)","        XCTAssertEqual(contractBalance, 1_000)","    }","    ","    func testIncreaseUsdcReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 1_000","                    )","                ]","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        ","        XCTAssertEqual(tokenReserve, 1_000)","        XCTAssertEqual(contractBalance, 1_000)","    }","    ","    func testWithdrawEgldReserve() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.withdrawReserve(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 10_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        let ownerBalance = self.getAccount(address: OWNER_ADDRESS)!.balance","        ","        XCTAssertEqual(tokenReserve, 90_000_000)","        XCTAssertEqual(contractBalance, 90_000_000)","        XCTAssertEqual(ownerBalance, 10_000_000)","    }","    ","    func testWithdrawUsdcReserve() throws {","        try self.initContract()","        try self.setupUsdc()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.withdrawReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 10_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        let ownerBalance = self.getAccount(address: OWNER_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        ","        XCTAssertEqual(tokenReserve, 90_000_000)","        XCTAssertEqual(contractBalance, 90_000_000)","        XCTAssertEqual(ownerBalance, 10_000_000)","    }","","    ","    func testSetMaximumBetNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBet(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testSetMaximumBetPercentNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBetPercent(","                tokenIdentifier: .egld,","                nonce: 0,","                percent: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testIncreaseReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.increaseReserve()","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testWithdrawReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.withdrawReserve(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 100","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    private func initContract() throws {","        try self.deployContract(","            at: CONTRACT_ADDRESS,","            arguments: [","               500,","               100,","               1","            ],","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","    }","    ","    private func setupEgld() throws {","        let adminController = self.instantiateController(","            AdminController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 100_000_000","            )","        )","    }","    ","    private func setupUsdc() throws {","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 100_000_000","                    )","                ]","            )","        )","    }","    ","    private func flipSingleEgld(","        amount: BigUint","    ) throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.flip(","            transactionInput: ContractCallTransactionInput(","                callerAddress: PLAYER_ADDRESS,","                egldValue: amount","            )","        )","    }","    ","    private func flipSingleUsdc(amount: BigUint) throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.flip(","            transactionInput: ContractCallTransactionInput(","                callerAddress: PLAYER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: amount","                    )","                ]","            )","        )","    }","    ","    private func bounty() throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.bounty(","            transactionInput: ContractCallTransactionInput(","                callerAddress: BOUNTY_ADDRESS","            )","        )","    }","}"],"fileName":"FlipTest.swift","type":"file","highlights":[{"line":99},{"line":100}]},"doc://SpaceKit/tutorials/SpaceKit/OperationsOnNonFungibleTokens#Assign-Create-AddQuantity-and-Burn-Roles":{"url":"\/tutorials\/spacekit\/operationsonnonfungibletokens#Assign-Create-AddQuantity-and-Burn-Roles","kind":"section","type":"section","role":"pseudoSymbol","title":"Assign Create, AddQuantity, and Burn Roles","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnNonFungibleTokens#Assign-Create-AddQuantity-and-Burn-Roles","abstract":[{"text":"Non-fungible tokens (NFTs) are unique digital assets that cannot be interchanged. Each NFT is associated with a unique identifier, known as a nonce. You can think of it like an airline ticket—each ticket is assigned to a specific passenger, with individual preferences and details.","type":"text"}]},"FlipContractTestTheGameSection3Step4.swift":{"fileName":"FlipTest.swift","type":"file","content":["import SpaceKitTesting","import Flip","","private let PLAYER_ADDRESS = \"player\"","private let BOUNTY_ADDRESS = \"bounty\"","private let OWNER_ADDRESS = \"owner\"","private let CONTRACT_ADDRESS = \"contract\"","private let USDC_TOKEN_IDENTIFIER_STRING = \"USDC-abcdef\"","private var USDC_TOKEN_IDENTIFIER: TokenIdentifier {","    \"\\(USDC_TOKEN_IDENTIFIER_STRING)\"","}","","final class FlipTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: PLAYER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: BOUNTY_ADDRESS,","                balance: 0","            ),","            WorldAccount(","                address: OWNER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: CONTRACT_ADDRESS,","                balance: 0,","                controllers: [","                    AdminController.self,","                    GameController.self,","                    StorageController.self","                ]","            )","        ]","    }","    ","    func testInitEgld() throws {","        try self.initContract()","        try self.setupEgld()","    }","    ","    func testInitUsdc() throws {","        try self.initContract()","        try self.setupUsdc()","    }","    ","    func testFlipSingleEgld() throws {","        try self.initContract()","        try self.setupEgld()","        try self.flipSingleEgld(amount: 100_000)","    }","    ","    func testFlipTooHighBetAbsoluteValue() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 100_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let gameController = self.instantiateController(GameController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try gameController.flip(","                transactionInput: ContractCallTransactionInput(","                    callerAddress: PLAYER_ADDRESS,","                    egldValue: 1_500","                )","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Bet is too high. Maximum allowed bet: 1000\"))","        }","    }","    ","    func testFlipTooHighBetPercent() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 10,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let gameController = self.instantiateController(GameController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try gameController.flip(","                transactionInput: ContractCallTransactionInput(","                    callerAddress: PLAYER_ADDRESS,","                    egldValue: 150_000","                )","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Bet is too high. Maximum allowed bet: 100000\"))","        }","    }","    ","    func testSetMaximumBet() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBet = try storageController.getMaximumBet(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBet, 100)","    }","    ","    func testSetMaximumBetPercent() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBetPercent = try storageController.getMaximumBetPercent(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBetPercent, 100)","    }","    ","    func testIncreaseEgldReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 1_000","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        ","        XCTAssertEqual(tokenReserve, 1_000)","        XCTAssertEqual(contractBalance, 1_000)","    }","    ","    func testIncreaseUsdcReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 1_000","                    )","                ]","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        ","        XCTAssertEqual(tokenReserve, 1_000)","        XCTAssertEqual(contractBalance, 1_000)","    }","    ","    func testWithdrawEgldReserve() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.withdrawReserve(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 10_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        let ownerBalance = self.getAccount(address: OWNER_ADDRESS)!.balance","        ","        XCTAssertEqual(tokenReserve, 90_000_000)","        XCTAssertEqual(contractBalance, 90_000_000)","        XCTAssertEqual(ownerBalance, 10_000_000)","    }","    ","    func testWithdrawUsdcReserve() throws {","        try self.initContract()","        try self.setupUsdc()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.withdrawReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 10_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        let ownerBalance = self.getAccount(address: OWNER_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        ","        XCTAssertEqual(tokenReserve, 90_000_000)","        XCTAssertEqual(contractBalance, 90_000_000)","        XCTAssertEqual(ownerBalance, 10_000_000)","    }","","    ","    func testSetMaximumBetNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBet(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testSetMaximumBetPercentNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBetPercent(","                tokenIdentifier: .egld,","                nonce: 0,","                percent: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testIncreaseReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.increaseReserve()","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testWithdrawReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.withdrawReserve(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 100","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    private func initContract() throws {","        try self.deployContract(","            at: CONTRACT_ADDRESS,","            arguments: [","               500,","               100,","               1","            ],","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","    }","    ","    private func setupEgld() throws {","        let adminController = self.instantiateController(","            AdminController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 100_000_000","            )","        )","    }","    ","    private func setupUsdc() throws {","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 100_000_000","                    )","                ]","            )","        )","    }","    ","    private func flipSingleEgld(","        amount: BigUint","    ) throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.flip(","            transactionInput: ContractCallTransactionInput(","                callerAddress: PLAYER_ADDRESS,","                egldValue: amount","            )","        )","    }","    ","    private func flipSingleUsdc(amount: BigUint) throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.flip(","            transactionInput: ContractCallTransactionInput(","                callerAddress: PLAYER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: amount","                    )","                ]","            )","        )","    }","    ","    private func bounty() throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.bounty(","            transactionInput: ContractCallTransactionInput(","                callerAddress: BOUNTY_ADDRESS","            )","        )","    }","}"],"highlights":[{"line":69}],"syntax":"swift","fileType":"swift","identifier":"FlipContractTestTheGameSection3Step4.swift"},"doc://SpaceKit/tutorials/SpaceKit/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract":{"type":"section","kind":"section","url":"\/tutorials\/spacekit\/installingtools#Initializing-and-Compiling-Your-First-Smart-Contract","abstract":[{"text":"Before writing your first smart contract with SpaceKit, ensure you have the necessary tools installed.","type":"text"}],"title":"Initializing and Compiling Your First Smart Contract","role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract"},"doc://SpaceKit/tutorials/SpaceKit/FlipContractWriteTheGame#Implement-the-flip-Endpoint":{"kind":"section","abstract":[{"type":"text","text":"With the storage and administrative endpoints complete, it’s time to build the core gameplay mechanics."}],"type":"section","url":"\/tutorials\/spacekit\/flipcontractwritethegame#Implement-the-flip-Endpoint","role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteTheGame#Implement-the-flip-Endpoint","title":"Implement the flip Endpoint"},"doc://SpaceKit/tutorials/SpaceKit/GetInfo":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo","role":"project","url":"\/tutorials\/spacekit\/getinfo","abstract":[{"type":"text","text":"Many smart contracts rely on contextual data to execute their operations effectively. This data can include input payments, the caller’s address, the current time, the balance of a specific account, or even the contract owner."}],"title":"Retrieving Information from the Blockchain","type":"topic","estimatedTime":"10min","kind":"project"},"doc://SpaceKit/tutorials/SpaceKit/StoreValues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage","url":"\/tutorials\/spacekit\/storevalues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage","role":"pseudoSymbol","type":"section","kind":"section","abstract":[{"text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory.","type":"text"}],"title":"Leveraging @Mapping for Dynamic Key-Value Storage"},"doc://SpaceKit/tutorials/SpaceKit/FlipContractIntro#Set-Up-the-Project":{"url":"\/tutorials\/spacekit\/flipcontractintro#Set-Up-the-Project","kind":"section","type":"section","role":"pseudoSymbol","title":"Set Up the Project","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractIntro#Set-Up-the-Project","abstract":[{"type":"text","text":"In this tutorial, you’ll write and test a complete smart contract that relies on random number generation to implement a coin flip mechanic. Players wager a chosen amount of any token and face a 50% chance of doubling their bet—or losing it. A small fee is deducted from each wager and sent to the developer’s wallet."}]},"FlipContractTestTheGameSection1Step4.swift":{"syntax":"swift","fileType":"swift","identifier":"FlipContractTestTheGameSection1Step4.swift","content":["import SpaceKitTesting","import Flip","","private let PLAYER_ADDRESS = \"player\"","private let BOUNTY_ADDRESS = \"bounty\"","private let OWNER_ADDRESS = \"owner\"","private let CONTRACT_ADDRESS = \"contract\"","private let USDC_TOKEN_IDENTIFIER_STRING = \"USDC-abcdef\"","private var USDC_TOKEN_IDENTIFIER: TokenIdentifier {","    \"\\(USDC_TOKEN_IDENTIFIER_STRING)\"","}","","final class FlipTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: PLAYER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: BOUNTY_ADDRESS,","                balance: 0","            ),","            WorldAccount(","                address: OWNER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: CONTRACT_ADDRESS,","                balance: 0,","                controllers: [","                    AdminController.self,","                    GameController.self,","                    StorageController.self","                ]","            )","        ]","    }","    ","    func testInitEgld() throws {","        try self.initContract()","        try self.setupEgld()","    }","    ","    func testInitUsdc() throws {","        try self.initContract()","        try self.setupUsdc()","    }","    ","    func testSetMaximumBet() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBet = try storageController.getMaximumBet(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBet, 100)","    }","    ","    func testSetMaximumBetPercent() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBetPercent = try storageController.getMaximumBetPercent(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBetPercent, 100)","    }","    ","    func testIncreaseEgldReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 1_000","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        ","        XCTAssertEqual(tokenReserve, 1_000)","        XCTAssertEqual(contractBalance, 1_000)","    }","    ","    func testIncreaseUsdcReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 1_000","                    )","                ]","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        ","        XCTAssertEqual(tokenReserve, 1_000)","        XCTAssertEqual(contractBalance, 1_000)","    }","    ","    func testWithdrawEgldReserve() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.withdrawReserve(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 10_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        let ownerBalance = self.getAccount(address: OWNER_ADDRESS)!.balance","        ","        XCTAssertEqual(tokenReserve, 90_000_000)","        XCTAssertEqual(contractBalance, 90_000_000)","        XCTAssertEqual(ownerBalance, 10_000_000)","    }","    ","    func testWithdrawUsdcReserve() throws {","        try self.initContract()","        try self.setupUsdc()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.withdrawReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 10_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        let ownerBalance = self.getAccount(address: OWNER_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        ","        XCTAssertEqual(tokenReserve, 90_000_000)","        XCTAssertEqual(contractBalance, 90_000_000)","        XCTAssertEqual(ownerBalance, 10_000_000)","    }","","    ","    func testSetMaximumBetNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBet(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testSetMaximumBetPercentNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBetPercent(","                tokenIdentifier: .egld,","                nonce: 0,","                percent: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testIncreaseReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.increaseReserve()","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testWithdrawReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.withdrawReserve(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 100","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    private func initContract() throws {","        try self.deployContract(","            at: CONTRACT_ADDRESS,","            arguments: [","               500,","               100,","               1","            ],","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","    }","    ","    private func setupEgld() throws {","        let adminController = self.instantiateController(","            AdminController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 100_000_000","            )","        )","    }","    ","    private func setupUsdc() throws {","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 100_000_000","                    )","                ]","            )","        )","    }","    ","    private func flipSingleEgld(","        amount: BigUint","    ) throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.flip(","            transactionInput: ContractCallTransactionInput(","                callerAddress: PLAYER_ADDRESS,","                egldValue: amount","            )","        )","    }","}"],"fileName":"FlipTest.swift","type":"file","highlights":[{"line":381},{"line":382},{"line":383},{"line":384},{"line":385},{"line":386},{"line":387}]},"FlipContractTestTheGameSection1Step7.swift":{"fileName":"FlipTest.swift","type":"file","content":["import SpaceKitTesting","import Flip","","private let PLAYER_ADDRESS = \"player\"","private let BOUNTY_ADDRESS = \"bounty\"","private let OWNER_ADDRESS = \"owner\"","private let CONTRACT_ADDRESS = \"contract\"","private let USDC_TOKEN_IDENTIFIER_STRING = \"USDC-abcdef\"","private var USDC_TOKEN_IDENTIFIER: TokenIdentifier {","    \"\\(USDC_TOKEN_IDENTIFIER_STRING)\"","}","","final class FlipTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: PLAYER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: BOUNTY_ADDRESS,","                balance: 0","            ),","            WorldAccount(","                address: OWNER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: CONTRACT_ADDRESS,","                balance: 0,","                controllers: [","                    AdminController.self,","                    GameController.self,","                    StorageController.self","                ]","            )","        ]","    }","    ","    func testInitEgld() throws {","        try self.initContract()","        try self.setupEgld()","    }","    ","    func testInitUsdc() throws {","        try self.initContract()","        try self.setupUsdc()","    }","    ","    func testSetMaximumBet() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBet = try storageController.getMaximumBet(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBet, 100)","    }","    ","    func testSetMaximumBetPercent() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBetPercent = try storageController.getMaximumBetPercent(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBetPercent, 100)","    }","    ","    func testIncreaseEgldReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 1_000","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        ","        XCTAssertEqual(tokenReserve, 1_000)","        XCTAssertEqual(contractBalance, 1_000)","    }","    ","    func testIncreaseUsdcReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 1_000","                    )","                ]","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        ","        XCTAssertEqual(tokenReserve, 1_000)","        XCTAssertEqual(contractBalance, 1_000)","    }","    ","    func testWithdrawEgldReserve() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.withdrawReserve(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 10_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        let ownerBalance = self.getAccount(address: OWNER_ADDRESS)!.balance","        ","        XCTAssertEqual(tokenReserve, 90_000_000)","        XCTAssertEqual(contractBalance, 90_000_000)","        XCTAssertEqual(ownerBalance, 10_000_000)","    }","    ","    func testWithdrawUsdcReserve() throws {","        try self.initContract()","        try self.setupUsdc()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.withdrawReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 10_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        let ownerBalance = self.getAccount(address: OWNER_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        ","        XCTAssertEqual(tokenReserve, 90_000_000)","        XCTAssertEqual(contractBalance, 90_000_000)","        XCTAssertEqual(ownerBalance, 10_000_000)","    }","","    ","    func testSetMaximumBetNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBet(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testSetMaximumBetPercentNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBetPercent(","                tokenIdentifier: .egld,","                nonce: 0,","                percent: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testIncreaseReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.increaseReserve()","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testWithdrawReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.withdrawReserve(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 100","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    private func initContract() throws {","        try self.deployContract(","            at: CONTRACT_ADDRESS,","            arguments: [","               500,","               100,","               1","            ],","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","    }","    ","    private func setupEgld() throws {","        let adminController = self.instantiateController(","            AdminController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 100_000_000","            )","        )","    }","    ","    private func setupUsdc() throws {","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 100_000_000","                    )","                ]","            )","        )","    }","    ","    private func flipSingleEgld(","        amount: BigUint","    ) throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.flip(","            transactionInput: ContractCallTransactionInput(","                callerAddress: PLAYER_ADDRESS,","                egldValue: amount","            )","        )","    }","    ","    private func flipSingleUsdc(amount: BigUint) throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.flip(","            transactionInput: ContractCallTransactionInput(","                callerAddress: PLAYER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: amount","                    )","                ]","            )","        )","    }","    ","    private func bounty() throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","    }","}"],"highlights":[{"line":411},{"line":412},{"line":413},{"line":414}],"syntax":"swift","fileType":"swift","identifier":"FlipContractTestTheGameSection1Step7.swift"},"FlipContractTestTheGameSection5Step11.swift":{"syntax":"swift","fileType":"swift","identifier":"FlipContractTestTheGameSection5Step11.swift","content":["import SpaceKitTesting","import Flip","","private let PLAYER_ADDRESS = \"player\"","private let BOUNTY_ADDRESS = \"bounty\"","private let OWNER_ADDRESS = \"owner\"","private let CONTRACT_ADDRESS = \"contract\"","private let USDC_TOKEN_IDENTIFIER_STRING = \"USDC-abcdef\"","private var USDC_TOKEN_IDENTIFIER: TokenIdentifier {","    \"\\(USDC_TOKEN_IDENTIFIER_STRING)\"","}","","final class FlipTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: PLAYER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: BOUNTY_ADDRESS,","                balance: 0","            ),","            WorldAccount(","                address: OWNER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: CONTRACT_ADDRESS,","                balance: 0,","                controllers: [","                    AdminController.self,","                    GameController.self,","                    StorageController.self","                ]","            )","        ]","    }","    ","    func testInitEgld() throws {","        try self.initContract()","        try self.setupEgld()","    }","    ","    func testInitUsdc() throws {","        try self.initContract()","        try self.setupUsdc()","    }","    ","    func testFlipSingleEgld() throws {","        try self.initContract()","        try self.setupEgld()","        try self.flipSingleEgld(amount: 100_000)","        ","        let storageController = self.instantiateController(","            StorageController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        let egldTokenReserve = try storageController","            .getTokenReserve(","                tokenIdentifier: .egld,","                tokenNonce: 0","            )","        ","        XCTAssertEqual(egldTokenReserve, 99_906_000)","    }","    ","    func testFlipSingleUsdc() throws {","        try self.initContract()","        try self.setupUsdc()","        try self.flipSingleUsdc(amount: 100_000)","        ","        let storageController = self.instantiateController(","            StorageController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        let usdcTokenReserve = try storageController","            .getTokenReserve(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                tokenNonce: 0","            )","        ","        XCTAssertEqual(usdcTokenReserve, 99_906_000)","    }","    ","    func testBountyTooEarly() throws {","        try self.initContract()","        try self.setupEgld()","        try self.flipSingleEgld(amount: 100_000)","        ","        let gameController = self.instantiateController(GameController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try gameController.bounty(","                transactionInput: ContractCallTransactionInput(","                    callerAddress: BOUNTY_ADDRESS","                )","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"No flip can be bounty.\"))","        }","    }","    ","    func testBountySingleWinEgld() throws {","        try self.initContract()","        try self.setupEgld()","        try self.flipSingleEgld(amount: 100_000)","        ","        let blockRandomSeed = Array(repeating: UInt8(0), count: 47) + [6]","        ","        self.setBlockInfos(","            nonce: 1,","            randomSeed: Data(blockRandomSeed)","        )","        ","        try self.bounty()","        ","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        let flipContractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        let ownerBalance = self.getAccount(address: OWNER_ADDRESS)!.balance","        let playerBalance = self.getAccount(address: PLAYER_ADDRESS)!.balance","        let bountyBalance = self.getAccount(address: BOUNTY_ADDRESS)!.balance","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(flipContractBalance, 99_906_000)","        XCTAssertEqual(ownerBalance, 5_000)","        XCTAssertEqual(playerBalance, 100_088_000)","        XCTAssertEqual(bountyBalance, 1_000)","        XCTAssertEqual(tokenReserve, 99_906_000)","    }","    ","    func testBountySingleWinUsdc() throws {","        try self.initContract()","        try self.setupUsdc()","        try self.flipSingleUsdc(amount: 100_000)","        ","        let blockRandomSeed = Array(repeating: UInt8(0), count: 47) + [6]","        ","        self.setBlockInfos(","            nonce: 1,","            randomSeed: Data(blockRandomSeed)","        )","        ","        try self.bounty()","        ","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        let flipContractBalance = self.getAccount(address: CONTRACT_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        let ownerBalance = self.getAccount(address: OWNER_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        let playerBalance = self.getAccount(address: PLAYER_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        let bountyBalance = self.getAccount(address: BOUNTY_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(flipContractBalance, 99_906_000)","        XCTAssertEqual(ownerBalance, 5_000)","        XCTAssertEqual(playerBalance, 100_088_000)","        XCTAssertEqual(bountyBalance, 1_000)","        XCTAssertEqual(tokenReserve, 99_906_000)","    }","    ","    func testBountySingleLoseEgld() throws {","        try self.initContract()","        try self.setupEgld()","        try self.flipSingleEgld(amount: 100_000)","        ","        let blockRandomSeed = Array(repeating: UInt8(0), count: 47) + [4]","        ","        self.setBlockInfos(","            nonce: 1,","            randomSeed: Data(blockRandomSeed)","        )","        ","        try self.bounty()","        ","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        let flipContractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        let ownerBalance = self.getAccount(address: OWNER_ADDRESS)!.balance","        let playerBalance = self.getAccount(address: PLAYER_ADDRESS)!.balance","        let bountyBalance = self.getAccount(address: BOUNTY_ADDRESS)!.balance","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(flipContractBalance, 100_094_000)","        XCTAssertEqual(ownerBalance, 5_000)","        XCTAssertEqual(playerBalance, 99_900_000)","        XCTAssertEqual(bountyBalance, 1_000)","        XCTAssertEqual(tokenReserve, 100_094_000)","    }","","    func testFlipTooHighBetAbsoluteValue() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 100_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let gameController = self.instantiateController(GameController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try gameController.flip(","                transactionInput: ContractCallTransactionInput(","                    callerAddress: PLAYER_ADDRESS,","                    egldValue: 1_500","                )","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Bet is too high. Maximum allowed bet: 1000\"))","        }","    }","    ","    func testFlipTooHighBetPercent() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 10,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let gameController = self.instantiateController(GameController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try gameController.flip(","                transactionInput: ContractCallTransactionInput(","                    callerAddress: PLAYER_ADDRESS,","                    egldValue: 150_000","                )","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Bet is too high. Maximum allowed bet: 100000\"))","        }","    }","    ","    func testSetMaximumBet() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBet = try storageController.getMaximumBet(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBet, 100)","    }","    ","    func testSetMaximumBetPercent() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBetPercent = try storageController.getMaximumBetPercent(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBetPercent, 100)","    }","    ","    func testIncreaseEgldReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 1_000","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        ","        XCTAssertEqual(tokenReserve, 1_000)","        XCTAssertEqual(contractBalance, 1_000)","    }","    ","    func testIncreaseUsdcReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 1_000","                    )","                ]","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        ","        XCTAssertEqual(tokenReserve, 1_000)","        XCTAssertEqual(contractBalance, 1_000)","    }","    ","    func testWithdrawEgldReserve() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.withdrawReserve(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 10_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        let ownerBalance = self.getAccount(address: OWNER_ADDRESS)!.balance","        ","        XCTAssertEqual(tokenReserve, 90_000_000)","        XCTAssertEqual(contractBalance, 90_000_000)","        XCTAssertEqual(ownerBalance, 10_000_000)","    }","    ","    func testWithdrawUsdcReserve() throws {","        try self.initContract()","        try self.setupUsdc()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.withdrawReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 10_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        let ownerBalance = self.getAccount(address: OWNER_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        ","        XCTAssertEqual(tokenReserve, 90_000_000)","        XCTAssertEqual(contractBalance, 90_000_000)","        XCTAssertEqual(ownerBalance, 10_000_000)","    }","","    ","    func testSetMaximumBetNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBet(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testSetMaximumBetPercentNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBetPercent(","                tokenIdentifier: .egld,","                nonce: 0,","                percent: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testIncreaseReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.increaseReserve()","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testWithdrawReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.withdrawReserve(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 100","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    private func initContract() throws {","        try self.deployContract(","            at: CONTRACT_ADDRESS,","            arguments: [","               500,","               100,","               1","            ],","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","    }","    ","    private func setupEgld() throws {","        let adminController = self.instantiateController(","            AdminController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 100_000_000","            )","        )","    }","    ","    private func setupUsdc() throws {","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 100_000_000","                    )","                ]","            )","        )","    }","    ","    private func flipSingleEgld(","        amount: BigUint","    ) throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.flip(","            transactionInput: ContractCallTransactionInput(","                callerAddress: PLAYER_ADDRESS,","                egldValue: amount","            )","        )","    }","    ","    private func flipSingleUsdc(amount: BigUint) throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.flip(","            transactionInput: ContractCallTransactionInput(","                callerAddress: PLAYER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: amount","                    )","                ]","            )","        )","    }","    ","    private func bounty() throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.bounty(","            transactionInput: ContractCallTransactionInput(","                callerAddress: BOUNTY_ADDRESS","            )","        )","    }","}"],"fileName":"FlipTest.swift","type":"file","highlights":[{"line":205},{"line":206},{"line":207},{"line":208},{"line":209},{"line":210},{"line":211},{"line":212},{"line":213},{"line":214},{"line":215},{"line":216},{"line":217},{"line":218},{"line":219},{"line":220},{"line":221},{"line":222},{"line":223},{"line":224},{"line":225},{"line":226},{"line":227},{"line":228},{"line":229},{"line":230},{"line":231},{"line":232},{"line":233},{"line":234},{"line":235},{"line":236}]},"doc://SpaceKit/tutorials/SpaceKit/Build-a-Coin-Flip-Contract/Build-a-Coin-Flip-Smart-Contract":{"url":"\/tutorials\/spacekit\/build-a-coin-flip-contract\/build-a-coin-flip-smart-contract","type":"topic","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Build-a-Coin-Flip-Contract\/Build-a-Coin-Flip-Smart-Contract","kind":"article","abstract":[],"role":"article","title":"Build a Coin Flip Smart Contract"},"doc://SpaceKit/tutorials/SpaceKit/Deep-Dive-into-SpaceKit-Concepts/Calling-Contracts-Across-Shards":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Calling-Contracts-Across-Shards","title":"Calling Contracts Across Shards","kind":"article","url":"\/tutorials\/spacekit\/deep-dive-into-spacekit-concepts\/calling-contracts-across-shards","abstract":[],"type":"topic","role":"article"},"FlipContractTestTheGameSection2Step4.swift":{"fileName":"FlipTest.swift","type":"file","content":["import SpaceKitTesting","import Flip","","private let PLAYER_ADDRESS = \"player\"","private let BOUNTY_ADDRESS = \"bounty\"","private let OWNER_ADDRESS = \"owner\"","private let CONTRACT_ADDRESS = \"contract\"","private let USDC_TOKEN_IDENTIFIER_STRING = \"USDC-abcdef\"","private var USDC_TOKEN_IDENTIFIER: TokenIdentifier {","    \"\\(USDC_TOKEN_IDENTIFIER_STRING)\"","}","","final class FlipTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: PLAYER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: BOUNTY_ADDRESS,","                balance: 0","            ),","            WorldAccount(","                address: OWNER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: CONTRACT_ADDRESS,","                balance: 0,","                controllers: [","                    AdminController.self,","                    GameController.self,","                    StorageController.self","                ]","            )","        ]","    }","    ","    func testInitEgld() throws {","        try self.initContract()","        try self.setupEgld()","    }","    ","    func testInitUsdc() throws {","        try self.initContract()","        try self.setupUsdc()","    }","    ","    func testFlipTooHighBetAbsoluteValue() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","    }","    ","    func testSetMaximumBet() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBet = try storageController.getMaximumBet(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBet, 100)","    }","    ","    func testSetMaximumBetPercent() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBetPercent = try storageController.getMaximumBetPercent(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBetPercent, 100)","    }","    ","    func testIncreaseEgldReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 1_000","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        ","        XCTAssertEqual(tokenReserve, 1_000)","        XCTAssertEqual(contractBalance, 1_000)","    }","    ","    func testIncreaseUsdcReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 1_000","                    )","                ]","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        ","        XCTAssertEqual(tokenReserve, 1_000)","        XCTAssertEqual(contractBalance, 1_000)","    }","    ","    func testWithdrawEgldReserve() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.withdrawReserve(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 10_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        let ownerBalance = self.getAccount(address: OWNER_ADDRESS)!.balance","        ","        XCTAssertEqual(tokenReserve, 90_000_000)","        XCTAssertEqual(contractBalance, 90_000_000)","        XCTAssertEqual(ownerBalance, 10_000_000)","    }","    ","    func testWithdrawUsdcReserve() throws {","        try self.initContract()","        try self.setupUsdc()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.withdrawReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 10_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        let ownerBalance = self.getAccount(address: OWNER_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        ","        XCTAssertEqual(tokenReserve, 90_000_000)","        XCTAssertEqual(contractBalance, 90_000_000)","        XCTAssertEqual(ownerBalance, 10_000_000)","    }","","    ","    func testSetMaximumBetNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBet(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testSetMaximumBetPercentNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBetPercent(","                tokenIdentifier: .egld,","                nonce: 0,","                percent: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testIncreaseReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.increaseReserve()","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testWithdrawReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.withdrawReserve(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 100","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    private func initContract() throws {","        try self.deployContract(","            at: CONTRACT_ADDRESS,","            arguments: [","               500,","               100,","               1","            ],","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","    }","    ","    private func setupEgld() throws {","        let adminController = self.instantiateController(","            AdminController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 100_000_000","            )","        )","    }","    ","    private func setupUsdc() throws {","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 100_000_000","                    )","                ]","            )","        )","    }","    ","    private func flipSingleEgld(","        amount: BigUint","    ) throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.flip(","            transactionInput: ContractCallTransactionInput(","                callerAddress: PLAYER_ADDRESS,","                egldValue: amount","            )","        )","    }","    ","    private func flipSingleUsdc(amount: BigUint) throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.flip(","            transactionInput: ContractCallTransactionInput(","                callerAddress: PLAYER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: amount","                    )","                ]","            )","        )","    }","    ","    private func bounty() throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.bounty(","            transactionInput: ContractCallTransactionInput(","                callerAddress: BOUNTY_ADDRESS","            )","        )","    }","}"],"highlights":[{"line":71},{"line":72},{"line":73},{"line":74},{"line":75},{"line":76},{"line":77},{"line":78},{"line":79}],"syntax":"swift","fileType":"swift","identifier":"FlipContractTestTheGameSection2Step4.swift"},"doc://SpaceKit/tutorials/SpaceKit":{"title":"Meet SpaceKit","abstract":[{"type":"text","text":"Discover how SpaceKit simplifies blockchain development using Swift. Dive into the world of Web3 with ease and efficiency."}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit","url":"\/tutorials\/spacekit","role":"overview","kind":"overview","type":"topic"},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges":{"title":"Handling Heap Allocation Challenges","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges","abstract":[{"text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}],"kind":"section","role":"pseudoSymbol","type":"section","url":"\/tutorials\/spacekit\/familiarizewithtypes#Handling-Heap-Allocation-Challenges"},"doc://SpaceKit/tutorials/SpaceKit/FlipContractInitTests#Create-Helper-Functions-to-Deploy-and-Configure-the-Contract":{"url":"\/tutorials\/spacekit\/flipcontractinittests#Create-Helper-Functions-to-Deploy-and-Configure-the-Contract","role":"pseudoSymbol","kind":"section","title":"Create Helper Functions to Deploy and Configure the Contract","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractInitTests#Create-Helper-Functions-to-Deploy-and-Configure-the-Contract","type":"section","abstract":[{"type":"text","text":"Smart contracts are permissionless programs that often manage valuable assets. Because of this, writing comprehensive tests for both successful and failure scenarios is essential."}]},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Creating-Your-Own-Types":{"title":"Creating Your Own Types","role":"pseudoSymbol","abstract":[{"text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}],"kind":"section","url":"\/tutorials\/spacekit\/familiarizewithtypes#Creating-Your-Own-Types","type":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Creating-Your-Own-Types"},"doc://SpaceKit/tutorials/SpaceKit/FlipContractInitTests":{"url":"\/tutorials\/spacekit\/flipcontractinittests","type":"topic","kind":"project","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractInitTests","estimatedTime":"20min","abstract":[{"text":"Smart contracts are permissionless programs that often manage valuable assets. Because of this, writing comprehensive tests for both successful and failure scenarios is essential.","type":"text"}],"title":"Set Up Testing in the SwiftVM","role":"project"},"FlipContractTestTheGameSection5Step5.swift":{"syntax":"swift","fileType":"swift","identifier":"FlipContractTestTheGameSection5Step5.swift","content":["import SpaceKitTesting","import Flip","","private let PLAYER_ADDRESS = \"player\"","private let BOUNTY_ADDRESS = \"bounty\"","private let OWNER_ADDRESS = \"owner\"","private let CONTRACT_ADDRESS = \"contract\"","private let USDC_TOKEN_IDENTIFIER_STRING = \"USDC-abcdef\"","private var USDC_TOKEN_IDENTIFIER: TokenIdentifier {","    \"\\(USDC_TOKEN_IDENTIFIER_STRING)\"","}","","final class FlipTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: PLAYER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: BOUNTY_ADDRESS,","                balance: 0","            ),","            WorldAccount(","                address: OWNER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: CONTRACT_ADDRESS,","                balance: 0,","                controllers: [","                    AdminController.self,","                    GameController.self,","                    StorageController.self","                ]","            )","        ]","    }","    ","    func testInitEgld() throws {","        try self.initContract()","        try self.setupEgld()","    }","    ","    func testInitUsdc() throws {","        try self.initContract()","        try self.setupUsdc()","    }","    ","    func testFlipSingleEgld() throws {","        try self.initContract()","        try self.setupEgld()","        try self.flipSingleEgld(amount: 100_000)","        ","        let storageController = self.instantiateController(","            StorageController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        let egldTokenReserve = try storageController","            .getTokenReserve(","                tokenIdentifier: .egld,","                tokenNonce: 0","            )","        ","        XCTAssertEqual(egldTokenReserve, 99_906_000)","    }","    ","    func testFlipSingleUsdc() throws {","        try self.initContract()","        try self.setupUsdc()","        try self.flipSingleUsdc(amount: 100_000)","        ","        let storageController = self.instantiateController(","            StorageController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        let usdcTokenReserve = try storageController","            .getTokenReserve(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                tokenNonce: 0","            )","        ","        XCTAssertEqual(usdcTokenReserve, 99_906_000)","    }","    ","    func testBountyTooEarly() throws {","        try self.initContract()","        try self.setupEgld()","        try self.flipSingleEgld(amount: 100_000)","        ","        let gameController = self.instantiateController(GameController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try gameController.bounty(","                transactionInput: ContractCallTransactionInput(","                    callerAddress: BOUNTY_ADDRESS","                )","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"No flip can be bounty.\"))","        }","    }","    ","    func testBountySingleWinEgld() throws {","        try self.initContract()","        try self.setupEgld()","        try self.flipSingleEgld(amount: 100_000)","        ","        let blockRandomSeed = Array(repeating: UInt8(0), count: 47) + [6]","        ","        self.setBlockInfos(","            nonce: 1,","            randomSeed: Data(blockRandomSeed)","        )","    }","    ","    func testFlipTooHighBetAbsoluteValue() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 100_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let gameController = self.instantiateController(GameController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try gameController.flip(","                transactionInput: ContractCallTransactionInput(","                    callerAddress: PLAYER_ADDRESS,","                    egldValue: 1_500","                )","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Bet is too high. Maximum allowed bet: 1000\"))","        }","    }","    ","    func testFlipTooHighBetPercent() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 10,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let gameController = self.instantiateController(GameController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try gameController.flip(","                transactionInput: ContractCallTransactionInput(","                    callerAddress: PLAYER_ADDRESS,","                    egldValue: 150_000","                )","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Bet is too high. Maximum allowed bet: 100000\"))","        }","    }","    ","    func testSetMaximumBet() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBet = try storageController.getMaximumBet(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBet, 100)","    }","    ","    func testSetMaximumBetPercent() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBetPercent = try storageController.getMaximumBetPercent(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBetPercent, 100)","    }","    ","    func testIncreaseEgldReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 1_000","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        ","        XCTAssertEqual(tokenReserve, 1_000)","        XCTAssertEqual(contractBalance, 1_000)","    }","    ","    func testIncreaseUsdcReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 1_000","                    )","                ]","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        ","        XCTAssertEqual(tokenReserve, 1_000)","        XCTAssertEqual(contractBalance, 1_000)","    }","    ","    func testWithdrawEgldReserve() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.withdrawReserve(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 10_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        let ownerBalance = self.getAccount(address: OWNER_ADDRESS)!.balance","        ","        XCTAssertEqual(tokenReserve, 90_000_000)","        XCTAssertEqual(contractBalance, 90_000_000)","        XCTAssertEqual(ownerBalance, 10_000_000)","    }","    ","    func testWithdrawUsdcReserve() throws {","        try self.initContract()","        try self.setupUsdc()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.withdrawReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 10_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        let ownerBalance = self.getAccount(address: OWNER_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        ","        XCTAssertEqual(tokenReserve, 90_000_000)","        XCTAssertEqual(contractBalance, 90_000_000)","        XCTAssertEqual(ownerBalance, 10_000_000)","    }","","    ","    func testSetMaximumBetNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBet(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testSetMaximumBetPercentNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBetPercent(","                tokenIdentifier: .egld,","                nonce: 0,","                percent: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testIncreaseReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.increaseReserve()","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testWithdrawReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.withdrawReserve(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 100","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    private func initContract() throws {","        try self.deployContract(","            at: CONTRACT_ADDRESS,","            arguments: [","               500,","               100,","               1","            ],","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","    }","    ","    private func setupEgld() throws {","        let adminController = self.instantiateController(","            AdminController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 100_000_000","            )","        )","    }","    ","    private func setupUsdc() throws {","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 100_000_000","                    )","                ]","            )","        )","    }","    ","    private func flipSingleEgld(","        amount: BigUint","    ) throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.flip(","            transactionInput: ContractCallTransactionInput(","                callerAddress: PLAYER_ADDRESS,","                egldValue: amount","            )","        )","    }","    ","    private func flipSingleUsdc(amount: BigUint) throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.flip(","            transactionInput: ContractCallTransactionInput(","                callerAddress: PLAYER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: amount","                    )","                ]","            )","        )","    }","    ","    private func bounty() throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.bounty(","            transactionInput: ContractCallTransactionInput(","                callerAddress: BOUNTY_ADDRESS","            )","        )","    }","}"],"fileName":"FlipTest.swift","type":"file","highlights":[{"line":130},{"line":131},{"line":132},{"line":133},{"line":134}]},"doc://SpaceKit/tutorials/SpaceKit/Deep-Dive-into-SpaceKit-Concepts/Persisting-Data-Across-Executions":{"title":"Persisting Data Across Executions","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Persisting-Data-Across-Executions","type":"topic","abstract":[],"kind":"article","role":"article","url":"\/tutorials\/spacekit\/deep-dive-into-spacekit-concepts\/persisting-data-across-executions"},"FlipContractTestTheGameSection2Step2.swift":{"fileName":"FlipTest.swift","type":"file","content":["import SpaceKitTesting","import Flip","","private let PLAYER_ADDRESS = \"player\"","private let BOUNTY_ADDRESS = \"bounty\"","private let OWNER_ADDRESS = \"owner\"","private let CONTRACT_ADDRESS = \"contract\"","private let USDC_TOKEN_IDENTIFIER_STRING = \"USDC-abcdef\"","private var USDC_TOKEN_IDENTIFIER: TokenIdentifier {","    \"\\(USDC_TOKEN_IDENTIFIER_STRING)\"","}","","final class FlipTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: PLAYER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: BOUNTY_ADDRESS,","                balance: 0","            ),","            WorldAccount(","                address: OWNER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: CONTRACT_ADDRESS,","                balance: 0,","                controllers: [","                    AdminController.self,","                    GameController.self,","                    StorageController.self","                ]","            )","        ]","    }","    ","    func testInitEgld() throws {","        try self.initContract()","        try self.setupEgld()","    }","    ","    func testInitUsdc() throws {","        try self.initContract()","        try self.setupUsdc()","    }","    ","    func testFlipTooHighBetAbsoluteValue() throws {","    }","    ","    func testSetMaximumBet() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBet = try storageController.getMaximumBet(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBet, 100)","    }","    ","    func testSetMaximumBetPercent() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBetPercent = try storageController.getMaximumBetPercent(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBetPercent, 100)","    }","    ","    func testIncreaseEgldReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 1_000","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        ","        XCTAssertEqual(tokenReserve, 1_000)","        XCTAssertEqual(contractBalance, 1_000)","    }","    ","    func testIncreaseUsdcReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 1_000","                    )","                ]","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        ","        XCTAssertEqual(tokenReserve, 1_000)","        XCTAssertEqual(contractBalance, 1_000)","    }","    ","    func testWithdrawEgldReserve() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.withdrawReserve(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 10_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        let ownerBalance = self.getAccount(address: OWNER_ADDRESS)!.balance","        ","        XCTAssertEqual(tokenReserve, 90_000_000)","        XCTAssertEqual(contractBalance, 90_000_000)","        XCTAssertEqual(ownerBalance, 10_000_000)","    }","    ","    func testWithdrawUsdcReserve() throws {","        try self.initContract()","        try self.setupUsdc()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.withdrawReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 10_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        let ownerBalance = self.getAccount(address: OWNER_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        ","        XCTAssertEqual(tokenReserve, 90_000_000)","        XCTAssertEqual(contractBalance, 90_000_000)","        XCTAssertEqual(ownerBalance, 10_000_000)","    }","","    ","    func testSetMaximumBetNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBet(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testSetMaximumBetPercentNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBetPercent(","                tokenIdentifier: .egld,","                nonce: 0,","                percent: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testIncreaseReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.increaseReserve()","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testWithdrawReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.withdrawReserve(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 100","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    private func initContract() throws {","        try self.deployContract(","            at: CONTRACT_ADDRESS,","            arguments: [","               500,","               100,","               1","            ],","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","    }","    ","    private func setupEgld() throws {","        let adminController = self.instantiateController(","            AdminController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 100_000_000","            )","        )","    }","    ","    private func setupUsdc() throws {","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 100_000_000","                    )","                ]","            )","        )","    }","    ","    private func flipSingleEgld(","        amount: BigUint","    ) throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.flip(","            transactionInput: ContractCallTransactionInput(","                callerAddress: PLAYER_ADDRESS,","                egldValue: amount","            )","        )","    }","    ","    private func flipSingleUsdc(amount: BigUint) throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.flip(","            transactionInput: ContractCallTransactionInput(","                callerAddress: PLAYER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: amount","                    )","                ]","            )","        )","    }","    ","    private func bounty() throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.bounty(","            transactionInput: ContractCallTransactionInput(","                callerAddress: BOUNTY_ADDRESS","            )","        )","    }","}"],"highlights":[{"line":66},{"line":67},{"line":68}],"syntax":"swift","fileType":"swift","identifier":"FlipContractTestTheGameSection2Step2.swift"},"FlipContractTestTheGameSection2Step10.swift":{"syntax":"swift","fileType":"swift","identifier":"FlipContractTestTheGameSection2Step10.swift","content":["import SpaceKitTesting","import Flip","","private let PLAYER_ADDRESS = \"player\"","private let BOUNTY_ADDRESS = \"bounty\"","private let OWNER_ADDRESS = \"owner\"","private let CONTRACT_ADDRESS = \"contract\"","private let USDC_TOKEN_IDENTIFIER_STRING = \"USDC-abcdef\"","private var USDC_TOKEN_IDENTIFIER: TokenIdentifier {","    \"\\(USDC_TOKEN_IDENTIFIER_STRING)\"","}","","final class FlipTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: PLAYER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: BOUNTY_ADDRESS,","                balance: 0","            ),","            WorldAccount(","                address: OWNER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: CONTRACT_ADDRESS,","                balance: 0,","                controllers: [","                    AdminController.self,","                    GameController.self,","                    StorageController.self","                ]","            )","        ]","    }","    ","    func testInitEgld() throws {","        try self.initContract()","        try self.setupEgld()","    }","    ","    func testInitUsdc() throws {","        try self.initContract()","        try self.setupUsdc()","    }","    ","    func testFlipTooHighBetAbsoluteValue() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 100_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let gameController = self.instantiateController(GameController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try gameController.flip(","                transactionInput: ContractCallTransactionInput(","                    callerAddress: PLAYER_ADDRESS,","                    egldValue: 1_500","                )","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Bet is too high. Maximum allowed bet: 1000\"))","        }","    }","    ","    func testSetMaximumBet() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBet = try storageController.getMaximumBet(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBet, 100)","    }","    ","    func testSetMaximumBetPercent() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBetPercent = try storageController.getMaximumBetPercent(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBetPercent, 100)","    }","    ","    func testIncreaseEgldReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 1_000","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        ","        XCTAssertEqual(tokenReserve, 1_000)","        XCTAssertEqual(contractBalance, 1_000)","    }","    ","    func testIncreaseUsdcReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 1_000","                    )","                ]","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        ","        XCTAssertEqual(tokenReserve, 1_000)","        XCTAssertEqual(contractBalance, 1_000)","    }","    ","    func testWithdrawEgldReserve() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.withdrawReserve(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 10_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        let ownerBalance = self.getAccount(address: OWNER_ADDRESS)!.balance","        ","        XCTAssertEqual(tokenReserve, 90_000_000)","        XCTAssertEqual(contractBalance, 90_000_000)","        XCTAssertEqual(ownerBalance, 10_000_000)","    }","    ","    func testWithdrawUsdcReserve() throws {","        try self.initContract()","        try self.setupUsdc()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.withdrawReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 10_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        let ownerBalance = self.getAccount(address: OWNER_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        ","        XCTAssertEqual(tokenReserve, 90_000_000)","        XCTAssertEqual(contractBalance, 90_000_000)","        XCTAssertEqual(ownerBalance, 10_000_000)","    }","","    ","    func testSetMaximumBetNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBet(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testSetMaximumBetPercentNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBetPercent(","                tokenIdentifier: .egld,","                nonce: 0,","                percent: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testIncreaseReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.increaseReserve()","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testWithdrawReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.withdrawReserve(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 100","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    private func initContract() throws {","        try self.deployContract(","            at: CONTRACT_ADDRESS,","            arguments: [","               500,","               100,","               1","            ],","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","    }","    ","    private func setupEgld() throws {","        let adminController = self.instantiateController(","            AdminController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 100_000_000","            )","        )","    }","    ","    private func setupUsdc() throws {","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 100_000_000","                    )","                ]","            )","        )","    }","    ","    private func flipSingleEgld(","        amount: BigUint","    ) throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.flip(","            transactionInput: ContractCallTransactionInput(","                callerAddress: PLAYER_ADDRESS,","                egldValue: amount","            )","        )","    }","    ","    private func flipSingleUsdc(amount: BigUint) throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.flip(","            transactionInput: ContractCallTransactionInput(","                callerAddress: PLAYER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: amount","                    )","                ]","            )","        )","    }","    ","    private func bounty() throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.bounty(","            transactionInput: ContractCallTransactionInput(","                callerAddress: BOUNTY_ADDRESS","            )","        )","    }","}"],"fileName":"FlipTest.swift","type":"file","highlights":[{"line":102}]},"FlipContractTestTheGameSection2Step8.swift":{"fileName":"FlipTest.swift","type":"file","content":["import SpaceKitTesting","import Flip","","private let PLAYER_ADDRESS = \"player\"","private let BOUNTY_ADDRESS = \"bounty\"","private let OWNER_ADDRESS = \"owner\"","private let CONTRACT_ADDRESS = \"contract\"","private let USDC_TOKEN_IDENTIFIER_STRING = \"USDC-abcdef\"","private var USDC_TOKEN_IDENTIFIER: TokenIdentifier {","    \"\\(USDC_TOKEN_IDENTIFIER_STRING)\"","}","","final class FlipTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: PLAYER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: BOUNTY_ADDRESS,","                balance: 0","            ),","            WorldAccount(","                address: OWNER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: CONTRACT_ADDRESS,","                balance: 0,","                controllers: [","                    AdminController.self,","                    GameController.self,","                    StorageController.self","                ]","            )","        ]","    }","    ","    func testInitEgld() throws {","        try self.initContract()","        try self.setupEgld()","    }","    ","    func testInitUsdc() throws {","        try self.initContract()","        try self.setupUsdc()","    }","    ","    func testFlipTooHighBetAbsoluteValue() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 100_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let gameController = self.instantiateController(GameController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try gameController.flip(","                transactionInput: ContractCallTransactionInput(","                    callerAddress: PLAYER_ADDRESS,","                    egldValue: 1_500","                )","            )","        } catch {","            ","        }","    }","    ","    func testSetMaximumBet() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBet = try storageController.getMaximumBet(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBet, 100)","    }","    ","    func testSetMaximumBetPercent() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBetPercent = try storageController.getMaximumBetPercent(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBetPercent, 100)","    }","    ","    func testIncreaseEgldReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 1_000","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        ","        XCTAssertEqual(tokenReserve, 1_000)","        XCTAssertEqual(contractBalance, 1_000)","    }","    ","    func testIncreaseUsdcReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 1_000","                    )","                ]","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        ","        XCTAssertEqual(tokenReserve, 1_000)","        XCTAssertEqual(contractBalance, 1_000)","    }","    ","    func testWithdrawEgldReserve() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.withdrawReserve(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 10_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        let ownerBalance = self.getAccount(address: OWNER_ADDRESS)!.balance","        ","        XCTAssertEqual(tokenReserve, 90_000_000)","        XCTAssertEqual(contractBalance, 90_000_000)","        XCTAssertEqual(ownerBalance, 10_000_000)","    }","    ","    func testWithdrawUsdcReserve() throws {","        try self.initContract()","        try self.setupUsdc()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.withdrawReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 10_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        let ownerBalance = self.getAccount(address: OWNER_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        ","        XCTAssertEqual(tokenReserve, 90_000_000)","        XCTAssertEqual(contractBalance, 90_000_000)","        XCTAssertEqual(ownerBalance, 10_000_000)","    }","","    ","    func testSetMaximumBetNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBet(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testSetMaximumBetPercentNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBetPercent(","                tokenIdentifier: .egld,","                nonce: 0,","                percent: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testIncreaseReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.increaseReserve()","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testWithdrawReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.withdrawReserve(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 100","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    private func initContract() throws {","        try self.deployContract(","            at: CONTRACT_ADDRESS,","            arguments: [","               500,","               100,","               1","            ],","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","    }","    ","    private func setupEgld() throws {","        let adminController = self.instantiateController(","            AdminController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 100_000_000","            )","        )","    }","    ","    private func setupUsdc() throws {","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 100_000_000","                    )","                ]","            )","        )","    }","    ","    private func flipSingleEgld(","        amount: BigUint","    ) throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.flip(","            transactionInput: ContractCallTransactionInput(","                callerAddress: PLAYER_ADDRESS,","                egldValue: amount","            )","        )","    }","    ","    private func flipSingleUsdc(amount: BigUint) throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.flip(","            transactionInput: ContractCallTransactionInput(","                callerAddress: PLAYER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: amount","                    )","                ]","            )","        )","    }","    ","    private func bounty() throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.bounty(","            transactionInput: ContractCallTransactionInput(","                callerAddress: BOUNTY_ADDRESS","            )","        )","    }","}"],"highlights":[{"line":93},{"line":94},{"line":95},{"line":96},{"line":97},{"line":98}],"syntax":"swift","fileType":"swift","identifier":"FlipContractTestTheGameSection2Step8.swift"},"doc://SpaceKit/tutorials/SpaceKit/FlipContractInitTests#Write-Tests-for-the-Setup-Helpers":{"type":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractInitTests#Write-Tests-for-the-Setup-Helpers","role":"pseudoSymbol","abstract":[{"type":"text","text":"Smart contracts are permissionless programs that often manage valuable assets. Because of this, writing comprehensive tests for both successful and failure scenarios is essential."}],"url":"\/tutorials\/spacekit\/flipcontractinittests#Write-Tests-for-the-Setup-Helpers","kind":"section","title":"Write Tests for the Setup Helpers"},"doc://SpaceKit/tutorials/SpaceKit/FlipContractWriteTheStorage#Define-the-Contract-Init":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteTheStorage#Define-the-Contract-Init","role":"pseudoSymbol","url":"\/tutorials\/spacekit\/flipcontractwritethestorage#Define-the-Contract-Init","abstract":[{"type":"text","text":"With your Flip project initialized, you’re ready to begin implementing the smart contract. The contract is composed of the following components:"}],"title":"Define the Contract Init","type":"section","kind":"section"},"doc://SpaceKit/tutorials/SpaceKit/FlipContractWriteTheStorage#Implement-Contract-Storage":{"url":"\/tutorials\/spacekit\/flipcontractwritethestorage#Implement-Contract-Storage","kind":"section","type":"section","role":"pseudoSymbol","title":"Implement Contract Storage","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteTheStorage#Implement-Contract-Storage","abstract":[{"type":"text","text":"With your Flip project initialized, you’re ready to begin implementing the smart contract. The contract is composed of the following components:"}]},"FlipContractTestTheGameSection5Step9.swift":{"syntax":"swift","fileType":"swift","identifier":"FlipContractTestTheGameSection5Step9.swift","content":["import SpaceKitTesting","import Flip","","private let PLAYER_ADDRESS = \"player\"","private let BOUNTY_ADDRESS = \"bounty\"","private let OWNER_ADDRESS = \"owner\"","private let CONTRACT_ADDRESS = \"contract\"","private let USDC_TOKEN_IDENTIFIER_STRING = \"USDC-abcdef\"","private var USDC_TOKEN_IDENTIFIER: TokenIdentifier {","    \"\\(USDC_TOKEN_IDENTIFIER_STRING)\"","}","","final class FlipTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: PLAYER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: BOUNTY_ADDRESS,","                balance: 0","            ),","            WorldAccount(","                address: OWNER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: CONTRACT_ADDRESS,","                balance: 0,","                controllers: [","                    AdminController.self,","                    GameController.self,","                    StorageController.self","                ]","            )","        ]","    }","    ","    func testInitEgld() throws {","        try self.initContract()","        try self.setupEgld()","    }","    ","    func testInitUsdc() throws {","        try self.initContract()","        try self.setupUsdc()","    }","    ","    func testFlipSingleEgld() throws {","        try self.initContract()","        try self.setupEgld()","        try self.flipSingleEgld(amount: 100_000)","        ","        let storageController = self.instantiateController(","            StorageController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        let egldTokenReserve = try storageController","            .getTokenReserve(","                tokenIdentifier: .egld,","                tokenNonce: 0","            )","        ","        XCTAssertEqual(egldTokenReserve, 99_906_000)","    }","    ","    func testFlipSingleUsdc() throws {","        try self.initContract()","        try self.setupUsdc()","        try self.flipSingleUsdc(amount: 100_000)","        ","        let storageController = self.instantiateController(","            StorageController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        let usdcTokenReserve = try storageController","            .getTokenReserve(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                tokenNonce: 0","            )","        ","        XCTAssertEqual(usdcTokenReserve, 99_906_000)","    }","    ","    func testBountyTooEarly() throws {","        try self.initContract()","        try self.setupEgld()","        try self.flipSingleEgld(amount: 100_000)","        ","        let gameController = self.instantiateController(GameController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try gameController.bounty(","                transactionInput: ContractCallTransactionInput(","                    callerAddress: BOUNTY_ADDRESS","                )","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"No flip can be bounty.\"))","        }","    }","    ","    func testBountySingleWinEgld() throws {","        try self.initContract()","        try self.setupEgld()","        try self.flipSingleEgld(amount: 100_000)","        ","        let blockRandomSeed = Array(repeating: UInt8(0), count: 47) + [6]","        ","        self.setBlockInfos(","            nonce: 1,","            randomSeed: Data(blockRandomSeed)","        )","        ","        try self.bounty()","        ","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        let flipContractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        let ownerBalance = self.getAccount(address: OWNER_ADDRESS)!.balance","        let playerBalance = self.getAccount(address: PLAYER_ADDRESS)!.balance","        let bountyBalance = self.getAccount(address: BOUNTY_ADDRESS)!.balance","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(flipContractBalance, 99_906_000)","        XCTAssertEqual(ownerBalance, 5_000)","        XCTAssertEqual(playerBalance, 100_088_000)","        XCTAssertEqual(bountyBalance, 1_000)","        XCTAssertEqual(tokenReserve, 99_906_000)","    }","    ","    func testFlipTooHighBetAbsoluteValue() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 100_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let gameController = self.instantiateController(GameController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try gameController.flip(","                transactionInput: ContractCallTransactionInput(","                    callerAddress: PLAYER_ADDRESS,","                    egldValue: 1_500","                )","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Bet is too high. Maximum allowed bet: 1000\"))","        }","    }","    ","    func testFlipTooHighBetPercent() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 10,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let gameController = self.instantiateController(GameController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try gameController.flip(","                transactionInput: ContractCallTransactionInput(","                    callerAddress: PLAYER_ADDRESS,","                    egldValue: 150_000","                )","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Bet is too high. Maximum allowed bet: 100000\"))","        }","    }","    ","    func testSetMaximumBet() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBet = try storageController.getMaximumBet(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBet, 100)","    }","    ","    func testSetMaximumBetPercent() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBetPercent = try storageController.getMaximumBetPercent(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBetPercent, 100)","    }","    ","    func testIncreaseEgldReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 1_000","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        ","        XCTAssertEqual(tokenReserve, 1_000)","        XCTAssertEqual(contractBalance, 1_000)","    }","    ","    func testIncreaseUsdcReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 1_000","                    )","                ]","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        ","        XCTAssertEqual(tokenReserve, 1_000)","        XCTAssertEqual(contractBalance, 1_000)","    }","    ","    func testWithdrawEgldReserve() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.withdrawReserve(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 10_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        let ownerBalance = self.getAccount(address: OWNER_ADDRESS)!.balance","        ","        XCTAssertEqual(tokenReserve, 90_000_000)","        XCTAssertEqual(contractBalance, 90_000_000)","        XCTAssertEqual(ownerBalance, 10_000_000)","    }","    ","    func testWithdrawUsdcReserve() throws {","        try self.initContract()","        try self.setupUsdc()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.withdrawReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 10_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        let ownerBalance = self.getAccount(address: OWNER_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        ","        XCTAssertEqual(tokenReserve, 90_000_000)","        XCTAssertEqual(contractBalance, 90_000_000)","        XCTAssertEqual(ownerBalance, 10_000_000)","    }","","    ","    func testSetMaximumBetNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBet(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testSetMaximumBetPercentNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBetPercent(","                tokenIdentifier: .egld,","                nonce: 0,","                percent: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testIncreaseReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.increaseReserve()","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testWithdrawReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.withdrawReserve(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 100","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    private func initContract() throws {","        try self.deployContract(","            at: CONTRACT_ADDRESS,","            arguments: [","               500,","               100,","               1","            ],","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","    }","    ","    private func setupEgld() throws {","        let adminController = self.instantiateController(","            AdminController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 100_000_000","            )","        )","    }","    ","    private func setupUsdc() throws {","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 100_000_000","                    )","                ]","            )","        )","    }","    ","    private func flipSingleEgld(","        amount: BigUint","    ) throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.flip(","            transactionInput: ContractCallTransactionInput(","                callerAddress: PLAYER_ADDRESS,","                egldValue: amount","            )","        )","    }","    ","    private func flipSingleUsdc(amount: BigUint) throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.flip(","            transactionInput: ContractCallTransactionInput(","                callerAddress: PLAYER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: amount","                    )","                ]","            )","        )","    }","    ","    private func bounty() throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.bounty(","            transactionInput: ContractCallTransactionInput(","                callerAddress: BOUNTY_ADDRESS","            )","        )","    }","}"],"fileName":"FlipTest.swift","type":"file","highlights":[{"line":149},{"line":150},{"line":151},{"line":152},{"line":153},{"line":154}]},"FlipContractTestTheGameSection4Step4.swift":{"fileName":"FlipTest.swift","type":"file","content":["import SpaceKitTesting","import Flip","","private let PLAYER_ADDRESS = \"player\"","private let BOUNTY_ADDRESS = \"bounty\"","private let OWNER_ADDRESS = \"owner\"","private let CONTRACT_ADDRESS = \"contract\"","private let USDC_TOKEN_IDENTIFIER_STRING = \"USDC-abcdef\"","private var USDC_TOKEN_IDENTIFIER: TokenIdentifier {","    \"\\(USDC_TOKEN_IDENTIFIER_STRING)\"","}","","final class FlipTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: PLAYER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: BOUNTY_ADDRESS,","                balance: 0","            ),","            WorldAccount(","                address: OWNER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: CONTRACT_ADDRESS,","                balance: 0,","                controllers: [","                    AdminController.self,","                    GameController.self,","                    StorageController.self","                ]","            )","        ]","    }","    ","    func testInitEgld() throws {","        try self.initContract()","        try self.setupEgld()","    }","    ","    func testInitUsdc() throws {","        try self.initContract()","        try self.setupUsdc()","    }","    ","    func testFlipSingleEgld() throws {","        try self.initContract()","        try self.setupEgld()","        try self.flipSingleEgld(amount: 100_000)","        ","        let storageController = self.instantiateController(","            StorageController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        let egldTokenReserve = try storageController","            .getTokenReserve(","                tokenIdentifier: .egld,","                tokenNonce: 0","            )","        ","        XCTAssertEqual(egldTokenReserve, 99_906_000)","    }","    ","    func testFlipSingleUsdc() throws {","        try self.initContract()","        try self.setupUsdc()","        try self.flipSingleUsdc(amount: 100_000)","        ","        let storageController = self.instantiateController(","            StorageController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        let usdcTokenReserve = try storageController","            .getTokenReserve(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                tokenNonce: 0","            )","        ","        XCTAssertEqual(usdcTokenReserve, 99_906_000)","    }","    ","    func testBountyTooEarly() throws {","        try self.initContract()","        try self.setupEgld()","        try self.flipSingleEgld(amount: 100_000)","        ","        let gameController = self.instantiateController(GameController.self, for: CONTRACT_ADDRESS)!","    }","    ","    func testFlipTooHighBetAbsoluteValue() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 100_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let gameController = self.instantiateController(GameController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try gameController.flip(","                transactionInput: ContractCallTransactionInput(","                    callerAddress: PLAYER_ADDRESS,","                    egldValue: 1_500","                )","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Bet is too high. Maximum allowed bet: 1000\"))","        }","    }","    ","    func testFlipTooHighBetPercent() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 10,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let gameController = self.instantiateController(GameController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try gameController.flip(","                transactionInput: ContractCallTransactionInput(","                    callerAddress: PLAYER_ADDRESS,","                    egldValue: 150_000","                )","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Bet is too high. Maximum allowed bet: 100000\"))","        }","    }","    ","    func testSetMaximumBet() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBet = try storageController.getMaximumBet(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBet, 100)","    }","    ","    func testSetMaximumBetPercent() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBetPercent = try storageController.getMaximumBetPercent(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBetPercent, 100)","    }","    ","    func testIncreaseEgldReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 1_000","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        ","        XCTAssertEqual(tokenReserve, 1_000)","        XCTAssertEqual(contractBalance, 1_000)","    }","    ","    func testIncreaseUsdcReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 1_000","                    )","                ]","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        ","        XCTAssertEqual(tokenReserve, 1_000)","        XCTAssertEqual(contractBalance, 1_000)","    }","    ","    func testWithdrawEgldReserve() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.withdrawReserve(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 10_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        let ownerBalance = self.getAccount(address: OWNER_ADDRESS)!.balance","        ","        XCTAssertEqual(tokenReserve, 90_000_000)","        XCTAssertEqual(contractBalance, 90_000_000)","        XCTAssertEqual(ownerBalance, 10_000_000)","    }","    ","    func testWithdrawUsdcReserve() throws {","        try self.initContract()","        try self.setupUsdc()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.withdrawReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 10_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        let ownerBalance = self.getAccount(address: OWNER_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        ","        XCTAssertEqual(tokenReserve, 90_000_000)","        XCTAssertEqual(contractBalance, 90_000_000)","        XCTAssertEqual(ownerBalance, 10_000_000)","    }","","    ","    func testSetMaximumBetNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBet(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testSetMaximumBetPercentNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBetPercent(","                tokenIdentifier: .egld,","                nonce: 0,","                percent: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testIncreaseReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.increaseReserve()","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testWithdrawReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.withdrawReserve(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 100","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    private func initContract() throws {","        try self.deployContract(","            at: CONTRACT_ADDRESS,","            arguments: [","               500,","               100,","               1","            ],","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","    }","    ","    private func setupEgld() throws {","        let adminController = self.instantiateController(","            AdminController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 100_000_000","            )","        )","    }","    ","    private func setupUsdc() throws {","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 100_000_000","                    )","                ]","            )","        )","    }","    ","    private func flipSingleEgld(","        amount: BigUint","    ) throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.flip(","            transactionInput: ContractCallTransactionInput(","                callerAddress: PLAYER_ADDRESS,","                egldValue: amount","            )","        )","    }","    ","    private func flipSingleUsdc(amount: BigUint) throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.flip(","            transactionInput: ContractCallTransactionInput(","                callerAddress: PLAYER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: amount","                    )","                ]","            )","        )","    }","    ","    private func bounty() throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.bounty(","            transactionInput: ContractCallTransactionInput(","                callerAddress: BOUNTY_ADDRESS","            )","        )","    }","}"],"highlights":[{"line":108},{"line":109}],"syntax":"swift","fileType":"swift","identifier":"FlipContractTestTheGameSection4Step4.swift"},"doc://SpaceKit/tutorials/SpaceKit/FlipContractTestTheGame#Test-Failure-Cases-for-the-flip-Endpoint":{"url":"\/tutorials\/spacekit\/flipcontracttestthegame#Test-Failure-Cases-for-the-flip-Endpoint","type":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractTestTheGame#Test-Failure-Cases-for-the-flip-Endpoint","abstract":[{"type":"text","text":"This final chapter of the testing tutorial focuses on validating the core game logic implemented in the "},{"code":"GameController","type":"codeVoice"},{"text":".","type":"text"}],"kind":"section","title":"Test Failure Cases for the flip Endpoint","role":"pseudoSymbol"},"FlipContractTestTheGameSection5Step10.swift":{"identifier":"FlipContractTestTheGameSection5Step10.swift","syntax":"swift","content":["import SpaceKitTesting","import Flip","","private let PLAYER_ADDRESS = \"player\"","private let BOUNTY_ADDRESS = \"bounty\"","private let OWNER_ADDRESS = \"owner\"","private let CONTRACT_ADDRESS = \"contract\"","private let USDC_TOKEN_IDENTIFIER_STRING = \"USDC-abcdef\"","private var USDC_TOKEN_IDENTIFIER: TokenIdentifier {","    \"\\(USDC_TOKEN_IDENTIFIER_STRING)\"","}","","final class FlipTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: PLAYER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: BOUNTY_ADDRESS,","                balance: 0","            ),","            WorldAccount(","                address: OWNER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: CONTRACT_ADDRESS,","                balance: 0,","                controllers: [","                    AdminController.self,","                    GameController.self,","                    StorageController.self","                ]","            )","        ]","    }","    ","    func testInitEgld() throws {","        try self.initContract()","        try self.setupEgld()","    }","    ","    func testInitUsdc() throws {","        try self.initContract()","        try self.setupUsdc()","    }","    ","    func testFlipSingleEgld() throws {","        try self.initContract()","        try self.setupEgld()","        try self.flipSingleEgld(amount: 100_000)","        ","        let storageController = self.instantiateController(","            StorageController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        let egldTokenReserve = try storageController","            .getTokenReserve(","                tokenIdentifier: .egld,","                tokenNonce: 0","            )","        ","        XCTAssertEqual(egldTokenReserve, 99_906_000)","    }","    ","    func testFlipSingleUsdc() throws {","        try self.initContract()","        try self.setupUsdc()","        try self.flipSingleUsdc(amount: 100_000)","        ","        let storageController = self.instantiateController(","            StorageController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        let usdcTokenReserve = try storageController","            .getTokenReserve(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                tokenNonce: 0","            )","        ","        XCTAssertEqual(usdcTokenReserve, 99_906_000)","    }","    ","    func testBountyTooEarly() throws {","        try self.initContract()","        try self.setupEgld()","        try self.flipSingleEgld(amount: 100_000)","        ","        let gameController = self.instantiateController(GameController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try gameController.bounty(","                transactionInput: ContractCallTransactionInput(","                    callerAddress: BOUNTY_ADDRESS","                )","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"No flip can be bounty.\"))","        }","    }","    ","    func testBountySingleWinEgld() throws {","        try self.initContract()","        try self.setupEgld()","        try self.flipSingleEgld(amount: 100_000)","        ","        let blockRandomSeed = Array(repeating: UInt8(0), count: 47) + [6]","        ","        self.setBlockInfos(","            nonce: 1,","            randomSeed: Data(blockRandomSeed)","        )","        ","        try self.bounty()","        ","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        let flipContractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        let ownerBalance = self.getAccount(address: OWNER_ADDRESS)!.balance","        let playerBalance = self.getAccount(address: PLAYER_ADDRESS)!.balance","        let bountyBalance = self.getAccount(address: BOUNTY_ADDRESS)!.balance","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(flipContractBalance, 99_906_000)","        XCTAssertEqual(ownerBalance, 5_000)","        XCTAssertEqual(playerBalance, 100_088_000)","        XCTAssertEqual(bountyBalance, 1_000)","        XCTAssertEqual(tokenReserve, 99_906_000)","    }","    ","    func testBountySingleWinUsdc() throws {","        try self.initContract()","        try self.setupUsdc()","        try self.flipSingleUsdc(amount: 100_000)","        ","        let blockRandomSeed = Array(repeating: UInt8(0), count: 47) + [6]","        ","        self.setBlockInfos(","            nonce: 1,","            randomSeed: Data(blockRandomSeed)","        )","        ","        try self.bounty()","        ","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        let flipContractBalance = self.getAccount(address: CONTRACT_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        let ownerBalance = self.getAccount(address: OWNER_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        let playerBalance = self.getAccount(address: PLAYER_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        let bountyBalance = self.getAccount(address: BOUNTY_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(flipContractBalance, 99_906_000)","        XCTAssertEqual(ownerBalance, 5_000)","        XCTAssertEqual(playerBalance, 100_088_000)","        XCTAssertEqual(bountyBalance, 1_000)","        XCTAssertEqual(tokenReserve, 99_906_000)","    }","","    func testFlipTooHighBetAbsoluteValue() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 100_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let gameController = self.instantiateController(GameController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try gameController.flip(","                transactionInput: ContractCallTransactionInput(","                    callerAddress: PLAYER_ADDRESS,","                    egldValue: 1_500","                )","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Bet is too high. Maximum allowed bet: 1000\"))","        }","    }","    ","    func testFlipTooHighBetPercent() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 10,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let gameController = self.instantiateController(GameController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try gameController.flip(","                transactionInput: ContractCallTransactionInput(","                    callerAddress: PLAYER_ADDRESS,","                    egldValue: 150_000","                )","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Bet is too high. Maximum allowed bet: 100000\"))","        }","    }","    ","    func testSetMaximumBet() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBet = try storageController.getMaximumBet(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBet, 100)","    }","    ","    func testSetMaximumBetPercent() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBetPercent = try storageController.getMaximumBetPercent(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBetPercent, 100)","    }","    ","    func testIncreaseEgldReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 1_000","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        ","        XCTAssertEqual(tokenReserve, 1_000)","        XCTAssertEqual(contractBalance, 1_000)","    }","    ","    func testIncreaseUsdcReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 1_000","                    )","                ]","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        ","        XCTAssertEqual(tokenReserve, 1_000)","        XCTAssertEqual(contractBalance, 1_000)","    }","    ","    func testWithdrawEgldReserve() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.withdrawReserve(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 10_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        let ownerBalance = self.getAccount(address: OWNER_ADDRESS)!.balance","        ","        XCTAssertEqual(tokenReserve, 90_000_000)","        XCTAssertEqual(contractBalance, 90_000_000)","        XCTAssertEqual(ownerBalance, 10_000_000)","    }","    ","    func testWithdrawUsdcReserve() throws {","        try self.initContract()","        try self.setupUsdc()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.withdrawReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 10_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        let ownerBalance = self.getAccount(address: OWNER_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        ","        XCTAssertEqual(tokenReserve, 90_000_000)","        XCTAssertEqual(contractBalance, 90_000_000)","        XCTAssertEqual(ownerBalance, 10_000_000)","    }","","    ","    func testSetMaximumBetNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBet(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testSetMaximumBetPercentNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBetPercent(","                tokenIdentifier: .egld,","                nonce: 0,","                percent: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testIncreaseReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.increaseReserve()","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testWithdrawReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.withdrawReserve(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 100","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    private func initContract() throws {","        try self.deployContract(","            at: CONTRACT_ADDRESS,","            arguments: [","               500,","               100,","               1","            ],","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","    }","    ","    private func setupEgld() throws {","        let adminController = self.instantiateController(","            AdminController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 100_000_000","            )","        )","    }","    ","    private func setupUsdc() throws {","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 100_000_000","                    )","                ]","            )","        )","    }","    ","    private func flipSingleEgld(","        amount: BigUint","    ) throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.flip(","            transactionInput: ContractCallTransactionInput(","                callerAddress: PLAYER_ADDRESS,","                egldValue: amount","            )","        )","    }","    ","    private func flipSingleUsdc(amount: BigUint) throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.flip(","            transactionInput: ContractCallTransactionInput(","                callerAddress: PLAYER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: amount","                    )","                ]","            )","        )","    }","    ","    private func bounty() throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.bounty(","            transactionInput: ContractCallTransactionInput(","                callerAddress: BOUNTY_ADDRESS","            )","        )","    }","}"],"fileType":"swift","highlights":[{"line":157},{"line":158},{"line":159},{"line":160},{"line":161},{"line":162},{"line":163},{"line":164},{"line":165},{"line":166},{"line":167},{"line":168},{"line":169},{"line":170},{"line":171},{"line":172},{"line":173},{"line":174},{"line":175},{"line":176},{"line":177},{"line":178},{"line":179},{"line":180},{"line":181},{"line":182},{"line":183},{"line":184},{"line":185},{"line":186},{"line":187},{"line":188},{"line":189},{"line":190},{"line":191},{"line":192},{"line":193},{"line":194},{"line":195},{"line":196},{"line":197},{"line":198},{"line":199},{"line":200},{"line":201},{"line":202},{"line":203},{"line":204},{"line":205}],"type":"file","fileName":"FlipTest.swift"},"FlipContractTestTheGameSection2Step5.swift":{"fileName":"FlipTest.swift","type":"file","content":["import SpaceKitTesting","import Flip","","private let PLAYER_ADDRESS = \"player\"","private let BOUNTY_ADDRESS = \"bounty\"","private let OWNER_ADDRESS = \"owner\"","private let CONTRACT_ADDRESS = \"contract\"","private let USDC_TOKEN_IDENTIFIER_STRING = \"USDC-abcdef\"","private var USDC_TOKEN_IDENTIFIER: TokenIdentifier {","    \"\\(USDC_TOKEN_IDENTIFIER_STRING)\"","}","","final class FlipTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: PLAYER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: BOUNTY_ADDRESS,","                balance: 0","            ),","            WorldAccount(","                address: OWNER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: CONTRACT_ADDRESS,","                balance: 0,","                controllers: [","                    AdminController.self,","                    GameController.self,","                    StorageController.self","                ]","            )","        ]","    }","    ","    func testInitEgld() throws {","        try self.initContract()","        try self.setupEgld()","    }","    ","    func testInitUsdc() throws {","        try self.initContract()","        try self.setupUsdc()","    }","    ","    func testFlipTooHighBetAbsoluteValue() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 100_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","    }","    ","    func testSetMaximumBet() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBet = try storageController.getMaximumBet(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBet, 100)","    }","    ","    func testSetMaximumBetPercent() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBetPercent = try storageController.getMaximumBetPercent(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBetPercent, 100)","    }","    ","    func testIncreaseEgldReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 1_000","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        ","        XCTAssertEqual(tokenReserve, 1_000)","        XCTAssertEqual(contractBalance, 1_000)","    }","    ","    func testIncreaseUsdcReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 1_000","                    )","                ]","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        ","        XCTAssertEqual(tokenReserve, 1_000)","        XCTAssertEqual(contractBalance, 1_000)","    }","    ","    func testWithdrawEgldReserve() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.withdrawReserve(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 10_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        let ownerBalance = self.getAccount(address: OWNER_ADDRESS)!.balance","        ","        XCTAssertEqual(tokenReserve, 90_000_000)","        XCTAssertEqual(contractBalance, 90_000_000)","        XCTAssertEqual(ownerBalance, 10_000_000)","    }","    ","    func testWithdrawUsdcReserve() throws {","        try self.initContract()","        try self.setupUsdc()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.withdrawReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 10_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        let ownerBalance = self.getAccount(address: OWNER_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        ","        XCTAssertEqual(tokenReserve, 90_000_000)","        XCTAssertEqual(contractBalance, 90_000_000)","        XCTAssertEqual(ownerBalance, 10_000_000)","    }","","    ","    func testSetMaximumBetNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBet(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testSetMaximumBetPercentNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBetPercent(","                tokenIdentifier: .egld,","                nonce: 0,","                percent: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testIncreaseReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.increaseReserve()","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testWithdrawReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.withdrawReserve(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 100","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    private func initContract() throws {","        try self.deployContract(","            at: CONTRACT_ADDRESS,","            arguments: [","               500,","               100,","               1","            ],","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","    }","    ","    private func setupEgld() throws {","        let adminController = self.instantiateController(","            AdminController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 100_000_000","            )","        )","    }","    ","    private func setupUsdc() throws {","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 100_000_000","                    )","                ]","            )","        )","    }","    ","    private func flipSingleEgld(","        amount: BigUint","    ) throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.flip(","            transactionInput: ContractCallTransactionInput(","                callerAddress: PLAYER_ADDRESS,","                egldValue: amount","            )","        )","    }","    ","    private func flipSingleUsdc(amount: BigUint) throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.flip(","            transactionInput: ContractCallTransactionInput(","                callerAddress: PLAYER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: amount","                    )","                ]","            )","        )","    }","    ","    private func bounty() throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.bounty(","            transactionInput: ContractCallTransactionInput(","                callerAddress: BOUNTY_ADDRESS","            )","        )","    }","}"],"highlights":[{"line":80},{"line":81},{"line":82},{"line":83},{"line":84},{"line":85},{"line":86},{"line":87},{"line":88}],"syntax":"swift","fileType":"swift","identifier":"FlipContractTestTheGameSection2Step5.swift"},"doc://SpaceKit/tutorials/SpaceKit/TokenAttributes#Implementing-the-lockFunds-Endpoint":{"url":"\/tutorials\/spacekit\/tokenattributes#Implementing-the-lockFunds-Endpoint","type":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/TokenAttributes#Implementing-the-lockFunds-Endpoint","kind":"section","abstract":[{"text":"The ESDT standard enables embedding custom data within non-fungible tokens, allowing developers to extend the functionality of their smart contracts. This additional data, referred to as “attributes,” is tied to the token and transfers along with it between wallets.","type":"text"}],"role":"pseudoSymbol","title":"Implementing the lockFunds Endpoint"},"FlipContractTestTheGameSection4Step5.swift":{"syntax":"swift","fileType":"swift","identifier":"FlipContractTestTheGameSection4Step5.swift","content":["import SpaceKitTesting","import Flip","","private let PLAYER_ADDRESS = \"player\"","private let BOUNTY_ADDRESS = \"bounty\"","private let OWNER_ADDRESS = \"owner\"","private let CONTRACT_ADDRESS = \"contract\"","private let USDC_TOKEN_IDENTIFIER_STRING = \"USDC-abcdef\"","private var USDC_TOKEN_IDENTIFIER: TokenIdentifier {","    \"\\(USDC_TOKEN_IDENTIFIER_STRING)\"","}","","final class FlipTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: PLAYER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: BOUNTY_ADDRESS,","                balance: 0","            ),","            WorldAccount(","                address: OWNER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: CONTRACT_ADDRESS,","                balance: 0,","                controllers: [","                    AdminController.self,","                    GameController.self,","                    StorageController.self","                ]","            )","        ]","    }","    ","    func testInitEgld() throws {","        try self.initContract()","        try self.setupEgld()","    }","    ","    func testInitUsdc() throws {","        try self.initContract()","        try self.setupUsdc()","    }","    ","    func testFlipSingleEgld() throws {","        try self.initContract()","        try self.setupEgld()","        try self.flipSingleEgld(amount: 100_000)","        ","        let storageController = self.instantiateController(","            StorageController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        let egldTokenReserve = try storageController","            .getTokenReserve(","                tokenIdentifier: .egld,","                tokenNonce: 0","            )","        ","        XCTAssertEqual(egldTokenReserve, 99_906_000)","    }","    ","    func testFlipSingleUsdc() throws {","        try self.initContract()","        try self.setupUsdc()","        try self.flipSingleUsdc(amount: 100_000)","        ","        let storageController = self.instantiateController(","            StorageController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        let usdcTokenReserve = try storageController","            .getTokenReserve(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                tokenNonce: 0","            )","        ","        XCTAssertEqual(usdcTokenReserve, 99_906_000)","    }","    ","    func testBountyTooEarly() throws {","        try self.initContract()","        try self.setupEgld()","        try self.flipSingleEgld(amount: 100_000)","        ","        let gameController = self.instantiateController(GameController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            ","        } catch {","            ","        }","    }","    ","    func testFlipTooHighBetAbsoluteValue() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 100_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let gameController = self.instantiateController(GameController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try gameController.flip(","                transactionInput: ContractCallTransactionInput(","                    callerAddress: PLAYER_ADDRESS,","                    egldValue: 1_500","                )","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Bet is too high. Maximum allowed bet: 1000\"))","        }","    }","    ","    func testFlipTooHighBetPercent() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 10,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let gameController = self.instantiateController(GameController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try gameController.flip(","                transactionInput: ContractCallTransactionInput(","                    callerAddress: PLAYER_ADDRESS,","                    egldValue: 150_000","                )","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Bet is too high. Maximum allowed bet: 100000\"))","        }","    }","    ","    func testSetMaximumBet() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBet = try storageController.getMaximumBet(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBet, 100)","    }","    ","    func testSetMaximumBetPercent() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBetPercent = try storageController.getMaximumBetPercent(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBetPercent, 100)","    }","    ","    func testIncreaseEgldReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 1_000","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        ","        XCTAssertEqual(tokenReserve, 1_000)","        XCTAssertEqual(contractBalance, 1_000)","    }","    ","    func testIncreaseUsdcReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 1_000","                    )","                ]","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        ","        XCTAssertEqual(tokenReserve, 1_000)","        XCTAssertEqual(contractBalance, 1_000)","    }","    ","    func testWithdrawEgldReserve() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.withdrawReserve(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 10_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        let ownerBalance = self.getAccount(address: OWNER_ADDRESS)!.balance","        ","        XCTAssertEqual(tokenReserve, 90_000_000)","        XCTAssertEqual(contractBalance, 90_000_000)","        XCTAssertEqual(ownerBalance, 10_000_000)","    }","    ","    func testWithdrawUsdcReserve() throws {","        try self.initContract()","        try self.setupUsdc()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.withdrawReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 10_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        let ownerBalance = self.getAccount(address: OWNER_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        ","        XCTAssertEqual(tokenReserve, 90_000_000)","        XCTAssertEqual(contractBalance, 90_000_000)","        XCTAssertEqual(ownerBalance, 10_000_000)","    }","","    ","    func testSetMaximumBetNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBet(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testSetMaximumBetPercentNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBetPercent(","                tokenIdentifier: .egld,","                nonce: 0,","                percent: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testIncreaseReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.increaseReserve()","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testWithdrawReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.withdrawReserve(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 100","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    private func initContract() throws {","        try self.deployContract(","            at: CONTRACT_ADDRESS,","            arguments: [","               500,","               100,","               1","            ],","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","    }","    ","    private func setupEgld() throws {","        let adminController = self.instantiateController(","            AdminController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 100_000_000","            )","        )","    }","    ","    private func setupUsdc() throws {","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 100_000_000","                    )","                ]","            )","        )","    }","    ","    private func flipSingleEgld(","        amount: BigUint","    ) throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.flip(","            transactionInput: ContractCallTransactionInput(","                callerAddress: PLAYER_ADDRESS,","                egldValue: amount","            )","        )","    }","    ","    private func flipSingleUsdc(amount: BigUint) throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.flip(","            transactionInput: ContractCallTransactionInput(","                callerAddress: PLAYER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: amount","                    )","                ]","            )","        )","    }","    ","    private func bounty() throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.bounty(","            transactionInput: ContractCallTransactionInput(","                callerAddress: BOUNTY_ADDRESS","            )","        )","    }","}"],"fileName":"FlipTest.swift","type":"file","highlights":[{"line":110},{"line":111},{"line":112},{"line":113},{"line":114},{"line":115}]},"doc://SpaceKit/tutorials/SpaceKit/Deep-Dive-into-SpaceKit-Concepts/Exploring-SpaceKit's-Types":{"abstract":[],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Exploring-SpaceKit's-Types","title":"Exploring SpaceKit's Types","type":"topic","url":"\/tutorials\/spacekit\/deep-dive-into-spacekit-concepts\/exploring-spacekit's-types","kind":"article","role":"article"},"doc://SpaceKit/tutorials/SpaceKit/UnderstandTokens#Issuing-a-Fungible-Token-from-Your-Contract":{"url":"\/tutorials\/spacekit\/understandtokens#Issuing-a-Fungible-Token-from-Your-Contract","role":"pseudoSymbol","abstract":[{"type":"text","text":"Learn about the ESDT standard used in the SpaceKit framework, a token model that supports fungible tokens, non-fungible tokens (NFTs), semi-fungible tokens, and meta-esdt tokens."},{"type":"text","text":" "},{"text":"The SpaceKit framework uses a token standard called ESDT. This standard defines four types of tokens: fungible, non-fungible (NFT), semi-fungible, and meta-esdt.","type":"text"}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/UnderstandTokens#Issuing-a-Fungible-Token-from-Your-Contract","type":"section","title":"Issuing a Fungible Token from Your Contract","kind":"section"},"FlipContractTestTheGameSection3Step3.swift":{"fileName":"FlipTest.swift","type":"file","content":["import SpaceKitTesting","import Flip","","private let PLAYER_ADDRESS = \"player\"","private let BOUNTY_ADDRESS = \"bounty\"","private let OWNER_ADDRESS = \"owner\"","private let CONTRACT_ADDRESS = \"contract\"","private let USDC_TOKEN_IDENTIFIER_STRING = \"USDC-abcdef\"","private var USDC_TOKEN_IDENTIFIER: TokenIdentifier {","    \"\\(USDC_TOKEN_IDENTIFIER_STRING)\"","}","","final class FlipTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: PLAYER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: BOUNTY_ADDRESS,","                balance: 0","            ),","            WorldAccount(","                address: OWNER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: CONTRACT_ADDRESS,","                balance: 0,","                controllers: [","                    AdminController.self,","                    GameController.self,","                    StorageController.self","                ]","            )","        ]","    }","    ","    func testInitEgld() throws {","        try self.initContract()","        try self.setupEgld()","    }","    ","    func testInitUsdc() throws {","        try self.initContract()","        try self.setupUsdc()","    }","    ","    func testFlipSingleEgld() throws {","        try self.initContract()","        try self.setupEgld()","    }","    ","    func testFlipTooHighBetAbsoluteValue() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 100_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let gameController = self.instantiateController(GameController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try gameController.flip(","                transactionInput: ContractCallTransactionInput(","                    callerAddress: PLAYER_ADDRESS,","                    egldValue: 1_500","                )","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Bet is too high. Maximum allowed bet: 1000\"))","        }","    }","    ","    func testFlipTooHighBetPercent() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 10,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let gameController = self.instantiateController(GameController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try gameController.flip(","                transactionInput: ContractCallTransactionInput(","                    callerAddress: PLAYER_ADDRESS,","                    egldValue: 150_000","                )","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Bet is too high. Maximum allowed bet: 100000\"))","        }","    }","    ","    func testSetMaximumBet() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBet = try storageController.getMaximumBet(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBet, 100)","    }","    ","    func testSetMaximumBetPercent() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBetPercent = try storageController.getMaximumBetPercent(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBetPercent, 100)","    }","    ","    func testIncreaseEgldReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 1_000","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        ","        XCTAssertEqual(tokenReserve, 1_000)","        XCTAssertEqual(contractBalance, 1_000)","    }","    ","    func testIncreaseUsdcReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 1_000","                    )","                ]","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        ","        XCTAssertEqual(tokenReserve, 1_000)","        XCTAssertEqual(contractBalance, 1_000)","    }","    ","    func testWithdrawEgldReserve() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.withdrawReserve(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 10_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        let ownerBalance = self.getAccount(address: OWNER_ADDRESS)!.balance","        ","        XCTAssertEqual(tokenReserve, 90_000_000)","        XCTAssertEqual(contractBalance, 90_000_000)","        XCTAssertEqual(ownerBalance, 10_000_000)","    }","    ","    func testWithdrawUsdcReserve() throws {","        try self.initContract()","        try self.setupUsdc()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.withdrawReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 10_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        let ownerBalance = self.getAccount(address: OWNER_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        ","        XCTAssertEqual(tokenReserve, 90_000_000)","        XCTAssertEqual(contractBalance, 90_000_000)","        XCTAssertEqual(ownerBalance, 10_000_000)","    }","","    ","    func testSetMaximumBetNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBet(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testSetMaximumBetPercentNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBetPercent(","                tokenIdentifier: .egld,","                nonce: 0,","                percent: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testIncreaseReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.increaseReserve()","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testWithdrawReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.withdrawReserve(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 100","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    private func initContract() throws {","        try self.deployContract(","            at: CONTRACT_ADDRESS,","            arguments: [","               500,","               100,","               1","            ],","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","    }","    ","    private func setupEgld() throws {","        let adminController = self.instantiateController(","            AdminController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 100_000_000","            )","        )","    }","    ","    private func setupUsdc() throws {","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 100_000_000","                    )","                ]","            )","        )","    }","    ","    private func flipSingleEgld(","        amount: BigUint","    ) throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.flip(","            transactionInput: ContractCallTransactionInput(","                callerAddress: PLAYER_ADDRESS,","                egldValue: amount","            )","        )","    }","    ","    private func flipSingleUsdc(amount: BigUint) throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.flip(","            transactionInput: ContractCallTransactionInput(","                callerAddress: PLAYER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: amount","                    )","                ]","            )","        )","    }","    ","    private func bounty() throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.bounty(","            transactionInput: ContractCallTransactionInput(","                callerAddress: BOUNTY_ADDRESS","            )","        )","    }","}"],"highlights":[{"line":67},{"line":68}],"syntax":"swift","fileType":"swift","identifier":"FlipContractTestTheGameSection3Step3.swift"},"doc://SpaceKit/tutorials/SpaceKit/AsyncCalls#Declare-the-Callee-Proxy":{"url":"\/tutorials\/spacekit\/asynccalls#Declare-the-Callee-Proxy","kind":"section","type":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls#Declare-the-Callee-Proxy","abstract":[{"type":"text","text":"Blockchain platforms using SpaceVM enable seamless execution within a sharded environment. Sharding divides a blockchain’s global state and validation workload into smaller, manageable units known as shards. This method enhances scalability without compromising decentralization, allowing nodes to operate without significant computational resources."}],"title":"Declare the Callee Proxy","role":"pseudoSymbol"},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Working-with-the-BigUint-Type":{"url":"\/tutorials\/spacekit\/familiarizewithtypes#Working-with-the-BigUint-Type","type":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Working-with-the-BigUint-Type","kind":"section","abstract":[{"text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}],"role":"pseudoSymbol","title":"Working with the BigUint Type"},"FlipContractTestTheGameSection5Step2.swift":{"syntax":"swift","fileType":"swift","identifier":"FlipContractTestTheGameSection5Step2.swift","content":["import SpaceKitTesting","import Flip","","private let PLAYER_ADDRESS = \"player\"","private let BOUNTY_ADDRESS = \"bounty\"","private let OWNER_ADDRESS = \"owner\"","private let CONTRACT_ADDRESS = \"contract\"","private let USDC_TOKEN_IDENTIFIER_STRING = \"USDC-abcdef\"","private var USDC_TOKEN_IDENTIFIER: TokenIdentifier {","    \"\\(USDC_TOKEN_IDENTIFIER_STRING)\"","}","","final class FlipTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: PLAYER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: BOUNTY_ADDRESS,","                balance: 0","            ),","            WorldAccount(","                address: OWNER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: CONTRACT_ADDRESS,","                balance: 0,","                controllers: [","                    AdminController.self,","                    GameController.self,","                    StorageController.self","                ]","            )","        ]","    }","    ","    func testInitEgld() throws {","        try self.initContract()","        try self.setupEgld()","    }","    ","    func testInitUsdc() throws {","        try self.initContract()","        try self.setupUsdc()","    }","    ","    func testFlipSingleEgld() throws {","        try self.initContract()","        try self.setupEgld()","        try self.flipSingleEgld(amount: 100_000)","        ","        let storageController = self.instantiateController(","            StorageController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        let egldTokenReserve = try storageController","            .getTokenReserve(","                tokenIdentifier: .egld,","                tokenNonce: 0","            )","        ","        XCTAssertEqual(egldTokenReserve, 99_906_000)","    }","    ","    func testFlipSingleUsdc() throws {","        try self.initContract()","        try self.setupUsdc()","        try self.flipSingleUsdc(amount: 100_000)","        ","        let storageController = self.instantiateController(","            StorageController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        let usdcTokenReserve = try storageController","            .getTokenReserve(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                tokenNonce: 0","            )","        ","        XCTAssertEqual(usdcTokenReserve, 99_906_000)","    }","    ","    func testBountyTooEarly() throws {","        try self.initContract()","        try self.setupEgld()","        try self.flipSingleEgld(amount: 100_000)","        ","        let gameController = self.instantiateController(GameController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try gameController.bounty(","                transactionInput: ContractCallTransactionInput(","                    callerAddress: BOUNTY_ADDRESS","                )","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"No flip can be bounty.\"))","        }","    }","    ","    func testBountySingleWinEgld() throws {","    }","    ","    func testFlipTooHighBetAbsoluteValue() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 100_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let gameController = self.instantiateController(GameController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try gameController.flip(","                transactionInput: ContractCallTransactionInput(","                    callerAddress: PLAYER_ADDRESS,","                    egldValue: 1_500","                )","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Bet is too high. Maximum allowed bet: 1000\"))","        }","    }","    ","    func testFlipTooHighBetPercent() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 10,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let gameController = self.instantiateController(GameController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try gameController.flip(","                transactionInput: ContractCallTransactionInput(","                    callerAddress: PLAYER_ADDRESS,","                    egldValue: 150_000","                )","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Bet is too high. Maximum allowed bet: 100000\"))","        }","    }","    ","    func testSetMaximumBet() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBet = try storageController.getMaximumBet(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBet, 100)","    }","    ","    func testSetMaximumBetPercent() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBetPercent = try storageController.getMaximumBetPercent(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBetPercent, 100)","    }","    ","    func testIncreaseEgldReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 1_000","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        ","        XCTAssertEqual(tokenReserve, 1_000)","        XCTAssertEqual(contractBalance, 1_000)","    }","    ","    func testIncreaseUsdcReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 1_000","                    )","                ]","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        ","        XCTAssertEqual(tokenReserve, 1_000)","        XCTAssertEqual(contractBalance, 1_000)","    }","    ","    func testWithdrawEgldReserve() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.withdrawReserve(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 10_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        let ownerBalance = self.getAccount(address: OWNER_ADDRESS)!.balance","        ","        XCTAssertEqual(tokenReserve, 90_000_000)","        XCTAssertEqual(contractBalance, 90_000_000)","        XCTAssertEqual(ownerBalance, 10_000_000)","    }","    ","    func testWithdrawUsdcReserve() throws {","        try self.initContract()","        try self.setupUsdc()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.withdrawReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 10_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        let ownerBalance = self.getAccount(address: OWNER_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        ","        XCTAssertEqual(tokenReserve, 90_000_000)","        XCTAssertEqual(contractBalance, 90_000_000)","        XCTAssertEqual(ownerBalance, 10_000_000)","    }","","    ","    func testSetMaximumBetNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBet(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testSetMaximumBetPercentNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBetPercent(","                tokenIdentifier: .egld,","                nonce: 0,","                percent: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testIncreaseReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.increaseReserve()","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testWithdrawReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.withdrawReserve(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 100","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    private func initContract() throws {","        try self.deployContract(","            at: CONTRACT_ADDRESS,","            arguments: [","               500,","               100,","               1","            ],","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","    }","    ","    private func setupEgld() throws {","        let adminController = self.instantiateController(","            AdminController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 100_000_000","            )","        )","    }","    ","    private func setupUsdc() throws {","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 100_000_000","                    )","                ]","            )","        )","    }","    ","    private func flipSingleEgld(","        amount: BigUint","    ) throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.flip(","            transactionInput: ContractCallTransactionInput(","                callerAddress: PLAYER_ADDRESS,","                egldValue: amount","            )","        )","    }","    ","    private func flipSingleUsdc(amount: BigUint) throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.flip(","            transactionInput: ContractCallTransactionInput(","                callerAddress: PLAYER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: amount","                    )","                ]","            )","        )","    }","    ","    private func bounty() throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.bounty(","            transactionInput: ContractCallTransactionInput(","                callerAddress: BOUNTY_ADDRESS","            )","        )","    }","}"],"fileName":"FlipTest.swift","type":"file","highlights":[{"line":124},{"line":125},{"line":126}]},"doc://SpaceKit/tutorials/SpaceKit/FlipContractInitTests#Declare-Constants-for-the-Test-Environment":{"title":"Declare Constants for the Test Environment","role":"pseudoSymbol","kind":"section","abstract":[{"text":"Smart contracts are permissionless programs that often manage valuable assets. Because of this, writing comprehensive tests for both successful and failure scenarios is essential.","type":"text"}],"type":"section","url":"\/tutorials\/spacekit\/flipcontractinittests#Declare-Constants-for-the-Test-Environment","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractInitTests#Declare-Constants-for-the-Test-Environment"},"FlipContractTestTheGameSection5Step12.swift":{"fileName":"FlipTest.swift","type":"file","content":["import SpaceKitTesting","import Flip","","private let PLAYER_ADDRESS = \"player\"","private let BOUNTY_ADDRESS = \"bounty\"","private let OWNER_ADDRESS = \"owner\"","private let CONTRACT_ADDRESS = \"contract\"","private let USDC_TOKEN_IDENTIFIER_STRING = \"USDC-abcdef\"","private var USDC_TOKEN_IDENTIFIER: TokenIdentifier {","    \"\\(USDC_TOKEN_IDENTIFIER_STRING)\"","}","","final class FlipTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: PLAYER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: BOUNTY_ADDRESS,","                balance: 0","            ),","            WorldAccount(","                address: OWNER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: CONTRACT_ADDRESS,","                balance: 0,","                controllers: [","                    AdminController.self,","                    GameController.self,","                    StorageController.self","                ]","            )","        ]","    }","    ","    func testInitEgld() throws {","        try self.initContract()","        try self.setupEgld()","    }","    ","    func testInitUsdc() throws {","        try self.initContract()","        try self.setupUsdc()","    }","    ","    func testFlipSingleEgld() throws {","        try self.initContract()","        try self.setupEgld()","        try self.flipSingleEgld(amount: 100_000)","        ","        let storageController = self.instantiateController(","            StorageController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        let egldTokenReserve = try storageController","            .getTokenReserve(","                tokenIdentifier: .egld,","                tokenNonce: 0","            )","        ","        XCTAssertEqual(egldTokenReserve, 99_906_000)","    }","    ","    func testFlipSingleUsdc() throws {","        try self.initContract()","        try self.setupUsdc()","        try self.flipSingleUsdc(amount: 100_000)","        ","        let storageController = self.instantiateController(","            StorageController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        let usdcTokenReserve = try storageController","            .getTokenReserve(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                tokenNonce: 0","            )","        ","        XCTAssertEqual(usdcTokenReserve, 99_906_000)","    }","    ","    func testBountyTooEarly() throws {","        try self.initContract()","        try self.setupEgld()","        try self.flipSingleEgld(amount: 100_000)","        ","        let gameController = self.instantiateController(GameController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try gameController.bounty(","                transactionInput: ContractCallTransactionInput(","                    callerAddress: BOUNTY_ADDRESS","                )","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"No flip can be bounty.\"))","        }","    }","    ","    func testBountySingleWinEgld() throws {","        try self.initContract()","        try self.setupEgld()","        try self.flipSingleEgld(amount: 100_000)","        ","        let blockRandomSeed = Array(repeating: UInt8(0), count: 47) + [6]","        ","        self.setBlockInfos(","            nonce: 1,","            randomSeed: Data(blockRandomSeed)","        )","        ","        try self.bounty()","        ","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        let flipContractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        let ownerBalance = self.getAccount(address: OWNER_ADDRESS)!.balance","        let playerBalance = self.getAccount(address: PLAYER_ADDRESS)!.balance","        let bountyBalance = self.getAccount(address: BOUNTY_ADDRESS)!.balance","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(flipContractBalance, 99_906_000)","        XCTAssertEqual(ownerBalance, 5_000)","        XCTAssertEqual(playerBalance, 100_088_000)","        XCTAssertEqual(bountyBalance, 1_000)","        XCTAssertEqual(tokenReserve, 99_906_000)","    }","    ","    func testBountySingleWinUsdc() throws {","        try self.initContract()","        try self.setupUsdc()","        try self.flipSingleUsdc(amount: 100_000)","        ","        let blockRandomSeed = Array(repeating: UInt8(0), count: 47) + [6]","        ","        self.setBlockInfos(","            nonce: 1,","            randomSeed: Data(blockRandomSeed)","        )","        ","        try self.bounty()","        ","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        let flipContractBalance = self.getAccount(address: CONTRACT_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        let ownerBalance = self.getAccount(address: OWNER_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        let playerBalance = self.getAccount(address: PLAYER_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        let bountyBalance = self.getAccount(address: BOUNTY_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(flipContractBalance, 99_906_000)","        XCTAssertEqual(ownerBalance, 5_000)","        XCTAssertEqual(playerBalance, 100_088_000)","        XCTAssertEqual(bountyBalance, 1_000)","        XCTAssertEqual(tokenReserve, 99_906_000)","    }","    ","    func testBountySingleLoseEgld() throws {","        try self.initContract()","        try self.setupEgld()","        try self.flipSingleEgld(amount: 100_000)","        ","        let blockRandomSeed = Array(repeating: UInt8(0), count: 47) + [4]","        ","        self.setBlockInfos(","            nonce: 1,","            randomSeed: Data(blockRandomSeed)","        )","        ","        try self.bounty()","        ","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        let flipContractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        let ownerBalance = self.getAccount(address: OWNER_ADDRESS)!.balance","        let playerBalance = self.getAccount(address: PLAYER_ADDRESS)!.balance","        let bountyBalance = self.getAccount(address: BOUNTY_ADDRESS)!.balance","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(flipContractBalance, 100_094_000)","        XCTAssertEqual(ownerBalance, 5_000)","        XCTAssertEqual(playerBalance, 99_900_000)","        XCTAssertEqual(bountyBalance, 1_000)","        XCTAssertEqual(tokenReserve, 100_094_000)","    }","    ","    func testBountySingleLoseUsdc() throws {","        try self.initContract()","        try self.setupUsdc()","        try self.flipSingleUsdc(amount: 100_000)","        ","        let blockRandomSeed = Array(repeating: UInt8(0), count: 47) + [4]","        ","        self.setBlockInfos(","            nonce: 1,","            randomSeed: Data(blockRandomSeed)","        )","        ","        try self.bounty()","        ","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        let flipContractBalance = self.getAccount(address: CONTRACT_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        let ownerBalance = self.getAccount(address: OWNER_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        let playerBalance = self.getAccount(address: PLAYER_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        let bountyBalance = self.getAccount(address: BOUNTY_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(flipContractBalance, 100_094_000)","        XCTAssertEqual(ownerBalance, 5_000)","        XCTAssertEqual(playerBalance, 99_900_000)","        XCTAssertEqual(bountyBalance, 1_000)","        XCTAssertEqual(tokenReserve, 100_094_000)","    }","","    func testFlipTooHighBetAbsoluteValue() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 100_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let gameController = self.instantiateController(GameController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try gameController.flip(","                transactionInput: ContractCallTransactionInput(","                    callerAddress: PLAYER_ADDRESS,","                    egldValue: 1_500","                )","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Bet is too high. Maximum allowed bet: 1000\"))","        }","    }","    ","    func testFlipTooHighBetPercent() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 10,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let gameController = self.instantiateController(GameController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try gameController.flip(","                transactionInput: ContractCallTransactionInput(","                    callerAddress: PLAYER_ADDRESS,","                    egldValue: 150_000","                )","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Bet is too high. Maximum allowed bet: 100000\"))","        }","    }","    ","    func testSetMaximumBet() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBet = try storageController.getMaximumBet(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBet, 100)","    }","    ","    func testSetMaximumBetPercent() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBetPercent = try storageController.getMaximumBetPercent(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBetPercent, 100)","    }","    ","    func testIncreaseEgldReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 1_000","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        ","        XCTAssertEqual(tokenReserve, 1_000)","        XCTAssertEqual(contractBalance, 1_000)","    }","    ","    func testIncreaseUsdcReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 1_000","                    )","                ]","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        ","        XCTAssertEqual(tokenReserve, 1_000)","        XCTAssertEqual(contractBalance, 1_000)","    }","    ","    func testWithdrawEgldReserve() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.withdrawReserve(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 10_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        let ownerBalance = self.getAccount(address: OWNER_ADDRESS)!.balance","        ","        XCTAssertEqual(tokenReserve, 90_000_000)","        XCTAssertEqual(contractBalance, 90_000_000)","        XCTAssertEqual(ownerBalance, 10_000_000)","    }","    ","    func testWithdrawUsdcReserve() throws {","        try self.initContract()","        try self.setupUsdc()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.withdrawReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 10_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        let ownerBalance = self.getAccount(address: OWNER_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        ","        XCTAssertEqual(tokenReserve, 90_000_000)","        XCTAssertEqual(contractBalance, 90_000_000)","        XCTAssertEqual(ownerBalance, 10_000_000)","    }","","    ","    func testSetMaximumBetNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBet(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testSetMaximumBetPercentNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBetPercent(","                tokenIdentifier: .egld,","                nonce: 0,","                percent: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testIncreaseReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.increaseReserve()","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testWithdrawReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.withdrawReserve(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 100","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    private func initContract() throws {","        try self.deployContract(","            at: CONTRACT_ADDRESS,","            arguments: [","               500,","               100,","               1","            ],","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","    }","    ","    private func setupEgld() throws {","        let adminController = self.instantiateController(","            AdminController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 100_000_000","            )","        )","    }","    ","    private func setupUsdc() throws {","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 100_000_000","                    )","                ]","            )","        )","    }","    ","    private func flipSingleEgld(","        amount: BigUint","    ) throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.flip(","            transactionInput: ContractCallTransactionInput(","                callerAddress: PLAYER_ADDRESS,","                egldValue: amount","            )","        )","    }","    ","    private func flipSingleUsdc(amount: BigUint) throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.flip(","            transactionInput: ContractCallTransactionInput(","                callerAddress: PLAYER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: amount","                    )","                ]","            )","        )","    }","    ","    private func bounty() throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.bounty(","            transactionInput: ContractCallTransactionInput(","                callerAddress: BOUNTY_ADDRESS","            )","        )","    }","}"],"highlights":[{"line":237},{"line":238},{"line":239},{"line":240},{"line":241},{"line":242},{"line":243},{"line":244},{"line":245},{"line":246},{"line":247},{"line":248},{"line":249},{"line":250},{"line":251},{"line":252},{"line":253},{"line":254},{"line":255},{"line":256},{"line":257},{"line":258},{"line":259},{"line":260},{"line":261},{"line":262},{"line":263},{"line":264},{"line":265},{"line":266},{"line":267},{"line":268},{"line":269},{"line":270},{"line":271},{"line":272},{"line":273},{"line":274},{"line":275},{"line":276},{"line":277},{"line":278},{"line":279},{"line":280},{"line":281},{"line":282},{"line":283},{"line":284},{"line":285}],"syntax":"swift","fileType":"swift","identifier":"FlipContractTestTheGameSection5Step12.swift"},"doc://SpaceKit/tutorials/SpaceKit/CodingYourFirstContract#Testing-the-Contract":{"url":"\/tutorials\/spacekit\/codingyourfirstcontract#Testing-the-Contract","role":"pseudoSymbol","kind":"section","title":"Testing the Contract","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Testing-the-Contract","type":"section","abstract":[{"type":"text","text":"In this tutorial, you’ll create a simple smart contract that manages a counter. Users can increment or decrement the counter, and the changes are persisted across contract executions."}]},"doc://SpaceKit/tutorials/SpaceKit/FlipContractTestTheGame#Create-Utility-Functions-for-flip-and-bounty":{"url":"\/tutorials\/spacekit\/flipcontracttestthegame#Create-Utility-Functions-for-flip-and-bounty","type":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractTestTheGame#Create-Utility-Functions-for-flip-and-bounty","kind":"section","abstract":[{"type":"text","text":"This final chapter of the testing tutorial focuses on validating the core game logic implemented in the "},{"type":"codeVoice","code":"GameController"},{"text":".","type":"text"}],"role":"pseudoSymbol","title":"Create Utility Functions for flip and bounty"},"doc://SpaceKit/tutorials/SpaceKit/SyncCalls":{"title":"Interact with Other Contracts","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls","abstract":[{"type":"text","text":"Smart contracts can interact not only with users but also with other smart contracts. This enables more advanced protocols by leveraging existing ones. For example, you could integrate a decentralized exchange directly into your contract to perform token swaps. Decentralized applications often involve multiple contracts, each with a dedicated role, working together to achieve complex functionality—similar to microservices in backend systems."}],"kind":"project","role":"project","estimatedTime":"15min","type":"topic","url":"\/tutorials\/spacekit\/synccalls"},"FlipContractTestTheGameSection5Step4.swift":{"syntax":"swift","fileType":"swift","identifier":"FlipContractTestTheGameSection5Step4.swift","content":["import SpaceKitTesting","import Flip","","private let PLAYER_ADDRESS = \"player\"","private let BOUNTY_ADDRESS = \"bounty\"","private let OWNER_ADDRESS = \"owner\"","private let CONTRACT_ADDRESS = \"contract\"","private let USDC_TOKEN_IDENTIFIER_STRING = \"USDC-abcdef\"","private var USDC_TOKEN_IDENTIFIER: TokenIdentifier {","    \"\\(USDC_TOKEN_IDENTIFIER_STRING)\"","}","","final class FlipTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: PLAYER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: BOUNTY_ADDRESS,","                balance: 0","            ),","            WorldAccount(","                address: OWNER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: CONTRACT_ADDRESS,","                balance: 0,","                controllers: [","                    AdminController.self,","                    GameController.self,","                    StorageController.self","                ]","            )","        ]","    }","    ","    func testInitEgld() throws {","        try self.initContract()","        try self.setupEgld()","    }","    ","    func testInitUsdc() throws {","        try self.initContract()","        try self.setupUsdc()","    }","    ","    func testFlipSingleEgld() throws {","        try self.initContract()","        try self.setupEgld()","        try self.flipSingleEgld(amount: 100_000)","        ","        let storageController = self.instantiateController(","            StorageController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        let egldTokenReserve = try storageController","            .getTokenReserve(","                tokenIdentifier: .egld,","                tokenNonce: 0","            )","        ","        XCTAssertEqual(egldTokenReserve, 99_906_000)","    }","    ","    func testFlipSingleUsdc() throws {","        try self.initContract()","        try self.setupUsdc()","        try self.flipSingleUsdc(amount: 100_000)","        ","        let storageController = self.instantiateController(","            StorageController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        let usdcTokenReserve = try storageController","            .getTokenReserve(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                tokenNonce: 0","            )","        ","        XCTAssertEqual(usdcTokenReserve, 99_906_000)","    }","    ","    func testBountyTooEarly() throws {","        try self.initContract()","        try self.setupEgld()","        try self.flipSingleEgld(amount: 100_000)","        ","        let gameController = self.instantiateController(GameController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try gameController.bounty(","                transactionInput: ContractCallTransactionInput(","                    callerAddress: BOUNTY_ADDRESS","                )","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"No flip can be bounty.\"))","        }","    }","    ","    func testBountySingleWinEgld() throws {","        try self.initContract()","        try self.setupEgld()","        try self.flipSingleEgld(amount: 100_000)","        ","        let blockRandomSeed = Array(repeating: UInt8(0), count: 47) + [6]","    }","    ","    func testFlipTooHighBetAbsoluteValue() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 100_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let gameController = self.instantiateController(GameController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try gameController.flip(","                transactionInput: ContractCallTransactionInput(","                    callerAddress: PLAYER_ADDRESS,","                    egldValue: 1_500","                )","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Bet is too high. Maximum allowed bet: 1000\"))","        }","    }","    ","    func testFlipTooHighBetPercent() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 10,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let gameController = self.instantiateController(GameController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try gameController.flip(","                transactionInput: ContractCallTransactionInput(","                    callerAddress: PLAYER_ADDRESS,","                    egldValue: 150_000","                )","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Bet is too high. Maximum allowed bet: 100000\"))","        }","    }","    ","    func testSetMaximumBet() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBet = try storageController.getMaximumBet(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBet, 100)","    }","    ","    func testSetMaximumBetPercent() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBetPercent = try storageController.getMaximumBetPercent(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBetPercent, 100)","    }","    ","    func testIncreaseEgldReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 1_000","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        ","        XCTAssertEqual(tokenReserve, 1_000)","        XCTAssertEqual(contractBalance, 1_000)","    }","    ","    func testIncreaseUsdcReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 1_000","                    )","                ]","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        ","        XCTAssertEqual(tokenReserve, 1_000)","        XCTAssertEqual(contractBalance, 1_000)","    }","    ","    func testWithdrawEgldReserve() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.withdrawReserve(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 10_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        let ownerBalance = self.getAccount(address: OWNER_ADDRESS)!.balance","        ","        XCTAssertEqual(tokenReserve, 90_000_000)","        XCTAssertEqual(contractBalance, 90_000_000)","        XCTAssertEqual(ownerBalance, 10_000_000)","    }","    ","    func testWithdrawUsdcReserve() throws {","        try self.initContract()","        try self.setupUsdc()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.withdrawReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 10_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        let ownerBalance = self.getAccount(address: OWNER_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        ","        XCTAssertEqual(tokenReserve, 90_000_000)","        XCTAssertEqual(contractBalance, 90_000_000)","        XCTAssertEqual(ownerBalance, 10_000_000)","    }","","    ","    func testSetMaximumBetNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBet(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testSetMaximumBetPercentNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBetPercent(","                tokenIdentifier: .egld,","                nonce: 0,","                percent: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testIncreaseReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.increaseReserve()","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testWithdrawReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.withdrawReserve(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 100","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    private func initContract() throws {","        try self.deployContract(","            at: CONTRACT_ADDRESS,","            arguments: [","               500,","               100,","               1","            ],","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","    }","    ","    private func setupEgld() throws {","        let adminController = self.instantiateController(","            AdminController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 100_000_000","            )","        )","    }","    ","    private func setupUsdc() throws {","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 100_000_000","                    )","                ]","            )","        )","    }","    ","    private func flipSingleEgld(","        amount: BigUint","    ) throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.flip(","            transactionInput: ContractCallTransactionInput(","                callerAddress: PLAYER_ADDRESS,","                egldValue: amount","            )","        )","    }","    ","    private func flipSingleUsdc(amount: BigUint) throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.flip(","            transactionInput: ContractCallTransactionInput(","                callerAddress: PLAYER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: amount","                    )","                ]","            )","        )","    }","    ","    private func bounty() throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.bounty(","            transactionInput: ContractCallTransactionInput(","                callerAddress: BOUNTY_ADDRESS","            )","        )","    }","}"],"fileName":"FlipTest.swift","type":"file","highlights":[{"line":128},{"line":129}]},"FlipContractTestTheGameSection3Step6.swift":{"fileName":"FlipTest.swift","type":"file","content":["import SpaceKitTesting","import Flip","","private let PLAYER_ADDRESS = \"player\"","private let BOUNTY_ADDRESS = \"bounty\"","private let OWNER_ADDRESS = \"owner\"","private let CONTRACT_ADDRESS = \"contract\"","private let USDC_TOKEN_IDENTIFIER_STRING = \"USDC-abcdef\"","private var USDC_TOKEN_IDENTIFIER: TokenIdentifier {","    \"\\(USDC_TOKEN_IDENTIFIER_STRING)\"","}","","final class FlipTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: PLAYER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: BOUNTY_ADDRESS,","                balance: 0","            ),","            WorldAccount(","                address: OWNER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: CONTRACT_ADDRESS,","                balance: 0,","                controllers: [","                    AdminController.self,","                    GameController.self,","                    StorageController.self","                ]","            )","        ]","    }","    ","    func testInitEgld() throws {","        try self.initContract()","        try self.setupEgld()","    }","    ","    func testInitUsdc() throws {","        try self.initContract()","        try self.setupUsdc()","    }","    ","    func testFlipSingleEgld() throws {","        try self.initContract()","        try self.setupEgld()","        try self.flipSingleEgld(amount: 100_000)","        ","        let storageController = self.instantiateController(","            StorageController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        let egldTokenReserve = try storageController","            .getTokenReserve(","                tokenIdentifier: .egld,","                tokenNonce: 0","            )","    }","    ","    func testFlipTooHighBetAbsoluteValue() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 100_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let gameController = self.instantiateController(GameController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try gameController.flip(","                transactionInput: ContractCallTransactionInput(","                    callerAddress: PLAYER_ADDRESS,","                    egldValue: 1_500","                )","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Bet is too high. Maximum allowed bet: 1000\"))","        }","    }","    ","    func testFlipTooHighBetPercent() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 10,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let gameController = self.instantiateController(GameController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try gameController.flip(","                transactionInput: ContractCallTransactionInput(","                    callerAddress: PLAYER_ADDRESS,","                    egldValue: 150_000","                )","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Bet is too high. Maximum allowed bet: 100000\"))","        }","    }","    ","    func testSetMaximumBet() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBet = try storageController.getMaximumBet(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBet, 100)","    }","    ","    func testSetMaximumBetPercent() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBetPercent = try storageController.getMaximumBetPercent(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBetPercent, 100)","    }","    ","    func testIncreaseEgldReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 1_000","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        ","        XCTAssertEqual(tokenReserve, 1_000)","        XCTAssertEqual(contractBalance, 1_000)","    }","    ","    func testIncreaseUsdcReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 1_000","                    )","                ]","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        ","        XCTAssertEqual(tokenReserve, 1_000)","        XCTAssertEqual(contractBalance, 1_000)","    }","    ","    func testWithdrawEgldReserve() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.withdrawReserve(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 10_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        let ownerBalance = self.getAccount(address: OWNER_ADDRESS)!.balance","        ","        XCTAssertEqual(tokenReserve, 90_000_000)","        XCTAssertEqual(contractBalance, 90_000_000)","        XCTAssertEqual(ownerBalance, 10_000_000)","    }","    ","    func testWithdrawUsdcReserve() throws {","        try self.initContract()","        try self.setupUsdc()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.withdrawReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 10_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        let ownerBalance = self.getAccount(address: OWNER_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        ","        XCTAssertEqual(tokenReserve, 90_000_000)","        XCTAssertEqual(contractBalance, 90_000_000)","        XCTAssertEqual(ownerBalance, 10_000_000)","    }","","    ","    func testSetMaximumBetNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBet(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testSetMaximumBetPercentNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBetPercent(","                tokenIdentifier: .egld,","                nonce: 0,","                percent: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testIncreaseReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.increaseReserve()","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testWithdrawReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.withdrawReserve(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 100","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    private func initContract() throws {","        try self.deployContract(","            at: CONTRACT_ADDRESS,","            arguments: [","               500,","               100,","               1","            ],","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","    }","    ","    private func setupEgld() throws {","        let adminController = self.instantiateController(","            AdminController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 100_000_000","            )","        )","    }","    ","    private func setupUsdc() throws {","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 100_000_000","                    )","                ]","            )","        )","    }","    ","    private func flipSingleEgld(","        amount: BigUint","    ) throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.flip(","            transactionInput: ContractCallTransactionInput(","                callerAddress: PLAYER_ADDRESS,","                egldValue: amount","            )","        )","    }","    ","    private func flipSingleUsdc(amount: BigUint) throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.flip(","            transactionInput: ContractCallTransactionInput(","                callerAddress: PLAYER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: amount","                    )","                ]","            )","        )","    }","    ","    private func bounty() throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.bounty(","            transactionInput: ContractCallTransactionInput(","                callerAddress: BOUNTY_ADDRESS","            )","        )","    }","}"],"highlights":[{"line":75},{"line":76},{"line":77},{"line":78},{"line":79},{"line":80}],"syntax":"swift","fileType":"swift","identifier":"FlipContractTestTheGameSection3Step6.swift"},"doc://SpaceKit/tutorials/SpaceKit/FlipContractWriteTheGame":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteTheGame","estimatedTime":"20min","abstract":[{"type":"text","text":"With the storage and administrative endpoints complete, it’s time to build the core gameplay mechanics."}],"role":"project","title":"Implement the Game Logic for the Flip Contract","kind":"project","url":"\/tutorials\/spacekit\/flipcontractwritethegame","type":"topic"},"doc://SpaceKit/tutorials/SpaceKit/OperationsOnFungibleTokens#Mint-New-Tokens":{"url":"\/tutorials\/spacekit\/operationsonfungibletokens#Mint-New-Tokens","role":"pseudoSymbol","abstract":[{"type":"text","text":"Fungible tokens function similarly to traditional currencies, making them the simplest type of token to work with."}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnFungibleTokens#Mint-New-Tokens","type":"section","title":"Mint New Tokens","kind":"section"},"doc://SpaceKit/tutorials/SpaceKit/FlipContractWriteAdmin":{"estimatedTime":"20min","url":"\/tutorials\/spacekit\/flipcontractwriteadmin","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteAdmin","type":"topic","kind":"project","title":"Add Administrative Endpoints to the Flip Contract","role":"project","abstract":[{"text":"Now that your storage is fully set up, it’s time to define the administrative endpoints that allow the contract owner to manage critical values and assets.","type":"text"}]},"doc://SpaceKit/tutorials/SpaceKit/Build-a-Coin-Flip-Contract/Set-Up-Testing-in-the-SwiftVM":{"url":"\/tutorials\/spacekit\/build-a-coin-flip-contract\/set-up-testing-in-the-swiftvm","type":"topic","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Build-a-Coin-Flip-Contract\/Set-Up-Testing-in-the-SwiftVM","kind":"article","abstract":[],"role":"article","title":"Set Up Testing in the SwiftVM"},"FlipContractTestTheGameSection1Step6.swift":{"syntax":"swift","fileType":"swift","identifier":"FlipContractTestTheGameSection1Step6.swift","content":["import SpaceKitTesting","import Flip","","private let PLAYER_ADDRESS = \"player\"","private let BOUNTY_ADDRESS = \"bounty\"","private let OWNER_ADDRESS = \"owner\"","private let CONTRACT_ADDRESS = \"contract\"","private let USDC_TOKEN_IDENTIFIER_STRING = \"USDC-abcdef\"","private var USDC_TOKEN_IDENTIFIER: TokenIdentifier {","    \"\\(USDC_TOKEN_IDENTIFIER_STRING)\"","}","","final class FlipTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: PLAYER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: BOUNTY_ADDRESS,","                balance: 0","            ),","            WorldAccount(","                address: OWNER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: CONTRACT_ADDRESS,","                balance: 0,","                controllers: [","                    AdminController.self,","                    GameController.self,","                    StorageController.self","                ]","            )","        ]","    }","    ","    func testInitEgld() throws {","        try self.initContract()","        try self.setupEgld()","    }","    ","    func testInitUsdc() throws {","        try self.initContract()","        try self.setupUsdc()","    }","    ","    func testSetMaximumBet() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBet = try storageController.getMaximumBet(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBet, 100)","    }","    ","    func testSetMaximumBetPercent() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBetPercent = try storageController.getMaximumBetPercent(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBetPercent, 100)","    }","    ","    func testIncreaseEgldReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 1_000","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        ","        XCTAssertEqual(tokenReserve, 1_000)","        XCTAssertEqual(contractBalance, 1_000)","    }","    ","    func testIncreaseUsdcReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 1_000","                    )","                ]","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        ","        XCTAssertEqual(tokenReserve, 1_000)","        XCTAssertEqual(contractBalance, 1_000)","    }","    ","    func testWithdrawEgldReserve() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.withdrawReserve(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 10_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        let ownerBalance = self.getAccount(address: OWNER_ADDRESS)!.balance","        ","        XCTAssertEqual(tokenReserve, 90_000_000)","        XCTAssertEqual(contractBalance, 90_000_000)","        XCTAssertEqual(ownerBalance, 10_000_000)","    }","    ","    func testWithdrawUsdcReserve() throws {","        try self.initContract()","        try self.setupUsdc()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.withdrawReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 10_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        let ownerBalance = self.getAccount(address: OWNER_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        ","        XCTAssertEqual(tokenReserve, 90_000_000)","        XCTAssertEqual(contractBalance, 90_000_000)","        XCTAssertEqual(ownerBalance, 10_000_000)","    }","","    ","    func testSetMaximumBetNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBet(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testSetMaximumBetPercentNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBetPercent(","                tokenIdentifier: .egld,","                nonce: 0,","                percent: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testIncreaseReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.increaseReserve()","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testWithdrawReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.withdrawReserve(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 100","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    private func initContract() throws {","        try self.deployContract(","            at: CONTRACT_ADDRESS,","            arguments: [","               500,","               100,","               1","            ],","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","    }","    ","    private func setupEgld() throws {","        let adminController = self.instantiateController(","            AdminController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 100_000_000","            )","        )","    }","    ","    private func setupUsdc() throws {","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 100_000_000","                    )","                ]","            )","        )","    }","    ","    private func flipSingleEgld(","        amount: BigUint","    ) throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.flip(","            transactionInput: ContractCallTransactionInput(","                callerAddress: PLAYER_ADDRESS,","                egldValue: amount","            )","        )","    }","    ","    private func flipSingleUsdc(amount: BigUint) throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.flip(","            transactionInput: ContractCallTransactionInput(","                callerAddress: PLAYER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: amount","                    )","                ]","            )","        )","    }","    ","    private func bounty() throws {","    }","}"],"fileName":"FlipTest.swift","type":"file","highlights":[{"line":409},{"line":410},{"line":411}]},"FlipContractTestTheGameSection3Step2.swift":{"fileName":"FlipTest.swift","type":"file","content":["import SpaceKitTesting","import Flip","","private let PLAYER_ADDRESS = \"player\"","private let BOUNTY_ADDRESS = \"bounty\"","private let OWNER_ADDRESS = \"owner\"","private let CONTRACT_ADDRESS = \"contract\"","private let USDC_TOKEN_IDENTIFIER_STRING = \"USDC-abcdef\"","private var USDC_TOKEN_IDENTIFIER: TokenIdentifier {","    \"\\(USDC_TOKEN_IDENTIFIER_STRING)\"","}","","final class FlipTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: PLAYER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: BOUNTY_ADDRESS,","                balance: 0","            ),","            WorldAccount(","                address: OWNER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: CONTRACT_ADDRESS,","                balance: 0,","                controllers: [","                    AdminController.self,","                    GameController.self,","                    StorageController.self","                ]","            )","        ]","    }","    ","    func testInitEgld() throws {","        try self.initContract()","        try self.setupEgld()","    }","    ","    func testInitUsdc() throws {","        try self.initContract()","        try self.setupUsdc()","    }","    ","    func testFlipSingleEgld() throws {","    }","    ","    func testFlipTooHighBetAbsoluteValue() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 100_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let gameController = self.instantiateController(GameController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try gameController.flip(","                transactionInput: ContractCallTransactionInput(","                    callerAddress: PLAYER_ADDRESS,","                    egldValue: 1_500","                )","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Bet is too high. Maximum allowed bet: 1000\"))","        }","    }","    ","    func testFlipTooHighBetPercent() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 10,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let gameController = self.instantiateController(GameController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try gameController.flip(","                transactionInput: ContractCallTransactionInput(","                    callerAddress: PLAYER_ADDRESS,","                    egldValue: 150_000","                )","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Bet is too high. Maximum allowed bet: 100000\"))","        }","    }","    ","    func testSetMaximumBet() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBet = try storageController.getMaximumBet(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBet, 100)","    }","    ","    func testSetMaximumBetPercent() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBetPercent = try storageController.getMaximumBetPercent(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBetPercent, 100)","    }","    ","    func testIncreaseEgldReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 1_000","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        ","        XCTAssertEqual(tokenReserve, 1_000)","        XCTAssertEqual(contractBalance, 1_000)","    }","    ","    func testIncreaseUsdcReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 1_000","                    )","                ]","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        ","        XCTAssertEqual(tokenReserve, 1_000)","        XCTAssertEqual(contractBalance, 1_000)","    }","    ","    func testWithdrawEgldReserve() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.withdrawReserve(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 10_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        let ownerBalance = self.getAccount(address: OWNER_ADDRESS)!.balance","        ","        XCTAssertEqual(tokenReserve, 90_000_000)","        XCTAssertEqual(contractBalance, 90_000_000)","        XCTAssertEqual(ownerBalance, 10_000_000)","    }","    ","    func testWithdrawUsdcReserve() throws {","        try self.initContract()","        try self.setupUsdc()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.withdrawReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 10_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        let ownerBalance = self.getAccount(address: OWNER_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        ","        XCTAssertEqual(tokenReserve, 90_000_000)","        XCTAssertEqual(contractBalance, 90_000_000)","        XCTAssertEqual(ownerBalance, 10_000_000)","    }","","    ","    func testSetMaximumBetNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBet(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testSetMaximumBetPercentNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBetPercent(","                tokenIdentifier: .egld,","                nonce: 0,","                percent: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testIncreaseReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.increaseReserve()","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testWithdrawReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.withdrawReserve(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 100","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    private func initContract() throws {","        try self.deployContract(","            at: CONTRACT_ADDRESS,","            arguments: [","               500,","               100,","               1","            ],","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","    }","    ","    private func setupEgld() throws {","        let adminController = self.instantiateController(","            AdminController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 100_000_000","            )","        )","    }","    ","    private func setupUsdc() throws {","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 100_000_000","                    )","                ]","            )","        )","    }","    ","    private func flipSingleEgld(","        amount: BigUint","    ) throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.flip(","            transactionInput: ContractCallTransactionInput(","                callerAddress: PLAYER_ADDRESS,","                egldValue: amount","            )","        )","    }","    ","    private func flipSingleUsdc(amount: BigUint) throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.flip(","            transactionInput: ContractCallTransactionInput(","                callerAddress: PLAYER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: amount","                    )","                ]","            )","        )","    }","    ","    private func bounty() throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.bounty(","            transactionInput: ContractCallTransactionInput(","                callerAddress: BOUNTY_ADDRESS","            )","        )","    }","}"],"highlights":[{"line":66},{"line":67},{"line":68}],"syntax":"swift","fileType":"swift","identifier":"FlipContractTestTheGameSection3Step2.swift"},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Working-with-the-Vector-Type":{"url":"\/tutorials\/spacekit\/familiarizewithtypes#Working-with-the-Vector-Type","type":"section","kind":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Working-with-the-Vector-Type","abstract":[{"text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}],"title":"Working with the Vector Type","role":"pseudoSymbol"},"doc://SpaceKit/tutorials/SpaceKit/FlipContractWriteAdmin#Set-the-Minimum-Block-Bounty-Delay":{"url":"\/tutorials\/spacekit\/flipcontractwriteadmin#Set-the-Minimum-Block-Bounty-Delay","role":"pseudoSymbol","kind":"section","title":"Set the Minimum Block Bounty Delay","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteAdmin#Set-the-Minimum-Block-Bounty-Delay","type":"section","abstract":[{"text":"Now that your storage is fully set up, it’s time to define the administrative endpoints that allow the contract owner to manage critical values and assets.","type":"text"}]},"doc://SpaceKit/tutorials/SpaceKit/Getting-Started/Installing-the-Tools":{"abstract":[],"role":"article","kind":"article","url":"\/tutorials\/spacekit\/getting-started\/installing-the-tools","type":"topic","title":"Installing the Tools","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Getting-Started\/Installing-the-Tools"},"FlipContractTestTheGameSection5Step7.swift":{"syntax":"swift","fileType":"swift","identifier":"FlipContractTestTheGameSection5Step7.swift","content":["import SpaceKitTesting","import Flip","","private let PLAYER_ADDRESS = \"player\"","private let BOUNTY_ADDRESS = \"bounty\"","private let OWNER_ADDRESS = \"owner\"","private let CONTRACT_ADDRESS = \"contract\"","private let USDC_TOKEN_IDENTIFIER_STRING = \"USDC-abcdef\"","private var USDC_TOKEN_IDENTIFIER: TokenIdentifier {","    \"\\(USDC_TOKEN_IDENTIFIER_STRING)\"","}","","final class FlipTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: PLAYER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: BOUNTY_ADDRESS,","                balance: 0","            ),","            WorldAccount(","                address: OWNER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: CONTRACT_ADDRESS,","                balance: 0,","                controllers: [","                    AdminController.self,","                    GameController.self,","                    StorageController.self","                ]","            )","        ]","    }","    ","    func testInitEgld() throws {","        try self.initContract()","        try self.setupEgld()","    }","    ","    func testInitUsdc() throws {","        try self.initContract()","        try self.setupUsdc()","    }","    ","    func testFlipSingleEgld() throws {","        try self.initContract()","        try self.setupEgld()","        try self.flipSingleEgld(amount: 100_000)","        ","        let storageController = self.instantiateController(","            StorageController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        let egldTokenReserve = try storageController","            .getTokenReserve(","                tokenIdentifier: .egld,","                tokenNonce: 0","            )","        ","        XCTAssertEqual(egldTokenReserve, 99_906_000)","    }","    ","    func testFlipSingleUsdc() throws {","        try self.initContract()","        try self.setupUsdc()","        try self.flipSingleUsdc(amount: 100_000)","        ","        let storageController = self.instantiateController(","            StorageController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        let usdcTokenReserve = try storageController","            .getTokenReserve(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                tokenNonce: 0","            )","        ","        XCTAssertEqual(usdcTokenReserve, 99_906_000)","    }","    ","    func testBountyTooEarly() throws {","        try self.initContract()","        try self.setupEgld()","        try self.flipSingleEgld(amount: 100_000)","        ","        let gameController = self.instantiateController(GameController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try gameController.bounty(","                transactionInput: ContractCallTransactionInput(","                    callerAddress: BOUNTY_ADDRESS","                )","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"No flip can be bounty.\"))","        }","    }","    ","    func testBountySingleWinEgld() throws {","        try self.initContract()","        try self.setupEgld()","        try self.flipSingleEgld(amount: 100_000)","        ","        let blockRandomSeed = Array(repeating: UInt8(0), count: 47) + [6]","        ","        self.setBlockInfos(","            nonce: 1,","            randomSeed: Data(blockRandomSeed)","        )","        ","        try self.bounty()","        ","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","    }","    ","    func testFlipTooHighBetAbsoluteValue() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 100_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let gameController = self.instantiateController(GameController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try gameController.flip(","                transactionInput: ContractCallTransactionInput(","                    callerAddress: PLAYER_ADDRESS,","                    egldValue: 1_500","                )","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Bet is too high. Maximum allowed bet: 1000\"))","        }","    }","    ","    func testFlipTooHighBetPercent() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 10,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let gameController = self.instantiateController(GameController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try gameController.flip(","                transactionInput: ContractCallTransactionInput(","                    callerAddress: PLAYER_ADDRESS,","                    egldValue: 150_000","                )","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Bet is too high. Maximum allowed bet: 100000\"))","        }","    }","    ","    func testSetMaximumBet() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBet = try storageController.getMaximumBet(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBet, 100)","    }","    ","    func testSetMaximumBetPercent() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBetPercent = try storageController.getMaximumBetPercent(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBetPercent, 100)","    }","    ","    func testIncreaseEgldReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 1_000","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        ","        XCTAssertEqual(tokenReserve, 1_000)","        XCTAssertEqual(contractBalance, 1_000)","    }","    ","    func testIncreaseUsdcReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 1_000","                    )","                ]","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        ","        XCTAssertEqual(tokenReserve, 1_000)","        XCTAssertEqual(contractBalance, 1_000)","    }","    ","    func testWithdrawEgldReserve() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.withdrawReserve(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 10_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        let ownerBalance = self.getAccount(address: OWNER_ADDRESS)!.balance","        ","        XCTAssertEqual(tokenReserve, 90_000_000)","        XCTAssertEqual(contractBalance, 90_000_000)","        XCTAssertEqual(ownerBalance, 10_000_000)","    }","    ","    func testWithdrawUsdcReserve() throws {","        try self.initContract()","        try self.setupUsdc()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.withdrawReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 10_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        let ownerBalance = self.getAccount(address: OWNER_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        ","        XCTAssertEqual(tokenReserve, 90_000_000)","        XCTAssertEqual(contractBalance, 90_000_000)","        XCTAssertEqual(ownerBalance, 10_000_000)","    }","","    ","    func testSetMaximumBetNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBet(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testSetMaximumBetPercentNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBetPercent(","                tokenIdentifier: .egld,","                nonce: 0,","                percent: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testIncreaseReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.increaseReserve()","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testWithdrawReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.withdrawReserve(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 100","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    private func initContract() throws {","        try self.deployContract(","            at: CONTRACT_ADDRESS,","            arguments: [","               500,","               100,","               1","            ],","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","    }","    ","    private func setupEgld() throws {","        let adminController = self.instantiateController(","            AdminController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 100_000_000","            )","        )","    }","    ","    private func setupUsdc() throws {","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 100_000_000","                    )","                ]","            )","        )","    }","    ","    private func flipSingleEgld(","        amount: BigUint","    ) throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.flip(","            transactionInput: ContractCallTransactionInput(","                callerAddress: PLAYER_ADDRESS,","                egldValue: amount","            )","        )","    }","    ","    private func flipSingleUsdc(amount: BigUint) throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.flip(","            transactionInput: ContractCallTransactionInput(","                callerAddress: PLAYER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: amount","                    )","                ]","            )","        )","    }","    ","    private func bounty() throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.bounty(","            transactionInput: ContractCallTransactionInput(","                callerAddress: BOUNTY_ADDRESS","            )","        )","    }","}"],"fileName":"FlipTest.swift","type":"file","highlights":[{"line":137},{"line":138}]},"doc://SpaceKit/tutorials/SpaceKit/CodingYourFirstContract#Initializing-the-Project":{"url":"\/tutorials\/spacekit\/codingyourfirstcontract#Initializing-the-Project","role":"pseudoSymbol","kind":"section","title":"Initializing the Project","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Initializing-the-Project","type":"section","abstract":[{"type":"text","text":"In this tutorial, you’ll create a simple smart contract that manages a counter. Users can increment or decrement the counter, and the changes are persisted across contract executions."}]},"doc://SpaceKit/tutorials/SpaceKit/CodingYourFirstContract":{"url":"\/tutorials\/spacekit\/codingyourfirstcontract","kind":"project","estimatedTime":"20min","type":"topic","role":"project","title":"Building Your First Smart Contract","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract","abstract":[{"text":"In this tutorial, you’ll create a simple smart contract that manages a counter. Users can increment or decrement the counter, and the changes are persisted across contract executions.","type":"text"}]},"FlipContractTestAdminSection4Step8.swift":{"fileName":"FlipTest.swift","type":"file","content":["import SpaceKitTesting","import Flip","","private let PLAYER_ADDRESS = \"player\"","private let BOUNTY_ADDRESS = \"bounty\"","private let OWNER_ADDRESS = \"owner\"","private let CONTRACT_ADDRESS = \"contract\"","private let USDC_TOKEN_IDENTIFIER_STRING = \"USDC-abcdef\"","private var USDC_TOKEN_IDENTIFIER: TokenIdentifier {","    \"\\(USDC_TOKEN_IDENTIFIER_STRING)\"","}","","final class FlipTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: PLAYER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: BOUNTY_ADDRESS,","                balance: 0","            ),","            WorldAccount(","                address: OWNER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: CONTRACT_ADDRESS,","                balance: 0,","                controllers: [","                    AdminController.self,","                    GameController.self,","                    StorageController.self","                ]","            )","        ]","    }","    ","    func testInitEgld() throws {","        try self.initContract()","        try self.setupEgld()","    }","    ","    func testInitUsdc() throws {","        try self.initContract()","        try self.setupUsdc()","    }","    ","    func testSetMaximumBet() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBet = try storageController.getMaximumBet(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBet, 100)","    }","    ","    func testSetMaximumBetPercent() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBetPercent = try storageController.getMaximumBetPercent(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBetPercent, 100)","    }","    ","    func testIncreaseEgldReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 1_000","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        ","        XCTAssertEqual(tokenReserve, 1_000)","        XCTAssertEqual(contractBalance, 1_000)","    }","    ","    func testIncreaseUsdcReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 1_000","                    )","                ]","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        ","        XCTAssertEqual(tokenReserve, 1_000)","        XCTAssertEqual(contractBalance, 1_000)","    }","    ","    func testWithdrawEgldReserve() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.withdrawReserve(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 10_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        let ownerBalance = self.getAccount(address: OWNER_ADDRESS)!.balance","        ","        XCTAssertEqual(tokenReserve, 90_000_000)","        XCTAssertEqual(contractBalance, 90_000_000)","        XCTAssertEqual(ownerBalance, 10_000_000)","    }","    ","    func testWithdrawUsdcReserve() throws {","        try self.initContract()","        try self.setupUsdc()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.withdrawReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 10_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        let ownerBalance = self.getAccount(address: OWNER_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        ","        XCTAssertEqual(tokenReserve, 90_000_000)","        XCTAssertEqual(contractBalance, 90_000_000)","        XCTAssertEqual(ownerBalance, 10_000_000)","    }","","    ","    func testSetMaximumBetNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBet(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testSetMaximumBetPercentNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBetPercent(","                tokenIdentifier: .egld,","                nonce: 0,","                percent: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testIncreaseReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.increaseReserve()","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testWithdrawReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.withdrawReserve(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 100","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    private func initContract() throws {","        try self.deployContract(","            at: CONTRACT_ADDRESS,","            arguments: [","               500,","               100,","               1","            ],","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","    }","    ","    private func setupEgld() throws {","        let adminController = self.instantiateController(","            AdminController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 100_000_000","            )","        )","    }","    ","    private func setupUsdc() throws {","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 100_000_000","                    )","                ]","            )","        )","    }","}"],"highlights":[],"syntax":"swift","fileType":"swift","identifier":"FlipContractTestAdminSection4Step8.swift"},"doc://SpaceKit/tutorials/SpaceKit/Build-a-Coin-Flip-Contract/Test-the-Admin-Endpoints":{"type":"topic","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Build-a-Coin-Flip-Contract\/Test-the-Admin-Endpoints","role":"article","abstract":[],"url":"\/tutorials\/spacekit\/build-a-coin-flip-contract\/test-the-admin-endpoints","kind":"article","title":"Test the Admin Endpoints"},"doc://SpaceKit/tutorials/SpaceKit/InstallingTools#Installing-SpaceKits-Dependencies":{"url":"\/tutorials\/spacekit\/installingtools#Installing-SpaceKits-Dependencies","role":"pseudoSymbol","kind":"section","title":"Installing SpaceKit's Dependencies","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Installing-SpaceKits-Dependencies","type":"section","abstract":[{"type":"text","text":"Before writing your first smart contract with SpaceKit, ensure you have the necessary tools installed."}]},"doc://SpaceKit/tutorials/SpaceKit/FlipContractWriteAdmin#Increase-Contract-Reserves":{"url":"\/tutorials\/spacekit\/flipcontractwriteadmin#Increase-Contract-Reserves","type":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteAdmin#Increase-Contract-Reserves","kind":"section","abstract":[{"type":"text","text":"Now that your storage is fully set up, it’s time to define the administrative endpoints that allow the contract owner to manage critical values and assets."}],"role":"pseudoSymbol","title":"Increase Contract Reserves"},"doc://SpaceKit/tutorials/SpaceKit/CodingYourFirstContract#Writing-the-Contract-Code":{"url":"\/tutorials\/spacekit\/codingyourfirstcontract#Writing-the-Contract-Code","role":"pseudoSymbol","abstract":[{"type":"text","text":"In this tutorial, you’ll create a simple smart contract that manages a counter. Users can increment or decrement the counter, and the changes are persisted across contract executions."}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Writing-the-Contract-Code","type":"section","title":"Writing the Contract Code","kind":"section"},"doc://SpaceKit/tutorials/SpaceKit/TokenAttributes":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/TokenAttributes","url":"\/tutorials\/spacekit\/tokenattributes","role":"project","type":"topic","kind":"project","abstract":[{"type":"text","text":"The ESDT standard enables embedding custom data within non-fungible tokens, allowing developers to extend the functionality of their smart contracts. This additional data, referred to as “attributes,” is tied to the token and transfers along with it between wallets."}],"estimatedTime":"15min","title":"Enhance Your Contracts with Token Attributes"},"doc://SpaceKit/tutorials/SpaceKit/Getting-Started/Building-Your-First-Smart-Contract":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Getting-Started\/Building-Your-First-Smart-Contract","title":"Building Your First Smart Contract","kind":"article","url":"\/tutorials\/spacekit\/getting-started\/building-your-first-smart-contract","abstract":[],"type":"topic","role":"article"},"doc://SpaceKit/tutorials/SpaceKit/FlipContractWriteTheStorage":{"title":"Define the Storage for the Flip Contract","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteTheStorage","abstract":[{"type":"text","text":"With your Flip project initialized, you’re ready to begin implementing the smart contract. The contract is composed of the following components:"}],"kind":"project","role":"project","estimatedTime":"20min","type":"topic","url":"\/tutorials\/spacekit\/flipcontractwritethestorage"},"doc://SpaceKit/tutorials/SpaceKit/Build-a-Coin-Flip-Contract/Test-the-Game-Logic-for-the-Flip-Contract":{"url":"\/tutorials\/spacekit\/build-a-coin-flip-contract\/test-the-game-logic-for-the-flip-contract","type":"topic","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Build-a-Coin-Flip-Contract\/Test-the-Game-Logic-for-the-Flip-Contract","kind":"article","abstract":[],"role":"article","title":"Test the Game Logic for the Flip Contract"},"doc://SpaceKit/tutorials/SpaceKit/FlipContractTestAdmin#Test-the-increaseReserve-Endpoint":{"kind":"section","abstract":[{"text":"Admin endpoints are critical to the contract’s integrity. They not only control configuration parameters, but also grant access to withdraw the contract’s token reserves.","type":"text"}],"type":"section","url":"\/tutorials\/spacekit\/flipcontracttestadmin#Test-the-increaseReserve-Endpoint","role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractTestAdmin#Test-the-increaseReserve-Endpoint","title":"Test the increaseReserve Endpoint"},"doc://SpaceKit/tutorials/SpaceKit/FlipContractWriteAdmin#Withdraw-Contract-Reserves":{"url":"\/tutorials\/spacekit\/flipcontractwriteadmin#Withdraw-Contract-Reserves","role":"pseudoSymbol","kind":"section","title":"Withdraw Contract Reserves","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteAdmin#Withdraw-Contract-Reserves","type":"section","abstract":[{"type":"text","text":"Now that your storage is fully set up, it’s time to define the administrative endpoints that allow the contract owner to manage critical values and assets."}]},"doc://SpaceKit/tutorials/SpaceKit/OperationsOnNonFungibleTokens#Create-a-New-Nonce":{"abstract":[{"type":"text","text":"Non-fungible tokens (NFTs) are unique digital assets that cannot be interchanged. Each NFT is associated with a unique identifier, known as a nonce. You can think of it like an airline ticket—each ticket is assigned to a specific passenger, with individual preferences and details."}],"role":"pseudoSymbol","kind":"section","url":"\/tutorials\/spacekit\/operationsonnonfungibletokens#Create-a-New-Nonce","type":"section","title":"Create a New Nonce","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnNonFungibleTokens#Create-a-New-Nonce"},"doc://SpaceKit/tutorials/SpaceKit/AsyncCalls#Perform-an-Asynchronous-Call":{"url":"\/tutorials\/spacekit\/asynccalls#Perform-an-Asynchronous-Call","kind":"section","type":"section","role":"pseudoSymbol","title":"Perform an Asynchronous Call","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls#Perform-an-Asynchronous-Call","abstract":[{"type":"text","text":"Blockchain platforms using SpaceVM enable seamless execution within a sharded environment. Sharding divides a blockchain’s global state and validation workload into smaller, manageable units known as shards. This method enhances scalability without compromising decentralization, allowing nodes to operate without significant computational resources."}]},"doc://SpaceKit/tutorials/SpaceKit/OperationsOnNonFungibleTokens":{"estimatedTime":"15min","type":"topic","title":"Managing Non-Fungible Tokens","role":"project","url":"\/tutorials\/spacekit\/operationsonnonfungibletokens","abstract":[{"type":"text","text":"Non-fungible tokens (NFTs) are unique digital assets that cannot be interchanged. Each NFT is associated with a unique identifier, known as a nonce. You can think of it like an airline ticket—each ticket is assigned to a specific passenger, with individual preferences and details."}],"kind":"project","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnNonFungibleTokens"},"doc://SpaceKit/tutorials/SpaceKit/UnderstandTokens#Issuing-a-Non-Fungible-Token-from-Your-Contract":{"title":"Issuing a Non-Fungible Token from Your Contract","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/UnderstandTokens#Issuing-a-Non-Fungible-Token-from-Your-Contract","type":"section","abstract":[{"type":"text","text":"Learn about the ESDT standard used in the SpaceKit framework, a token model that supports fungible tokens, non-fungible tokens (NFTs), semi-fungible tokens, and meta-esdt tokens."},{"type":"text","text":" "},{"type":"text","text":"The SpaceKit framework uses a token standard called ESDT. This standard defines four types of tokens: fungible, non-fungible (NFT), semi-fungible, and meta-esdt."}],"kind":"section","role":"pseudoSymbol","url":"\/tutorials\/spacekit\/understandtokens#Issuing-a-Non-Fungible-Token-from-Your-Contract"},"doc://SpaceKit/tutorials/SpaceKit/FlipContractWriteTheStorage#Define-the-Flip-Structure":{"abstract":[{"type":"text","text":"With your Flip project initialized, you’re ready to begin implementing the smart contract. The contract is composed of the following components:"}],"url":"\/tutorials\/spacekit\/flipcontractwritethestorage#Define-the-Flip-Structure","role":"pseudoSymbol","title":"Define the Flip Structure","kind":"section","type":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FlipContractWriteTheStorage#Define-the-Flip-Structure"},"FlipContractTestTheGameSection4Step6.swift":{"syntax":"swift","fileType":"swift","identifier":"FlipContractTestTheGameSection4Step6.swift","content":["import SpaceKitTesting","import Flip","","private let PLAYER_ADDRESS = \"player\"","private let BOUNTY_ADDRESS = \"bounty\"","private let OWNER_ADDRESS = \"owner\"","private let CONTRACT_ADDRESS = \"contract\"","private let USDC_TOKEN_IDENTIFIER_STRING = \"USDC-abcdef\"","private var USDC_TOKEN_IDENTIFIER: TokenIdentifier {","    \"\\(USDC_TOKEN_IDENTIFIER_STRING)\"","}","","final class FlipTests: ContractTestCase {","    override var initialAccounts: [WorldAccount] {","        [","            WorldAccount(","                address: PLAYER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: BOUNTY_ADDRESS,","                balance: 0","            ),","            WorldAccount(","                address: OWNER_ADDRESS,","                balance: 100_000_000,","                esdtBalances: [","                    USDC_TOKEN_IDENTIFIER_STRING: [","                        EsdtBalance(","                            nonce: 0,","                            balance: 100_000_000","                        )","                    ]","                ]","            ),","            WorldAccount(","                address: CONTRACT_ADDRESS,","                balance: 0,","                controllers: [","                    AdminController.self,","                    GameController.self,","                    StorageController.self","                ]","            )","        ]","    }","    ","    func testInitEgld() throws {","        try self.initContract()","        try self.setupEgld()","    }","    ","    func testInitUsdc() throws {","        try self.initContract()","        try self.setupUsdc()","    }","    ","    func testFlipSingleEgld() throws {","        try self.initContract()","        try self.setupEgld()","        try self.flipSingleEgld(amount: 100_000)","        ","        let storageController = self.instantiateController(","            StorageController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        let egldTokenReserve = try storageController","            .getTokenReserve(","                tokenIdentifier: .egld,","                tokenNonce: 0","            )","        ","        XCTAssertEqual(egldTokenReserve, 99_906_000)","    }","    ","    func testFlipSingleUsdc() throws {","        try self.initContract()","        try self.setupUsdc()","        try self.flipSingleUsdc(amount: 100_000)","        ","        let storageController = self.instantiateController(","            StorageController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        let usdcTokenReserve = try storageController","            .getTokenReserve(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                tokenNonce: 0","            )","        ","        XCTAssertEqual(usdcTokenReserve, 99_906_000)","    }","    ","    func testBountyTooEarly() throws {","        try self.initContract()","        try self.setupEgld()","        try self.flipSingleEgld(amount: 100_000)","        ","        let gameController = self.instantiateController(GameController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try gameController.bounty(","                transactionInput: ContractCallTransactionInput(","                    callerAddress: BOUNTY_ADDRESS","                )","            )","        } catch {","            ","        }","    }","    ","    func testFlipTooHighBetAbsoluteValue() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 100_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let gameController = self.instantiateController(GameController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try gameController.flip(","                transactionInput: ContractCallTransactionInput(","                    callerAddress: PLAYER_ADDRESS,","                    egldValue: 1_500","                )","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Bet is too high. Maximum allowed bet: 1000\"))","        }","    }","    ","    func testFlipTooHighBetPercent() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 10,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let gameController = self.instantiateController(GameController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try gameController.flip(","                transactionInput: ContractCallTransactionInput(","                    callerAddress: PLAYER_ADDRESS,","                    egldValue: 150_000","                )","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Bet is too high. Maximum allowed bet: 100000\"))","        }","    }","    ","    func testSetMaximumBet() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBet = try storageController.getMaximumBet(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBet, 100)","    }","    ","    func testSetMaximumBetPercent() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 100,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let maximumBetPercent = try storageController.getMaximumBetPercent(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        ","        XCTAssertEqual(maximumBetPercent, 100)","    }","    ","    func testIncreaseEgldReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 1_000","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        ","        XCTAssertEqual(tokenReserve, 1_000)","        XCTAssertEqual(contractBalance, 1_000)","    }","    ","    func testIncreaseUsdcReserve() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 1_000","                    )","                ]","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        ","        XCTAssertEqual(tokenReserve, 1_000)","        XCTAssertEqual(contractBalance, 1_000)","    }","    ","    func testWithdrawEgldReserve() throws {","        try self.initContract()","        try self.setupEgld()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.withdrawReserve(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 10_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: .egld,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!.balance","        let ownerBalance = self.getAccount(address: OWNER_ADDRESS)!.balance","        ","        XCTAssertEqual(tokenReserve, 90_000_000)","        XCTAssertEqual(contractBalance, 90_000_000)","        XCTAssertEqual(ownerBalance, 10_000_000)","    }","    ","    func testWithdrawUsdcReserve() throws {","        try self.initContract()","        try self.setupUsdc()","        ","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        let storageController = self.instantiateController(StorageController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.withdrawReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 10_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        let tokenReserve = try storageController.getTokenReserve(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            tokenNonce: 0","        )","        let contractBalance = self.getAccount(address: CONTRACT_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        let ownerBalance = self.getAccount(address: OWNER_ADDRESS)!","            .getEsdtBalance(","                tokenIdentifier: USDC_TOKEN_IDENTIFIER_STRING,","                nonce: 0","            )","        ","        XCTAssertEqual(tokenReserve, 90_000_000)","        XCTAssertEqual(contractBalance, 90_000_000)","        XCTAssertEqual(ownerBalance, 10_000_000)","    }","","    ","    func testSetMaximumBetNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBet(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testSetMaximumBetPercentNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.setMaximumBetPercent(","                tokenIdentifier: .egld,","                nonce: 0,","                percent: 10_000_000","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testIncreaseReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.increaseReserve()","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    func testWithdrawReserveNotOwner() throws {","        try self.initContract()","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        do {","            try adminController.withdrawReserve(","                tokenIdentifier: .egld,","                nonce: 0,","                amount: 100","            )","            ","            XCTFail()","        } catch {","            XCTAssertEqual(error, .userError(message: \"Endpoint can only be called by owner\"))","        }","    }","    ","    private func initContract() throws {","        try self.deployContract(","            at: CONTRACT_ADDRESS,","            arguments: [","               500,","               100,","               1","            ],","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","    }","    ","    private func setupEgld() throws {","        let adminController = self.instantiateController(","            AdminController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: .egld,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: .egld,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                egldValue: 100_000_000","            )","        )","    }","    ","    private func setupUsdc() throws {","        let adminController = self.instantiateController(AdminController.self, for: CONTRACT_ADDRESS)!","        ","        try adminController.setMaximumBet(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            amount: 100_000_000_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.setMaximumBetPercent(","            tokenIdentifier: USDC_TOKEN_IDENTIFIER,","            nonce: 0,","            percent: 1_000,","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS","            )","        )","        ","        try adminController.increaseReserve(","            transactionInput: ContractCallTransactionInput(","                callerAddress: OWNER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: 100_000_000","                    )","                ]","            )","        )","    }","    ","    private func flipSingleEgld(","        amount: BigUint","    ) throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.flip(","            transactionInput: ContractCallTransactionInput(","                callerAddress: PLAYER_ADDRESS,","                egldValue: amount","            )","        )","    }","    ","    private func flipSingleUsdc(amount: BigUint) throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.flip(","            transactionInput: ContractCallTransactionInput(","                callerAddress: PLAYER_ADDRESS,","                esdtValue: [","                    TokenPayment(","                        tokenIdentifier: USDC_TOKEN_IDENTIFIER,","                        nonce: 0,","                        amount: amount","                    )","                ]","            )","        )","    }","    ","    private func bounty() throws {","        let gameController = self.instantiateController(","            GameController.self,","            for: CONTRACT_ADDRESS","        )!","        ","        try gameController.bounty(","            transactionInput: ContractCallTransactionInput(","                callerAddress: BOUNTY_ADDRESS","            )","        )","    }","}"],"fileName":"FlipTest.swift","type":"file","highlights":[{"line":112},{"line":113},{"line":114},{"line":115},{"line":116}]},"doc://SpaceKit/tutorials/SpaceKit/UnderstandTokens#Issuing-a-Meta-ESDT-from-Your-Contract":{"title":"Issuing a Meta ESDT from Your Contract","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/UnderstandTokens#Issuing-a-Meta-ESDT-from-Your-Contract","abstract":[{"type":"text","text":"Learn about the ESDT standard used in the SpaceKit framework, a token model that supports fungible tokens, non-fungible tokens (NFTs), semi-fungible tokens, and meta-esdt tokens."},{"type":"text","text":" "},{"type":"text","text":"The SpaceKit framework uses a token standard called ESDT. This standard defines four types of tokens: fungible, non-fungible (NFT), semi-fungible, and meta-esdt."}],"kind":"section","role":"pseudoSymbol","type":"section","url":"\/tutorials\/spacekit\/understandtokens#Issuing-a-Meta-ESDT-from-Your-Contract"},"doc://SpaceKit/tutorials/SpaceKit/OperationsOnFungibleTokens#Burn-Tokens":{"url":"\/tutorials\/spacekit\/operationsonfungibletokens#Burn-Tokens","kind":"section","type":"section","role":"pseudoSymbol","title":"Burn Tokens","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnFungibleTokens#Burn-Tokens","abstract":[{"text":"Fungible tokens function similarly to traditional currencies, making them the simplest type of token to work with.","type":"text"}]},"doc://SpaceKit/tutorials/SpaceKit/SyncCalls#Perform-a-Synchronous-Call":{"kind":"section","abstract":[{"text":"Smart contracts can interact not only with users but also with other smart contracts. This enables more advanced protocols by leveraging existing ones. For example, you could integrate a decentralized exchange directly into your contract to perform token swaps. Decentralized applications often involve multiple contracts, each with a dedicated role, working together to achieve complex functionality—similar to microservices in backend systems.","type":"text"}],"type":"section","url":"\/tutorials\/spacekit\/synccalls#Perform-a-Synchronous-Call","role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls#Perform-a-Synchronous-Call","title":"Perform a Synchronous Call"}}}