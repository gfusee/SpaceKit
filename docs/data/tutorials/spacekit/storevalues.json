{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues"},"variants":[{"paths":["\/tutorials\/spacekit\/storevalues"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"project","metadata":{"title":"Persist Values Between Executions","category":"SpaceKit","categoryPathComponent":"Space","role":"project"},"sections":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, there are situations where you need to persist data across multiple executions. To support this, SpaceKit provides a built-in “storage” system for every contract."}]},{"inlineContent":[{"type":"text","text":"The storage system is essentially a key-value dictionary where both keys and values are stored as raw data."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"SpaceKit abstracts away the complexities of encoding and decoding values, offering simple APIs for interacting with storage."}]},{"inlineContent":[{"text":"In this tutorial, you’ll learn two common approaches for storing data using ","type":"text"},{"type":"codeVoice","code":"@Storage"},{"type":"text","text":" and "},{"type":"codeVoice","code":"@Mapping"},{"text":" annotations. Additionally, SpaceKit provides advanced mechanisms like storage mappers to handle more complex data structures, which will be covered in a later chapter.","type":"text"}],"type":"paragraph"}],"estimatedTimeInMinutes":15,"title":"Persist Values Between Executions","chapter":"Persisting Data Across Executions","kind":"hero"},{"kind":"tasks","tasks":[{"contentSection":[{"mediaPosition":"trailing","content":[{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"@Storage"},{"text":" annotation allows you to persist a single value under a specified key. The ","type":"text"},{"type":"codeVoice","code":"key"},{"text":" parameter defines the storage key, and we recommend matching the key to the variable name for consistency.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"In this section, you’ll implement an endpoint called "},{"type":"codeVoice","code":"increaseStoredValue"},{"type":"text","text":", which increments a persistent integer each time it is called. If the value reaches 100, it resets to 0."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Note: The focus here is on basic implementation. Optimizations, especially for transaction cost reductions, will be introduced in a later chapter.","type":"text"}]}],"kind":"contentAndMedia"}],"stepsSection":[{"type":"step","runtimePreview":null,"caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Begin by setting up the basic structure of the contract."}]}],"media":null,"code":"StoreValuesSection1Step1.swift"},{"code":"StoreValuesSection1Step2.swift","type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Add a persistent integer to the contract using the ","type":"text"},{"type":"codeVoice","code":"@Storage"},{"type":"text","text":" annotation. By default, this integer is initialized to 0 unless otherwise specified."}]}],"media":null,"runtimePreview":null,"caption":[]},{"code":"StoreValuesSection1Step3.swift","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Implement the logic to increment the stored integer whenever the "},{"type":"codeVoice","code":"increaseStoredValue"},{"type":"text","text":" endpoint is invoked."}]}],"type":"step","caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Tip: Be mindful that reading from storage increases transaction costs. This section focuses on functionality, and optimization techniques will be covered in later chapters."}]}],"media":null},{"content":[{"inlineContent":[{"text":"If the integer reaches 100, reset it to 0.","type":"text"}],"type":"paragraph"}],"code":"StoreValuesSection1Step4.swift","type":"step","runtimePreview":null,"media":null,"caption":[]}],"anchor":"Working-with-Storage-for-Single-Value-Persistence","title":"Working with @Storage for Single Value Persistence"},{"stepsSection":[{"runtimePreview":null,"caption":[],"code":"StoreValuesSection2Step1.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Begin by defining the structure of your contract."}]}],"media":null,"type":"step"},{"content":[{"type":"paragraph","inlineContent":[{"text":"Use the ","type":"text"},{"type":"codeVoice","code":"@Mapping<Key, Value>"},{"type":"text","text":" annotation to associate each user’s address with their own persistent integer."}]}],"media":null,"caption":[{"inlineContent":[{"type":"text","text":"Tip: You don’t need to explicitly declare the type of the variable. Specifying the "},{"type":"codeVoice","code":"Key"},{"text":" and ","type":"text"},{"code":"Value","type":"codeVoice"},{"type":"text","text":" generic parameters is sufficient."}],"type":"paragraph"}],"type":"step","code":"StoreValuesSection2Step2.swift","runtimePreview":null},{"content":[{"type":"paragraph","inlineContent":[{"text":"Retrieve the caller’s address.","type":"text"}]}],"media":null,"runtimePreview":null,"type":"step","caption":[{"inlineContent":[{"type":"text","text":"Note: This involves interacting with the "},{"code":"Message","type":"codeVoice"},{"text":" object, which will be covered in detail in a future chapter.","type":"text"}],"type":"paragraph"}],"code":"StoreValuesSection2Step3.swift"},{"caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Increment the persistent integer associated with the caller’s address."}]}],"type":"step","media":null,"code":"StoreValuesSection2Step4.swift","runtimePreview":null},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Reset the caller’s integer to 0 once it reaches 100."}]}],"code":"StoreValuesSection2Step5.swift","type":"step","caption":[],"media":null,"runtimePreview":null},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Implement a view to allow querying of the stored integer value for a given user, enabling off-chain access to the data."}]}],"type":"step","caption":[{"type":"paragraph","inlineContent":[{"text":"Reminder: A view is an endpoint that does not alter any state on the blockchain.","type":"text"}]}],"code":"StoreValuesSection2Step6.swift","runtimePreview":null,"media":null}],"contentSection":[{"kind":"contentAndMedia","mediaPosition":"trailing","content":[{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"@Mapping","type":"codeVoice"},{"type":"text","text":" annotation allows you to store values under dynamically computed keys, effectively creating a nested dictionary in the contract’s storage. SpaceKit automatically handles encoding and decoding, ensuring typed access to both keys and values."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Think of it like this: if Alice and Bob both call your smart contract, each of them will have their own persistent storage SpaceKit. When Alice calls the contract, her address is used to store or retrieve address unique data, and the same happens for Bob with his own key. This way, each user can have their own independent version of the same data, without interference."}]},{"type":"paragraph","inlineContent":[{"text":"In this section, you’ll extend the ","type":"text"},{"type":"codeVoice","code":"increaseStoredValue"},{"type":"text","text":" endpoint so that each user (like Alice and Bob) will have a unique persistent integer tied to their address. The integer will be stored and incremented individually for each user, ensuring their data remains isolated."}]}]}],"title":"Leveraging @Mapping for Dynamic Key-Value Storage","anchor":"Leveraging-Mapping-for-Dynamic-Key-Value-Storage"}]},{"abstract":[{"text":"Many smart contracts rely on contextual data to execute their operations effectively. This data can include input payments, the caller’s address, the current time, the balance of a specific account, or even the contract owner.","type":"text"}],"title":"Retrieving Information from the Blockchain","featuredEyebrow":"Tutorial","action":{"overridingTitleInlineContent":[{"type":"text","text":"Get started"}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo","overridingTitle":"Get started","type":"reference","isActive":true},"kind":"callToAction"}],"hierarchy":{"paths":[["doc:\/\/SpaceKit\/tutorials\/Space","doc:\/\/SpaceKit\/tutorials\/Space\/Deep-Dive-into-SpaceKit-Concepts","doc:\/\/SpaceKit\/tutorials\/Space\/Deep-Dive-into-SpaceKit-Concepts\/Persisting-Data-Across-Executions"]],"reference":"doc:\/\/SpaceKit\/tutorials\/Space","modules":[{"projects":[{"sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Installing-SpaceKits-Dependencies","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Setting-Up-the-SpaceKit-CLI"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools"}],"reference":"doc:\/\/SpaceKit\/tutorials\/Space\/Getting-Started\/Installing-the-Tools"},{"reference":"doc:\/\/SpaceKit\/tutorials\/Space\/Getting-Started\/Building-Your-First-Smart-Contract","projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract","sections":[{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Initializing-the-Project"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Writing-the-Contract-Code"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Testing-the-Contract","kind":"task"}]}]},{"reference":"doc:\/\/SpaceKit\/tutorials\/Space\/Deep-Dive-into-SpaceKit-Concepts\/Exploring-SpaceKit's-Types","projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes","sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Understanding-the-Buffer-Type","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Working-with-the-BigUint-Type","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Working-with-the-Vector-Type","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Creating-Your-Own-Types","kind":"task"}]}]},{"reference":"doc:\/\/SpaceKit\/tutorials\/Space\/Deep-Dive-into-SpaceKit-Concepts\/Persisting-Data-Across-Executions","projects":[{"sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues#Working-with-Storage-for-Single-Value-Persistence","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues"}]},{"projects":[{"sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo#Accessing-Transaction-Context-Data","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo#Accessing-Blockchain-Context-Data","kind":"task"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo"}],"reference":"doc:\/\/SpaceKit\/tutorials\/Space\/Deep-Dive-into-SpaceKit-Concepts\/Retrieving-Information-from-the-Blockchain"},{"projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls","sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls#Declare-the-Callee-Proxy","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls#Perform-a-Synchronous-Call","kind":"task"}]}],"reference":"doc:\/\/SpaceKit\/tutorials\/Space\/Deep-Dive-into-SpaceKit-Concepts\/Interacting-with-Other-Contracts"},{"reference":"doc:\/\/SpaceKit\/tutorials\/Space\/Deep-Dive-into-SpaceKit-Concepts\/Calling-Contracts-Across-Shards","projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls","sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls#Declare-the-Callee-Proxy","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls#Perform-an-Asynchronous-Call","kind":"task"}]}]}]},"schemaVersion":{"minor":3,"major":0,"patch":0},"references":{"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges":{"title":"Handling Heap Allocation Challenges","type":"section","kind":"section","abstract":[{"text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges","url":"\/tutorials\/spacekit\/familiarizewithtypes#Handling-Heap-Allocation-Challenges","role":"pseudoSymbol"},"doc://SpaceKit/tutorials/SpaceKit/InstallingTools":{"role":"project","estimatedTime":"10min","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools","type":"topic","title":"Install the Necessary Tools","abstract":[{"type":"text","text":"Before writing your first smart contract with SpaceKit, ensure you have the necessary tools installed."}],"kind":"project","url":"\/tutorials\/spacekit\/installingtools"},"doc://SpaceKit/tutorials/Space/Deep-Dive-into-SpaceKit-Concepts/Persisting-Data-Across-Executions":{"title":"Persisting Data Across Executions","type":"topic","kind":"article","abstract":[],"identifier":"doc:\/\/SpaceKit\/tutorials\/Space\/Deep-Dive-into-SpaceKit-Concepts\/Persisting-Data-Across-Executions","url":"\/tutorials\/space\/deep-dive-into-spacekit-concepts\/persisting-data-across-executions","role":"article"},"doc://SpaceKit/tutorials/Space/Deep-Dive-into-SpaceKit-Concepts/Retrieving-Information-from-the-Blockchain":{"kind":"article","type":"topic","url":"\/tutorials\/space\/deep-dive-into-spacekit-concepts\/retrieving-information-from-the-blockchain","identifier":"doc:\/\/SpaceKit\/tutorials\/Space\/Deep-Dive-into-SpaceKit-Concepts\/Retrieving-Information-from-the-Blockchain","role":"article","title":"Retrieving Information from the Blockchain","abstract":[]},"StoreValuesSection2Step5.swift":{"identifier":"StoreValuesSection2Step5.swift","fileType":"swift","fileName":"lib.swift","syntax":"swift","content":["import SpaceKit","","@Contract struct MyContract {","    @Mapping<Address, UInt64>(key: \"storedIntegerForUser\") var storedIntegerForUser","    ","    public func increaseStoredValue() {","        let caller = Message.caller","        ","        guard self.storedIntegerForUser[caller] < 100 else {","            self.storedIntegerForUser[caller] = 0","            return","        }","        ","        self.storedIntegerForUser[caller] = self.storedIntegerForUser[caller] + 1","    }","}"],"highlights":[{"line":9},{"line":10},{"line":11},{"line":12},{"line":13}],"type":"file"},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Understanding-the-Buffer-Type":{"role":"pseudoSymbol","title":"Understanding the Buffer Type","kind":"section","type":"section","abstract":[{"text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Understanding-the-Buffer-Type","url":"\/tutorials\/spacekit\/familiarizewithtypes#Understanding-the-Buffer-Type"},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Working-with-the-Vector-Type":{"abstract":[{"type":"text","text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM."}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Working-with-the-Vector-Type","role":"pseudoSymbol","kind":"section","title":"Working with the Vector Type","type":"section","url":"\/tutorials\/spacekit\/familiarizewithtypes#Working-with-the-Vector-Type"},"StoreValuesSection1Step3.swift":{"fileName":"lib.swift","type":"file","fileType":"swift","identifier":"StoreValuesSection1Step3.swift","highlights":[{"line":7}],"syntax":"swift","content":["import SpaceKit","","@Contract struct MyContract {","    @Storage(key: \"storedInteger\") var storedInteger: UInt64","    ","    public func increaseStoredValue() {","        self.storedInteger = self.storedInteger + 1","    }","}"]},"StoreValuesSection2Step4.swift":{"type":"file","fileType":"swift","highlights":[{"line":8},{"line":9}],"fileName":"lib.swift","identifier":"StoreValuesSection2Step4.swift","syntax":"swift","content":["import SpaceKit","","@Contract struct MyContract {","    @Mapping<Address, UInt64>(key: \"storedIntegerForUser\") var storedIntegerForUser","    ","    public func increaseStoredValue() {","        let caller = Message.caller","        ","        self.storedIntegerForUser[caller] = self.storedIntegerForUser[caller] + 1","    }","}"]},"StoreValuesSection1Step1.swift":{"fileName":"lib.swift","type":"file","fileType":"swift","identifier":"StoreValuesSection1Step1.swift","highlights":[],"syntax":"swift","content":["import SpaceKit","","@Contract struct MyContract {","    public func increaseStoredValue() {","        ","    }","}"]},"doc://SpaceKit/tutorials/Space":{"kind":"overview","type":"topic","url":"\/tutorials\/space","identifier":"doc:\/\/SpaceKit\/tutorials\/Space","role":"overview","title":"Meet SpaceKit","abstract":[{"text":"Discover how SpaceKit simplifies blockchain development using Swift. Dive into the world of Web3 with ease and efficiency.","type":"text"}]},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Creating-Your-Own-Types":{"role":"pseudoSymbol","title":"Creating Your Own Types","kind":"section","type":"section","abstract":[{"text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Creating-Your-Own-Types","url":"\/tutorials\/spacekit\/familiarizewithtypes#Creating-Your-Own-Types"},"doc://SpaceKit/tutorials/SpaceKit/CodingYourFirstContract#Testing-the-Contract":{"role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Testing-the-Contract","type":"section","title":"Testing the Contract","abstract":[{"type":"text","text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user."}],"kind":"section","url":"\/tutorials\/spacekit\/codingyourfirstcontract#Testing-the-Contract"},"doc://SpaceKit/tutorials/SpaceKit/SyncCalls#Declare-the-Callee-Proxy":{"role":"pseudoSymbol","title":"Declare the Callee Proxy","kind":"section","type":"section","abstract":[{"text":"Smart contracts can interact not only with users but also with other smart contracts. This enables more advanced protocols by leveraging existing ones. For example, you could integrate a decentralized exchange directly into your contract to perform token swaps. Decentralized applications often involve multiple contracts, each with a dedicated role, working together to achieve complex functionality—similar to microservices in backend systems.","type":"text"}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls#Declare-the-Callee-Proxy","url":"\/tutorials\/spacekit\/synccalls#Declare-the-Callee-Proxy"},"doc://SpaceKit/tutorials/Space/Deep-Dive-into-SpaceKit-Concepts/Exploring-SpaceKit's-Types":{"abstract":[],"identifier":"doc:\/\/SpaceKit\/tutorials\/Space\/Deep-Dive-into-SpaceKit-Concepts\/Exploring-SpaceKit's-Types","role":"article","kind":"article","title":"Exploring SpaceKit's Types","type":"topic","url":"\/tutorials\/space\/deep-dive-into-spacekit-concepts\/exploring-spacekit's-types"},"doc://SpaceKit/tutorials/SpaceKit/SyncCalls#Perform-a-Synchronous-Call":{"type":"section","title":"Perform a Synchronous Call","url":"\/tutorials\/spacekit\/synccalls#Perform-a-Synchronous-Call","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls#Perform-a-Synchronous-Call","kind":"section","role":"pseudoSymbol","abstract":[{"type":"text","text":"Smart contracts can interact not only with users but also with other smart contracts. This enables more advanced protocols by leveraging existing ones. For example, you could integrate a decentralized exchange directly into your contract to perform token swaps. Decentralized applications often involve multiple contracts, each with a dedicated role, working together to achieve complex functionality—similar to microservices in backend systems."}]},"StoreValuesSection1Step2.swift":{"fileName":"lib.swift","type":"file","fileType":"swift","identifier":"StoreValuesSection1Step2.swift","highlights":[{"line":4},{"line":5}],"syntax":"swift","content":["import SpaceKit","","@Contract struct MyContract {","    @Storage(key: \"storedInteger\") var storedInteger: UInt64","    ","    public func increaseStoredValue() {","        ","    }","}"]},"StoreValuesSection1Step4.swift":{"highlights":[{"line":7},{"line":8},{"line":9},{"line":10},{"line":11}],"identifier":"StoreValuesSection1Step4.swift","type":"file","fileType":"swift","content":["import SpaceKit","","@Contract struct MyContract {","    @Storage(key: \"storedInteger\") var storedInteger: UInt64","    ","    public func increaseStoredValue() {","        guard self.storedInteger < 100 else {","            self.storedInteger = 0","            return","        }","        ","        self.storedInteger = self.storedInteger + 1","    }","}"],"syntax":"swift","fileName":"lib.swift"},"StoreValuesSection2Step2.swift":{"fileName":"lib.swift","type":"file","fileType":"swift","identifier":"StoreValuesSection2Step2.swift","highlights":[{"line":4},{"line":5}],"syntax":"swift","content":["import SpaceKit","","@Contract struct MyContract {","    @Mapping<Address, UInt64>(key: \"storedIntegerForUser\") var storedIntegerForUser","    ","    public func increaseStoredValue() {","        ","    }","}"]},"doc://SpaceKit/tutorials/Space/Deep-Dive-into-SpaceKit-Concepts/Interacting-with-Other-Contracts":{"identifier":"doc:\/\/SpaceKit\/tutorials\/Space\/Deep-Dive-into-SpaceKit-Concepts\/Interacting-with-Other-Contracts","type":"topic","kind":"article","title":"Interacting with Other Contracts","abstract":[],"role":"article","url":"\/tutorials\/space\/deep-dive-into-spacekit-concepts\/interacting-with-other-contracts"},"doc://SpaceKit/tutorials/SpaceKit/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract":{"type":"section","abstract":[{"type":"text","text":"Before writing your first smart contract with SpaceKit, ensure you have the necessary tools installed."}],"url":"\/tutorials\/spacekit\/installingtools#Initializing-and-Compiling-Your-First-Smart-Contract","role":"pseudoSymbol","title":"Initializing and Compiling Your First Smart Contract","kind":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract"},"doc://SpaceKit/tutorials/SpaceKit/StoreValues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage":{"title":"Leveraging @Mapping for Dynamic Key-Value Storage","type":"section","kind":"section","abstract":[{"text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory.","type":"text"}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage","url":"\/tutorials\/spacekit\/storevalues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage","role":"pseudoSymbol"},"doc://SpaceKit/tutorials/Space/Getting-Started/Installing-the-Tools":{"title":"Installing the Tools","type":"topic","kind":"article","abstract":[],"identifier":"doc:\/\/SpaceKit\/tutorials\/Space\/Getting-Started\/Installing-the-Tools","url":"\/tutorials\/space\/getting-started\/installing-the-tools","role":"article"},"doc://SpaceKit/tutorials/Space/Getting-Started/Building-Your-First-Smart-Contract":{"title":"Building Your First Smart Contract","type":"topic","url":"\/tutorials\/space\/getting-started\/building-your-first-smart-contract","kind":"article","abstract":[],"identifier":"doc:\/\/SpaceKit\/tutorials\/Space\/Getting-Started\/Building-Your-First-Smart-Contract","role":"article"},"StoreValuesSection2Step1.swift":{"fileName":"lib.swift","type":"file","fileType":"swift","identifier":"StoreValuesSection2Step1.swift","highlights":[],"syntax":"swift","content":["import SpaceKit","","@Contract struct MyContract {","    public func increaseStoredValue() {","        ","    }","}"]},"doc://SpaceKit/tutorials/SpaceKit/GetInfo":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo","type":"topic","kind":"project","title":"Retrieving Information from the Blockchain","abstract":[{"text":"Many smart contracts rely on contextual data to execute their operations effectively. This data can include input payments, the caller’s address, the current time, the balance of a specific account, or even the contract owner.","type":"text"}],"role":"project","estimatedTime":"10min","url":"\/tutorials\/spacekit\/getinfo"},"doc://SpaceKit/tutorials/SpaceKit/StoreValues#Working-with-Storage-for-Single-Value-Persistence":{"abstract":[{"text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory.","type":"text"}],"url":"\/tutorials\/spacekit\/storevalues#Working-with-Storage-for-Single-Value-Persistence","type":"section","role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues#Working-with-Storage-for-Single-Value-Persistence","title":"Working with @Storage for Single Value Persistence","kind":"section"},"doc://SpaceKit/tutorials/SpaceKit/InstallingTools#Setting-Up-the-SpaceKit-CLI":{"url":"\/tutorials\/spacekit\/installingtools#Setting-Up-the-SpaceKit-CLI","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Setting-Up-the-SpaceKit-CLI","type":"section","title":"Setting Up the SpaceKit CLI","abstract":[{"text":"Before writing your first smart contract with SpaceKit, ensure you have the necessary tools installed.","type":"text"}],"kind":"section","role":"pseudoSymbol"},"doc://SpaceKit/tutorials/SpaceKit/SyncCalls":{"abstract":[{"type":"text","text":"Smart contracts can interact not only with users but also with other smart contracts. This enables more advanced protocols by leveraging existing ones. For example, you could integrate a decentralized exchange directly into your contract to perform token swaps. Decentralized applications often involve multiple contracts, each with a dedicated role, working together to achieve complex functionality—similar to microservices in backend systems."}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls","estimatedTime":"15min","role":"project","kind":"project","title":"Interact with Other Contracts","type":"topic","url":"\/tutorials\/spacekit\/synccalls"},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes":{"kind":"project","type":"topic","url":"\/tutorials\/spacekit\/familiarizewithtypes","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes","role":"project","title":"Exploring SpaceKit's Types","estimatedTime":"20min","abstract":[{"text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}]},"doc://SpaceKit/tutorials/SpaceKit/StoreValues":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues","type":"topic","kind":"project","title":"Persist Values Between Executions","abstract":[{"text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory.","type":"text"}],"role":"project","estimatedTime":"15min","url":"\/tutorials\/spacekit\/storevalues"},"StoreValuesSection2Step6.swift":{"fileName":"lib.swift","type":"file","fileType":"swift","identifier":"StoreValuesSection2Step6.swift","highlights":[{"line":16},{"line":17},{"line":18},{"line":19}],"syntax":"swift","content":["import SpaceKit","","@Contract struct MyContract {","    @Mapping<Address, UInt64>(key: \"storedIntegerForUser\") var storedIntegerForUser","    ","    public func increaseStoredValue() {","        let caller = Message.caller","        ","        guard self.storedIntegerForUser[caller] < 100 else {","            self.storedIntegerForUser[caller] = 0","            return","        }","        ","        self.storedIntegerForUser[caller] = self.storedIntegerForUser[caller] + 1","    }","    ","    public func getStoredIntegerForUser(user: Address) -> UInt64 {","        return self.storedIntegerForUser[user]","    }","}"]},"doc://SpaceKit/tutorials/SpaceKit/AsyncCalls#Perform-an-Asynchronous-Call":{"role":"pseudoSymbol","title":"Perform an Asynchronous Call","kind":"section","type":"section","abstract":[{"text":"Blockchain platforms using SpaceVM enable seamless execution within a sharded environment. Sharding divides a blockchain’s global state and validation workload into smaller, manageable units known as shards. This method enhances scalability without compromising decentralization, allowing nodes to operate without significant computational resources.","type":"text"}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls#Perform-an-Asynchronous-Call","url":"\/tutorials\/spacekit\/asynccalls#Perform-an-Asynchronous-Call"},"doc://SpaceKit/tutorials/SpaceKit/InstallingTools#Installing-SpaceKits-Dependencies":{"title":"Installing SpaceKit's Dependencies","type":"section","kind":"section","abstract":[{"text":"Before writing your first smart contract with SpaceKit, ensure you have the necessary tools installed.","type":"text"}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Installing-SpaceKits-Dependencies","url":"\/tutorials\/spacekit\/installingtools#Installing-SpaceKits-Dependencies","role":"pseudoSymbol"},"doc://SpaceKit/tutorials/SpaceKit/GetInfo#Accessing-Transaction-Context-Data":{"abstract":[{"type":"text","text":"Many smart contracts rely on contextual data to execute their operations effectively. This data can include input payments, the caller’s address, the current time, the balance of a specific account, or even the contract owner."}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo#Accessing-Transaction-Context-Data","role":"pseudoSymbol","kind":"section","title":"Accessing Transaction Context Data","type":"section","url":"\/tutorials\/spacekit\/getinfo#Accessing-Transaction-Context-Data"},"doc://SpaceKit/tutorials/Space/Deep-Dive-into-SpaceKit-Concepts/Calling-Contracts-Across-Shards":{"abstract":[],"url":"\/tutorials\/space\/deep-dive-into-spacekit-concepts\/calling-contracts-across-shards","type":"topic","role":"article","identifier":"doc:\/\/SpaceKit\/tutorials\/Space\/Deep-Dive-into-SpaceKit-Concepts\/Calling-Contracts-Across-Shards","title":"Calling Contracts Across Shards","kind":"article"},"doc://SpaceKit/tutorials/SpaceKit/CodingYourFirstContract#Initializing-the-Project":{"title":"Initializing the Project","type":"section","kind":"section","abstract":[{"text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user.","type":"text"}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Initializing-the-Project","url":"\/tutorials\/spacekit\/codingyourfirstcontract#Initializing-the-Project","role":"pseudoSymbol"},"doc://SpaceKit/tutorials/SpaceKit/AsyncCalls#Declare-the-Callee-Proxy":{"type":"section","abstract":[{"type":"text","text":"Blockchain platforms using SpaceVM enable seamless execution within a sharded environment. Sharding divides a blockchain’s global state and validation workload into smaller, manageable units known as shards. This method enhances scalability without compromising decentralization, allowing nodes to operate without significant computational resources."}],"url":"\/tutorials\/spacekit\/asynccalls#Declare-the-Callee-Proxy","role":"pseudoSymbol","title":"Declare the Callee Proxy","kind":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls#Declare-the-Callee-Proxy"},"doc://SpaceKit/tutorials/SpaceKit/GetInfo#Accessing-Blockchain-Context-Data":{"type":"section","title":"Accessing Blockchain Context Data","url":"\/tutorials\/spacekit\/getinfo#Accessing-Blockchain-Context-Data","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo#Accessing-Blockchain-Context-Data","kind":"section","role":"pseudoSymbol","abstract":[{"type":"text","text":"Many smart contracts rely on contextual data to execute their operations effectively. This data can include input payments, the caller’s address, the current time, the balance of a specific account, or even the contract owner."}]},"StoreValuesSection2Step3.swift":{"fileName":"lib.swift","type":"file","fileType":"swift","identifier":"StoreValuesSection2Step3.swift","highlights":[{"line":7}],"syntax":"swift","content":["import SpaceKit","","@Contract struct MyContract {","    @Mapping<Address, UInt64>(key: \"storedIntegerForUser\") var storedIntegerForUser","    ","    public func increaseStoredValue() {","        let caller = Message.caller","    }","}"]},"doc://SpaceKit/tutorials/SpaceKit/CodingYourFirstContract#Writing-the-Contract-Code":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Writing-the-Contract-Code","type":"section","kind":"section","title":"Writing the Contract Code","abstract":[{"text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user.","type":"text"}],"role":"pseudoSymbol","url":"\/tutorials\/spacekit\/codingyourfirstcontract#Writing-the-Contract-Code"},"doc://SpaceKit/tutorials/SpaceKit/CodingYourFirstContract":{"role":"project","estimatedTime":"20min","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract","type":"topic","title":"Building Your First Smart Contract","abstract":[{"type":"text","text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user."}],"kind":"project","url":"\/tutorials\/spacekit\/codingyourfirstcontract"},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Working-with-the-BigUint-Type":{"type":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Working-with-the-BigUint-Type","role":"pseudoSymbol","kind":"section","url":"\/tutorials\/spacekit\/familiarizewithtypes#Working-with-the-BigUint-Type","abstract":[{"text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}],"title":"Working with the BigUint Type"},"doc://SpaceKit/tutorials/SpaceKit/AsyncCalls":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls","type":"topic","kind":"project","title":"Interacting with Contracts Across Shards","abstract":[{"text":"Blockchain platforms using SpaceVM enable seamless execution within a sharded environment. Sharding divides a blockchain’s global state and validation workload into smaller, manageable units known as shards. This method enhances scalability without compromising decentralization, allowing nodes to operate without significant computational resources.","type":"text"}],"role":"project","estimatedTime":"15min","url":"\/tutorials\/spacekit\/asynccalls"}}}