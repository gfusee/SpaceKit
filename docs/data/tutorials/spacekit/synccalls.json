{"schemaVersion":{"patch":0,"major":0,"minor":3},"hierarchy":{"paths":[["doc:\/\/SpaceKit\/tutorials\/Space","doc:\/\/SpaceKit\/tutorials\/Space\/Deep-Dive-into-Space-Concepts","doc:\/\/SpaceKit\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Interacting-with-Other-Contracts"]],"modules":[{"reference":"doc:\/\/SpaceKit\/tutorials\/Space\/Getting-Started\/Installing-the-Tools","projects":[{"sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Installing-Spaces-Dependencies","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Setting-Up-the-Space-CLI"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract","kind":"task"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools"}]},{"reference":"doc:\/\/SpaceKit\/tutorials\/Space\/Getting-Started\/Building-Your-First-Smart-Contract","projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract","sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Initializing-the-Project","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Writing-the-Contract-Code"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Testing-the-Contract","kind":"task"}]}]},{"reference":"doc:\/\/SpaceKit\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Exploring-Space's-Types","projects":[{"sections":[{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Understanding-the-Buffer-Type"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Working-with-the-BigUint-Type","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Working-with-the-Vector-Type","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Creating-Your-Own-Types","kind":"task"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes"}]},{"reference":"doc:\/\/SpaceKit\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Persisting-Data-Across-Executions","projects":[{"sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues#Working-with-Storage-for-Single-Value-Persistence","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues"}]},{"projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo","sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo#Accessing-Transaction-Context-Data","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo#Accessing-Blockchain-Context-Data"}]}],"reference":"doc:\/\/SpaceKit\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Retrieving-Information-from-the-Blockchain"},{"reference":"doc:\/\/SpaceKit\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Interacting-with-Other-Contracts","projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls","sections":[{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls#Declare-the-Callee-Proxy"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls#Perform-a-Synchronous-Call","kind":"task"}]}]},{"projects":[{"sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls#Declare-the-Callee-Proxy","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls#Perform-an-Asynchronous-Call","kind":"task"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls"}],"reference":"doc:\/\/SpaceKit\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Calling-Contracts-Across-Shards"}],"reference":"doc:\/\/SpaceKit\/tutorials\/Space"},"identifier":{"url":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls","interfaceLanguage":"swift"},"metadata":{"category":"Space","title":"Interact with Other Contracts","role":"project","categoryPathComponent":"Space"},"kind":"project","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/tutorials\/spacekit\/synccalls"]}],"sections":[{"title":"Interact with Other Contracts","kind":"hero","estimatedTimeInMinutes":15,"content":[{"type":"paragraph","inlineContent":[{"text":"Smart contracts can interact not only with users but also with other smart contracts. This enables more advanced protocols by leveraging existing ones. For example, you could integrate a decentralized exchange directly into your contract to perform token swaps. Decentralized applications often involve multiple contracts, each with a dedicated role, working together to achieve complex functionality—similar to microservices in backend systems.","type":"text"}]},{"inlineContent":[{"type":"text","text":"In this tutorial, you will learn how to implement synchronous interactions between smart contracts. These interactions are only possible when both the calling and the called contracts reside on the same shard, a concept that we will explore in more detail later."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"A synchronous call is executed immediately, and once the called contract finishes execution, the control returns to the caller. If the call fails, the entire transaction is reverted, meaning no changes are recorded on the blockchain.","type":"text"}]}],"chapter":"Interacting with Other Contracts"},{"tasks":[{"title":"Declare the Callee Proxy","anchor":"Declare-the-Callee-Proxy","contentSection":[{"kind":"contentAndMedia","mediaPosition":"trailing","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A proxy represents the endpoints and parameters of the called contract. It defines the structure of the calls that will be made. However, you will specify the actual contract to call separately in your contract’s logic."}]},{"type":"paragraph","inlineContent":[{"text":"The proxy is an enum annotated with ","type":"text"},{"code":"@Proxy","type":"codeVoice"},{"type":"text","text":", where:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Each case name corresponds to an endpoint of the contract you want to call.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The associated values represent the parameters for that endpoint."}]}]}]}]}],"stepsSection":[{"media":null,"type":"step","content":[{"inlineContent":[{"type":"text","text":"Consider this contract. We will create another contract that will call it."}],"type":"paragraph"}],"code":"SyncCallsSection1Step1.swift","runtimePreview":null,"caption":[{"inlineContent":[{"type":"text","text":"You don’t always need access to the contract’s Swift code. All you need is the endpoint name and the types of the parameters (in the correct order). You can find this information in the contract’s ABI or reverse-engineer it from a blockchain explorer."}],"type":"paragraph"}]},{"runtimePreview":null,"caption":[],"content":[{"inlineContent":[{"type":"text","text":"Now, create the structure for the contract that will call the previous one."}],"type":"paragraph"}],"type":"step","code":"SyncCallsSection1Step2.swift","media":null},{"caption":[],"code":"SyncCallsSection1Step3.swift","runtimePreview":null,"type":"step","media":null,"content":[{"inlineContent":[{"type":"text","text":"Declare the "},{"type":"codeVoice","code":"@Proxy"},{"type":"text","text":" enum, which will describe the endpoints of the called contract."}],"type":"paragraph"}]},{"media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add a case for the "},{"type":"codeVoice","code":"deposit"},{"type":"text","text":" endpoint."}]}],"code":"SyncCallsSection1Step4.swift","runtimePreview":null,"type":"step","caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Since "},{"type":"codeVoice","code":"deposit"},{"type":"text","text":" doesn’t require any parameters, no associated value is necessary."}]}]},{"code":"SyncCallsSection1Step5.swift","media":null,"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Add a case for the ","type":"text"},{"type":"codeVoice","code":"withdraw"},{"type":"text","text":" endpoint."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Note: The proxy only defines the input parameters, not the return types."}]}],"type":"step"},{"caption":[{"inlineContent":[{"text":"Note: The proxy doesn’t describe the return type of the endpoint.","type":"text"}],"type":"paragraph"}],"runtimePreview":null,"type":"step","code":"SyncCallsSection1Step6.swift","media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add a case for the "},{"type":"codeVoice","code":"getTotalDepositedAmount"},{"type":"text","text":" endpoint."}]}]}]},{"title":"Perform a Synchronous Call","anchor":"Perform-a-Synchronous-Call","contentSection":[{"kind":"contentAndMedia","content":[{"inlineContent":[{"type":"text","text":"Once you have set up the proxy, invoking the contract is straightforward."}],"type":"paragraph"}],"mediaPosition":"trailing"}],"stepsSection":[{"runtimePreview":null,"code":"SyncCallsSection1Step6.swift","media":null,"type":"step","caption":[],"content":[{"inlineContent":[{"type":"text","text":"Here is the complete code from the previous section."}],"type":"paragraph"}]},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add an endpoint called "},{"code":"callDeposit","type":"codeVoice"},{"type":"text","text":" that will trigger the "},{"type":"codeVoice","code":"deposit"},{"type":"text","text":" endpoint."}]}],"runtimePreview":null,"code":"SyncCallsSection2Step2.swift","caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The parameter "},{"code":"receiverAddress","type":"codeVoice"},{"type":"text","text":" is the called contract’s address."}]}],"media":null},{"media":null,"runtimePreview":null,"caption":[],"type":"step","code":"SyncCallsSection2Step3.swift","content":[{"inlineContent":[{"type":"text","text":"The "},{"code":"deposit","type":"codeVoice"},{"text":" endpoint requires an EGLD payment. Retrieve it, and you’ll pass it along during the call setup in a later step.","type":"text"}],"type":"paragraph"}]},{"runtimePreview":null,"media":null,"content":[{"inlineContent":[{"type":"text","text":"Instantiate the "},{"type":"codeVoice","code":"deposit"},{"type":"text","text":" case from the "},{"type":"codeVoice","code":"@Proxy"},{"text":" enum.","type":"text"}],"type":"paragraph"}],"type":"step","caption":[],"code":"SyncCallsSection2Step4.swift"},{"type":"step","code":"SyncCallsSection2Step5.swift","content":[{"inlineContent":[{"type":"text","text":"Use the "},{"type":"codeVoice","code":"callAndIgnoreResult"},{"type":"text","text":" method, which is auto-generated by "},{"type":"codeVoice","code":"@Proxy"},{"type":"text","text":", to invoke the contract. Set the "},{"code":"receiver","type":"codeVoice"},{"type":"text","text":" parameter to the on-chain address of the CalleeContractProxy."}],"type":"paragraph"}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Note: Since "},{"code":"deposit","type":"codeVoice"},{"type":"text","text":" doesn’t return any value, use "},{"code":"callAndIgnoreResult","type":"codeVoice"},{"type":"text","text":" instead of "},{"type":"codeVoice","code":"call"},{"text":".","type":"text"}]}],"media":null,"runtimePreview":null},{"media":null,"code":"SyncCallsSection2Step6.swift","runtimePreview":null,"type":"step","caption":[{"inlineContent":[{"text":"Note: If you need to transfer ESDT tokens, use the ","type":"text"},{"code":"esdtTransfers","type":"codeVoice"},{"text":" parameter.","type":"text"}],"type":"paragraph"}],"content":[{"type":"paragraph","inlineContent":[{"text":"Forward the EGLD payment using the optional ","type":"text"},{"type":"codeVoice","code":"egldValue"},{"text":" parameter to complete the call.","type":"text"}]}]},{"type":"step","media":null,"code":"SyncCallsSection2Step7.swift","runtimePreview":null,"caption":[{"inlineContent":[{"type":"text","text":"This function should accept the receiver’s address as well as an "},{"code":"amount","type":"codeVoice"},{"type":"text","text":" parameter that will be passed to the "},{"code":"withdraw","type":"codeVoice"},{"type":"text","text":" endpoint."}],"type":"paragraph"}],"content":[{"inlineContent":[{"text":"Add an endpoint called ","type":"text"},{"code":"callWithdraw","type":"codeVoice"},{"type":"text","text":" that will invoke the "},{"code":"withdraw","type":"codeVoice"},{"type":"text","text":" endpoint."}],"type":"paragraph"}]},{"caption":[],"type":"step","media":null,"code":"SyncCallsSection2Step8.swift","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Instantiate the ","type":"text"},{"type":"codeVoice","code":"withdraw"},{"type":"text","text":" case from the "},{"type":"codeVoice","code":"@Proxy"},{"type":"text","text":" enum and pass the "},{"type":"codeVoice","code":"amount"},{"text":" argument.","type":"text"}]}]},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the "},{"type":"codeVoice","code":"call"},{"type":"text","text":" method to execute the contract call, passing the called contract’s address as the "},{"type":"codeVoice","code":"receiver"},{"type":"text","text":", just like before."}]}],"runtimePreview":null,"caption":[],"media":null,"code":"SyncCallsSection2Step9.swift"},{"caption":[{"type":"paragraph","inlineContent":[{"text":"Important: Because the ","type":"text"},{"type":"codeVoice","code":"@Proxy"},{"type":"text","text":" enum does not define return values, you must explicitly declare the type here."}]}],"type":"step","media":null,"code":"SyncCallsSection2Step10.swift","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Store the returned value in a variable named "},{"type":"codeVoice","code":"payment"},{"type":"text","text":"."}]}]},{"type":"step","content":[{"inlineContent":[{"type":"text","text":"Ensure that the resulting payment is greater than zero."}],"type":"paragraph"}],"caption":[],"media":null,"code":"SyncCallsSection2Step11.swift","runtimePreview":null}]}],"kind":"tasks"},{"title":"Interacting with Contracts Across Shards","action":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls","isActive":true,"overridingTitle":"Get started","overridingTitleInlineContent":[{"type":"text","text":"Get started"}],"type":"reference"},"featuredEyebrow":"Tutorial","kind":"callToAction","abstract":[{"text":"Blockchain platforms using SpaceVM enable seamless execution within a sharded environment. Sharding divides a blockchain’s global state and validation workload into smaller, manageable units known as shards. This method enhances scalability without compromising decentralization, allowing nodes to operate without significant computational resources.","type":"text"}]}],"references":{"doc://SpaceKit/tutorials/SpaceKit/InstallingTools":{"estimatedTime":"10min","role":"project","type":"topic","title":"Install the Necessary Tools","abstract":[{"type":"text","text":"Before writing your first smart contract with Space, ensure you have the necessary tools installed."}],"kind":"project","url":"\/tutorials\/spacekit\/installingtools","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools"},"doc://SpaceKit/tutorials/SpaceKit/SyncCalls#Declare-the-Callee-Proxy":{"kind":"section","role":"pseudoSymbol","type":"section","url":"\/tutorials\/spacekit\/synccalls#Declare-the-Callee-Proxy","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls#Declare-the-Callee-Proxy","abstract":[{"text":"Smart contracts can interact not only with users but also with other smart contracts. This enables more advanced protocols by leveraging existing ones. For example, you could integrate a decentralized exchange directly into your contract to perform token swaps. Decentralized applications often involve multiple contracts, each with a dedicated role, working together to achieve complex functionality—similar to microservices in backend systems.","type":"text"}],"title":"Declare the Callee Proxy"},"doc://SpaceKit/tutorials/SpaceKit/CodingYourFirstContract#Writing-the-Contract-Code":{"role":"pseudoSymbol","url":"\/tutorials\/spacekit\/codingyourfirstcontract#Writing-the-Contract-Code","type":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Writing-the-Contract-Code","title":"Writing the Contract Code","kind":"section","abstract":[{"text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user.","type":"text"}]},"doc://SpaceKit/tutorials/SpaceKit/CodingYourFirstContract":{"estimatedTime":"20min","role":"project","type":"topic","title":"Building Your First Smart Contract","abstract":[{"type":"text","text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user."}],"kind":"project","url":"\/tutorials\/spacekit\/codingyourfirstcontract","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract"},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Creating-Your-Own-Types":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Creating-Your-Own-Types","role":"pseudoSymbol","title":"Creating Your Own Types","type":"section","abstract":[{"type":"text","text":"Space provides types that allow you to leverage the full potential of the SpaceVM."}],"url":"\/tutorials\/spacekit\/familiarizewithtypes#Creating-Your-Own-Types","kind":"section"},"SyncCallsSection2Step3.swift":{"type":"file","highlights":[{"line":11}],"fileName":"lib.swift","identifier":"SyncCallsSection2Step3.swift","fileType":"swift","syntax":"swift","content":["import SpaceKit","","@Proxy enum CalleeContractProxy {","    case deposit","    case withdraw(amount: BigUint)","    case getTotalDepositedAmount","}","","@Contract struct MyContract {","    public func callDeposit(receiverAddress: Address) {","        let payment = Message.egldValue","    }","}"]},"doc://SpaceKit/tutorials/SpaceKit/GetInfo":{"estimatedTime":"10min","role":"project","type":"topic","title":"Retrieving Information from the Blockchain","abstract":[{"type":"text","text":"Many smart contracts rely on contextual data to execute their operations effectively. This data can include input payments, the caller’s address, the current time, the balance of a specific account, or even the contract owner."}],"kind":"project","url":"\/tutorials\/spacekit\/getinfo","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo"},"SyncCallsSection1Step6.swift":{"content":["import SpaceKit","","@Proxy enum CalleeContractProxy {","    case deposit","    case withdraw(amount: BigUint)","    case getTotalDepositedAmount","}","","@Contract struct MyContract {","    ","}"],"fileType":"swift","identifier":"SyncCallsSection1Step6.swift","syntax":"swift","type":"file","fileName":"lib.swift","highlights":[]},"doc://SpaceKit/tutorials/Space/Getting-Started/Building-Your-First-Smart-Contract":{"identifier":"doc:\/\/SpaceKit\/tutorials\/Space\/Getting-Started\/Building-Your-First-Smart-Contract","role":"article","title":"Building Your First Smart Contract","type":"topic","abstract":[],"url":"\/tutorials\/space\/getting-started\/building-your-first-smart-contract","kind":"article"},"SyncCallsSection1Step4.swift":{"type":"file","highlights":[{"line":4}],"fileName":"lib.swift","identifier":"SyncCallsSection1Step4.swift","fileType":"swift","syntax":"swift","content":["import SpaceKit","","@Proxy enum CalleeContractProxy {","    case deposit","}","","@Contract struct MyContract {","    ","}"]},"doc://SpaceKit/tutorials/SpaceKit/StoreValues":{"abstract":[{"type":"text","text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory."}],"url":"\/tutorials\/spacekit\/storevalues","title":"Persist Values Between Executions","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues","role":"project","estimatedTime":"15min","kind":"project","type":"topic"},"SyncCallsSection2Step8.swift":{"content":["import SpaceKit","","@Proxy enum CalleeContractProxy {","    case deposit","    case withdraw(amount: BigUint)","    case getTotalDepositedAmount","}","","@Contract struct MyContract {","    public func callDeposit(receiverAddress: Address) {","        let payment = Message.egldValue","        ","        CalleeContractProxy","            .deposit","            .callAndIgnoreResult(","                receiver: receiverAddress,","                egldValue: payment","            )","    }","    ","    public func callWithdraw(","        receiverAddress: Address,","        amount: BigUint","    ) {","        CalleeContractProxy","            .withdraw(amount: amount)","    }","}"],"fileType":"swift","identifier":"SyncCallsSection2Step8.swift","syntax":"swift","type":"file","fileName":"lib.swift","highlights":[{"line":25},{"line":26}]},"SyncCallsSection1Step5.swift":{"type":"file","highlights":[{"line":5}],"fileName":"lib.swift","identifier":"SyncCallsSection1Step5.swift","fileType":"swift","syntax":"swift","content":["import SpaceKit","","@Proxy enum CalleeContractProxy {","    case deposit","    case withdraw(amount: BigUint)","}","","@Contract struct MyContract {","    ","}"]},"doc://SpaceKit/tutorials/Space":{"role":"overview","type":"topic","title":"Meet Space","abstract":[{"type":"text","text":"Discover how Space simplifies blockchain development using Swift. Dive into the world of Web3 with ease and efficiency."}],"kind":"overview","url":"\/tutorials\/space","identifier":"doc:\/\/SpaceKit\/tutorials\/Space"},"doc://SpaceKit/tutorials/Space/Deep-Dive-into-Space-Concepts/Exploring-Space's-Types":{"kind":"article","type":"topic","url":"\/tutorials\/space\/deep-dive-into-space-concepts\/exploring-space's-types","identifier":"doc:\/\/SpaceKit\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Exploring-Space's-Types","role":"article","title":"Exploring Space's Types","abstract":[]},"doc://SpaceKit/tutorials/SpaceKit/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract","role":"pseudoSymbol","title":"Initializing and Compiling Your First Smart Contract","type":"section","abstract":[{"type":"text","text":"Before writing your first smart contract with Space, ensure you have the necessary tools installed."}],"url":"\/tutorials\/spacekit\/installingtools#Initializing-and-Compiling-Your-First-Smart-Contract","kind":"section"},"doc://SpaceKit/tutorials/SpaceKit/AsyncCalls#Perform-an-Asynchronous-Call":{"abstract":[{"text":"Blockchain platforms using SpaceVM enable seamless execution within a sharded environment. Sharding divides a blockchain’s global state and validation workload into smaller, manageable units known as shards. This method enhances scalability without compromising decentralization, allowing nodes to operate without significant computational resources.","type":"text"}],"role":"pseudoSymbol","url":"\/tutorials\/spacekit\/asynccalls#Perform-an-Asynchronous-Call","title":"Perform an Asynchronous Call","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls#Perform-an-Asynchronous-Call","kind":"section","type":"section"},"doc://SpaceKit/tutorials/SpaceKit/InstallingTools#Setting-Up-the-Space-CLI":{"type":"section","abstract":[{"type":"text","text":"Before writing your first smart contract with Space, ensure you have the necessary tools installed."}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Setting-Up-the-Space-CLI","role":"pseudoSymbol","url":"\/tutorials\/spacekit\/installingtools#Setting-Up-the-Space-CLI","title":"Setting Up the Space CLI","kind":"section"},"doc://SpaceKit/tutorials/SpaceKit/SyncCalls":{"type":"topic","url":"\/tutorials\/spacekit\/synccalls","title":"Interact with Other Contracts","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls","role":"project","estimatedTime":"15min","kind":"project","abstract":[{"type":"text","text":"Smart contracts can interact not only with users but also with other smart contracts. This enables more advanced protocols by leveraging existing ones. For example, you could integrate a decentralized exchange directly into your contract to perform token swaps. Decentralized applications often involve multiple contracts, each with a dedicated role, working together to achieve complex functionality—similar to microservices in backend systems."}]},"SyncCallsSection1Step1.swift":{"content":["import SpaceKit","","@Contract struct CalleeContract {","    public func deposit() {","        \/\/ Implements the logic to handle a deposit.","        \/\/ This endpoint requires an input EGLD payment.","    }","    ","    public func withdraw(amount: BigUint) -> TokenPayment {","        \/\/ Executes the logic to withdraw the specified amount.","        \/\/ Returns a TokenPayment that represents the amount withdrawn.","    }","    ","    public func getTotalDepositedAmount() -> BigUint {","        \/\/ Retrieves the total deposited amount.","        \/\/ This is a view function that likely accesses a stored value.","    }","}"],"fileType":"swift","identifier":"SyncCallsSection1Step1.swift","syntax":"swift","type":"file","fileName":"CalleeContractProxy.swift","highlights":[]},"SyncCallsSection1Step2.swift":{"type":"file","highlights":[],"fileName":"lib.swift","identifier":"SyncCallsSection1Step2.swift","fileType":"swift","syntax":"swift","content":["import SpaceKit","","@Contract struct MyContract {","    ","}"]},"doc://SpaceKit/tutorials/SpaceKit/GetInfo#Accessing-Transaction-Context-Data":{"type":"section","abstract":[{"type":"text","text":"Many smart contracts rely on contextual data to execute their operations effectively. This data can include input payments, the caller’s address, the current time, the balance of a specific account, or even the contract owner."}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo#Accessing-Transaction-Context-Data","role":"pseudoSymbol","url":"\/tutorials\/spacekit\/getinfo#Accessing-Transaction-Context-Data","title":"Accessing Transaction Context Data","kind":"section"},"doc://SpaceKit/tutorials/SpaceKit/CodingYourFirstContract#Testing-the-Contract":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Testing-the-Contract","kind":"section","url":"\/tutorials\/spacekit\/codingyourfirstcontract#Testing-the-Contract","abstract":[{"type":"text","text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user."}],"type":"section","role":"pseudoSymbol","title":"Testing the Contract"},"doc://SpaceKit/tutorials/SpaceKit/StoreValues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage":{"kind":"section","role":"pseudoSymbol","abstract":[{"text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory.","type":"text"}],"url":"\/tutorials\/spacekit\/storevalues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage","title":"Leveraging @Mapping for Dynamic Key-Value Storage","type":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage"},"doc://SpaceKit/tutorials/SpaceKit/AsyncCalls":{"abstract":[{"type":"text","text":"Blockchain platforms using SpaceVM enable seamless execution within a sharded environment. Sharding divides a blockchain’s global state and validation workload into smaller, manageable units known as shards. This method enhances scalability without compromising decentralization, allowing nodes to operate without significant computational resources."}],"url":"\/tutorials\/spacekit\/asynccalls","title":"Interacting with Contracts Across Shards","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls","role":"project","estimatedTime":"15min","kind":"project","type":"topic"},"doc://SpaceKit/tutorials/Space/Deep-Dive-into-Space-Concepts/Calling-Contracts-Across-Shards":{"kind":"article","role":"article","type":"topic","title":"Calling Contracts Across Shards","identifier":"doc:\/\/SpaceKit\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Calling-Contracts-Across-Shards","abstract":[],"url":"\/tutorials\/space\/deep-dive-into-space-concepts\/calling-contracts-across-shards"},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges":{"abstract":[{"text":"Space provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}],"role":"pseudoSymbol","url":"\/tutorials\/spacekit\/familiarizewithtypes#Handling-Heap-Allocation-Challenges","title":"Handling Heap Allocation Challenges","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges","kind":"section","type":"section"},"doc://SpaceKit/tutorials/SpaceKit/CodingYourFirstContract#Initializing-the-Project":{"abstract":[{"type":"text","text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user."}],"kind":"section","role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Initializing-the-Project","type":"section","title":"Initializing the Project","url":"\/tutorials\/spacekit\/codingyourfirstcontract#Initializing-the-Project"},"SyncCallsSection2Step6.swift":{"content":["import SpaceKit","","@Proxy enum CalleeContractProxy {","    case deposit","    case withdraw(amount: BigUint)","    case getTotalDepositedAmount","}","","@Contract struct MyContract {","    public func callDeposit(receiverAddress: Address) {","        let payment = Message.egldValue","        ","        CalleeContractProxy","            .deposit","            .callAndIgnoreResult(","                receiver: receiverAddress,","                egldValue: payment","            )","    }","}"],"fileType":"swift","identifier":"SyncCallsSection2Step6.swift","syntax":"swift","type":"file","fileName":"lib.swift","highlights":[{"line":16},{"line":17}]},"SyncCallsSection1Step3.swift":{"type":"file","highlights":[{"line":3},{"line":4},{"line":5},{"line":6}],"fileName":"lib.swift","identifier":"SyncCallsSection1Step3.swift","fileType":"swift","syntax":"swift","content":["import SpaceKit","","@Proxy enum CalleeContractProxy {","    ","}","","@Contract struct MyContract {","    ","}"]},"doc://SpaceKit/tutorials/SpaceKit/AsyncCalls#Declare-the-Callee-Proxy":{"kind":"section","role":"pseudoSymbol","type":"section","title":"Declare the Callee Proxy","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls#Declare-the-Callee-Proxy","abstract":[{"text":"Blockchain platforms using SpaceVM enable seamless execution within a sharded environment. Sharding divides a blockchain’s global state and validation workload into smaller, manageable units known as shards. This method enhances scalability without compromising decentralization, allowing nodes to operate without significant computational resources.","type":"text"}],"url":"\/tutorials\/spacekit\/asynccalls#Declare-the-Callee-Proxy"},"doc://SpaceKit/tutorials/SpaceKit/GetInfo#Accessing-Blockchain-Context-Data":{"abstract":[{"type":"text","text":"Many smart contracts rely on contextual data to execute their operations effectively. This data can include input payments, the caller’s address, the current time, the balance of a specific account, or even the contract owner."}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo#Accessing-Blockchain-Context-Data","type":"section","kind":"section","title":"Accessing Blockchain Context Data","role":"pseudoSymbol","url":"\/tutorials\/spacekit\/getinfo#Accessing-Blockchain-Context-Data"},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes":{"abstract":[{"type":"text","text":"Space provides types that allow you to leverage the full potential of the SpaceVM."}],"url":"\/tutorials\/spacekit\/familiarizewithtypes","title":"Exploring Space's Types","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes","role":"project","estimatedTime":"20min","kind":"project","type":"topic"},"doc://SpaceKit/tutorials/Space/Deep-Dive-into-Space-Concepts/Retrieving-Information-from-the-Blockchain":{"kind":"article","role":"article","type":"topic","abstract":[],"identifier":"doc:\/\/SpaceKit\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Retrieving-Information-from-the-Blockchain","url":"\/tutorials\/space\/deep-dive-into-space-concepts\/retrieving-information-from-the-blockchain","title":"Retrieving Information from the Blockchain"},"SyncCallsSection2Step4.swift":{"content":["import SpaceKit","","@Proxy enum CalleeContractProxy {","    case deposit","    case withdraw(amount: BigUint)","    case getTotalDepositedAmount","}","","@Contract struct MyContract {","    public func callDeposit(receiverAddress: Address) {","        let payment = Message.egldValue","        ","        CalleeContractProxy","            .deposit","    }","}"],"fileType":"swift","identifier":"SyncCallsSection2Step4.swift","syntax":"swift","type":"file","fileName":"lib.swift","highlights":[{"line":12},{"line":13},{"line":14}]},"SyncCallsSection2Step7.swift":{"highlights":[{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26}],"fileType":"swift","identifier":"SyncCallsSection2Step7.swift","syntax":"swift","type":"file","content":["import SpaceKit","","@Proxy enum CalleeContractProxy {","    case deposit","    case withdraw(amount: BigUint)","    case getTotalDepositedAmount","}","","@Contract struct MyContract {","    public func callDeposit(receiverAddress: Address) {","        let payment = Message.egldValue","        ","        CalleeContractProxy","            .deposit","            .callAndIgnoreResult(","                receiver: receiverAddress,","                egldValue: payment","            )","    }","    ","    public func callWithdraw(","        receiverAddress: Address,","        amount: BigUint","    ) {","        ","    }","}"],"fileName":"lib.swift"},"doc://SpaceKit/tutorials/SpaceKit/InstallingTools#Installing-Spaces-Dependencies":{"kind":"section","role":"pseudoSymbol","type":"section","title":"Installing Space's Dependencies","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Installing-Spaces-Dependencies","abstract":[{"text":"Before writing your first smart contract with Space, ensure you have the necessary tools installed.","type":"text"}],"url":"\/tutorials\/spacekit\/installingtools#Installing-Spaces-Dependencies"},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Working-with-the-Vector-Type":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Working-with-the-Vector-Type","title":"Working with the Vector Type","type":"section","abstract":[{"type":"text","text":"Space provides types that allow you to leverage the full potential of the SpaceVM."}],"role":"pseudoSymbol","url":"\/tutorials\/spacekit\/familiarizewithtypes#Working-with-the-Vector-Type","kind":"section"},"doc://SpaceKit/tutorials/Space/Deep-Dive-into-Space-Concepts/Interacting-with-Other-Contracts":{"url":"\/tutorials\/space\/deep-dive-into-space-concepts\/interacting-with-other-contracts","identifier":"doc:\/\/SpaceKit\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Interacting-with-Other-Contracts","abstract":[],"title":"Interacting with Other Contracts","role":"article","kind":"article","type":"topic"},"doc://SpaceKit/tutorials/SpaceKit/SyncCalls#Perform-a-Synchronous-Call":{"url":"\/tutorials\/spacekit\/synccalls#Perform-a-Synchronous-Call","title":"Perform a Synchronous Call","type":"section","abstract":[{"type":"text","text":"Smart contracts can interact not only with users but also with other smart contracts. This enables more advanced protocols by leveraging existing ones. For example, you could integrate a decentralized exchange directly into your contract to perform token swaps. Decentralized applications often involve multiple contracts, each with a dedicated role, working together to achieve complex functionality—similar to microservices in backend systems."}],"role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls#Perform-a-Synchronous-Call"},"doc://SpaceKit/tutorials/Space/Deep-Dive-into-Space-Concepts/Persisting-Data-Across-Executions":{"role":"article","kind":"article","abstract":[],"identifier":"doc:\/\/SpaceKit\/tutorials\/Space\/Deep-Dive-into-Space-Concepts\/Persisting-Data-Across-Executions","url":"\/tutorials\/space\/deep-dive-into-space-concepts\/persisting-data-across-executions","type":"topic","title":"Persisting Data Across Executions"},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Working-with-the-BigUint-Type":{"kind":"section","role":"pseudoSymbol","type":"section","url":"\/tutorials\/spacekit\/familiarizewithtypes#Working-with-the-BigUint-Type","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Working-with-the-BigUint-Type","abstract":[{"text":"Space provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}],"title":"Working with the BigUint Type"},"doc://SpaceKit/tutorials/Space/Getting-Started/Installing-the-Tools":{"type":"topic","abstract":[],"identifier":"doc:\/\/SpaceKit\/tutorials\/Space\/Getting-Started\/Installing-the-Tools","role":"article","url":"\/tutorials\/space\/getting-started\/installing-the-tools","title":"Installing the Tools","kind":"article"},"SyncCallsSection2Step10.swift":{"content":["import SpaceKit","","@Proxy enum CalleeContractProxy {","    case deposit","    case withdraw(amount: BigUint)","    case getTotalDepositedAmount","}","","@Contract struct MyContract {","    public func callDeposit(receiverAddress: Address) {","        let payment = Message.egldValue","        ","        CalleeContractProxy","            .deposit","            .callAndIgnoreResult(","                receiver: receiverAddress,","                egldValue: payment","            )","    }","    ","    public func callWithdraw(","        receiverAddress: Address,","        amount: BigUint","    ) {","        let payment: TokenPayment = CalleeContractProxy","            .withdraw(amount: amount)","            .call(","                receiver: receiverAddress","            )","    }","}"],"fileType":"swift","identifier":"SyncCallsSection2Step10.swift","syntax":"swift","type":"file","fileName":"lib.swift","highlights":[{"line":25}]},"SyncCallsSection2Step11.swift":{"highlights":[{"line":30},{"line":31},{"line":32},{"line":33}],"fileType":"swift","identifier":"SyncCallsSection2Step11.swift","syntax":"swift","type":"file","content":["import SpaceKit","","@Proxy enum CalleeContractProxy {","    case deposit","    case withdraw(amount: BigUint)","    case getTotalDepositedAmount","}","","@Contract struct MyContract {","    public func callDeposit(receiverAddress: Address) {","        let payment = Message.egldValue","        ","        CalleeContractProxy","            .deposit","            .callAndIgnoreResult(","                receiver: receiverAddress,","                egldValue: payment","            )","    }","    ","    public func callWithdraw(","        receiverAddress: Address,","        amount: BigUint","    ) {","        let payment: TokenPayment = CalleeContractProxy","            .withdraw(amount: amount)","            .call(","                receiver: receiverAddress","            )","        ","        guard payment.amount > 0 else {","            smartContractError(message: \"No payment received\")","        }","    }","}"],"fileName":"lib.swift"},"doc://SpaceKit/tutorials/SpaceKit/StoreValues#Working-with-Storage-for-Single-Value-Persistence":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues#Working-with-Storage-for-Single-Value-Persistence","title":"Working with @Storage for Single Value Persistence","type":"section","abstract":[{"type":"text","text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory."}],"role":"pseudoSymbol","url":"\/tutorials\/spacekit\/storevalues#Working-with-Storage-for-Single-Value-Persistence","kind":"section"},"SyncCallsSection2Step9.swift":{"content":["import SpaceKit","","@Proxy enum CalleeContractProxy {","    case deposit","    case withdraw(amount: BigUint)","    case getTotalDepositedAmount","}","","@Contract struct MyContract {","    public func callDeposit(receiverAddress: Address) {","        let payment = Message.egldValue","        ","        CalleeContractProxy","            .deposit","            .callAndIgnoreResult(","                receiver: receiverAddress,","                egldValue: payment","            )","    }","    ","    public func callWithdraw(","        receiverAddress: Address,","        amount: BigUint","    ) {","        CalleeContractProxy","            .withdraw(amount: amount)","            .call(","                receiver: receiverAddress","            )","    }","}"],"fileType":"swift","identifier":"SyncCallsSection2Step9.swift","syntax":"swift","type":"file","fileName":"lib.swift","highlights":[{"line":27},{"line":28},{"line":29}]},"SyncCallsSection2Step2.swift":{"type":"file","highlights":[{"line":10},{"line":11},{"line":12}],"fileName":"lib.swift","identifier":"SyncCallsSection2Step2.swift","fileType":"swift","syntax":"swift","content":["import SpaceKit","","@Proxy enum CalleeContractProxy {","    case deposit","    case withdraw(amount: BigUint)","    case getTotalDepositedAmount","}","","@Contract struct MyContract {","    public func callDeposit(receiverAddress: Address) {","        ","    }","}"]},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Understanding-the-Buffer-Type":{"type":"section","abstract":[{"type":"text","text":"Space provides types that allow you to leverage the full potential of the SpaceVM."}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Understanding-the-Buffer-Type","role":"pseudoSymbol","url":"\/tutorials\/spacekit\/familiarizewithtypes#Understanding-the-Buffer-Type","title":"Understanding the Buffer Type","kind":"section"},"SyncCallsSection2Step5.swift":{"content":["import SpaceKit","","@Proxy enum CalleeContractProxy {","    case deposit","    case withdraw(amount: BigUint)","    case getTotalDepositedAmount","}","","@Contract struct MyContract {","    public func callDeposit(receiverAddress: Address) {","        let payment = Message.egldValue","        ","        CalleeContractProxy","            .deposit","            .callAndIgnoreResult(","                receiver: receiverAddress","            )","    }","}"],"fileType":"swift","identifier":"SyncCallsSection2Step5.swift","syntax":"swift","type":"file","fileName":"lib.swift","highlights":[{"line":15},{"line":16},{"line":17}]}}}