{"kind":"project","hierarchy":{"modules":[{"projects":[{"sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Installing-SpaceKits-Dependencies","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Setting-Up-the-SpaceKit-CLI","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract","kind":"task"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Getting-Started\/Installing-the-Tools"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Getting-Started\/Building-Your-First-Smart-Contract","projects":[{"sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Initializing-the-Project","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Writing-the-Contract-Code","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Testing-the-Contract","kind":"task"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract"}]},{"projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes","sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Understanding-the-Buffer-Type","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Working-with-the-BigUint-Type"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Working-with-the-Vector-Type","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Creating-Your-Own-Types"}]}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Exploring-SpaceKit's-Types"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Persisting-Data-Across-Executions","projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues","sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues#Working-with-Storage-for-Single-Value-Persistence","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage"}]}]},{"projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo","sections":[{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo#Accessing-Transaction-Context-Data"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo#Accessing-Blockchain-Context-Data"}]}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Retrieving-Information-from-the-Blockchain"},{"projects":[{"sections":[{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls#Declare-the-Callee-Proxy"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls#Perform-a-Synchronous-Call","kind":"task"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Interacting-with-Other-Contracts"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Calling-Contracts-Across-Shards","projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls","sections":[{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls#Declare-the-Callee-Proxy"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls#Perform-an-Asynchronous-Call"}]}]}],"paths":[["doc:\/\/SpaceKit\/tutorials\/SpaceKit","doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts","doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Interacting-with-Other-Contracts"]],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit"},"metadata":{"category":"SpaceKit","title":"Interact with Other Contracts","role":"project","categoryPathComponent":"SpaceKit"},"identifier":{"url":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls","interfaceLanguage":"swift"},"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[{"estimatedTimeInMinutes":15,"title":"Interact with Other Contracts","kind":"hero","content":[{"type":"paragraph","inlineContent":[{"text":"Smart contracts can interact not only with users but also with other smart contracts. This enables more advanced protocols by leveraging existing ones. For example, you could integrate a decentralized exchange directly into your contract to perform token swaps. Decentralized applications often involve multiple contracts, each with a dedicated role, working together to achieve complex functionality—similar to microservices in backend systems.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this tutorial, you will learn how to implement synchronous interactions between smart contracts. These interactions are only possible when both the calling and the called contracts reside on the same shard, a concept that we will explore in more detail later."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A synchronous call is executed immediately, and once the called contract finishes execution, the control returns to the caller. If the call fails, the entire transaction is reverted, meaning no changes are recorded on the blockchain."}]}],"chapter":"Interacting with Other Contracts"},{"tasks":[{"stepsSection":[{"caption":[{"inlineContent":[{"text":"You don’t always need access to the contract’s Swift code. All you need is the endpoint name and the types of the parameters (in the correct order). You can find this information in the contract’s ABI or reverse-engineer it from a blockchain explorer.","type":"text"}],"type":"paragraph"}],"media":null,"type":"step","code":"SyncCallsSection1Step1.swift","content":[{"type":"paragraph","inlineContent":[{"text":"Consider this contract. We will create another contract that will call it.","type":"text"}]}],"runtimePreview":null},{"content":[{"inlineContent":[{"type":"text","text":"Now, create the structure for the contract that will call the previous one."}],"type":"paragraph"}],"runtimePreview":null,"code":"SyncCallsSection1Step2.swift","caption":[],"media":null,"type":"step"},{"type":"step","caption":[],"media":null,"code":"SyncCallsSection1Step3.swift","runtimePreview":null,"content":[{"inlineContent":[{"text":"Declare the ","type":"text"},{"code":"@Proxy","type":"codeVoice"},{"text":" enum, which will describe the endpoints of the called contract.","type":"text"}],"type":"paragraph"}]},{"caption":[{"inlineContent":[{"text":"Since ","type":"text"},{"type":"codeVoice","code":"deposit"},{"text":" doesn’t require any parameters, no associated value is necessary.","type":"text"}],"type":"paragraph"}],"runtimePreview":null,"type":"step","code":"SyncCallsSection1Step4.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add a case for the "},{"type":"codeVoice","code":"deposit"},{"text":" endpoint.","type":"text"}]}],"media":null},{"content":[{"type":"paragraph","inlineContent":[{"text":"Add a case for the ","type":"text"},{"type":"codeVoice","code":"withdraw"},{"type":"text","text":" endpoint."}]}],"runtimePreview":null,"caption":[{"inlineContent":[{"type":"text","text":"Note: The proxy only defines the input parameters, not the return types."}],"type":"paragraph"}],"media":null,"code":"SyncCallsSection1Step5.swift","type":"step"},{"media":null,"code":"SyncCallsSection1Step6.swift","type":"step","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add a case for the "},{"code":"getTotalDepositedAmount","type":"codeVoice"},{"type":"text","text":" endpoint."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Note: The proxy doesn’t describe the return type of the endpoint."}]}]}],"contentSection":[{"mediaPosition":"trailing","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A proxy represents the endpoints and parameters of the called contract. It defines the structure of the calls that will be made. However, you will specify the actual contract to call separately in your contract’s logic."}]},{"inlineContent":[{"type":"text","text":"The proxy is an enum annotated with "},{"code":"@Proxy","type":"codeVoice"},{"text":", where:","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Each case name corresponds to an endpoint of the contract you want to call."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"The associated values represent the parameters for that endpoint.","type":"text"}]}]}]}],"kind":"contentAndMedia"}],"title":"Declare the Callee Proxy","anchor":"Declare-the-Callee-Proxy"},{"stepsSection":[{"code":"SyncCallsSection1Step6.swift","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Here is the complete code from the previous section.","type":"text"}]}],"media":null,"type":"step","caption":[]},{"code":"SyncCallsSection2Step2.swift","runtimePreview":null,"caption":[{"inlineContent":[{"text":"The parameter ","type":"text"},{"type":"codeVoice","code":"receiverAddress"},{"type":"text","text":" is the called contract’s address."}],"type":"paragraph"}],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add an endpoint called "},{"code":"callDeposit","type":"codeVoice"},{"text":" that will trigger the ","type":"text"},{"type":"codeVoice","code":"deposit"},{"text":" endpoint.","type":"text"}]}],"type":"step","media":null},{"caption":[],"media":null,"type":"step","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"deposit"},{"text":" endpoint requires an EGLD payment. Retrieve it, and you’ll pass it along during the call setup in a later step.","type":"text"}]}],"code":"SyncCallsSection2Step3.swift"},{"caption":[],"content":[{"type":"paragraph","inlineContent":[{"text":"Instantiate the ","type":"text"},{"type":"codeVoice","code":"deposit"},{"type":"text","text":" case from the "},{"code":"@Proxy","type":"codeVoice"},{"type":"text","text":" enum."}]}],"type":"step","media":null,"code":"SyncCallsSection2Step4.swift","runtimePreview":null},{"type":"step","media":null,"code":"SyncCallsSection2Step5.swift","caption":[{"inlineContent":[{"type":"text","text":"Note: Since "},{"code":"deposit","type":"codeVoice"},{"type":"text","text":" doesn’t return any value, use "},{"type":"codeVoice","code":"callAndIgnoreResult"},{"type":"text","text":" instead of "},{"type":"codeVoice","code":"call"},{"type":"text","text":"."}],"type":"paragraph"}],"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Use the ","type":"text"},{"type":"codeVoice","code":"callAndIgnoreResult"},{"text":" method, which is auto-generated by ","type":"text"},{"type":"codeVoice","code":"@Proxy"},{"type":"text","text":", to invoke the contract. Set the "},{"code":"receiver","type":"codeVoice"},{"text":" parameter to the on-chain address of the CalleeProxy.","type":"text"}]}]},{"media":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Forward the EGLD payment using the optional ","type":"text"},{"type":"codeVoice","code":"egldValue"},{"text":" parameter to complete the call.","type":"text"}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Note: If you need to transfer ESDT tokens, use the "},{"code":"esdtTransfers","type":"codeVoice"},{"text":" parameter.","type":"text"}]}],"code":"SyncCallsSection2Step6.swift","runtimePreview":null},{"code":"SyncCallsSection2Step7.swift","caption":[{"inlineContent":[{"type":"text","text":"This function should accept the receiver’s address as well as an "},{"code":"amount","type":"codeVoice"},{"type":"text","text":" parameter that will be passed to the "},{"type":"codeVoice","code":"withdraw"},{"type":"text","text":" endpoint."}],"type":"paragraph"}],"type":"step","media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Add an endpoint called ","type":"text"},{"code":"callWithdraw","type":"codeVoice"},{"type":"text","text":" that will invoke the "},{"code":"withdraw","type":"codeVoice"},{"type":"text","text":" endpoint."}]}],"runtimePreview":null},{"media":null,"caption":[],"code":"SyncCallsSection2Step8.swift","runtimePreview":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Instantiate the "},{"type":"codeVoice","code":"withdraw"},{"text":" case from the ","type":"text"},{"type":"codeVoice","code":"@Proxy"},{"type":"text","text":" enum and pass the "},{"code":"amount","type":"codeVoice"},{"text":" argument.","type":"text"}]}]},{"media":null,"caption":[],"type":"step","code":"SyncCallsSection2Step9.swift","runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"Use the "},{"code":"call","type":"codeVoice"},{"text":" method to execute the contract call, passing the called contract’s address as the ","type":"text"},{"code":"receiver","type":"codeVoice"},{"text":", just like before.","type":"text"}],"type":"paragraph"}]},{"type":"step","code":"SyncCallsSection2Step10.swift","media":null,"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Store the returned value in a variable named "},{"type":"codeVoice","code":"payment"},{"type":"text","text":"."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Important: Because the "},{"code":"@Proxy","type":"codeVoice"},{"text":" enum does not define return values, you must explicitly declare the type here.","type":"text"}]}]},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Ensure that the resulting payment is greater than zero."}]}],"caption":[],"media":null,"code":"SyncCallsSection2Step11.swift","runtimePreview":null}],"contentSection":[{"content":[{"inlineContent":[{"type":"text","text":"Once you have set up the proxy, invoking the contract is straightforward."}],"type":"paragraph"}],"kind":"contentAndMedia","mediaPosition":"trailing"}],"title":"Perform a Synchronous Call","anchor":"Perform-a-Synchronous-Call"}],"kind":"tasks"},{"featuredEyebrow":"Tutorial","kind":"callToAction","abstract":[{"text":"Blockchain platforms using SpaceVM enable seamless execution within a sharded environment. Sharding divides a blockchain’s global state and validation workload into smaller, manageable units known as shards. This method enhances scalability without compromising decentralization, allowing nodes to operate without significant computational resources.","type":"text"}],"title":"Interacting with Contracts Across Shards","action":{"overridingTitle":"Get started","overridingTitleInlineContent":[{"text":"Get started","type":"text"}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls","isActive":true,"type":"reference"}}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/tutorials\/spacekit\/synccalls"]}],"references":{"doc://SpaceKit/tutorials/SpaceKit/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract":{"url":"\/tutorials\/spacekit\/installingtools#Initializing-and-Compiling-Your-First-Smart-Contract","title":"Initializing and Compiling Your First Smart Contract","type":"section","kind":"section","abstract":[{"text":"Before writing your first smart contract with SpaceKit, ensure you have the necessary tools installed.","type":"text"}],"role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract"},"SyncCallsSection2Step5.swift":{"highlights":[{"line":15},{"line":16},{"line":17}],"fileName":"lib.swift","syntax":"swift","identifier":"SyncCallsSection2Step5.swift","type":"file","fileType":"swift","content":["import SpaceKit","","@Proxy enum CalleeProxy {","    case deposit","    case withdraw(amount: BigUint)","    case getTotalDepositedAmount","}","","@Controller struct MyController {","    public func callDeposit(receiverAddress: Address) {","        let payment = Message.egldValue","        ","        CalleeProxy","            .deposit","            .callAndIgnoreResult(","                receiver: receiverAddress","            )","    }","}"]},"SyncCallsSection2Step6.swift":{"content":["import SpaceKit","","@Proxy enum CalleeProxy {","    case deposit","    case withdraw(amount: BigUint)","    case getTotalDepositedAmount","}","","@Controller struct MyController {","    public func callDeposit(receiverAddress: Address) {","        let payment = Message.egldValue","        ","        CalleeProxy","            .deposit","            .callAndIgnoreResult(","                receiver: receiverAddress,","                egldValue: payment","            )","    }","}"],"fileName":"lib.swift","syntax":"swift","type":"file","fileType":"swift","highlights":[{"line":16},{"line":17}],"identifier":"SyncCallsSection2Step6.swift"},"doc://SpaceKit/tutorials/SpaceKit/Getting-Started/Installing-the-Tools":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Getting-Started\/Installing-the-Tools","role":"article","url":"\/tutorials\/spacekit\/getting-started\/installing-the-tools","abstract":[],"kind":"article","type":"topic","title":"Installing the Tools"},"doc://SpaceKit/tutorials/SpaceKit/Getting-Started/Building-Your-First-Smart-Contract":{"type":"topic","role":"article","title":"Building Your First Smart Contract","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Getting-Started\/Building-Your-First-Smart-Contract","kind":"article","url":"\/tutorials\/spacekit\/getting-started\/building-your-first-smart-contract","abstract":[]},"doc://SpaceKit/tutorials/SpaceKit/SyncCalls#Perform-a-Synchronous-Call":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls#Perform-a-Synchronous-Call","type":"section","url":"\/tutorials\/spacekit\/synccalls#Perform-a-Synchronous-Call","kind":"section","abstract":[{"text":"Smart contracts can interact not only with users but also with other smart contracts. This enables more advanced protocols by leveraging existing ones. For example, you could integrate a decentralized exchange directly into your contract to perform token swaps. Decentralized applications often involve multiple contracts, each with a dedicated role, working together to achieve complex functionality—similar to microservices in backend systems.","type":"text"}],"role":"pseudoSymbol","title":"Perform a Synchronous Call"},"doc://SpaceKit/tutorials/SpaceKit/InstallingTools#Setting-Up-the-SpaceKit-CLI":{"abstract":[{"text":"Before writing your first smart contract with SpaceKit, ensure you have the necessary tools installed.","type":"text"}],"url":"\/tutorials\/spacekit\/installingtools#Setting-Up-the-SpaceKit-CLI","kind":"section","title":"Setting Up the SpaceKit CLI","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Setting-Up-the-SpaceKit-CLI","type":"section","role":"pseudoSymbol"},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Creating-Your-Own-Types":{"type":"section","kind":"section","abstract":[{"text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}],"url":"\/tutorials\/spacekit\/familiarizewithtypes#Creating-Your-Own-Types","role":"pseudoSymbol","title":"Creating Your Own Types","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Creating-Your-Own-Types"},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Understanding-the-Buffer-Type":{"url":"\/tutorials\/spacekit\/familiarizewithtypes#Understanding-the-Buffer-Type","abstract":[{"type":"text","text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM."}],"title":"Understanding the Buffer Type","kind":"section","type":"section","role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Understanding-the-Buffer-Type"},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges":{"type":"section","kind":"section","abstract":[{"text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}],"url":"\/tutorials\/spacekit\/familiarizewithtypes#Handling-Heap-Allocation-Challenges","role":"pseudoSymbol","title":"Handling Heap Allocation Challenges","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges"},"SyncCallsSection1Step5.swift":{"highlights":[{"line":5}],"fileType":"swift","syntax":"swift","fileName":"lib.swift","type":"file","content":["import SpaceKit","","@Proxy enum CalleeProxy {","    case deposit","    case withdraw(amount: BigUint)","}","","@Controller struct MyController {","    ","}"],"identifier":"SyncCallsSection1Step5.swift"},"doc://SpaceKit/tutorials/SpaceKit/AsyncCalls#Declare-the-Callee-Proxy":{"title":"Declare the Callee Proxy","role":"pseudoSymbol","url":"\/tutorials\/spacekit\/asynccalls#Declare-the-Callee-Proxy","abstract":[{"type":"text","text":"Blockchain platforms using SpaceVM enable seamless execution within a sharded environment. Sharding divides a blockchain’s global state and validation workload into smaller, manageable units known as shards. This method enhances scalability without compromising decentralization, allowing nodes to operate without significant computational resources."}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls#Declare-the-Callee-Proxy","type":"section","kind":"section"},"SyncCallsSection1Step2.swift":{"content":["import SpaceKit","","@Controller struct MyController {","    ","}"],"fileName":"lib.swift","syntax":"swift","type":"file","fileType":"swift","highlights":[],"identifier":"SyncCallsSection1Step2.swift"},"doc://SpaceKit/tutorials/SpaceKit/AsyncCalls#Perform-an-Asynchronous-Call":{"url":"\/tutorials\/spacekit\/asynccalls#Perform-an-Asynchronous-Call","title":"Perform an Asynchronous Call","type":"section","kind":"section","abstract":[{"text":"Blockchain platforms using SpaceVM enable seamless execution within a sharded environment. Sharding divides a blockchain’s global state and validation workload into smaller, manageable units known as shards. This method enhances scalability without compromising decentralization, allowing nodes to operate without significant computational resources.","type":"text"}],"role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls#Perform-an-Asynchronous-Call"},"SyncCallsSection1Step4.swift":{"highlights":[{"line":4}],"fileType":"swift","fileName":"lib.swift","identifier":"SyncCallsSection1Step4.swift","syntax":"swift","content":["import SpaceKit","","@Proxy enum CalleeProxy {","    case deposit","}","","@Controller struct MyController {","    ","}"],"type":"file"},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Working-with-the-Vector-Type":{"abstract":[{"text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}],"url":"\/tutorials\/spacekit\/familiarizewithtypes#Working-with-the-Vector-Type","kind":"section","title":"Working with the Vector Type","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Working-with-the-Vector-Type","type":"section","role":"pseudoSymbol"},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Working-with-the-BigUint-Type":{"abstract":[{"text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}],"url":"\/tutorials\/spacekit\/familiarizewithtypes#Working-with-the-BigUint-Type","kind":"section","title":"Working with the BigUint Type","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Working-with-the-BigUint-Type","type":"section","role":"pseudoSymbol"},"doc://SpaceKit/tutorials/SpaceKit/Deep-Dive-into-SpaceKit-Concepts/Exploring-SpaceKit's-Types":{"type":"topic","role":"article","title":"Exploring SpaceKit's Types","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Exploring-SpaceKit's-Types","kind":"article","url":"\/tutorials\/spacekit\/deep-dive-into-spacekit-concepts\/exploring-spacekit's-types","abstract":[]},"doc://SpaceKit/tutorials/SpaceKit/SyncCalls#Declare-the-Callee-Proxy":{"title":"Declare the Callee Proxy","role":"pseudoSymbol","url":"\/tutorials\/spacekit\/synccalls#Declare-the-Callee-Proxy","abstract":[{"type":"text","text":"Smart contracts can interact not only with users but also with other smart contracts. This enables more advanced protocols by leveraging existing ones. For example, you could integrate a decentralized exchange directly into your contract to perform token swaps. Decentralized applications often involve multiple contracts, each with a dedicated role, working together to achieve complex functionality—similar to microservices in backend systems."}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls#Declare-the-Callee-Proxy","type":"section","kind":"section"},"SyncCallsSection2Step4.swift":{"type":"file","identifier":"SyncCallsSection2Step4.swift","fileName":"lib.swift","content":["import SpaceKit","","@Proxy enum CalleeProxy {","    case deposit","    case withdraw(amount: BigUint)","    case getTotalDepositedAmount","}","","@Controller struct MyController {","    public func callDeposit(receiverAddress: Address) {","        let payment = Message.egldValue","        ","        CalleeProxy","            .deposit","    }","}"],"fileType":"swift","highlights":[{"line":12},{"line":13},{"line":14}],"syntax":"swift"},"doc://SpaceKit/tutorials/SpaceKit/InstallingTools#Installing-SpaceKits-Dependencies":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Installing-SpaceKits-Dependencies","type":"section","url":"\/tutorials\/spacekit\/installingtools#Installing-SpaceKits-Dependencies","kind":"section","abstract":[{"text":"Before writing your first smart contract with SpaceKit, ensure you have the necessary tools installed.","type":"text"}],"role":"pseudoSymbol","title":"Installing SpaceKit's Dependencies"},"SyncCallsSection1Step3.swift":{"fileName":"lib.swift","type":"file","content":["import SpaceKit","","@Proxy enum CalleeProxy {","    ","}","","@Controller struct MyController {","    ","}"],"fileType":"swift","highlights":[{"line":3},{"line":4},{"line":5},{"line":6}],"syntax":"swift","identifier":"SyncCallsSection1Step3.swift"},"doc://SpaceKit/tutorials/SpaceKit/CodingYourFirstContract":{"type":"topic","kind":"project","abstract":[{"text":"In this tutorial, you’ll create a simple smart contract that manages a counter. Users can increment or decrement the counter, and the changes are persisted across contract executions.","type":"text"}],"url":"\/tutorials\/spacekit\/codingyourfirstcontract","role":"project","title":"Building Your First Smart Contract","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract","estimatedTime":"20min"},"doc://SpaceKit/tutorials/SpaceKit/StoreValues":{"kind":"project","estimatedTime":"15min","role":"project","abstract":[{"type":"text","text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory."}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues","url":"\/tutorials\/spacekit\/storevalues","type":"topic","title":"Persist Values Between Executions"},"SyncCallsSection2Step7.swift":{"type":"file","identifier":"SyncCallsSection2Step7.swift","fileName":"lib.swift","content":["import SpaceKit","","@Proxy enum CalleeProxy {","    case deposit","    case withdraw(amount: BigUint)","    case getTotalDepositedAmount","}","","@Controller struct MyController {","    public func callDeposit(receiverAddress: Address) {","        let payment = Message.egldValue","        ","        CalleeProxy","            .deposit","            .callAndIgnoreResult(","                receiver: receiverAddress,","                egldValue: payment","            )","    }","    ","    public func callWithdraw(","        receiverAddress: Address,","        amount: BigUint","    ) {","        ","    }","}"],"fileType":"swift","highlights":[{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26}],"syntax":"swift"},"doc://SpaceKit/tutorials/SpaceKit/CodingYourFirstContract#Initializing-the-Project":{"url":"\/tutorials\/spacekit\/codingyourfirstcontract#Initializing-the-Project","abstract":[{"type":"text","text":"In this tutorial, you’ll create a simple smart contract that manages a counter. Users can increment or decrement the counter, and the changes are persisted across contract executions."}],"title":"Initializing the Project","kind":"section","type":"section","role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Initializing-the-Project"},"SyncCallsSection1Step1.swift":{"fileName":"CalleeProxy.swift","type":"file","content":["import SpaceKit","","@Controller struct CalleeController {","    public func deposit() {","        \/\/ Implements the logic to handle a deposit.","        \/\/ This endpoint requires an input EGLD payment.","    }","    ","    public func withdraw(amount: BigUint) -> TokenPayment {","        \/\/ Executes the logic to withdraw the specified amount.","        \/\/ Returns a TokenPayment that represents the amount withdrawn.","    }","    ","    public func getTotalDepositedAmount() -> BigUint {","        \/\/ Retrieves the total deposited amount.","        \/\/ This is a view function that likely accesses a stored value.","    }","}"],"fileType":"swift","highlights":[],"syntax":"swift","identifier":"SyncCallsSection1Step1.swift"},"SyncCallsSection2Step8.swift":{"type":"file","identifier":"SyncCallsSection2Step8.swift","fileName":"lib.swift","content":["import SpaceKit","","@Proxy enum CalleeProxy {","    case deposit","    case withdraw(amount: BigUint)","    case getTotalDepositedAmount","}","","@Controller struct MyController {","    public func callDeposit(receiverAddress: Address) {","        let payment = Message.egldValue","        ","        CalleeProxy","            .deposit","            .callAndIgnoreResult(","                receiver: receiverAddress,","                egldValue: payment","            )","    }","    ","    public func callWithdraw(","        receiverAddress: Address,","        amount: BigUint","    ) {","        CalleeProxy","            .withdraw(amount: amount)","    }","}"],"fileType":"swift","highlights":[{"line":25},{"line":26}],"syntax":"swift"},"doc://SpaceKit/tutorials/SpaceKit/Deep-Dive-into-SpaceKit-Concepts/Calling-Contracts-Across-Shards":{"url":"\/tutorials\/spacekit\/deep-dive-into-spacekit-concepts\/calling-contracts-across-shards","abstract":[],"title":"Calling Contracts Across Shards","kind":"article","type":"topic","role":"article","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Calling-Contracts-Across-Shards"},"SyncCallsSection1Step6.swift":{"fileName":"lib.swift","type":"file","content":["import SpaceKit","","@Proxy enum CalleeProxy {","    case deposit","    case withdraw(amount: BigUint)","    case getTotalDepositedAmount","}","","@Controller struct MyController {","    ","}"],"fileType":"swift","highlights":[],"syntax":"swift","identifier":"SyncCallsSection1Step6.swift"},"doc://SpaceKit/tutorials/SpaceKit":{"url":"\/tutorials\/spacekit","abstract":[{"type":"text","text":"Discover how SpaceKit simplifies blockchain development using Swift. Dive into the world of Web3 with ease and efficiency."}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit","title":"Meet SpaceKit","kind":"overview","type":"topic","role":"overview"},"doc://SpaceKit/tutorials/SpaceKit/GetInfo#Accessing-Blockchain-Context-Data":{"type":"section","kind":"section","abstract":[{"type":"text","text":"Many smart contracts rely on contextual data to execute their operations effectively. This data can include input payments, the caller’s address, the current time, the balance of a specific account, or even the contract owner."}],"url":"\/tutorials\/spacekit\/getinfo#Accessing-Blockchain-Context-Data","role":"pseudoSymbol","title":"Accessing Blockchain Context Data","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo#Accessing-Blockchain-Context-Data"},"doc://SpaceKit/tutorials/SpaceKit/StoreValues#Working-with-Storage-for-Single-Value-Persistence":{"url":"\/tutorials\/spacekit\/storevalues#Working-with-Storage-for-Single-Value-Persistence","role":"pseudoSymbol","type":"section","title":"Working with @Storage for Single Value Persistence","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues#Working-with-Storage-for-Single-Value-Persistence","kind":"section","abstract":[{"text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory.","type":"text"}]},"doc://SpaceKit/tutorials/SpaceKit/SyncCalls":{"abstract":[{"text":"Smart contracts can interact not only with users but also with other smart contracts. This enables more advanced protocols by leveraging existing ones. For example, you could integrate a decentralized exchange directly into your contract to perform token swaps. Decentralized applications often involve multiple contracts, each with a dedicated role, working together to achieve complex functionality—similar to microservices in backend systems.","type":"text"}],"url":"\/tutorials\/spacekit\/synccalls","kind":"project","title":"Interact with Other Contracts","estimatedTime":"15min","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls","type":"topic","role":"project"},"doc://SpaceKit/tutorials/SpaceKit/StoreValues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage":{"type":"section","kind":"section","abstract":[{"text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory.","type":"text"}],"url":"\/tutorials\/spacekit\/storevalues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage","role":"pseudoSymbol","title":"Leveraging @Mapping for Dynamic Key-Value Storage","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage"},"doc://SpaceKit/tutorials/SpaceKit/GetInfo#Accessing-Transaction-Context-Data":{"kind":"section","role":"pseudoSymbol","abstract":[{"type":"text","text":"Many smart contracts rely on contextual data to execute their operations effectively. This data can include input payments, the caller’s address, the current time, the balance of a specific account, or even the contract owner."}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo#Accessing-Transaction-Context-Data","url":"\/tutorials\/spacekit\/getinfo#Accessing-Transaction-Context-Data","type":"section","title":"Accessing Transaction Context Data"},"doc://SpaceKit/tutorials/SpaceKit/InstallingTools":{"title":"Install the Necessary Tools","role":"project","url":"\/tutorials\/spacekit\/installingtools","abstract":[{"type":"text","text":"Before writing your first smart contract with SpaceKit, ensure you have the necessary tools installed."}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools","type":"topic","kind":"project","estimatedTime":"10min"},"doc://SpaceKit/tutorials/SpaceKit/CodingYourFirstContract#Writing-the-Contract-Code":{"kind":"section","abstract":[{"type":"text","text":"In this tutorial, you’ll create a simple smart contract that manages a counter. Users can increment or decrement the counter, and the changes are persisted across contract executions."}],"title":"Writing the Contract Code","url":"\/tutorials\/spacekit\/codingyourfirstcontract#Writing-the-Contract-Code","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Writing-the-Contract-Code","role":"pseudoSymbol","type":"section"},"SyncCallsSection2Step10.swift":{"syntax":"swift","type":"file","content":["import SpaceKit","","@Proxy enum CalleeProxy {","    case deposit","    case withdraw(amount: BigUint)","    case getTotalDepositedAmount","}","","@Controller struct MyController {","    public func callDeposit(receiverAddress: Address) {","        let payment = Message.egldValue","        ","        CalleeProxy","            .deposit","            .callAndIgnoreResult(","                receiver: receiverAddress,","                egldValue: payment","            )","    }","    ","    public func callWithdraw(","        receiverAddress: Address,","        amount: BigUint","    ) {","        let payment: TokenPayment = CalleeProxy","            .withdraw(amount: amount)","            .call(","                receiver: receiverAddress","            )","    }","}"],"highlights":[{"line":25}],"identifier":"SyncCallsSection2Step10.swift","fileType":"swift","fileName":"lib.swift"},"doc://SpaceKit/tutorials/SpaceKit/CodingYourFirstContract#Testing-the-Contract":{"type":"section","kind":"section","abstract":[{"text":"In this tutorial, you’ll create a simple smart contract that manages a counter. Users can increment or decrement the counter, and the changes are persisted across contract executions.","type":"text"}],"url":"\/tutorials\/spacekit\/codingyourfirstcontract#Testing-the-Contract","role":"pseudoSymbol","title":"Testing the Contract","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Testing-the-Contract"},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes":{"url":"\/tutorials\/spacekit\/familiarizewithtypes","title":"Exploring SpaceKit's Types","type":"topic","kind":"project","abstract":[{"text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}],"estimatedTime":"20min","role":"project","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes"},"SyncCallsSection2Step2.swift":{"fileType":"swift","type":"file","content":["import SpaceKit","","@Proxy enum CalleeProxy {","    case deposit","    case withdraw(amount: BigUint)","    case getTotalDepositedAmount","}","","@Controller struct MyController {","    public func callDeposit(receiverAddress: Address) {","        ","    }","}"],"identifier":"SyncCallsSection2Step2.swift","highlights":[{"line":10},{"line":11},{"line":12}],"syntax":"swift","fileName":"lib.swift"},"doc://SpaceKit/tutorials/SpaceKit/Deep-Dive-into-SpaceKit-Concepts/Interacting-with-Other-Contracts":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Interacting-with-Other-Contracts","role":"article","url":"\/tutorials\/spacekit\/deep-dive-into-spacekit-concepts\/interacting-with-other-contracts","abstract":[],"kind":"article","type":"topic","title":"Interacting with Other Contracts"},"SyncCallsSection2Step9.swift":{"fileType":"swift","highlights":[{"line":27},{"line":28},{"line":29}],"content":["import SpaceKit","","@Proxy enum CalleeProxy {","    case deposit","    case withdraw(amount: BigUint)","    case getTotalDepositedAmount","}","","@Controller struct MyController {","    public func callDeposit(receiverAddress: Address) {","        let payment = Message.egldValue","        ","        CalleeProxy","            .deposit","            .callAndIgnoreResult(","                receiver: receiverAddress,","                egldValue: payment","            )","    }","    ","    public func callWithdraw(","        receiverAddress: Address,","        amount: BigUint","    ) {","        CalleeProxy","            .withdraw(amount: amount)","            .call(","                receiver: receiverAddress","            )","    }","}"],"identifier":"SyncCallsSection2Step9.swift","syntax":"swift","fileName":"lib.swift","type":"file"},"SyncCallsSection2Step3.swift":{"highlights":[{"line":11}],"identifier":"SyncCallsSection2Step3.swift","content":["import SpaceKit","","@Proxy enum CalleeProxy {","    case deposit","    case withdraw(amount: BigUint)","    case getTotalDepositedAmount","}","","@Controller struct MyController {","    public func callDeposit(receiverAddress: Address) {","        let payment = Message.egldValue","    }","}"],"type":"file","syntax":"swift","fileType":"swift","fileName":"lib.swift"},"doc://SpaceKit/tutorials/SpaceKit/Deep-Dive-into-SpaceKit-Concepts/Persisting-Data-Across-Executions":{"type":"topic","kind":"article","abstract":[],"url":"\/tutorials\/spacekit\/deep-dive-into-spacekit-concepts\/persisting-data-across-executions","role":"article","title":"Persisting Data Across Executions","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Persisting-Data-Across-Executions"},"SyncCallsSection2Step11.swift":{"highlights":[{"line":30},{"line":31},{"line":32},{"line":33}],"content":["import SpaceKit","","@Proxy enum CalleeProxy {","    case deposit","    case withdraw(amount: BigUint)","    case getTotalDepositedAmount","}","","@Controller struct MyController {","    public func callDeposit(receiverAddress: Address) {","        let payment = Message.egldValue","        ","        CalleeProxy","            .deposit","            .callAndIgnoreResult(","                receiver: receiverAddress,","                egldValue: payment","            )","    }","    ","    public func callWithdraw(","        receiverAddress: Address,","        amount: BigUint","    ) {","        let payment: TokenPayment = CalleeProxy","            .withdraw(amount: amount)","            .call(","                receiver: receiverAddress","            )","        ","        guard payment.amount > 0 else {","            smartContractError(message: \"No payment received\")","        }","    }","}"],"fileType":"swift","identifier":"SyncCallsSection2Step11.swift","syntax":"swift","type":"file","fileName":"lib.swift"},"doc://SpaceKit/tutorials/SpaceKit/Deep-Dive-into-SpaceKit-Concepts/Retrieving-Information-from-the-Blockchain":{"abstract":[],"url":"\/tutorials\/spacekit\/deep-dive-into-spacekit-concepts\/retrieving-information-from-the-blockchain","kind":"article","title":"Retrieving Information from the Blockchain","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Retrieving-Information-from-the-Blockchain","type":"topic","role":"article"},"doc://SpaceKit/tutorials/SpaceKit/GetInfo":{"abstract":[{"text":"Many smart contracts rely on contextual data to execute their operations effectively. This data can include input payments, the caller’s address, the current time, the balance of a specific account, or even the contract owner.","type":"text"}],"url":"\/tutorials\/spacekit\/getinfo","kind":"project","title":"Retrieving Information from the Blockchain","estimatedTime":"10min","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo","type":"topic","role":"project"},"doc://SpaceKit/tutorials/SpaceKit/AsyncCalls":{"kind":"project","abstract":[{"type":"text","text":"Blockchain platforms using SpaceVM enable seamless execution within a sharded environment. Sharding divides a blockchain’s global state and validation workload into smaller, manageable units known as shards. This method enhances scalability without compromising decentralization, allowing nodes to operate without significant computational resources."}],"title":"Interacting with Contracts Across Shards","url":"\/tutorials\/spacekit\/asynccalls","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls","role":"project","type":"topic","estimatedTime":"15min"}}}