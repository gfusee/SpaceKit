{"hierarchy":{"modules":[{"reference":"doc:\/\/SpaceKit\/tutorials\/Space\/Getting-Started\/Installing-the-Tools","projects":[{"sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Installing-SpaceKits-Dependencies","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Setting-Up-the-SpaceKit-CLI","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract","kind":"task"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools"}]},{"projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract","sections":[{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Initializing-the-Project"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Writing-the-Contract-Code","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Testing-the-Contract","kind":"task"}]}],"reference":"doc:\/\/SpaceKit\/tutorials\/Space\/Getting-Started\/Building-Your-First-Smart-Contract"},{"projects":[{"sections":[{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Understanding-the-Buffer-Type","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Working-with-the-BigUint-Type","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Working-with-the-Vector-Type","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Creating-Your-Own-Types"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes"}],"reference":"doc:\/\/SpaceKit\/tutorials\/Space\/Deep-Dive-into-SpaceKit-Concepts\/Exploring-SpaceKit's-Types"},{"reference":"doc:\/\/SpaceKit\/tutorials\/Space\/Deep-Dive-into-SpaceKit-Concepts\/Persisting-Data-Across-Executions","projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues","sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues#Working-with-Storage-for-Single-Value-Persistence","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage"}]}]},{"reference":"doc:\/\/SpaceKit\/tutorials\/Space\/Deep-Dive-into-SpaceKit-Concepts\/Retrieving-Information-from-the-Blockchain","projects":[{"sections":[{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo#Accessing-Transaction-Context-Data"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo#Accessing-Blockchain-Context-Data","kind":"task"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo"}]},{"reference":"doc:\/\/SpaceKit\/tutorials\/Space\/Deep-Dive-into-SpaceKit-Concepts\/Interacting-with-Other-Contracts","projects":[{"sections":[{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls#Declare-the-Callee-Proxy"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls#Perform-a-Synchronous-Call","kind":"task"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls"}]},{"reference":"doc:\/\/SpaceKit\/tutorials\/Space\/Deep-Dive-into-SpaceKit-Concepts\/Calling-Contracts-Across-Shards","projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls","sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls#Declare-the-Callee-Proxy","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls#Perform-an-Asynchronous-Call"}]}]}],"reference":"doc:\/\/SpaceKit\/tutorials\/Space","paths":[["doc:\/\/SpaceKit\/tutorials\/Space","doc:\/\/SpaceKit\/tutorials\/Space\/Deep-Dive-into-SpaceKit-Concepts","doc:\/\/SpaceKit\/tutorials\/Space\/Deep-Dive-into-SpaceKit-Concepts\/Interacting-with-Other-Contracts"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls"},"sections":[{"estimatedTimeInMinutes":15,"kind":"hero","chapter":"Interacting with Other Contracts","title":"Interact with Other Contracts","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Smart contracts can interact not only with users but also with other smart contracts. This enables more advanced protocols by leveraging existing ones. For example, you could integrate a decentralized exchange directly into your contract to perform token swaps. Decentralized applications often involve multiple contracts, each with a dedicated role, working together to achieve complex functionality—similar to microservices in backend systems."}]},{"inlineContent":[{"type":"text","text":"In this tutorial, you will learn how to implement synchronous interactions between smart contracts. These interactions are only possible when both the calling and the called contracts reside on the same shard, a concept that we will explore in more detail later."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"A synchronous call is executed immediately, and once the called contract finishes execution, the control returns to the caller. If the call fails, the entire transaction is reverted, meaning no changes are recorded on the blockchain."}],"type":"paragraph"}]},{"tasks":[{"stepsSection":[{"code":"SyncCallsSection1Step1.swift","media":null,"runtimePreview":null,"content":[{"inlineContent":[{"text":"Consider this contract. We will create another contract that will call it.","type":"text"}],"type":"paragraph"}],"type":"step","caption":[{"type":"paragraph","inlineContent":[{"text":"You don’t always need access to the contract’s Swift code. All you need is the endpoint name and the types of the parameters (in the correct order). You can find this information in the contract’s ABI or reverse-engineer it from a blockchain explorer.","type":"text"}]}]},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Now, create the structure for the contract that will call the previous one.","type":"text"}]}],"code":"SyncCallsSection1Step2.swift","media":null,"caption":[],"runtimePreview":null},{"content":[{"type":"paragraph","inlineContent":[{"text":"Declare the ","type":"text"},{"type":"codeVoice","code":"@Proxy"},{"type":"text","text":" enum, which will describe the endpoints of the called contract."}]}],"media":null,"runtimePreview":null,"caption":[],"code":"SyncCallsSection1Step3.swift","type":"step"},{"type":"step","content":[{"inlineContent":[{"text":"Add a case for the ","type":"text"},{"type":"codeVoice","code":"deposit"},{"type":"text","text":" endpoint."}],"type":"paragraph"}],"caption":[{"inlineContent":[{"text":"Since ","type":"text"},{"type":"codeVoice","code":"deposit"},{"type":"text","text":" doesn’t require any parameters, no associated value is necessary."}],"type":"paragraph"}],"code":"SyncCallsSection1Step4.swift","media":null,"runtimePreview":null},{"caption":[{"inlineContent":[{"type":"text","text":"Note: The proxy only defines the input parameters, not the return types."}],"type":"paragraph"}],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add a case for the "},{"code":"withdraw","type":"codeVoice"},{"text":" endpoint.","type":"text"}]}],"media":null,"type":"step","code":"SyncCallsSection1Step5.swift","runtimePreview":null},{"caption":[{"inlineContent":[{"type":"text","text":"Note: The proxy doesn’t describe the return type of the endpoint."}],"type":"paragraph"}],"runtimePreview":null,"media":null,"type":"step","code":"SyncCallsSection1Step6.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add a case for the "},{"type":"codeVoice","code":"getTotalDepositedAmount"},{"type":"text","text":" endpoint."}]}]}],"contentSection":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A proxy represents the endpoints and parameters of the called contract. It defines the structure of the calls that will be made. However, you will specify the actual contract to call separately in your contract’s logic."}]},{"type":"paragraph","inlineContent":[{"text":"The proxy is an enum annotated with ","type":"text"},{"type":"codeVoice","code":"@Proxy"},{"type":"text","text":", where:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Each case name corresponds to an endpoint of the contract you want to call.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The associated values represent the parameters for that endpoint."}]}]}]}],"kind":"contentAndMedia","mediaPosition":"trailing"}],"title":"Declare the Callee Proxy","anchor":"Declare-the-Callee-Proxy"},{"contentSection":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Once you have set up the proxy, invoking the contract is straightforward."}]}],"mediaPosition":"trailing","kind":"contentAndMedia"}],"anchor":"Perform-a-Synchronous-Call","stepsSection":[{"caption":[],"code":"SyncCallsSection1Step6.swift","media":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Here is the complete code from the previous section."}]}],"runtimePreview":null},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add an endpoint called "},{"code":"callDeposit","type":"codeVoice"},{"type":"text","text":" that will trigger the "},{"type":"codeVoice","code":"deposit"},{"type":"text","text":" endpoint."}]}],"runtimePreview":null,"caption":[{"type":"paragraph","inlineContent":[{"text":"The parameter ","type":"text"},{"type":"codeVoice","code":"receiverAddress"},{"type":"text","text":" is the called contract’s address."}]}],"code":"SyncCallsSection2Step2.swift","type":"step","media":null},{"content":[{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"deposit"},{"type":"text","text":" endpoint requires an EGLD payment. Retrieve it, and you’ll pass it along during the call setup in a later step."}]}],"runtimePreview":null,"caption":[],"type":"step","media":null,"code":"SyncCallsSection2Step3.swift"},{"media":null,"code":"SyncCallsSection2Step4.swift","type":"step","runtimePreview":null,"caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Instantiate the "},{"type":"codeVoice","code":"deposit"},{"type":"text","text":" case from the "},{"type":"codeVoice","code":"@Proxy"},{"type":"text","text":" enum."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the "},{"type":"codeVoice","code":"callAndIgnoreResult"},{"text":" method, which is auto-generated by ","type":"text"},{"type":"codeVoice","code":"@Proxy"},{"text":", to invoke the contract. Set the ","type":"text"},{"code":"receiver","type":"codeVoice"},{"type":"text","text":" parameter to the on-chain address of the CalleeContractProxy."}]}],"type":"step","caption":[{"inlineContent":[{"type":"text","text":"Note: Since "},{"code":"deposit","type":"codeVoice"},{"type":"text","text":" doesn’t return any value, use "},{"type":"codeVoice","code":"callAndIgnoreResult"},{"type":"text","text":" instead of "},{"type":"codeVoice","code":"call"},{"text":".","type":"text"}],"type":"paragraph"}],"code":"SyncCallsSection2Step5.swift","runtimePreview":null,"media":null},{"media":null,"runtimePreview":null,"type":"step","caption":[{"type":"paragraph","inlineContent":[{"text":"Note: If you need to transfer ESDT tokens, use the ","type":"text"},{"type":"codeVoice","code":"esdtTransfers"},{"type":"text","text":" parameter."}]}],"code":"SyncCallsSection2Step6.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Forward the EGLD payment using the optional "},{"code":"egldValue","type":"codeVoice"},{"text":" parameter to complete the call.","type":"text"}]}]},{"code":"SyncCallsSection2Step7.swift","runtimePreview":null,"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This function should accept the receiver’s address as well as an "},{"code":"amount","type":"codeVoice"},{"type":"text","text":" parameter that will be passed to the "},{"type":"codeVoice","code":"withdraw"},{"text":" endpoint.","type":"text"}]}],"media":null,"content":[{"inlineContent":[{"type":"text","text":"Add an endpoint called "},{"type":"codeVoice","code":"callWithdraw"},{"type":"text","text":" that will invoke the "},{"type":"codeVoice","code":"withdraw"},{"type":"text","text":" endpoint."}],"type":"paragraph"}],"type":"step"},{"caption":[],"type":"step","media":null,"code":"SyncCallsSection2Step8.swift","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Instantiate the "},{"type":"codeVoice","code":"withdraw"},{"text":" case from the ","type":"text"},{"code":"@Proxy","type":"codeVoice"},{"text":" enum and pass the ","type":"text"},{"type":"codeVoice","code":"amount"},{"type":"text","text":" argument."}]}]},{"caption":[],"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Use the ","type":"text"},{"type":"codeVoice","code":"call"},{"text":" method to execute the contract call, passing the called contract’s address as the ","type":"text"},{"type":"codeVoice","code":"receiver"},{"type":"text","text":", just like before."}]}],"media":null,"code":"SyncCallsSection2Step9.swift","type":"step"},{"type":"step","caption":[{"inlineContent":[{"type":"text","text":"Important: Because the "},{"type":"codeVoice","code":"@Proxy"},{"text":" enum does not define return values, you must explicitly declare the type here.","type":"text"}],"type":"paragraph"}],"content":[{"type":"paragraph","inlineContent":[{"text":"Store the returned value in a variable named ","type":"text"},{"code":"payment","type":"codeVoice"},{"type":"text","text":"."}]}],"code":"SyncCallsSection2Step10.swift","media":null,"runtimePreview":null},{"code":"SyncCallsSection2Step11.swift","runtimePreview":null,"media":null,"type":"step","content":[{"inlineContent":[{"type":"text","text":"Ensure that the resulting payment is greater than zero."}],"type":"paragraph"}],"caption":[]}],"title":"Perform a Synchronous Call"}],"kind":"tasks"},{"kind":"callToAction","title":"Interacting with Contracts Across Shards","abstract":[{"text":"Blockchain platforms using SpaceVM enable seamless execution within a sharded environment. Sharding divides a blockchain’s global state and validation workload into smaller, manageable units known as shards. This method enhances scalability without compromising decentralization, allowing nodes to operate without significant computational resources.","type":"text"}],"action":{"overridingTitleInlineContent":[{"type":"text","text":"Get started"}],"overridingTitle":"Get started","isActive":true,"type":"reference","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls"},"featuredEyebrow":"Tutorial"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/tutorials\/spacekit\/synccalls"]}],"schemaVersion":{"minor":3,"patch":0,"major":0},"metadata":{"categoryPathComponent":"Space","title":"Interact with Other Contracts","role":"project","category":"SpaceKit"},"kind":"project","references":{"SyncCallsSection1Step1.swift":{"fileName":"CalleeContractProxy.swift","identifier":"SyncCallsSection1Step1.swift","content":["import SpaceKit","","@Contract struct CalleeContract {","    public func deposit() {","        \/\/ Implements the logic to handle a deposit.","        \/\/ This endpoint requires an input EGLD payment.","    }","    ","    public func withdraw(amount: BigUint) -> TokenPayment {","        \/\/ Executes the logic to withdraw the specified amount.","        \/\/ Returns a TokenPayment that represents the amount withdrawn.","    }","    ","    public func getTotalDepositedAmount() -> BigUint {","        \/\/ Retrieves the total deposited amount.","        \/\/ This is a view function that likely accesses a stored value.","    }","}"],"syntax":"swift","highlights":[],"fileType":"swift","type":"file"},"SyncCallsSection2Step11.swift":{"fileType":"swift","type":"file","highlights":[{"line":30},{"line":31},{"line":32},{"line":33}],"identifier":"SyncCallsSection2Step11.swift","content":["import SpaceKit","","@Proxy enum CalleeContractProxy {","    case deposit","    case withdraw(amount: BigUint)","    case getTotalDepositedAmount","}","","@Contract struct MyContract {","    public func callDeposit(receiverAddress: Address) {","        let payment = Message.egldValue","        ","        CalleeContractProxy","            .deposit","            .callAndIgnoreResult(","                receiver: receiverAddress,","                egldValue: payment","            )","    }","    ","    public func callWithdraw(","        receiverAddress: Address,","        amount: BigUint","    ) {","        let payment: TokenPayment = CalleeContractProxy","            .withdraw(amount: amount)","            .call(","                receiver: receiverAddress","            )","        ","        guard payment.amount > 0 else {","            smartContractError(message: \"No payment received\")","        }","    }","}"],"syntax":"swift","fileName":"lib.swift"},"doc://SpaceKit/tutorials/SpaceKit/StoreValues":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues","type":"topic","kind":"project","title":"Persist Values Between Executions","abstract":[{"text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory.","type":"text"}],"role":"project","estimatedTime":"15min","url":"\/tutorials\/spacekit\/storevalues"},"doc://SpaceKit/tutorials/Space/Deep-Dive-into-SpaceKit-Concepts/Retrieving-Information-from-the-Blockchain":{"kind":"article","type":"topic","url":"\/tutorials\/space\/deep-dive-into-spacekit-concepts\/retrieving-information-from-the-blockchain","identifier":"doc:\/\/SpaceKit\/tutorials\/Space\/Deep-Dive-into-SpaceKit-Concepts\/Retrieving-Information-from-the-Blockchain","role":"article","title":"Retrieving Information from the Blockchain","abstract":[]},"doc://SpaceKit/tutorials/SpaceKit/SyncCalls#Declare-the-Callee-Proxy":{"role":"pseudoSymbol","title":"Declare the Callee Proxy","kind":"section","type":"section","abstract":[{"text":"Smart contracts can interact not only with users but also with other smart contracts. This enables more advanced protocols by leveraging existing ones. For example, you could integrate a decentralized exchange directly into your contract to perform token swaps. Decentralized applications often involve multiple contracts, each with a dedicated role, working together to achieve complex functionality—similar to microservices in backend systems.","type":"text"}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls#Declare-the-Callee-Proxy","url":"\/tutorials\/spacekit\/synccalls#Declare-the-Callee-Proxy"},"SyncCallsSection2Step6.swift":{"syntax":"swift","type":"file","fileName":"lib.swift","fileType":"swift","highlights":[{"line":16},{"line":17}],"identifier":"SyncCallsSection2Step6.swift","content":["import SpaceKit","","@Proxy enum CalleeContractProxy {","    case deposit","    case withdraw(amount: BigUint)","    case getTotalDepositedAmount","}","","@Contract struct MyContract {","    public func callDeposit(receiverAddress: Address) {","        let payment = Message.egldValue","        ","        CalleeContractProxy","            .deposit","            .callAndIgnoreResult(","                receiver: receiverAddress,","                egldValue: payment","            )","    }","}"]},"SyncCallsSection2Step9.swift":{"fileType":"swift","type":"file","fileName":"lib.swift","identifier":"SyncCallsSection2Step9.swift","syntax":"swift","highlights":[{"line":27},{"line":28},{"line":29}],"content":["import SpaceKit","","@Proxy enum CalleeContractProxy {","    case deposit","    case withdraw(amount: BigUint)","    case getTotalDepositedAmount","}","","@Contract struct MyContract {","    public func callDeposit(receiverAddress: Address) {","        let payment = Message.egldValue","        ","        CalleeContractProxy","            .deposit","            .callAndIgnoreResult(","                receiver: receiverAddress,","                egldValue: payment","            )","    }","    ","    public func callWithdraw(","        receiverAddress: Address,","        amount: BigUint","    ) {","        CalleeContractProxy","            .withdraw(amount: amount)","            .call(","                receiver: receiverAddress","            )","    }","}"]},"SyncCallsSection2Step7.swift":{"type":"file","fileName":"lib.swift","fileType":"swift","content":["import SpaceKit","","@Proxy enum CalleeContractProxy {","    case deposit","    case withdraw(amount: BigUint)","    case getTotalDepositedAmount","}","","@Contract struct MyContract {","    public func callDeposit(receiverAddress: Address) {","        let payment = Message.egldValue","        ","        CalleeContractProxy","            .deposit","            .callAndIgnoreResult(","                receiver: receiverAddress,","                egldValue: payment","            )","    }","    ","    public func callWithdraw(","        receiverAddress: Address,","        amount: BigUint","    ) {","        ","    }","}"],"syntax":"swift","identifier":"SyncCallsSection2Step7.swift","highlights":[{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26}]},"SyncCallsSection2Step10.swift":{"syntax":"swift","type":"file","content":["import SpaceKit","","@Proxy enum CalleeContractProxy {","    case deposit","    case withdraw(amount: BigUint)","    case getTotalDepositedAmount","}","","@Contract struct MyContract {","    public func callDeposit(receiverAddress: Address) {","        let payment = Message.egldValue","        ","        CalleeContractProxy","            .deposit","            .callAndIgnoreResult(","                receiver: receiverAddress,","                egldValue: payment","            )","    }","    ","    public func callWithdraw(","        receiverAddress: Address,","        amount: BigUint","    ) {","        let payment: TokenPayment = CalleeContractProxy","            .withdraw(amount: amount)","            .call(","                receiver: receiverAddress","            )","    }","}"],"fileType":"swift","highlights":[{"line":25}],"identifier":"SyncCallsSection2Step10.swift","fileName":"lib.swift"},"doc://SpaceKit/tutorials/Space/Deep-Dive-into-SpaceKit-Concepts/Interacting-with-Other-Contracts":{"identifier":"doc:\/\/SpaceKit\/tutorials\/Space\/Deep-Dive-into-SpaceKit-Concepts\/Interacting-with-Other-Contracts","type":"topic","kind":"article","title":"Interacting with Other Contracts","abstract":[],"role":"article","url":"\/tutorials\/space\/deep-dive-into-spacekit-concepts\/interacting-with-other-contracts"},"SyncCallsSection2Step3.swift":{"fileName":"lib.swift","type":"file","highlights":[{"line":11}],"syntax":"swift","identifier":"SyncCallsSection2Step3.swift","content":["import SpaceKit","","@Proxy enum CalleeContractProxy {","    case deposit","    case withdraw(amount: BigUint)","    case getTotalDepositedAmount","}","","@Contract struct MyContract {","    public func callDeposit(receiverAddress: Address) {","        let payment = Message.egldValue","    }","}"],"fileType":"swift"},"doc://SpaceKit/tutorials/Space/Getting-Started/Installing-the-Tools":{"title":"Installing the Tools","type":"topic","kind":"article","abstract":[],"identifier":"doc:\/\/SpaceKit\/tutorials\/Space\/Getting-Started\/Installing-the-Tools","url":"\/tutorials\/space\/getting-started\/installing-the-tools","role":"article"},"doc://SpaceKit/tutorials/SpaceKit/InstallingTools#Setting-Up-the-SpaceKit-CLI":{"url":"\/tutorials\/spacekit\/installingtools#Setting-Up-the-SpaceKit-CLI","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Setting-Up-the-SpaceKit-CLI","type":"section","title":"Setting Up the SpaceKit CLI","abstract":[{"text":"Before writing your first smart contract with SpaceKit, ensure you have the necessary tools installed.","type":"text"}],"kind":"section","role":"pseudoSymbol"},"SyncCallsSection2Step8.swift":{"syntax":"swift","type":"file","content":["import SpaceKit","","@Proxy enum CalleeContractProxy {","    case deposit","    case withdraw(amount: BigUint)","    case getTotalDepositedAmount","}","","@Contract struct MyContract {","    public func callDeposit(receiverAddress: Address) {","        let payment = Message.egldValue","        ","        CalleeContractProxy","            .deposit","            .callAndIgnoreResult(","                receiver: receiverAddress,","                egldValue: payment","            )","    }","    ","    public func callWithdraw(","        receiverAddress: Address,","        amount: BigUint","    ) {","        CalleeContractProxy","            .withdraw(amount: amount)","    }","}"],"fileType":"swift","highlights":[{"line":25},{"line":26}],"identifier":"SyncCallsSection2Step8.swift","fileName":"lib.swift"},"doc://SpaceKit/tutorials/SpaceKit/SyncCalls#Perform-a-Synchronous-Call":{"type":"section","title":"Perform a Synchronous Call","url":"\/tutorials\/spacekit\/synccalls#Perform-a-Synchronous-Call","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls#Perform-a-Synchronous-Call","kind":"section","role":"pseudoSymbol","abstract":[{"type":"text","text":"Smart contracts can interact not only with users but also with other smart contracts. This enables more advanced protocols by leveraging existing ones. For example, you could integrate a decentralized exchange directly into your contract to perform token swaps. Decentralized applications often involve multiple contracts, each with a dedicated role, working together to achieve complex functionality—similar to microservices in backend systems."}]},"doc://SpaceKit/tutorials/SpaceKit/CodingYourFirstContract#Testing-the-Contract":{"role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Testing-the-Contract","type":"section","title":"Testing the Contract","abstract":[{"type":"text","text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user."}],"kind":"section","url":"\/tutorials\/spacekit\/codingyourfirstcontract#Testing-the-Contract"},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Working-with-the-BigUint-Type":{"type":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Working-with-the-BigUint-Type","role":"pseudoSymbol","kind":"section","url":"\/tutorials\/spacekit\/familiarizewithtypes#Working-with-the-BigUint-Type","abstract":[{"text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}],"title":"Working with the BigUint Type"},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes":{"kind":"project","type":"topic","url":"\/tutorials\/spacekit\/familiarizewithtypes","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes","role":"project","title":"Exploring SpaceKit's Types","estimatedTime":"20min","abstract":[{"text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}]},"doc://SpaceKit/tutorials/SpaceKit/AsyncCalls":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls","type":"topic","kind":"project","title":"Interacting with Contracts Across Shards","abstract":[{"text":"Blockchain platforms using SpaceVM enable seamless execution within a sharded environment. Sharding divides a blockchain’s global state and validation workload into smaller, manageable units known as shards. This method enhances scalability without compromising decentralization, allowing nodes to operate without significant computational resources.","type":"text"}],"role":"project","estimatedTime":"15min","url":"\/tutorials\/spacekit\/asynccalls"},"SyncCallsSection1Step6.swift":{"identifier":"SyncCallsSection1Step6.swift","type":"file","fileName":"lib.swift","highlights":[],"syntax":"swift","content":["import SpaceKit","","@Proxy enum CalleeContractProxy {","    case deposit","    case withdraw(amount: BigUint)","    case getTotalDepositedAmount","}","","@Contract struct MyContract {","    ","}"],"fileType":"swift"},"doc://SpaceKit/tutorials/SpaceKit/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract":{"type":"section","abstract":[{"type":"text","text":"Before writing your first smart contract with SpaceKit, ensure you have the necessary tools installed."}],"url":"\/tutorials\/spacekit\/installingtools#Initializing-and-Compiling-Your-First-Smart-Contract","role":"pseudoSymbol","title":"Initializing and Compiling Your First Smart Contract","kind":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract"},"doc://SpaceKit/tutorials/SpaceKit/GetInfo#Accessing-Transaction-Context-Data":{"abstract":[{"type":"text","text":"Many smart contracts rely on contextual data to execute their operations effectively. This data can include input payments, the caller’s address, the current time, the balance of a specific account, or even the contract owner."}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo#Accessing-Transaction-Context-Data","role":"pseudoSymbol","kind":"section","title":"Accessing Transaction Context Data","type":"section","url":"\/tutorials\/spacekit\/getinfo#Accessing-Transaction-Context-Data"},"doc://SpaceKit/tutorials/SpaceKit/StoreValues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage":{"title":"Leveraging @Mapping for Dynamic Key-Value Storage","type":"section","kind":"section","abstract":[{"text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory.","type":"text"}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage","url":"\/tutorials\/spacekit\/storevalues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage","role":"pseudoSymbol"},"SyncCallsSection1Step5.swift":{"syntax":"swift","type":"file","content":["import SpaceKit","","@Proxy enum CalleeContractProxy {","    case deposit","    case withdraw(amount: BigUint)","}","","@Contract struct MyContract {","    ","}"],"fileType":"swift","highlights":[{"line":5}],"identifier":"SyncCallsSection1Step5.swift","fileName":"lib.swift"},"SyncCallsSection1Step2.swift":{"identifier":"SyncCallsSection1Step2.swift","type":"file","fileName":"lib.swift","highlights":[],"syntax":"swift","content":["import SpaceKit","","@Contract struct MyContract {","    ","}"],"fileType":"swift"},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Creating-Your-Own-Types":{"role":"pseudoSymbol","title":"Creating Your Own Types","kind":"section","type":"section","abstract":[{"text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Creating-Your-Own-Types","url":"\/tutorials\/spacekit\/familiarizewithtypes#Creating-Your-Own-Types"},"doc://SpaceKit/tutorials/SpaceKit/InstallingTools#Installing-SpaceKits-Dependencies":{"title":"Installing SpaceKit's Dependencies","type":"section","kind":"section","abstract":[{"text":"Before writing your first smart contract with SpaceKit, ensure you have the necessary tools installed.","type":"text"}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Installing-SpaceKits-Dependencies","url":"\/tutorials\/spacekit\/installingtools#Installing-SpaceKits-Dependencies","role":"pseudoSymbol"},"SyncCallsSection2Step2.swift":{"syntax":"swift","type":"file","content":["import SpaceKit","","@Proxy enum CalleeContractProxy {","    case deposit","    case withdraw(amount: BigUint)","    case getTotalDepositedAmount","}","","@Contract struct MyContract {","    public func callDeposit(receiverAddress: Address) {","        ","    }","}"],"fileType":"swift","highlights":[{"line":10},{"line":11},{"line":12}],"identifier":"SyncCallsSection2Step2.swift","fileName":"lib.swift"},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Working-with-the-Vector-Type":{"abstract":[{"type":"text","text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM."}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Working-with-the-Vector-Type","role":"pseudoSymbol","kind":"section","title":"Working with the Vector Type","type":"section","url":"\/tutorials\/spacekit\/familiarizewithtypes#Working-with-the-Vector-Type"},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges":{"title":"Handling Heap Allocation Challenges","type":"section","kind":"section","abstract":[{"text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges","url":"\/tutorials\/spacekit\/familiarizewithtypes#Handling-Heap-Allocation-Challenges","role":"pseudoSymbol"},"doc://SpaceKit/tutorials/SpaceKit/GetInfo#Accessing-Blockchain-Context-Data":{"type":"section","title":"Accessing Blockchain Context Data","url":"\/tutorials\/spacekit\/getinfo#Accessing-Blockchain-Context-Data","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo#Accessing-Blockchain-Context-Data","kind":"section","role":"pseudoSymbol","abstract":[{"type":"text","text":"Many smart contracts rely on contextual data to execute their operations effectively. This data can include input payments, the caller’s address, the current time, the balance of a specific account, or even the contract owner."}]},"doc://SpaceKit/tutorials/SpaceKit/GetInfo":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo","type":"topic","kind":"project","title":"Retrieving Information from the Blockchain","abstract":[{"text":"Many smart contracts rely on contextual data to execute their operations effectively. This data can include input payments, the caller’s address, the current time, the balance of a specific account, or even the contract owner.","type":"text"}],"role":"project","estimatedTime":"10min","url":"\/tutorials\/spacekit\/getinfo"},"doc://SpaceKit/tutorials/SpaceKit/AsyncCalls#Declare-the-Callee-Proxy":{"type":"section","abstract":[{"type":"text","text":"Blockchain platforms using SpaceVM enable seamless execution within a sharded environment. Sharding divides a blockchain’s global state and validation workload into smaller, manageable units known as shards. This method enhances scalability without compromising decentralization, allowing nodes to operate without significant computational resources."}],"url":"\/tutorials\/spacekit\/asynccalls#Declare-the-Callee-Proxy","role":"pseudoSymbol","title":"Declare the Callee Proxy","kind":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls#Declare-the-Callee-Proxy"},"doc://SpaceKit/tutorials/Space/Getting-Started/Building-Your-First-Smart-Contract":{"title":"Building Your First Smart Contract","type":"topic","url":"\/tutorials\/space\/getting-started\/building-your-first-smart-contract","kind":"article","abstract":[],"identifier":"doc:\/\/SpaceKit\/tutorials\/Space\/Getting-Started\/Building-Your-First-Smart-Contract","role":"article"},"doc://SpaceKit/tutorials/SpaceKit/AsyncCalls#Perform-an-Asynchronous-Call":{"role":"pseudoSymbol","title":"Perform an Asynchronous Call","kind":"section","type":"section","abstract":[{"text":"Blockchain platforms using SpaceVM enable seamless execution within a sharded environment. Sharding divides a blockchain’s global state and validation workload into smaller, manageable units known as shards. This method enhances scalability without compromising decentralization, allowing nodes to operate without significant computational resources.","type":"text"}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls#Perform-an-Asynchronous-Call","url":"\/tutorials\/spacekit\/asynccalls#Perform-an-Asynchronous-Call"},"doc://SpaceKit/tutorials/Space":{"kind":"overview","type":"topic","url":"\/tutorials\/space","identifier":"doc:\/\/SpaceKit\/tutorials\/Space","role":"overview","title":"Meet SpaceKit","abstract":[{"text":"Discover how SpaceKit simplifies blockchain development using Swift. Dive into the world of Web3 with ease and efficiency.","type":"text"}]},"doc://SpaceKit/tutorials/SpaceKit/CodingYourFirstContract":{"role":"project","estimatedTime":"20min","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract","type":"topic","title":"Building Your First Smart Contract","abstract":[{"type":"text","text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user."}],"kind":"project","url":"\/tutorials\/spacekit\/codingyourfirstcontract"},"doc://SpaceKit/tutorials/SpaceKit/CodingYourFirstContract#Initializing-the-Project":{"title":"Initializing the Project","type":"section","kind":"section","abstract":[{"text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user.","type":"text"}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Initializing-the-Project","url":"\/tutorials\/spacekit\/codingyourfirstcontract#Initializing-the-Project","role":"pseudoSymbol"},"doc://SpaceKit/tutorials/SpaceKit/CodingYourFirstContract#Writing-the-Contract-Code":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Writing-the-Contract-Code","type":"section","kind":"section","title":"Writing the Contract Code","abstract":[{"text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user.","type":"text"}],"role":"pseudoSymbol","url":"\/tutorials\/spacekit\/codingyourfirstcontract#Writing-the-Contract-Code"},"doc://SpaceKit/tutorials/Space/Deep-Dive-into-SpaceKit-Concepts/Exploring-SpaceKit's-Types":{"abstract":[],"identifier":"doc:\/\/SpaceKit\/tutorials\/Space\/Deep-Dive-into-SpaceKit-Concepts\/Exploring-SpaceKit's-Types","role":"article","kind":"article","title":"Exploring SpaceKit's Types","type":"topic","url":"\/tutorials\/space\/deep-dive-into-spacekit-concepts\/exploring-spacekit's-types"},"doc://SpaceKit/tutorials/Space/Deep-Dive-into-SpaceKit-Concepts/Calling-Contracts-Across-Shards":{"abstract":[],"url":"\/tutorials\/space\/deep-dive-into-spacekit-concepts\/calling-contracts-across-shards","type":"topic","role":"article","identifier":"doc:\/\/SpaceKit\/tutorials\/Space\/Deep-Dive-into-SpaceKit-Concepts\/Calling-Contracts-Across-Shards","title":"Calling Contracts Across Shards","kind":"article"},"doc://SpaceKit/tutorials/Space/Deep-Dive-into-SpaceKit-Concepts/Persisting-Data-Across-Executions":{"title":"Persisting Data Across Executions","type":"topic","kind":"article","abstract":[],"identifier":"doc:\/\/SpaceKit\/tutorials\/Space\/Deep-Dive-into-SpaceKit-Concepts\/Persisting-Data-Across-Executions","url":"\/tutorials\/space\/deep-dive-into-spacekit-concepts\/persisting-data-across-executions","role":"article"},"doc://SpaceKit/tutorials/SpaceKit/SyncCalls":{"abstract":[{"type":"text","text":"Smart contracts can interact not only with users but also with other smart contracts. This enables more advanced protocols by leveraging existing ones. For example, you could integrate a decentralized exchange directly into your contract to perform token swaps. Decentralized applications often involve multiple contracts, each with a dedicated role, working together to achieve complex functionality—similar to microservices in backend systems."}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls","estimatedTime":"15min","role":"project","kind":"project","title":"Interact with Other Contracts","type":"topic","url":"\/tutorials\/spacekit\/synccalls"},"doc://SpaceKit/tutorials/SpaceKit/InstallingTools":{"role":"project","estimatedTime":"10min","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools","type":"topic","title":"Install the Necessary Tools","abstract":[{"type":"text","text":"Before writing your first smart contract with SpaceKit, ensure you have the necessary tools installed."}],"kind":"project","url":"\/tutorials\/spacekit\/installingtools"},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Understanding-the-Buffer-Type":{"role":"pseudoSymbol","title":"Understanding the Buffer Type","kind":"section","type":"section","abstract":[{"text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Understanding-the-Buffer-Type","url":"\/tutorials\/spacekit\/familiarizewithtypes#Understanding-the-Buffer-Type"},"SyncCallsSection2Step4.swift":{"identifier":"SyncCallsSection2Step4.swift","type":"file","fileName":"lib.swift","fileType":"swift","content":["import SpaceKit","","@Proxy enum CalleeContractProxy {","    case deposit","    case withdraw(amount: BigUint)","    case getTotalDepositedAmount","}","","@Contract struct MyContract {","    public func callDeposit(receiverAddress: Address) {","        let payment = Message.egldValue","        ","        CalleeContractProxy","            .deposit","    }","}"],"syntax":"swift","highlights":[{"line":12},{"line":13},{"line":14}]},"SyncCallsSection1Step4.swift":{"syntax":"swift","type":"file","content":["import SpaceKit","","@Proxy enum CalleeContractProxy {","    case deposit","}","","@Contract struct MyContract {","    ","}"],"fileType":"swift","highlights":[{"line":4}],"identifier":"SyncCallsSection1Step4.swift","fileName":"lib.swift"},"doc://SpaceKit/tutorials/SpaceKit/StoreValues#Working-with-Storage-for-Single-Value-Persistence":{"abstract":[{"text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory.","type":"text"}],"url":"\/tutorials\/spacekit\/storevalues#Working-with-Storage-for-Single-Value-Persistence","type":"section","role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues#Working-with-Storage-for-Single-Value-Persistence","title":"Working with @Storage for Single Value Persistence","kind":"section"},"SyncCallsSection2Step5.swift":{"identifier":"SyncCallsSection2Step5.swift","type":"file","fileName":"lib.swift","highlights":[{"line":15},{"line":16},{"line":17}],"syntax":"swift","content":["import SpaceKit","","@Proxy enum CalleeContractProxy {","    case deposit","    case withdraw(amount: BigUint)","    case getTotalDepositedAmount","}","","@Contract struct MyContract {","    public func callDeposit(receiverAddress: Address) {","        let payment = Message.egldValue","        ","        CalleeContractProxy","            .deposit","            .callAndIgnoreResult(","                receiver: receiverAddress","            )","    }","}"],"fileType":"swift"},"SyncCallsSection1Step3.swift":{"syntax":"swift","type":"file","content":["import SpaceKit","","@Proxy enum CalleeContractProxy {","    ","}","","@Contract struct MyContract {","    ","}"],"fileType":"swift","highlights":[{"line":3},{"line":4},{"line":5},{"line":6}],"identifier":"SyncCallsSection1Step3.swift","fileName":"lib.swift"}}}