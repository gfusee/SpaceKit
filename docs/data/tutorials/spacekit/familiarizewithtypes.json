{"sections":[{"title":"Exploring SpaceKit's Types","chapter":"Exploring SpaceKit's Types","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM."}]}],"estimatedTimeInMinutes":20,"kind":"hero"},{"kind":"tasks","tasks":[{"contentSection":[{"kind":"contentAndMedia","mediaPosition":"trailing","content":[{"inlineContent":[{"type":"text","text":"Writing code for blockchain involves operating within strict resource constraints. To address this, SpaceKit uses Swift’s “embedded” mode, ensuring the compiled code is as lightweight and efficient as possible."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"SpaceVM, the engine running smart contracts, limits heap allocations. As a result, types with dynamic sizes, such as Strings, Arrays, or classes, and any structs or enums containing these, are not permitted."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Additionally, Swift’s existential types—such as "},{"type":"codeVoice","code":"any Protocol"},{"text":" where ","type":"text"},{"code":"Protocol","type":"codeVoice"},{"type":"text","text":" is a protocol—are also forbidden. Existential types introduce runtime overhead, which is why they are not allowed in SpaceKit."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The allowed Swift types are:"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"text":"StaticString","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Integer types: Int, UInt, UInt8, UInt16, etc.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Bool: treated as a UInt8","type":"text"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"text","text":"SpaceKit introduces specific types that serve as alternatives for those not allowed. This chapter introduces three key replacements:"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"code":"Buffer","type":"codeVoice"},{"text":": A substitute for String and Data","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"BigUint","type":"codeVoice"},{"type":"text","text":": Capable of handling large unsigned integers"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"Vector","type":"codeVoice"},{"text":": An alternative to Array","type":"text"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For security, these types do not feature mutating methods. Instead, they use methods that return new instances. For example, the "},{"type":"codeVoice","code":"Buffer"},{"text":" type does not include ","type":"text"},{"code":"append(_:) -> Void","type":"codeVoice"},{"type":"text","text":" but instead offers "},{"code":"appending(_:) -> Buffer","type":"codeVoice"},{"type":"text","text":"."}]}]}],"title":"Handling Heap Allocation Challenges","anchor":"Handling-Heap-Allocation-Challenges","stepsSection":[{"content":[{"inlineContent":[{"type":"text","text":"Avoid using "},{"type":"codeVoice","code":"String"},{"text":" in SpaceKit, as it is prohibited due to memory restrictions.","type":"text"}],"type":"paragraph"}],"runtimePreview":null,"type":"step","media":null,"code":"FamiliarizeWithTypesSection1Step1.swift","caption":[]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Use ","type":"text"},{"code":"Buffer","type":"codeVoice"},{"text":" as a fixed-size alternative for handling raw data and text.","type":"text"}]}],"caption":[],"type":"step","runtimePreview":null,"code":"FamiliarizeWithTypesSection1Step2.swift","media":null},{"content":[{"type":"paragraph","inlineContent":[{"text":"Similarly, avoid using ","type":"text"},{"code":"Array","type":"codeVoice"},{"text":" since it leads to heap allocations and is not allowed.","type":"text"}]}],"caption":[],"runtimePreview":null,"code":"FamiliarizeWithTypesSection1Step3.swift","media":null,"type":"step"},{"code":"FamiliarizeWithTypesSection1Step4.swift","type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Instead, leverage the ","type":"text"},{"code":"Vector","type":"codeVoice"},{"text":" type as a memory-efficient alternative to ","type":"text"},{"type":"codeVoice","code":"Array"},{"type":"text","text":"."}]}],"media":null,"runtimePreview":null,"caption":[]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Integer types like ","type":"text"},{"type":"codeVoice","code":"Int"},{"text":", ","type":"text"},{"code":"UInt","type":"codeVoice"},{"type":"text","text":", and "},{"code":"Bool","type":"codeVoice"},{"text":" are fully supported and safe to use.","type":"text"}]}],"caption":[],"runtimePreview":null,"media":null,"code":"FamiliarizeWithTypesSection1Step5.swift","type":"step"},{"caption":[],"type":"step","media":null,"code":"FamiliarizeWithTypesSection1Step6.swift","runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"Ensure you only import the SpaceKit framework to keep the contract lightweight and efficient."}],"type":"paragraph"}]}]},{"stepsSection":[{"content":[{"inlineContent":[{"type":"text","text":"Start by creating the basic structure for your contract."}],"type":"paragraph"}],"runtimePreview":null,"type":"step","code":"FamiliarizeWithTypesSection2Step1.swift","media":null,"caption":[]},{"code":"FamiliarizeWithTypesSection2Step2.swift","caption":[{"inlineContent":[{"type":"text","text":"Important: Explicitly declare your variable as "},{"type":"codeVoice","code":"Buffer"},{"text":" to avoid being interpreted as ","type":"text"},{"code":"String","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}],"type":"step","media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Initialize a "},{"type":"codeVoice","code":"Buffer"},{"text":" variable using a string literal.","type":"text"}]}],"runtimePreview":null},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Append another ","type":"text"},{"type":"codeVoice","code":"Buffer"},{"type":"text","text":" to your existing variable."}]}],"runtimePreview":null,"media":null,"code":"FamiliarizeWithTypesSection2Step3.swift","caption":[]},{"type":"step","runtimePreview":null,"caption":[{"inlineContent":[{"text":"Note: The ","type":"text"},{"code":"smartContractError","type":"codeVoice"},{"text":" function requires a ","type":"text"},{"type":"codeVoice","code":"Buffer"},{"type":"text","text":" parameter. This topic is covered in detail in a later chapter."}],"type":"paragraph"}],"code":"FamiliarizeWithTypesSection2Step4.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Compare two "},{"code":"Buffer","type":"codeVoice"},{"text":" instances. If they don’t match, throw a smart contract error.","type":"text"}]}],"media":null}],"contentSection":[{"kind":"contentAndMedia","mediaPosition":"trailing","content":[{"inlineContent":[{"type":"codeVoice","code":"Buffer"},{"text":" is a fundamental type in SpaceKit, designed to store raw data and strings.","type":"text"}],"type":"paragraph"}]}],"title":"Understanding the Buffer Type","anchor":"Understanding-the-Buffer-Type"},{"stepsSection":[{"code":"FamiliarizeWithTypesSection3Step1.swift","caption":[],"content":[{"inlineContent":[{"type":"text","text":"Begin by structuring your contract."}],"type":"paragraph"}],"media":null,"runtimePreview":null,"type":"step"},{"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Important: You must specify the type explicitly as "},{"type":"codeVoice","code":"BigUint"},{"type":"text","text":", or it will default to "},{"type":"codeVoice","code":"Int"},{"text":".","type":"text"}]}],"code":"FamiliarizeWithTypesSection3Step2.swift","type":"step","content":[{"inlineContent":[{"text":"Declare a ","type":"text"},{"code":"BigUint","type":"codeVoice"},{"text":" constant with an integer literal.","type":"text"}],"type":"paragraph"}],"media":null,"runtimePreview":null},{"media":null,"code":"FamiliarizeWithTypesSection3Step3.swift","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a new "},{"code":"BigUint","type":"codeVoice"},{"text":" by adding 3 to the previous constant.","type":"text"}]}],"caption":[],"type":"step"},{"caption":[],"runtimePreview":null,"media":null,"type":"step","code":"FamiliarizeWithTypesSection3Step4.swift","content":[{"type":"paragraph","inlineContent":[{"text":"Multiply the new variable by 7.","type":"text"}]}]},{"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add three times the initial constant to the new variable."}]}],"type":"step","media":null,"caption":[],"code":"FamiliarizeWithTypesSection3Step5.swift"},{"caption":[{"inlineContent":[{"type":"text","text":"Note: A "},{"code":"BigUint","type":"codeVoice"},{"text":" value cannot be negative. If the subtraction results in a value below zero, SpaceKit will trigger a smart contract error.","type":"text"}],"type":"paragraph"}],"media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Subtract 21 from the variable.","type":"text"}]}],"code":"FamiliarizeWithTypesSection3Step6.swift","runtimePreview":null,"type":"step"},{"media":null,"code":"FamiliarizeWithTypesSection3Step7.swift","runtimePreview":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Verify that the result is a multiple of 10, and throw a smart contract error if not."}]}],"caption":[]},{"content":[{"inlineContent":[{"type":"text","text":"Ensure the result is greater than zero, throwing an error if it isn’t."}],"type":"paragraph"}],"caption":[],"code":"FamiliarizeWithTypesSection3Step8.swift","type":"step","runtimePreview":null,"media":null}],"title":"Working with the BigUint Type","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"text":"Blockchains do not support decimal numbers. However, real-world applications often require decimal representation, such as in cryptocurrency amounts like 0.09281 Bitcoin.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To handle such cases, values are expressed as large numbers, where many tokens allocate the last 18 digits to represent the decimal portion. For instance: 1 EGLD equals 1 * 10^18, or 1,000,000,000,000,000,000."}]},{"inlineContent":[{"type":"text","text":"Standard Swift types, such as "},{"type":"codeVoice","code":"UInt64"},{"type":"text","text":", can only store values up to 18,446,744,073,709,551,615 (20 digits), making it impossible to represent values exceeding approximately 18.446744 EGLD."}],"type":"paragraph"},{"inlineContent":[{"text":"SpaceKit provides the ","type":"text"},{"type":"codeVoice","code":"BigUint"},{"type":"text","text":" type to store arbitrarily large positive numbers."}],"type":"paragraph"}],"mediaPosition":"trailing"}],"anchor":"Working-with-the-BigUint-Type"},{"title":"Working with the Vector Type","contentSection":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"Array","type":"codeVoice"},{"text":" type is often the default for storing dynamic-size data, but it is not permitted in SpaceKit. Fortunately, SpaceKit provides a suitable alternative: ","type":"text"},{"type":"codeVoice","code":"Vector"},{"type":"text","text":"."}]},{"inlineContent":[{"type":"text","text":"A "},{"code":"Vector","type":"codeVoice"},{"text":" can store any type compatible with SpaceKit, including user-defined structs and enums.","type":"text"}],"type":"paragraph"}],"mediaPosition":"trailing","kind":"contentAndMedia"}],"anchor":"Working-with-the-Vector-Type","stepsSection":[{"type":"step","runtimePreview":null,"caption":[],"code":"FamiliarizeWithTypesSection4Step1.swift","media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Begin by setting up the basic structure of your contract."}]}]},{"caption":[{"inlineContent":[{"type":"text","text":"Important: Currently, array literal assignment is disabled. The SpaceKit team is investigating its impact on memory management in smart contracts before enabling it."}],"type":"paragraph"}],"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Declare a "},{"type":"codeVoice","code":"Vector"},{"text":" variable to hold ","type":"text"},{"type":"codeVoice","code":"BigUint"},{"type":"text","text":" elements."}]}],"media":null,"code":"FamiliarizeWithTypesSection4Step2.swift","runtimePreview":null},{"caption":[],"type":"step","media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add elements to the "},{"code":"Vector","type":"codeVoice"},{"text":".","type":"text"}]}],"code":"FamiliarizeWithTypesSection4Step3.swift","runtimePreview":null},{"content":[{"inlineContent":[{"text":"Iterate over the ","type":"text"},{"code":"Vector","type":"codeVoice"},{"type":"text","text":" to sum all the elements."}],"type":"paragraph"}],"caption":[{"inlineContent":[{"type":"text","text":"Important: The "},{"code":"for ... in","type":"codeVoice"},{"type":"text","text":" loop for vectors is currently disabled. The SpaceKit team is evaluating its effect on smart contract memory before enabling it."}],"type":"paragraph"}],"media":null,"code":"FamiliarizeWithTypesSection4Step4.swift","type":"step","runtimePreview":null},{"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Ensure the sum equals 13. Throw a smart contract error if it doesn’t."}]}],"type":"step","code":"FamiliarizeWithTypesSection4Step5.swift","caption":[],"media":null}]},{"stepsSection":[{"runtimePreview":null,"media":null,"content":[{"inlineContent":[{"text":"Start by creating a struct with fields that are compatible with SpaceKit.","type":"text"}],"type":"paragraph"}],"code":"FamiliarizeWithTypesSection5Step1.swift","type":"step","caption":[]},{"media":null,"content":[{"inlineContent":[{"text":"Annotate your struct with ","type":"text"},{"type":"codeVoice","code":"@Codable"},{"type":"text","text":" to make it usable with SpaceKit’s encoding system."}],"type":"paragraph"}],"code":"FamiliarizeWithTypesSection5Step2.swift","runtimePreview":null,"caption":[],"type":"step"},{"caption":[],"media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the "},{"code":"@Codable","type":"codeVoice"},{"text":"-annotated type within your smart contracts.","type":"text"}]}],"runtimePreview":null,"type":"step","code":"FamiliarizeWithTypesSection5Step3.swift"},{"runtimePreview":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Remember, a ","type":"text"},{"type":"codeVoice","code":"@Codable"},{"text":" type can be used as a field in other ","type":"text"},{"type":"codeVoice","code":"@Codable"},{"text":" types.","type":"text"}]}],"caption":[],"media":null,"code":"FamiliarizeWithTypesSection5Step4.swift"}],"contentSection":[{"content":[{"inlineContent":[{"type":"text","text":"You can define your own structures and enumerations and make them compatible with SpaceKit using the "},{"code":"@Codable","type":"codeVoice"},{"type":"text","text":" annotation. When a type is marked with "},{"type":"codeVoice","code":"@Codable"},{"text":", it becomes eligible to be used as input or output for endpoints, within arrays, and anywhere SpaceKit’s encoding system is applied.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"A type annotated with ","type":"text"},{"code":"@Codable","type":"codeVoice"},{"type":"text","text":" must only contain fields of types compatible with SpaceKit, such as integers, "},{"type":"codeVoice","code":"Bool"},{"text":", ","type":"text"},{"code":"Buffer","type":"codeVoice"},{"text":", ","type":"text"},{"code":"BigUint","type":"codeVoice"},{"type":"text","text":", "},{"code":"Vector","type":"codeVoice"},{"type":"text","text":", and other "},{"type":"codeVoice","code":"@Codable"},{"type":"text","text":" types."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Additionally, the "},{"code":"@Codable","type":"codeVoice"},{"type":"text","text":" annotation prevents the structure from having methods or initializers."}]}],"mediaPosition":"trailing","kind":"contentAndMedia"}],"anchor":"Creating-Your-Own-Types","title":"Creating Your Own Types"}]},{"kind":"callToAction","action":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues","overridingTitle":"Get started","overridingTitleInlineContent":[{"type":"text","text":"Get started"}],"type":"reference","isActive":true},"featuredEyebrow":"Tutorial","abstract":[{"type":"text","text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory."}],"title":"Persist Values Between Executions"}],"hierarchy":{"paths":[["doc:\/\/SpaceKit\/tutorials\/SpaceKit","doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts","doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Exploring-SpaceKit's-Types"]],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit","modules":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Getting-Started\/Installing-the-Tools","projects":[{"sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Installing-SpaceKits-Dependencies","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Setting-Up-the-SpaceKit-CLI","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract","kind":"task"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools"}]},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Getting-Started\/Building-Your-First-Smart-Contract","projects":[{"sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Initializing-the-Project","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Writing-the-Contract-Code","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Testing-the-Contract","kind":"task"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract"}]},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Exploring-SpaceKit's-Types","projects":[{"sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Understanding-the-Buffer-Type"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Working-with-the-BigUint-Type","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Working-with-the-Vector-Type","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Creating-Your-Own-Types"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes"}]},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Persisting-Data-Across-Executions","projects":[{"sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues#Working-with-Storage-for-Single-Value-Persistence","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage","kind":"task"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues"}]},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Retrieving-Information-from-the-Blockchain","projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo","sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo#Accessing-Transaction-Context-Data","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo#Accessing-Blockchain-Context-Data","kind":"task"}]}]},{"projects":[{"sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls#Declare-the-Callee-Proxy","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls#Perform-a-Synchronous-Call","kind":"task"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Interacting-with-Other-Contracts"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Calling-Contracts-Across-Shards","projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls","sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls#Declare-the-Callee-Proxy","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls#Perform-an-Asynchronous-Call","kind":"task"}]}]},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Create-and-Manage-Tokens\/Creating-and-Understanding-Tokens","projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/UnderstandTokens","sections":[{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/UnderstandTokens#Issuing-a-Fungible-Token-from-Your-Contract"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/UnderstandTokens#Issuing-a-Non-Fungible-Token-from-Your-Contract","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/UnderstandTokens#Issuing-a-Semi-Fungible-Token-from-Your-Contract"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/UnderstandTokens#Issuing-a-Meta-ESDT-from-Your-Contract","kind":"task"}]}]},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Create-and-Manage-Tokens\/Managing-Fungible-Tokens","projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnFungibleTokens","sections":[{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnFungibleTokens#Assign-Mint-and-Burn-Roles"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnFungibleTokens#Mint-New-Tokens","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnFungibleTokens#Burn-Tokens"}]}]},{"projects":[{"sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnNonFungibleTokens#Assign-Create-AddQuantity-and-Burn-Roles","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnNonFungibleTokens#Create-a-New-Nonce"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnNonFungibleTokens#Add-Quantity-to-an-Existing-Nonce"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnNonFungibleTokens#Burn-Tokens"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnNonFungibleTokens"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Create-and-Manage-Tokens\/Managing-Non-Fungible-Tokens"},{"projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/TokenAttributes","sections":[{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/TokenAttributes#Implementing-the-lockFunds-Endpoint"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/TokenAttributes#Implementing-the-unlockFunds-Endpoint","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/TokenAttributes#Implementing-the-changeTokenLockDuration-Endpoint","kind":"task"}]}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Create-and-Manage-Tokens\/Enhancing-Contracts-with-Token-Attributes"}]},"identifier":{"url":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes","interfaceLanguage":"swift"},"variants":[{"paths":["\/tutorials\/spacekit\/familiarizewithtypes"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"minor":3,"patch":0,"major":0},"kind":"project","metadata":{"categoryPathComponent":"SpaceKit","title":"Exploring SpaceKit's Types","role":"project","category":"SpaceKit"},"references":{"doc://SpaceKit/tutorials/SpaceKit/OperationsOnNonFungibleTokens#Assign-Create-AddQuantity-and-Burn-Roles":{"title":"Assign Create, AddQuantity, and Burn Roles","role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnNonFungibleTokens#Assign-Create-AddQuantity-and-Burn-Roles","kind":"section","type":"section","url":"\/tutorials\/spacekit\/operationsonnonfungibletokens#Assign-Create-AddQuantity-and-Burn-Roles","abstract":[{"type":"text","text":"Non-fungible tokens (NFTs) are unique digital assets that cannot be interchanged. Each NFT is associated with a unique identifier, known as a nonce. You can think of it like an airline ticket—each ticket is assigned to a specific passenger, with individual preferences and details."}]},"doc://SpaceKit/tutorials/SpaceKit/UnderstandTokens#Issuing-a-Non-Fungible-Token-from-Your-Contract":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/UnderstandTokens#Issuing-a-Non-Fungible-Token-from-Your-Contract","kind":"section","abstract":[{"text":"Learn about the ESDT standard used in the SpaceKit framework, a token model that supports fungible tokens, non-fungible tokens (NFTs), semi-fungible tokens, and meta-esdt tokens.","type":"text"},{"text":" ","type":"text"},{"text":"The SpaceKit framework uses a token standard called ESDT. This standard defines four types of tokens: fungible, non-fungible (NFT), semi-fungible, and meta-esdt.","type":"text"}],"url":"\/tutorials\/spacekit\/understandtokens#Issuing-a-Non-Fungible-Token-from-Your-Contract","title":"Issuing a Non-Fungible Token from Your Contract","type":"section","role":"pseudoSymbol"},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Understanding-the-Buffer-Type":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Understanding-the-Buffer-Type","url":"\/tutorials\/spacekit\/familiarizewithtypes#Understanding-the-Buffer-Type","abstract":[{"type":"text","text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM."}],"kind":"section","title":"Understanding the Buffer Type","type":"section","role":"pseudoSymbol"},"FamiliarizeWithTypesSection4Step2.swift":{"syntax":"swift","fileName":"lib.swift","identifier":"FamiliarizeWithTypesSection4Step2.swift","fileType":"swift","type":"file","content":["import SpaceKit","","@Controller public struct MyController {","    public func myEndpoint() {","        var myVector: Vector<BigUint> = Vector()","    }","}"],"highlights":[{"line":5}]},"FamiliarizeWithTypesSection2Step2.swift":{"syntax":"swift","fileName":"lib.swift","identifier":"FamiliarizeWithTypesSection2Step2.swift","fileType":"swift","type":"file","content":["import SpaceKit","","@Controller public struct MyController {","    public func myEndpoint() {","        var myBuffer: Buffer = \"Hello\"","    }","}"],"highlights":[{"line":5}]},"doc://SpaceKit/tutorials/SpaceKit/SyncCalls#Declare-the-Callee-Proxy":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls#Declare-the-Callee-Proxy","url":"\/tutorials\/spacekit\/synccalls#Declare-the-Callee-Proxy","abstract":[{"type":"text","text":"Smart contracts can interact not only with users but also with other smart contracts. This enables more advanced protocols by leveraging existing ones. For example, you could integrate a decentralized exchange directly into your contract to perform token swaps. Decentralized applications often involve multiple contracts, each with a dedicated role, working together to achieve complex functionality—similar to microservices in backend systems."}],"kind":"section","title":"Declare the Callee Proxy","type":"section","role":"pseudoSymbol"},"FamiliarizeWithTypesSection5Step2.swift":{"fileName":"struct.swift","highlights":[{"line":3}],"syntax":"swift","content":["import SpaceKit","","@Codable public struct MyStruct {","    let myBiguint: BigUint","    let myInteger: UInt64","    let myBuffer: Buffer","}"],"type":"file","fileType":"swift","identifier":"FamiliarizeWithTypesSection5Step2.swift"},"doc://SpaceKit/tutorials/SpaceKit/InstallingTools":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools","kind":"project","type":"topic","abstract":[{"type":"text","text":"Before writing your first smart contract with SpaceKit, ensure you have the necessary tools installed."}],"role":"project","url":"\/tutorials\/spacekit\/installingtools","estimatedTime":"10min","title":"Install the Necessary Tools"},"doc://SpaceKit/tutorials/SpaceKit/OperationsOnFungibleTokens#Mint-New-Tokens":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnFungibleTokens#Mint-New-Tokens","kind":"section","type":"section","abstract":[{"type":"text","text":"Fungible tokens function similarly to traditional currencies, making them the simplest type of token to work with."}],"role":"pseudoSymbol","url":"\/tutorials\/spacekit\/operationsonfungibletokens#Mint-New-Tokens","title":"Mint New Tokens"},"doc://SpaceKit/tutorials/SpaceKit/TokenAttributes#Implementing-the-changeTokenLockDuration-Endpoint":{"title":"Implementing the changeTokenLockDuration Endpoint","role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/TokenAttributes#Implementing-the-changeTokenLockDuration-Endpoint","kind":"section","type":"section","url":"\/tutorials\/spacekit\/tokenattributes#Implementing-the-changeTokenLockDuration-Endpoint","abstract":[{"type":"text","text":"The ESDT standard enables embedding custom data within non-fungible tokens, allowing developers to extend the functionality of their smart contracts. This additional data, referred to as “attributes,” is tied to the token and transfers along with it between wallets."}]},"doc://SpaceKit/tutorials/SpaceKit/Create-and-Manage-Tokens/Creating-and-Understanding-Tokens":{"role":"article","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Create-and-Manage-Tokens\/Creating-and-Understanding-Tokens","abstract":[],"kind":"article","url":"\/tutorials\/spacekit\/create-and-manage-tokens\/creating-and-understanding-tokens","type":"topic","title":"Creating and Understanding Tokens"},"doc://SpaceKit/tutorials/SpaceKit/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract":{"abstract":[{"text":"Before writing your first smart contract with SpaceKit, ensure you have the necessary tools installed.","type":"text"}],"url":"\/tutorials\/spacekit\/installingtools#Initializing-and-Compiling-Your-First-Smart-Contract","title":"Initializing and Compiling Your First Smart Contract","type":"section","kind":"section","role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract"},"doc://SpaceKit/tutorials/SpaceKit/GetInfo":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo","estimatedTime":"10min","kind":"project","abstract":[{"text":"Many smart contracts rely on contextual data to execute their operations effectively. This data can include input payments, the caller’s address, the current time, the balance of a specific account, or even the contract owner.","type":"text"}],"url":"\/tutorials\/spacekit\/getinfo","title":"Retrieving Information from the Blockchain","type":"topic","role":"project"},"FamiliarizeWithTypesSection3Step2.swift":{"syntax":"swift","type":"file","content":["import SpaceKit","","@Controller public struct MyController {","    public func myEndpoint() {","        let initialNumber: BigUint = 5","    }","}"],"fileType":"swift","highlights":[{"line":5}],"identifier":"FamiliarizeWithTypesSection3Step2.swift","fileName":"lib.swift"},"doc://SpaceKit/tutorials/SpaceKit/UnderstandTokens#Issuing-a-Fungible-Token-from-Your-Contract":{"title":"Issuing a Fungible Token from Your Contract","role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/UnderstandTokens#Issuing-a-Fungible-Token-from-Your-Contract","kind":"section","type":"section","url":"\/tutorials\/spacekit\/understandtokens#Issuing-a-Fungible-Token-from-Your-Contract","abstract":[{"type":"text","text":"Learn about the ESDT standard used in the SpaceKit framework, a token model that supports fungible tokens, non-fungible tokens (NFTs), semi-fungible tokens, and meta-esdt tokens."},{"type":"text","text":" "},{"type":"text","text":"The SpaceKit framework uses a token standard called ESDT. This standard defines four types of tokens: fungible, non-fungible (NFT), semi-fungible, and meta-esdt."}]},"doc://SpaceKit/tutorials/SpaceKit/SyncCalls":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls","kind":"project","type":"topic","abstract":[{"type":"text","text":"Smart contracts can interact not only with users but also with other smart contracts. This enables more advanced protocols by leveraging existing ones. For example, you could integrate a decentralized exchange directly into your contract to perform token swaps. Decentralized applications often involve multiple contracts, each with a dedicated role, working together to achieve complex functionality—similar to microservices in backend systems."}],"role":"project","url":"\/tutorials\/spacekit\/synccalls","estimatedTime":"15min","title":"Interact with Other Contracts"},"doc://SpaceKit/tutorials/SpaceKit/UnderstandTokens#Issuing-a-Semi-Fungible-Token-from-Your-Contract":{"role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/UnderstandTokens#Issuing-a-Semi-Fungible-Token-from-Your-Contract","abstract":[{"type":"text","text":"Learn about the ESDT standard used in the SpaceKit framework, a token model that supports fungible tokens, non-fungible tokens (NFTs), semi-fungible tokens, and meta-esdt tokens."},{"type":"text","text":" "},{"type":"text","text":"The SpaceKit framework uses a token standard called ESDT. This standard defines four types of tokens: fungible, non-fungible (NFT), semi-fungible, and meta-esdt."}],"kind":"section","url":"\/tutorials\/spacekit\/understandtokens#Issuing-a-Semi-Fungible-Token-from-Your-Contract","type":"section","title":"Issuing a Semi-Fungible Token from Your Contract"},"FamiliarizeWithTypesSection4Step3.swift":{"syntax":"swift","fileName":"lib.swift","identifier":"FamiliarizeWithTypesSection4Step3.swift","fileType":"swift","type":"file","content":["import SpaceKit","","@Controller public struct MyController {","    public func myEndpoint() {","        var myVector: Vector<BigUint> = Vector()","        myVector = myVector.appended(2)","        myVector = myVector.appended(10)","        myVector = myVector.appended(1)","    }","}"],"highlights":[{"line":6},{"line":7},{"line":8}]},"doc://SpaceKit/tutorials/SpaceKit/Deep-Dive-into-SpaceKit-Concepts/Retrieving-Information-from-the-Blockchain":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Retrieving-Information-from-the-Blockchain","kind":"article","type":"topic","abstract":[],"role":"article","url":"\/tutorials\/spacekit\/deep-dive-into-spacekit-concepts\/retrieving-information-from-the-blockchain","title":"Retrieving Information from the Blockchain"},"doc://SpaceKit/tutorials/SpaceKit/StoreValues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage":{"role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage","abstract":[{"type":"text","text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory."}],"kind":"section","url":"\/tutorials\/spacekit\/storevalues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage","type":"section","title":"Leveraging @Mapping for Dynamic Key-Value Storage"},"doc://SpaceKit/tutorials/SpaceKit/StoreValues":{"role":"project","estimatedTime":"15min","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues","abstract":[{"type":"text","text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory."}],"kind":"project","url":"\/tutorials\/spacekit\/storevalues","type":"topic","title":"Persist Values Between Executions"},"FamiliarizeWithTypesSection2Step1.swift":{"syntax":"swift","type":"file","content":["import SpaceKit","","@Controller public struct MyController {","    public func myEndpoint() {","        ","    }","}"],"fileType":"swift","highlights":[],"identifier":"FamiliarizeWithTypesSection2Step1.swift","fileName":"lib.swift"},"FamiliarizeWithTypesSection3Step1.swift":{"fileName":"lib.swift","highlights":[],"syntax":"swift","content":["import SpaceKit","","@Controller public struct MyController {","    public func myEndpoint() {","        ","    }","}"],"type":"file","fileType":"swift","identifier":"FamiliarizeWithTypesSection3Step1.swift"},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges":{"title":"Handling Heap Allocation Challenges","role":"pseudoSymbol","type":"section","url":"\/tutorials\/spacekit\/familiarizewithtypes#Handling-Heap-Allocation-Challenges","abstract":[{"text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}],"kind":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges"},"doc://SpaceKit/tutorials/SpaceKit/Deep-Dive-into-SpaceKit-Concepts/Persisting-Data-Across-Executions":{"title":"Persisting Data Across Executions","url":"\/tutorials\/spacekit\/deep-dive-into-spacekit-concepts\/persisting-data-across-executions","role":"article","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Persisting-Data-Across-Executions","type":"topic","kind":"article","abstract":[]},"doc://SpaceKit/tutorials/SpaceKit/AsyncCalls":{"title":"Interacting with Contracts Across Shards","role":"project","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls","kind":"project","type":"topic","estimatedTime":"15min","url":"\/tutorials\/spacekit\/asynccalls","abstract":[{"type":"text","text":"Blockchain platforms using SpaceVM enable seamless execution within a sharded environment. Sharding divides a blockchain’s global state and validation workload into smaller, manageable units known as shards. This method enhances scalability without compromising decentralization, allowing nodes to operate without significant computational resources."}]},"doc://SpaceKit/tutorials/SpaceKit/Create-and-Manage-Tokens/Enhancing-Contracts-with-Token-Attributes":{"abstract":[],"title":"Enhancing Contracts with Token Attributes","type":"topic","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Create-and-Manage-Tokens\/Enhancing-Contracts-with-Token-Attributes","url":"\/tutorials\/spacekit\/create-and-manage-tokens\/enhancing-contracts-with-token-attributes","kind":"article","role":"article"},"doc://SpaceKit/tutorials/SpaceKit/SyncCalls#Perform-a-Synchronous-Call":{"title":"Perform a Synchronous Call","url":"\/tutorials\/spacekit\/synccalls#Perform-a-Synchronous-Call","role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls#Perform-a-Synchronous-Call","type":"section","kind":"section","abstract":[{"text":"Smart contracts can interact not only with users but also with other smart contracts. This enables more advanced protocols by leveraging existing ones. For example, you could integrate a decentralized exchange directly into your contract to perform token swaps. Decentralized applications often involve multiple contracts, each with a dedicated role, working together to achieve complex functionality—similar to microservices in backend systems.","type":"text"}]},"doc://SpaceKit/tutorials/SpaceKit/GetInfo#Accessing-Blockchain-Context-Data":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo#Accessing-Blockchain-Context-Data","kind":"section","type":"section","abstract":[{"type":"text","text":"Many smart contracts rely on contextual data to execute their operations effectively. This data can include input payments, the caller’s address, the current time, the balance of a specific account, or even the contract owner."}],"role":"pseudoSymbol","url":"\/tutorials\/spacekit\/getinfo#Accessing-Blockchain-Context-Data","title":"Accessing Blockchain Context Data"},"doc://SpaceKit/tutorials/SpaceKit/Getting-Started/Building-Your-First-Smart-Contract":{"role":"article","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Getting-Started\/Building-Your-First-Smart-Contract","abstract":[],"kind":"article","url":"\/tutorials\/spacekit\/getting-started\/building-your-first-smart-contract","type":"topic","title":"Building Your First Smart Contract"},"FamiliarizeWithTypesSection1Step1.swift":{"syntax":"swift","fileName":"lib.swift","identifier":"FamiliarizeWithTypesSection1Step1.swift","fileType":"swift","type":"file","content":["import SpaceKit","","@Controller public struct MyController {","    public func myEndpoint() {","        let myString: String = \"Hey!\" \/\/ Won't compile! ❌","    }","}"],"highlights":[]},"FamiliarizeWithTypesSection1Step5.swift":{"fileName":"lib.swift","highlights":[{"line":13},{"line":14},{"line":15},{"line":16}],"syntax":"swift","content":["import SpaceKit","","@Controller public struct MyController {","    public func myEndpoint() {","        let myString: String = \"Hey!\" \/\/ Won't compile! ❌","        let myBuffer: Buffer = \"Hey!\" \/\/ Fine ✅","        ","        let myArray: [UInt64] = [4, 8, 100] \/\/ Won't compile! ❌","        var myVector: Vector<UInt64> = Vector() \/\/ Fine ✅","            .appended(4)","            .appended(8)","            .appended(100)","        ","        let two = 2 \/\/ Fine ✅","        let ten: UInt64 = 10 \/\/ Fine ✅","        let isTwoEven = true \/\/ Fine ✅","    }","}"],"type":"file","fileType":"swift","identifier":"FamiliarizeWithTypesSection1Step5.swift"},"FamiliarizeWithTypesSection3Step6.swift":{"syntax":"swift","fileName":"lib.swift","identifier":"FamiliarizeWithTypesSection3Step6.swift","fileType":"swift","type":"file","content":["import SpaceKit","","@Controller public struct MyController {","    public func myEndpoint() {","        let initialNumber: BigUint = 5","        ","        var result = initialNumber + 3","        result = result * 7","        result = result + initialNumber * 3","        result = result - 21","    }","}"],"highlights":[{"line":10}]},"FamiliarizeWithTypesSection1Step4.swift":{"fileName":"lib.swift","highlights":[{"line":9},{"line":10},{"line":11},{"line":12}],"syntax":"swift","content":["import SpaceKit","","@Controller public struct MyController {","    public func myEndpoint() {","        let myString: String = \"Hey!\" \/\/ Won't compile! ❌","        let myBuffer: Buffer = \"Hey!\" \/\/ Fine ✅","        ","        let myArray: [UInt64] = [4, 8, 100] \/\/ Won't compile! ❌","        var myVector: Vector<UInt64> = Vector() \/\/ Fine ✅","            .appended(4)","            .appended(8)","            .appended(100)","    }","}"],"type":"file","fileType":"swift","identifier":"FamiliarizeWithTypesSection1Step4.swift"},"doc://SpaceKit/tutorials/SpaceKit/GetInfo#Accessing-Transaction-Context-Data":{"title":"Accessing Transaction Context Data","url":"\/tutorials\/spacekit\/getinfo#Accessing-Transaction-Context-Data","role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo#Accessing-Transaction-Context-Data","type":"section","kind":"section","abstract":[{"text":"Many smart contracts rely on contextual data to execute their operations effectively. This data can include input payments, the caller’s address, the current time, the balance of a specific account, or even the contract owner.","type":"text"}]},"doc://SpaceKit/tutorials/SpaceKit/Deep-Dive-into-SpaceKit-Concepts/Calling-Contracts-Across-Shards":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Calling-Contracts-Across-Shards","url":"\/tutorials\/spacekit\/deep-dive-into-spacekit-concepts\/calling-contracts-across-shards","abstract":[],"kind":"article","title":"Calling Contracts Across Shards","type":"topic","role":"article"},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes","kind":"project","type":"topic","abstract":[{"type":"text","text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM."}],"role":"project","url":"\/tutorials\/spacekit\/familiarizewithtypes","estimatedTime":"20min","title":"Exploring SpaceKit's Types"},"doc://SpaceKit/tutorials/SpaceKit/InstallingTools#Installing-SpaceKits-Dependencies":{"kind":"section","abstract":[{"type":"text","text":"Before writing your first smart contract with SpaceKit, ensure you have the necessary tools installed."}],"type":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Installing-SpaceKits-Dependencies","url":"\/tutorials\/spacekit\/installingtools#Installing-SpaceKits-Dependencies","title":"Installing SpaceKit's Dependencies","role":"pseudoSymbol"},"FamiliarizeWithTypesSection4Step5.swift":{"syntax":"swift","type":"file","content":["import SpaceKit","","@Controller public struct MyController {","    public func myEndpoint() {","        var myVector: Vector<BigUint> = Vector()","        myVector = myVector.appended(2)","        myVector = myVector.appended(10)","        myVector = myVector.appended(1)","        ","        var sum: BigUint = 0","        myVector.forEach { item in","            sum = sum + item","        }","        ","        guard sum == 13 else {","            smartContractError(message: \"sum is not 13\")","        }","    }","}"],"fileType":"swift","highlights":[{"line":14},{"line":15},{"line":16},{"line":17}],"identifier":"FamiliarizeWithTypesSection4Step5.swift","fileName":"lib.swift"},"FamiliarizeWithTypesSection3Step5.swift":{"syntax":"swift","fileName":"lib.swift","identifier":"FamiliarizeWithTypesSection3Step5.swift","fileType":"swift","type":"file","content":["import SpaceKit","","@Controller public struct MyController {","    public func myEndpoint() {","        let initialNumber: BigUint = 5","        ","        var result = initialNumber + 3","        result = result * 7","        result = result + initialNumber * 3","    }","}"],"highlights":[{"line":9}]},"FamiliarizeWithTypesSection1Step6.swift":{"syntax":"swift","type":"file","content":["import SpaceKit","import Foundation \/\/ Don't do this ❌","","@Controller public struct MyController {","    public func myEndpoint() {","        let myString: String = \"Hey!\" \/\/ Won't compile! ❌","        let myBuffer: Buffer = \"Hey!\" \/\/ Fine ✅","        ","        let myArray: [UInt64] = [4, 8, 100] \/\/ Won't compile! ❌","        var myVector: Vector<UInt64> = Vector() \/\/ Fine ✅","            .appended(4)","            .appended(8)","            .appended(100)","        ","        let two = 2 \/\/ Fine ✅","        let ten: UInt64 = 10 \/\/ Fine ✅","        let isTwoEven = true \/\/ Fine ✅","    }","}"],"fileType":"swift","highlights":[{"line":2}],"identifier":"FamiliarizeWithTypesSection1Step6.swift","fileName":"lib.swift"},"doc://SpaceKit/tutorials/SpaceKit/OperationsOnNonFungibleTokens#Create-a-New-Nonce":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnNonFungibleTokens#Create-a-New-Nonce","kind":"section","type":"section","abstract":[{"type":"text","text":"Non-fungible tokens (NFTs) are unique digital assets that cannot be interchanged. Each NFT is associated with a unique identifier, known as a nonce. You can think of it like an airline ticket—each ticket is assigned to a specific passenger, with individual preferences and details."}],"role":"pseudoSymbol","url":"\/tutorials\/spacekit\/operationsonnonfungibletokens#Create-a-New-Nonce","title":"Create a New Nonce"},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Working-with-the-BigUint-Type":{"title":"Working with the BigUint Type","url":"\/tutorials\/spacekit\/familiarizewithtypes#Working-with-the-BigUint-Type","role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Working-with-the-BigUint-Type","type":"section","kind":"section","abstract":[{"text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}]},"doc://SpaceKit/tutorials/SpaceKit/OperationsOnFungibleTokens#Burn-Tokens":{"role":"pseudoSymbol","abstract":[{"text":"Fungible tokens function similarly to traditional currencies, making them the simplest type of token to work with.","type":"text"}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnFungibleTokens#Burn-Tokens","kind":"section","url":"\/tutorials\/spacekit\/operationsonfungibletokens#Burn-Tokens","type":"section","title":"Burn Tokens"},"FamiliarizeWithTypesSection5Step3.swift":{"syntax":"swift","fileName":"lib.swift","identifier":"FamiliarizeWithTypesSection5Step3.swift","fileType":"swift","type":"file","content":["import SpaceKit","","@Controller public struct MyController {","    public func myEndpoint(myStruct: MyStruct) {","        \/\/ Do what you want here","    }","}"],"highlights":[]},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Working-with-the-Vector-Type":{"abstract":[{"text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}],"url":"\/tutorials\/spacekit\/familiarizewithtypes#Working-with-the-Vector-Type","title":"Working with the Vector Type","type":"section","kind":"section","role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Working-with-the-Vector-Type"},"FamiliarizeWithTypesSection5Step1.swift":{"syntax":"swift","type":"file","content":["import SpaceKit","","struct MyStruct {","    let myBiguint: BigUint","    let myInteger: UInt64","    let myBuffer: Buffer","}"],"fileType":"swift","highlights":[],"identifier":"FamiliarizeWithTypesSection5Step1.swift","fileName":"struct.swift"},"doc://SpaceKit/tutorials/SpaceKit/UnderstandTokens":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/UnderstandTokens","kind":"project","type":"topic","abstract":[{"type":"text","text":"Learn about the ESDT standard used in the SpaceKit framework, a token model that supports fungible tokens, non-fungible tokens (NFTs), semi-fungible tokens, and meta-esdt tokens."},{"type":"text","text":" "},{"type":"text","text":"The SpaceKit framework uses a token standard called ESDT. This standard defines four types of tokens: fungible, non-fungible (NFT), semi-fungible, and meta-esdt."}],"role":"project","url":"\/tutorials\/spacekit\/understandtokens","estimatedTime":"15min","title":"Understand the ESDT Standard"},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Creating-Your-Own-Types":{"title":"Creating Your Own Types","role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Creating-Your-Own-Types","kind":"section","type":"section","url":"\/tutorials\/spacekit\/familiarizewithtypes#Creating-Your-Own-Types","abstract":[{"type":"text","text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM."}]},"FamiliarizeWithTypesSection1Step3.swift":{"fileName":"lib.swift","highlights":[{"line":7},{"line":8}],"syntax":"swift","content":["import SpaceKit","","@Controller public struct MyController {","    public func myEndpoint() {","        let myString: String = \"Hey!\" \/\/ Won't compile! ❌","        let myBuffer: Buffer = \"Hey!\" \/\/ Fine ✅","        ","        let myArray: [UInt64] = [4, 8, 100] \/\/ Won't compile! ❌","    }","}"],"type":"file","fileType":"swift","identifier":"FamiliarizeWithTypesSection1Step3.swift"},"doc://SpaceKit/tutorials/SpaceKit/OperationsOnFungibleTokens":{"title":"Managing Fungible Tokens","role":"project","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnFungibleTokens","kind":"project","type":"topic","estimatedTime":"15min","url":"\/tutorials\/spacekit\/operationsonfungibletokens","abstract":[{"type":"text","text":"Fungible tokens function similarly to traditional currencies, making them the simplest type of token to work with."}]},"doc://SpaceKit/tutorials/SpaceKit/Create-and-Manage-Tokens/Managing-Non-Fungible-Tokens":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Create-and-Manage-Tokens\/Managing-Non-Fungible-Tokens","url":"\/tutorials\/spacekit\/create-and-manage-tokens\/managing-non-fungible-tokens","abstract":[],"kind":"article","title":"Managing Non-Fungible Tokens","type":"topic","role":"article"},"doc://SpaceKit/tutorials/SpaceKit/OperationsOnNonFungibleTokens#Add-Quantity-to-an-Existing-Nonce":{"title":"Add Quantity to an Existing Nonce","role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnNonFungibleTokens#Add-Quantity-to-an-Existing-Nonce","kind":"section","type":"section","url":"\/tutorials\/spacekit\/operationsonnonfungibletokens#Add-Quantity-to-an-Existing-Nonce","abstract":[{"type":"text","text":"Non-fungible tokens (NFTs) are unique digital assets that cannot be interchanged. Each NFT is associated with a unique identifier, known as a nonce. You can think of it like an airline ticket—each ticket is assigned to a specific passenger, with individual preferences and details."}]},"doc://SpaceKit/tutorials/SpaceKit/TokenAttributes":{"abstract":[{"text":"The ESDT standard enables embedding custom data within non-fungible tokens, allowing developers to extend the functionality of their smart contracts. This additional data, referred to as “attributes,” is tied to the token and transfers along with it between wallets.","type":"text"}],"url":"\/tutorials\/spacekit\/tokenattributes","title":"Enhance Your Contracts with Token Attributes","type":"topic","kind":"project","estimatedTime":"15min","role":"project","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/TokenAttributes"},"doc://SpaceKit/tutorials/SpaceKit/CodingYourFirstContract#Testing-the-Contract":{"abstract":[{"type":"text","text":"In this tutorial, you’ll create a simple smart contract that manages a counter. Users can increment or decrement the counter, and the changes are persisted across contract executions."}],"url":"\/tutorials\/spacekit\/codingyourfirstcontract#Testing-the-Contract","title":"Testing the Contract","kind":"section","type":"section","role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Testing-the-Contract"},"FamiliarizeWithTypesSection4Step4.swift":{"syntax":"swift","type":"file","content":["import SpaceKit","","@Controller public struct MyController {","    public func myEndpoint() {","        var myVector: Vector<BigUint> = Vector()","        myVector = myVector.appended(2)","        myVector = myVector.appended(10)","        myVector = myVector.appended(1)","        ","        var sum: BigUint = 0","        myVector.forEach { item in","            sum = sum + item","        }","    }","}"],"fileType":"swift","highlights":[{"line":9},{"line":10},{"line":11},{"line":12},{"line":13}],"identifier":"FamiliarizeWithTypesSection4Step4.swift","fileName":"lib.swift"},"doc://SpaceKit/tutorials/SpaceKit/StoreValues#Working-with-Storage-for-Single-Value-Persistence":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues#Working-with-Storage-for-Single-Value-Persistence","url":"\/tutorials\/spacekit\/storevalues#Working-with-Storage-for-Single-Value-Persistence","abstract":[{"type":"text","text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory."}],"kind":"section","title":"Working with @Storage for Single Value Persistence","type":"section","role":"pseudoSymbol"},"doc://SpaceKit/tutorials/SpaceKit/OperationsOnNonFungibleTokens":{"abstract":[{"text":"Non-fungible tokens (NFTs) are unique digital assets that cannot be interchanged. Each NFT is associated with a unique identifier, known as a nonce. You can think of it like an airline ticket—each ticket is assigned to a specific passenger, with individual preferences and details.","type":"text"}],"url":"\/tutorials\/spacekit\/operationsonnonfungibletokens","title":"Managing Non-Fungible Tokens","type":"topic","kind":"project","estimatedTime":"15min","role":"project","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnNonFungibleTokens"},"doc://SpaceKit/tutorials/SpaceKit/UnderstandTokens#Issuing-a-Meta-ESDT-from-Your-Contract":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/UnderstandTokens#Issuing-a-Meta-ESDT-from-Your-Contract","kind":"section","type":"section","abstract":[{"type":"text","text":"Learn about the ESDT standard used in the SpaceKit framework, a token model that supports fungible tokens, non-fungible tokens (NFTs), semi-fungible tokens, and meta-esdt tokens."},{"type":"text","text":" "},{"type":"text","text":"The SpaceKit framework uses a token standard called ESDT. This standard defines four types of tokens: fungible, non-fungible (NFT), semi-fungible, and meta-esdt."}],"role":"pseudoSymbol","url":"\/tutorials\/spacekit\/understandtokens#Issuing-a-Meta-ESDT-from-Your-Contract","title":"Issuing a Meta ESDT from Your Contract"},"FamiliarizeWithTypesSection5Step4.swift":{"fileName":"struct.swift","highlights":[],"syntax":"swift","content":["import SpaceKit","","@Codable public enum MyEnum {","    case firstCase(BigUint)","}","","@Codable public struct MyStruct {","    let myBiguint: BigUint","    let myInteger: UInt64","    let myBuffer: Buffer","    let myEnum: MyEnum","}"],"type":"file","fileType":"swift","identifier":"FamiliarizeWithTypesSection5Step4.swift"},"doc://SpaceKit/tutorials/SpaceKit/TokenAttributes#Implementing-the-unlockFunds-Endpoint":{"role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/TokenAttributes#Implementing-the-unlockFunds-Endpoint","abstract":[{"type":"text","text":"The ESDT standard enables embedding custom data within non-fungible tokens, allowing developers to extend the functionality of their smart contracts. This additional data, referred to as “attributes,” is tied to the token and transfers along with it between wallets."}],"kind":"section","url":"\/tutorials\/spacekit\/tokenattributes#Implementing-the-unlockFunds-Endpoint","type":"section","title":"Implementing the unlockFunds Endpoint"},"FamiliarizeWithTypesSection3Step4.swift":{"syntax":"swift","fileName":"lib.swift","identifier":"FamiliarizeWithTypesSection3Step4.swift","fileType":"swift","type":"file","content":["import SpaceKit","","@Controller public struct MyController {","    public func myEndpoint() {","        let initialNumber: BigUint = 5","        ","        var result = initialNumber + 3","        result = result * 7","    }","}"],"highlights":[{"line":8}]},"FamiliarizeWithTypesSection2Step3.swift":{"syntax":"swift","fileName":"lib.swift","identifier":"FamiliarizeWithTypesSection2Step3.swift","fileType":"swift","type":"file","content":["import SpaceKit","","@Controller public struct MyController {","    public func myEndpoint() {","        var myBuffer: Buffer = \"Hello\"","        myBuffer = myBuffer.appended(\" World!\")","    }","}"],"highlights":[{"line":6}]},"FamiliarizeWithTypesSection3Step7.swift":{"syntax":"swift","type":"file","content":["import SpaceKit","","@Controller public struct MyController {","    public func myEndpoint() {","        let initialNumber: BigUint = 5","        ","        var result = initialNumber + 3","        result = result * 7","        result = result + initialNumber * 3","        result = result - 21","        ","        guard result % 10 == 0 else {","            smartContractError(message: \"result is not a multiple of 10\")","        }","    }","}"],"fileType":"swift","highlights":[{"line":11},{"line":12},{"line":13},{"line":14}],"identifier":"FamiliarizeWithTypesSection3Step7.swift","fileName":"lib.swift"},"FamiliarizeWithTypesSection3Step8.swift":{"fileName":"lib.swift","highlights":[{"line":15},{"line":16},{"line":17},{"line":18}],"syntax":"swift","content":["import SpaceKit","","@Controller public struct MyController {","    public func myEndpoint() {","        let initialNumber: BigUint = 5","        ","        var result = initialNumber + 3","        result = result * 7","        result = result + initialNumber * 3","        result = result - 21","        ","        guard result % 10 == 0 else {","            smartContractError(message: \"result is not a multiple of 10\")","        }","        ","        guard result > 0 else {","            smartContractError(message: \"result is 0\")","        }","    }","}"],"type":"file","fileType":"swift","identifier":"FamiliarizeWithTypesSection3Step8.swift"},"doc://SpaceKit/tutorials/SpaceKit/AsyncCalls#Perform-an-Asynchronous-Call":{"abstract":[{"text":"Blockchain platforms using SpaceVM enable seamless execution within a sharded environment. Sharding divides a blockchain’s global state and validation workload into smaller, manageable units known as shards. This method enhances scalability without compromising decentralization, allowing nodes to operate without significant computational resources.","type":"text"}],"url":"\/tutorials\/spacekit\/asynccalls#Perform-an-Asynchronous-Call","title":"Perform an Asynchronous Call","type":"section","kind":"section","role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls#Perform-an-Asynchronous-Call"},"FamiliarizeWithTypesSection3Step3.swift":{"highlights":[{"line":6},{"line":7}],"identifier":"FamiliarizeWithTypesSection3Step3.swift","fileType":"swift","type":"file","fileName":"lib.swift","syntax":"swift","content":["import SpaceKit","","@Controller public struct MyController {","    public func myEndpoint() {","        let initialNumber: BigUint = 5","        ","        var result = initialNumber + 3","    }","}"]},"doc://SpaceKit/tutorials/SpaceKit/Deep-Dive-into-SpaceKit-Concepts/Interacting-with-Other-Contracts":{"title":"Interacting with Other Contracts","url":"\/tutorials\/spacekit\/deep-dive-into-spacekit-concepts\/interacting-with-other-contracts","role":"article","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Interacting-with-Other-Contracts","type":"topic","kind":"article","abstract":[]},"FamiliarizeWithTypesSection2Step4.swift":{"fileName":"lib.swift","highlights":[{"line":7},{"line":8},{"line":9},{"line":10}],"syntax":"swift","content":["import SpaceKit","","@Controller public struct MyController {","    public func myEndpoint() {","        var myBuffer: Buffer = \"Hello\"","        myBuffer = myBuffer.appended(\" World!\")","        ","        guard myBuffer != \"Hello World!\" else {","            smartContractError(message: \"myBuffer is not equal to Hello World!\")","        }","    }","}"],"type":"file","fileType":"swift","identifier":"FamiliarizeWithTypesSection2Step4.swift"},"doc://SpaceKit/tutorials/SpaceKit/CodingYourFirstContract#Initializing-the-Project":{"role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Initializing-the-Project","abstract":[{"type":"text","text":"In this tutorial, you’ll create a simple smart contract that manages a counter. Users can increment or decrement the counter, and the changes are persisted across contract executions."}],"kind":"section","url":"\/tutorials\/spacekit\/codingyourfirstcontract#Initializing-the-Project","type":"section","title":"Initializing the Project"},"doc://SpaceKit/tutorials/SpaceKit/AsyncCalls#Declare-the-Callee-Proxy":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls#Declare-the-Callee-Proxy","kind":"section","type":"section","abstract":[{"type":"text","text":"Blockchain platforms using SpaceVM enable seamless execution within a sharded environment. Sharding divides a blockchain’s global state and validation workload into smaller, manageable units known as shards. This method enhances scalability without compromising decentralization, allowing nodes to operate without significant computational resources."}],"role":"pseudoSymbol","url":"\/tutorials\/spacekit\/asynccalls#Declare-the-Callee-Proxy","title":"Declare the Callee Proxy"},"doc://SpaceKit/tutorials/SpaceKit/InstallingTools#Setting-Up-the-SpaceKit-CLI":{"role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Setting-Up-the-SpaceKit-CLI","abstract":[{"type":"text","text":"Before writing your first smart contract with SpaceKit, ensure you have the necessary tools installed."}],"kind":"section","url":"\/tutorials\/spacekit\/installingtools#Setting-Up-the-SpaceKit-CLI","type":"section","title":"Setting Up the SpaceKit CLI"},"doc://SpaceKit/tutorials/SpaceKit/OperationsOnFungibleTokens#Assign-Mint-and-Burn-Roles":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnFungibleTokens#Assign-Mint-and-Burn-Roles","kind":"section","abstract":[{"text":"Fungible tokens function similarly to traditional currencies, making them the simplest type of token to work with.","type":"text"}],"url":"\/tutorials\/spacekit\/operationsonfungibletokens#Assign-Mint-and-Burn-Roles","title":"Assign Mint and Burn Roles","type":"section","role":"pseudoSymbol"},"doc://SpaceKit/tutorials/SpaceKit/OperationsOnNonFungibleTokens#Burn-Tokens":{"abstract":[{"text":"Non-fungible tokens (NFTs) are unique digital assets that cannot be interchanged. Each NFT is associated with a unique identifier, known as a nonce. You can think of it like an airline ticket—each ticket is assigned to a specific passenger, with individual preferences and details.","type":"text"}],"kind":"section","title":"Burn Tokens","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/OperationsOnNonFungibleTokens#Burn-Tokens","url":"\/tutorials\/spacekit\/operationsonnonfungibletokens#Burn-Tokens","type":"section","role":"pseudoSymbol"},"doc://SpaceKit/tutorials/SpaceKit/Getting-Started/Installing-the-Tools":{"abstract":[],"kind":"article","title":"Installing the Tools","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Getting-Started\/Installing-the-Tools","url":"\/tutorials\/spacekit\/getting-started\/installing-the-tools","type":"topic","role":"article"},"doc://SpaceKit/tutorials/SpaceKit/Deep-Dive-into-SpaceKit-Concepts/Exploring-SpaceKit's-Types":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Exploring-SpaceKit's-Types","kind":"article","type":"topic","abstract":[],"role":"article","url":"\/tutorials\/spacekit\/deep-dive-into-spacekit-concepts\/exploring-spacekit's-types","title":"Exploring SpaceKit's Types"},"doc://SpaceKit/tutorials/SpaceKit/Create-and-Manage-Tokens/Managing-Fungible-Tokens":{"abstract":[],"kind":"article","title":"Managing Fungible Tokens","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Create-and-Manage-Tokens\/Managing-Fungible-Tokens","url":"\/tutorials\/spacekit\/create-and-manage-tokens\/managing-fungible-tokens","type":"topic","role":"article"},"doc://SpaceKit/tutorials/SpaceKit/CodingYourFirstContract":{"role":"project","estimatedTime":"20min","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract","abstract":[{"type":"text","text":"In this tutorial, you’ll create a simple smart contract that manages a counter. Users can increment or decrement the counter, and the changes are persisted across contract executions."}],"kind":"project","url":"\/tutorials\/spacekit\/codingyourfirstcontract","type":"topic","title":"Building Your First Smart Contract"},"doc://SpaceKit/tutorials/SpaceKit/TokenAttributes#Implementing-the-lockFunds-Endpoint":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/TokenAttributes#Implementing-the-lockFunds-Endpoint","kind":"section","abstract":[{"text":"The ESDT standard enables embedding custom data within non-fungible tokens, allowing developers to extend the functionality of their smart contracts. This additional data, referred to as “attributes,” is tied to the token and transfers along with it between wallets.","type":"text"}],"url":"\/tutorials\/spacekit\/tokenattributes#Implementing-the-lockFunds-Endpoint","title":"Implementing the lockFunds Endpoint","type":"section","role":"pseudoSymbol"},"doc://SpaceKit/tutorials/SpaceKit":{"title":"Meet SpaceKit","url":"\/tutorials\/spacekit","role":"overview","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit","type":"topic","kind":"overview","abstract":[{"text":"Discover how SpaceKit simplifies blockchain development using Swift. Dive into the world of Web3 with ease and efficiency.","type":"text"}]},"doc://SpaceKit/tutorials/SpaceKit/CodingYourFirstContract#Writing-the-Contract-Code":{"role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Writing-the-Contract-Code","abstract":[{"type":"text","text":"In this tutorial, you’ll create a simple smart contract that manages a counter. Users can increment or decrement the counter, and the changes are persisted across contract executions."}],"kind":"section","url":"\/tutorials\/spacekit\/codingyourfirstcontract#Writing-the-Contract-Code","type":"section","title":"Writing the Contract Code"},"FamiliarizeWithTypesSection4Step1.swift":{"content":["import SpaceKit","","@Controller public struct MyController {","    public func myEndpoint() {","        ","    }","}"],"highlights":[],"identifier":"FamiliarizeWithTypesSection4Step1.swift","fileName":"lib.swift","type":"file","fileType":"swift","syntax":"swift"},"FamiliarizeWithTypesSection1Step2.swift":{"identifier":"FamiliarizeWithTypesSection1Step2.swift","highlights":[{"line":6}],"fileType":"swift","content":["import SpaceKit","","@Controller public struct MyController {","    public func myEndpoint() {","        let myString: String = \"Hey!\" \/\/ Won't compile! ❌","        let myBuffer: Buffer = \"Hey!\" \/\/ Fine ✅","    }","}"],"type":"file","syntax":"swift","fileName":"lib.swift"}}}