{"kind":"project","metadata":{"categoryPathComponent":"SpaceKit","title":"Exploring SpaceKit's Types","role":"project","category":"SpaceKit"},"schemaVersion":{"patch":0,"major":0,"minor":3},"identifier":{"url":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes","interfaceLanguage":"swift"},"sections":[{"kind":"hero","title":"Exploring SpaceKit's Types","chapter":"Exploring SpaceKit's Types","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM."}]}],"estimatedTimeInMinutes":20},{"tasks":[{"title":"Handling Heap Allocation Challenges","stepsSection":[{"media":null,"code":"FamiliarizeWithTypesSection1Step1.swift","content":[{"inlineContent":[{"type":"text","text":"Avoid using "},{"code":"String","type":"codeVoice"},{"text":" in SpaceKit, as it is prohibited due to memory restrictions.","type":"text"}],"type":"paragraph"}],"caption":[],"type":"step","runtimePreview":null},{"media":null,"code":"FamiliarizeWithTypesSection1Step2.swift","caption":[],"runtimePreview":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Use ","type":"text"},{"code":"Buffer","type":"codeVoice"},{"text":" as a fixed-size alternative for handling raw data and text.","type":"text"}]}]},{"caption":[],"code":"FamiliarizeWithTypesSection1Step3.swift","media":null,"content":[{"inlineContent":[{"type":"text","text":"Similarly, avoid using "},{"type":"codeVoice","code":"Array"},{"type":"text","text":" since it leads to heap allocations and is not allowed."}],"type":"paragraph"}],"type":"step","runtimePreview":null},{"media":null,"code":"FamiliarizeWithTypesSection1Step4.swift","runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"Instead, leverage the "},{"type":"codeVoice","code":"Vector"},{"text":" type as a memory-efficient alternative to ","type":"text"},{"type":"codeVoice","code":"Array"},{"text":".","type":"text"}],"type":"paragraph"}],"caption":[],"type":"step"},{"runtimePreview":null,"media":null,"code":"FamiliarizeWithTypesSection1Step5.swift","content":[{"inlineContent":[{"text":"Integer types like ","type":"text"},{"code":"Int","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"UInt"},{"type":"text","text":", and "},{"code":"Bool","type":"codeVoice"},{"text":" are fully supported and safe to use.","type":"text"}],"type":"paragraph"}],"caption":[],"type":"step"},{"code":"FamiliarizeWithTypesSection1Step6.swift","type":"step","runtimePreview":null,"caption":[],"media":null,"content":[{"inlineContent":[{"type":"text","text":"Ensure you only import the SpaceKit framework to keep the contract lightweight and efficient."}],"type":"paragraph"}]}],"anchor":"Handling-Heap-Allocation-Challenges","contentSection":[{"mediaPosition":"trailing","kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Writing code for blockchain involves operating within strict resource constraints. To address this, SpaceKit uses Swift’s “embedded” mode, ensuring the compiled code is as lightweight and efficient as possible."}]},{"inlineContent":[{"type":"text","text":"SpaceVM, the engine running smart contracts, limits heap allocations. As a result, types with dynamic sizes, such as Strings, Arrays, or classes, and any structs or enums containing these, are not permitted."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Additionally, Swift’s existential types—such as "},{"code":"any Protocol","type":"codeVoice"},{"type":"text","text":" where "},{"code":"Protocol","type":"codeVoice"},{"text":" is a protocol—are also forbidden. Existential types introduce runtime overhead, which is why they are not allowed in SpaceKit.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The allowed Swift types are:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"StaticString","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Integer types: Int, UInt, UInt8, UInt16, etc."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Bool: treated as a UInt8","type":"text"}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"SpaceKit introduces specific types that serve as alternatives for those not allowed. This chapter introduces three key replacements:"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"code":"Buffer","type":"codeVoice"},{"text":": A substitute for String and Data","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"BigUint"},{"type":"text","text":": Capable of handling large unsigned integers"}]}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"Vector"},{"text":": An alternative to Array","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"text":"For security, these types do not feature mutating methods. Instead, they use methods that return new instances. For example, the ","type":"text"},{"code":"Buffer","type":"codeVoice"},{"type":"text","text":" type does not include "},{"type":"codeVoice","code":"append(_:) -> Void"},{"text":" but instead offers ","type":"text"},{"code":"appending(_:) -> Buffer","type":"codeVoice"},{"text":".","type":"text"}]}]}]},{"stepsSection":[{"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Start by creating the basic structure for your contract."}]}],"media":null,"type":"step","caption":[],"code":"FamiliarizeWithTypesSection2Step1.swift"},{"type":"step","caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Important: Explicitly declare your variable as "},{"code":"Buffer","type":"codeVoice"},{"text":" to avoid being interpreted as ","type":"text"},{"type":"codeVoice","code":"String"},{"type":"text","text":"."}]}],"media":null,"code":"FamiliarizeWithTypesSection2Step2.swift","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Initialize a "},{"type":"codeVoice","code":"Buffer"},{"type":"text","text":" variable using a string literal."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Append another "},{"type":"codeVoice","code":"Buffer"},{"text":" to your existing variable.","type":"text"}],"type":"paragraph"}],"media":null,"runtimePreview":null,"type":"step","code":"FamiliarizeWithTypesSection2Step3.swift","caption":[]},{"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Compare two ","type":"text"},{"type":"codeVoice","code":"Buffer"},{"type":"text","text":" instances. If they don’t match, throw a smart contract error."}]}],"media":null,"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Note: The "},{"type":"codeVoice","code":"smartContractError"},{"text":" function requires a ","type":"text"},{"type":"codeVoice","code":"Buffer"},{"type":"text","text":" parameter. This topic is covered in detail in a later chapter."}]}],"code":"FamiliarizeWithTypesSection2Step4.swift","type":"step"}],"anchor":"Understanding-the-Buffer-Type","title":"Understanding the Buffer Type","contentSection":[{"mediaPosition":"trailing","kind":"contentAndMedia","content":[{"inlineContent":[{"type":"codeVoice","code":"Buffer"},{"text":" is a fundamental type in SpaceKit, designed to store raw data and strings.","type":"text"}],"type":"paragraph"}]}]},{"contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Blockchains do not support decimal numbers. However, real-world applications often require decimal representation, such as in cryptocurrency amounts like 0.09281 Bitcoin."}]},{"inlineContent":[{"text":"To handle such cases, values are expressed as large numbers, where many tokens allocate the last 18 digits to represent the decimal portion. For instance: 1 EGLD equals 1 * 10^18, or 1,000,000,000,000,000,000.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Standard Swift types, such as ","type":"text"},{"code":"UInt64","type":"codeVoice"},{"text":", can only store values up to 18,446,744,073,709,551,615 (20 digits), making it impossible to represent values exceeding approximately 18.446744 EGLD.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"SpaceKit provides the "},{"type":"codeVoice","code":"BigUint"},{"type":"text","text":" type to store arbitrarily large positive numbers."}]}],"mediaPosition":"trailing"}],"stepsSection":[{"caption":[],"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Begin by structuring your contract.","type":"text"}]}],"code":"FamiliarizeWithTypesSection3Step1.swift","media":null,"type":"step"},{"content":[{"type":"paragraph","inlineContent":[{"text":"Declare a ","type":"text"},{"type":"codeVoice","code":"BigUint"},{"text":" constant with an integer literal.","type":"text"}]}],"media":null,"caption":[{"inlineContent":[{"text":"Important: You must specify the type explicitly as ","type":"text"},{"type":"codeVoice","code":"BigUint"},{"type":"text","text":", or it will default to "},{"type":"codeVoice","code":"Int"},{"type":"text","text":"."}],"type":"paragraph"}],"code":"FamiliarizeWithTypesSection3Step2.swift","runtimePreview":null,"type":"step"},{"code":"FamiliarizeWithTypesSection3Step3.swift","caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a new "},{"type":"codeVoice","code":"BigUint"},{"type":"text","text":" by adding 3 to the previous constant."}]}],"runtimePreview":null,"type":"step","media":null},{"type":"step","caption":[],"media":null,"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Multiply the new variable by 7."}]}],"code":"FamiliarizeWithTypesSection3Step4.swift"},{"content":[{"type":"paragraph","inlineContent":[{"text":"Add three times the initial constant to the new variable.","type":"text"}]}],"media":null,"type":"step","caption":[],"code":"FamiliarizeWithTypesSection3Step5.swift","runtimePreview":null},{"content":[{"inlineContent":[{"type":"text","text":"Subtract 21 from the variable."}],"type":"paragraph"}],"type":"step","media":null,"code":"FamiliarizeWithTypesSection3Step6.swift","runtimePreview":null,"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Note: A "},{"code":"BigUint","type":"codeVoice"},{"text":" value cannot be negative. If the subtraction results in a value below zero, SpaceKit will trigger a smart contract error.","type":"text"}]}]},{"caption":[],"media":null,"runtimePreview":null,"code":"FamiliarizeWithTypesSection3Step7.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Verify that the result is a multiple of 10, and throw a smart contract error if not."}]}],"type":"step"},{"caption":[],"code":"FamiliarizeWithTypesSection3Step8.swift","type":"step","media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Ensure the result is greater than zero, throwing an error if it isn’t."}]}],"runtimePreview":null}],"title":"Working with the BigUint Type","anchor":"Working-with-the-BigUint-Type"},{"title":"Working with the Vector Type","contentSection":[{"mediaPosition":"trailing","kind":"contentAndMedia","content":[{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"Array"},{"text":" type is often the default for storing dynamic-size data, but it is not permitted in SpaceKit. Fortunately, SpaceKit provides a suitable alternative: ","type":"text"},{"type":"codeVoice","code":"Vector"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"A ","type":"text"},{"code":"Vector","type":"codeVoice"},{"text":" can store any type compatible with SpaceKit, including user-defined structs and enums.","type":"text"}],"type":"paragraph"}]}],"stepsSection":[{"content":[{"inlineContent":[{"type":"text","text":"Begin by setting up the basic structure of your contract."}],"type":"paragraph"}],"media":null,"code":"FamiliarizeWithTypesSection4Step1.swift","runtimePreview":null,"type":"step","caption":[]},{"caption":[{"inlineContent":[{"type":"text","text":"Important: Currently, array literal assignment is disabled. The SpaceKit team is investigating its impact on memory management in smart contracts before enabling it."}],"type":"paragraph"}],"media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Declare a "},{"type":"codeVoice","code":"Vector"},{"type":"text","text":" variable to hold "},{"code":"BigUint","type":"codeVoice"},{"type":"text","text":" elements."}]}],"type":"step","code":"FamiliarizeWithTypesSection4Step2.swift","runtimePreview":null},{"runtimePreview":null,"caption":[],"content":[{"type":"paragraph","inlineContent":[{"text":"Add elements to the ","type":"text"},{"code":"Vector","type":"codeVoice"},{"text":".","type":"text"}]}],"type":"step","media":null,"code":"FamiliarizeWithTypesSection4Step3.swift"},{"code":"FamiliarizeWithTypesSection4Step4.swift","caption":[{"inlineContent":[{"type":"text","text":"Important: The "},{"code":"for ... in","type":"codeVoice"},{"text":" loop for vectors is currently disabled. The SpaceKit team is evaluating its effect on smart contract memory before enabling it.","type":"text"}],"type":"paragraph"}],"media":null,"type":"step","runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"Iterate over the "},{"code":"Vector","type":"codeVoice"},{"text":" to sum all the elements.","type":"text"}],"type":"paragraph"}]},{"caption":[],"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Ensure the sum equals 13. Throw a smart contract error if it doesn’t.","type":"text"}]}],"media":null,"code":"FamiliarizeWithTypesSection4Step5.swift","runtimePreview":null}],"anchor":"Working-with-the-Vector-Type"},{"anchor":"Creating-Your-Own-Types","title":"Creating Your Own Types","contentSection":[{"kind":"contentAndMedia","mediaPosition":"trailing","content":[{"inlineContent":[{"text":"You can define your own structures and enumerations and make them compatible with SpaceKit using the ","type":"text"},{"code":"@Codable","type":"codeVoice"},{"text":" annotation. When a type is marked with ","type":"text"},{"type":"codeVoice","code":"@Codable"},{"type":"text","text":", it becomes eligible to be used as input or output for endpoints, within arrays, and anywhere SpaceKit’s encoding system is applied."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A type annotated with "},{"code":"@Codable","type":"codeVoice"},{"type":"text","text":" must only contain fields of types compatible with SpaceKit, such as integers, "},{"type":"codeVoice","code":"Bool"},{"text":", ","type":"text"},{"code":"Buffer","type":"codeVoice"},{"type":"text","text":", "},{"code":"BigUint","type":"codeVoice"},{"type":"text","text":", "},{"code":"Vector","type":"codeVoice"},{"type":"text","text":", and other "},{"type":"codeVoice","code":"@Codable"},{"text":" types.","type":"text"}]},{"inlineContent":[{"text":"Additionally, the ","type":"text"},{"type":"codeVoice","code":"@Codable"},{"type":"text","text":" annotation prevents the structure from having methods or initializers."}],"type":"paragraph"}]}],"stepsSection":[{"type":"step","caption":[],"content":[{"inlineContent":[{"text":"Start by creating a struct with fields that are compatible with SpaceKit.","type":"text"}],"type":"paragraph"}],"media":null,"code":"FamiliarizeWithTypesSection5Step1.swift","runtimePreview":null},{"type":"step","caption":[],"runtimePreview":null,"media":null,"code":"FamiliarizeWithTypesSection5Step2.swift","content":[{"inlineContent":[{"text":"Annotate your struct with ","type":"text"},{"code":"@Codable","type":"codeVoice"},{"type":"text","text":" to make it usable with SpaceKit’s encoding system."}],"type":"paragraph"}]},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the "},{"type":"codeVoice","code":"@Codable"},{"text":"-annotated type within your smart contracts.","type":"text"}]}],"media":null,"code":"FamiliarizeWithTypesSection5Step3.swift","runtimePreview":null,"caption":[]},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Remember, a ","type":"text"},{"type":"codeVoice","code":"@Codable"},{"type":"text","text":" type can be used as a field in other "},{"code":"@Codable","type":"codeVoice"},{"type":"text","text":" types."}]}],"caption":[],"media":null,"runtimePreview":null,"code":"FamiliarizeWithTypesSection5Step4.swift"}]}],"kind":"tasks"},{"kind":"callToAction","title":"Persist Values Between Executions","abstract":[{"text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory.","type":"text"}],"action":{"isActive":true,"type":"reference","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues","overridingTitle":"Get started","overridingTitleInlineContent":[{"text":"Get started","type":"text"}]},"featuredEyebrow":"Tutorial"}],"hierarchy":{"paths":[["doc:\/\/SpaceKit\/tutorials\/SpaceKit","doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts","doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Exploring-SpaceKit's-Types"]],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit","modules":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Getting-Started\/Installing-the-Tools","projects":[{"sections":[{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Installing-SpaceKits-Dependencies"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Setting-Up-the-SpaceKit-CLI","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools"}]},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Getting-Started\/Building-Your-First-Smart-Contract","projects":[{"sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Initializing-the-Project","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Writing-the-Contract-Code"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Testing-the-Contract"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract"}]},{"projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes","sections":[{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Understanding-the-Buffer-Type"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Working-with-the-BigUint-Type"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Working-with-the-Vector-Type"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Creating-Your-Own-Types","kind":"task"}]}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Exploring-SpaceKit's-Types"},{"projects":[{"sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues#Working-with-Storage-for-Single-Value-Persistence","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage","kind":"task"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Persisting-Data-Across-Executions"},{"projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo","sections":[{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo#Accessing-Transaction-Context-Data"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo#Accessing-Blockchain-Context-Data","kind":"task"}]}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Retrieving-Information-from-the-Blockchain"},{"projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls","sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls#Declare-the-Callee-Proxy","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls#Perform-a-Synchronous-Call","kind":"task"}]}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Interacting-with-Other-Contracts"},{"projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls","sections":[{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls#Declare-the-Callee-Proxy"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls#Perform-an-Asynchronous-Call","kind":"task"}]}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Calling-Contracts-Across-Shards"}]},"variants":[{"paths":["\/tutorials\/spacekit\/familiarizewithtypes"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges":{"type":"section","kind":"section","abstract":[{"text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}],"url":"\/tutorials\/spacekit\/familiarizewithtypes#Handling-Heap-Allocation-Challenges","role":"pseudoSymbol","title":"Handling Heap Allocation Challenges","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges"},"FamiliarizeWithTypesSection1Step1.swift":{"fileName":"lib.swift","fileType":"swift","syntax":"swift","identifier":"FamiliarizeWithTypesSection1Step1.swift","content":["import SpaceKit","","@Controller struct MyController {","    public func myEndpoint() {","        let myString: String = \"Hey!\" \/\/ Won't compile! ❌","    }","}"],"type":"file","highlights":[]},"FamiliarizeWithTypesSection4Step2.swift":{"fileName":"lib.swift","syntax":"swift","identifier":"FamiliarizeWithTypesSection4Step2.swift","content":["import SpaceKit","","@Controller struct MyController {","    public func myEndpoint() {","        var myVector: Vector<BigUint> = Vector()","    }","}"],"fileType":"swift","highlights":[{"line":5}],"type":"file"},"doc://SpaceKit/tutorials/SpaceKit/GetInfo#Accessing-Blockchain-Context-Data":{"type":"section","kind":"section","abstract":[{"type":"text","text":"Many smart contracts rely on contextual data to execute their operations effectively. This data can include input payments, the caller’s address, the current time, the balance of a specific account, or even the contract owner."}],"url":"\/tutorials\/spacekit\/getinfo#Accessing-Blockchain-Context-Data","role":"pseudoSymbol","title":"Accessing Blockchain Context Data","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo#Accessing-Blockchain-Context-Data"},"FamiliarizeWithTypesSection3Step2.swift":{"fileName":"lib.swift","identifier":"FamiliarizeWithTypesSection3Step2.swift","highlights":[{"line":5}],"syntax":"swift","content":["import SpaceKit","","@Controller struct MyController {","    public func myEndpoint() {","        let initialNumber: BigUint = 5","    }","}"],"type":"file","fileType":"swift"},"doc://SpaceKit/tutorials/SpaceKit/InstallingTools#Setting-Up-the-SpaceKit-CLI":{"abstract":[{"text":"Before writing your first smart contract with SpaceKit, ensure you have the necessary tools installed.","type":"text"}],"url":"\/tutorials\/spacekit\/installingtools#Setting-Up-the-SpaceKit-CLI","kind":"section","title":"Setting Up the SpaceKit CLI","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Setting-Up-the-SpaceKit-CLI","type":"section","role":"pseudoSymbol"},"FamiliarizeWithTypesSection2Step2.swift":{"fileName":"lib.swift","syntax":"swift","identifier":"FamiliarizeWithTypesSection2Step2.swift","content":["import SpaceKit","","@Controller struct MyController {","    public func myEndpoint() {","        var myBuffer: Buffer = \"Hello\"","    }","}"],"fileType":"swift","highlights":[{"line":5}],"type":"file"},"doc://SpaceKit/tutorials/SpaceKit/StoreValues#Working-with-Storage-for-Single-Value-Persistence":{"url":"\/tutorials\/spacekit\/storevalues#Working-with-Storage-for-Single-Value-Persistence","role":"pseudoSymbol","type":"section","title":"Working with @Storage for Single Value Persistence","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues#Working-with-Storage-for-Single-Value-Persistence","kind":"section","abstract":[{"text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory.","type":"text"}]},"FamiliarizeWithTypesSection5Step2.swift":{"fileName":"struct.swift","fileType":"swift","syntax":"swift","identifier":"FamiliarizeWithTypesSection5Step2.swift","content":["import SpaceKit","","@Codable struct MyStruct {","    let myBiguint: BigUint","    let myInteger: UInt64","    let myBuffer: Buffer","}"],"type":"file","highlights":[{"line":3}]},"FamiliarizeWithTypesSection3Step1.swift":{"fileName":"lib.swift","syntax":"swift","identifier":"FamiliarizeWithTypesSection3Step1.swift","content":["import SpaceKit","","@Controller struct MyController {","    public func myEndpoint() {","        ","    }","}"],"fileType":"swift","highlights":[],"type":"file"},"doc://SpaceKit/tutorials/SpaceKit/CodingYourFirstContract#Writing-the-Contract-Code":{"kind":"section","abstract":[{"type":"text","text":"In this tutorial, you’ll create a simple smart contract that manages a counter. Users can increment or decrement the counter, and the changes are persisted across contract executions."}],"title":"Writing the Contract Code","url":"\/tutorials\/spacekit\/codingyourfirstcontract#Writing-the-Contract-Code","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Writing-the-Contract-Code","role":"pseudoSymbol","type":"section"},"FamiliarizeWithTypesSection3Step3.swift":{"fileName":"lib.swift","fileType":"swift","syntax":"swift","identifier":"FamiliarizeWithTypesSection3Step3.swift","content":["import SpaceKit","","@Controller struct MyController {","    public func myEndpoint() {","        let initialNumber: BigUint = 5","        ","        var result = initialNumber + 3","    }","}"],"type":"file","highlights":[{"line":6},{"line":7}]},"FamiliarizeWithTypesSection5Step4.swift":{"fileName":"struct.swift","syntax":"swift","identifier":"FamiliarizeWithTypesSection5Step4.swift","content":["import SpaceKit","","@Codable enum MyEnum {","    case firstCase(BigUint)","}","","@Codable struct MyStruct {","    let myBiguint: BigUint","    let myInteger: UInt64","    let myBuffer: Buffer","    let myEnum: MyEnum","}"],"fileType":"swift","highlights":[],"type":"file"},"FamiliarizeWithTypesSection4Step3.swift":{"fileName":"lib.swift","fileType":"swift","syntax":"swift","identifier":"FamiliarizeWithTypesSection4Step3.swift","content":["import SpaceKit","","@Controller struct MyController {","    public func myEndpoint() {","        var myVector: Vector<BigUint> = Vector()","        myVector = myVector.appended(2)","        myVector = myVector.appended(10)","        myVector = myVector.appended(1)","    }","}"],"type":"file","highlights":[{"line":6},{"line":7},{"line":8}]},"doc://SpaceKit/tutorials/SpaceKit/Deep-Dive-into-SpaceKit-Concepts/Exploring-SpaceKit's-Types":{"type":"topic","role":"article","title":"Exploring SpaceKit's Types","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Exploring-SpaceKit's-Types","kind":"article","url":"\/tutorials\/spacekit\/deep-dive-into-spacekit-concepts\/exploring-spacekit's-types","abstract":[]},"doc://SpaceKit/tutorials/SpaceKit/Deep-Dive-into-SpaceKit-Concepts/Interacting-with-Other-Contracts":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Interacting-with-Other-Contracts","role":"article","url":"\/tutorials\/spacekit\/deep-dive-into-spacekit-concepts\/interacting-with-other-contracts","abstract":[],"kind":"article","type":"topic","title":"Interacting with Other Contracts"},"FamiliarizeWithTypesSection2Step4.swift":{"fileName":"lib.swift","syntax":"swift","identifier":"FamiliarizeWithTypesSection2Step4.swift","content":["import SpaceKit","","@Controller struct MyController {","    public func myEndpoint() {","        var myBuffer: Buffer = \"Hello\"","        myBuffer = myBuffer.appended(\" World!\")","        ","        guard myBuffer != \"Hello World!\" else {","            smartContractError(message: \"myBuffer is not equal to Hello World!\")","        }","    }","}"],"fileType":"swift","highlights":[{"line":7},{"line":8},{"line":9},{"line":10}],"type":"file"},"doc://SpaceKit/tutorials/SpaceKit/CodingYourFirstContract":{"type":"topic","kind":"project","abstract":[{"text":"In this tutorial, you’ll create a simple smart contract that manages a counter. Users can increment or decrement the counter, and the changes are persisted across contract executions.","type":"text"}],"url":"\/tutorials\/spacekit\/codingyourfirstcontract","role":"project","title":"Building Your First Smart Contract","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract","estimatedTime":"20min"},"doc://SpaceKit/tutorials/SpaceKit/AsyncCalls#Perform-an-Asynchronous-Call":{"url":"\/tutorials\/spacekit\/asynccalls#Perform-an-Asynchronous-Call","title":"Perform an Asynchronous Call","type":"section","kind":"section","abstract":[{"text":"Blockchain platforms using SpaceVM enable seamless execution within a sharded environment. Sharding divides a blockchain’s global state and validation workload into smaller, manageable units known as shards. This method enhances scalability without compromising decentralization, allowing nodes to operate without significant computational resources.","type":"text"}],"role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls#Perform-an-Asynchronous-Call"},"doc://SpaceKit/tutorials/SpaceKit/StoreValues":{"kind":"project","estimatedTime":"15min","role":"project","abstract":[{"type":"text","text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory."}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues","url":"\/tutorials\/spacekit\/storevalues","type":"topic","title":"Persist Values Between Executions"},"doc://SpaceKit/tutorials/SpaceKit/InstallingTools#Installing-SpaceKits-Dependencies":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Installing-SpaceKits-Dependencies","type":"section","url":"\/tutorials\/spacekit\/installingtools#Installing-SpaceKits-Dependencies","kind":"section","abstract":[{"text":"Before writing your first smart contract with SpaceKit, ensure you have the necessary tools installed.","type":"text"}],"role":"pseudoSymbol","title":"Installing SpaceKit's Dependencies"},"FamiliarizeWithTypesSection1Step5.swift":{"fileName":"lib.swift","fileType":"swift","syntax":"swift","identifier":"FamiliarizeWithTypesSection1Step5.swift","content":["import SpaceKit","","@Controller struct MyController {","    public func myEndpoint() {","        let myString: String = \"Hey!\" \/\/ Won't compile! ❌","        let myBuffer: Buffer = \"Hey!\" \/\/ Fine ✅","        ","        let myArray: [UInt64] = [4, 8, 100] \/\/ Won't compile! ❌","        var myVector: Vector<UInt64> = Vector() \/\/ Fine ✅","            .appended(4)","            .appended(8)","            .appended(100)","        ","        let two = 2 \/\/ Fine ✅","        let ten: UInt64 = 10 \/\/ Fine ✅","        let isTwoEven = true \/\/ Fine ✅","    }","}"],"type":"file","highlights":[{"line":13},{"line":14},{"line":15},{"line":16}]},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Creating-Your-Own-Types":{"type":"section","kind":"section","abstract":[{"text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}],"url":"\/tutorials\/spacekit\/familiarizewithtypes#Creating-Your-Own-Types","role":"pseudoSymbol","title":"Creating Your Own Types","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Creating-Your-Own-Types"},"doc://SpaceKit/tutorials/SpaceKit/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract":{"url":"\/tutorials\/spacekit\/installingtools#Initializing-and-Compiling-Your-First-Smart-Contract","title":"Initializing and Compiling Your First Smart Contract","type":"section","kind":"section","abstract":[{"text":"Before writing your first smart contract with SpaceKit, ensure you have the necessary tools installed.","type":"text"}],"role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract"},"doc://SpaceKit/tutorials/SpaceKit/InstallingTools":{"title":"Install the Necessary Tools","role":"project","url":"\/tutorials\/spacekit\/installingtools","abstract":[{"type":"text","text":"Before writing your first smart contract with SpaceKit, ensure you have the necessary tools installed."}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools","type":"topic","kind":"project","estimatedTime":"10min"},"FamiliarizeWithTypesSection4Step1.swift":{"fileName":"lib.swift","syntax":"swift","identifier":"FamiliarizeWithTypesSection4Step1.swift","content":["import SpaceKit","","@Controller struct MyController {","    public func myEndpoint() {","        ","    }","}"],"fileType":"swift","highlights":[],"type":"file"},"doc://SpaceKit/tutorials/SpaceKit/Deep-Dive-into-SpaceKit-Concepts/Persisting-Data-Across-Executions":{"type":"topic","kind":"article","abstract":[],"url":"\/tutorials\/spacekit\/deep-dive-into-spacekit-concepts\/persisting-data-across-executions","role":"article","title":"Persisting Data Across Executions","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Persisting-Data-Across-Executions"},"doc://SpaceKit/tutorials/SpaceKit/GetInfo":{"abstract":[{"text":"Many smart contracts rely on contextual data to execute their operations effectively. This data can include input payments, the caller’s address, the current time, the balance of a specific account, or even the contract owner.","type":"text"}],"url":"\/tutorials\/spacekit\/getinfo","kind":"project","title":"Retrieving Information from the Blockchain","estimatedTime":"10min","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo","type":"topic","role":"project"},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes":{"url":"\/tutorials\/spacekit\/familiarizewithtypes","title":"Exploring SpaceKit's Types","type":"topic","kind":"project","abstract":[{"text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}],"estimatedTime":"20min","role":"project","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes"},"doc://SpaceKit/tutorials/SpaceKit/GetInfo#Accessing-Transaction-Context-Data":{"kind":"section","role":"pseudoSymbol","abstract":[{"type":"text","text":"Many smart contracts rely on contextual data to execute their operations effectively. This data can include input payments, the caller’s address, the current time, the balance of a specific account, or even the contract owner."}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo#Accessing-Transaction-Context-Data","url":"\/tutorials\/spacekit\/getinfo#Accessing-Transaction-Context-Data","type":"section","title":"Accessing Transaction Context Data"},"FamiliarizeWithTypesSection5Step1.swift":{"highlights":[],"fileType":"swift","content":["import SpaceKit","","struct MyStruct {","    let myBiguint: BigUint","    let myInteger: UInt64","    let myBuffer: Buffer","}"],"syntax":"swift","type":"file","identifier":"FamiliarizeWithTypesSection5Step1.swift","fileName":"struct.swift"},"FamiliarizeWithTypesSection1Step3.swift":{"identifier":"FamiliarizeWithTypesSection1Step3.swift","highlights":[{"line":7},{"line":8}],"content":["import SpaceKit","","@Controller struct MyController {","    public func myEndpoint() {","        let myString: String = \"Hey!\" \/\/ Won't compile! ❌","        let myBuffer: Buffer = \"Hey!\" \/\/ Fine ✅","        ","        let myArray: [UInt64] = [4, 8, 100] \/\/ Won't compile! ❌","    }","}"],"fileType":"swift","syntax":"swift","fileName":"lib.swift","type":"file"},"FamiliarizeWithTypesSection4Step5.swift":{"highlights":[{"line":14},{"line":15},{"line":16},{"line":17}],"syntax":"swift","fileType":"swift","content":["import SpaceKit","","@Controller struct MyController {","    public func myEndpoint() {","        var myVector: Vector<BigUint> = Vector()","        myVector = myVector.appended(2)","        myVector = myVector.appended(10)","        myVector = myVector.appended(1)","        ","        var sum: BigUint = 0","        myVector.forEach { item in","            sum = sum + item","        }","        ","        guard sum == 13 else {","            smartContractError(message: \"sum is not 13\")","        }","    }","}"],"type":"file","identifier":"FamiliarizeWithTypesSection4Step5.swift","fileName":"lib.swift"},"doc://SpaceKit/tutorials/SpaceKit/SyncCalls#Declare-the-Callee-Proxy":{"title":"Declare the Callee Proxy","role":"pseudoSymbol","url":"\/tutorials\/spacekit\/synccalls#Declare-the-Callee-Proxy","abstract":[{"type":"text","text":"Smart contracts can interact not only with users but also with other smart contracts. This enables more advanced protocols by leveraging existing ones. For example, you could integrate a decentralized exchange directly into your contract to perform token swaps. Decentralized applications often involve multiple contracts, each with a dedicated role, working together to achieve complex functionality—similar to microservices in backend systems."}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls#Declare-the-Callee-Proxy","type":"section","kind":"section"},"FamiliarizeWithTypesSection3Step8.swift":{"fileName":"lib.swift","identifier":"FamiliarizeWithTypesSection3Step8.swift","highlights":[{"line":15},{"line":16},{"line":17},{"line":18}],"syntax":"swift","content":["import SpaceKit","","@Controller struct MyController {","    public func myEndpoint() {","        let initialNumber: BigUint = 5","        ","        var result = initialNumber + 3","        result = result * 7","        result = result + initialNumber * 3","        result = result - 21","        ","        guard result % 10 == 0 else {","            smartContractError(message: \"result is not a multiple of 10\")","        }","        ","        guard result > 0 else {","            smartContractError(message: \"result is 0\")","        }","    }","}"],"type":"file","fileType":"swift"},"FamiliarizeWithTypesSection2Step1.swift":{"fileName":"lib.swift","syntax":"swift","identifier":"FamiliarizeWithTypesSection2Step1.swift","content":["import SpaceKit","","@Controller struct MyController {","    public func myEndpoint() {","        ","    }","}"],"fileType":"swift","highlights":[],"type":"file"},"doc://SpaceKit/tutorials/SpaceKit/SyncCalls":{"abstract":[{"text":"Smart contracts can interact not only with users but also with other smart contracts. This enables more advanced protocols by leveraging existing ones. For example, you could integrate a decentralized exchange directly into your contract to perform token swaps. Decentralized applications often involve multiple contracts, each with a dedicated role, working together to achieve complex functionality—similar to microservices in backend systems.","type":"text"}],"url":"\/tutorials\/spacekit\/synccalls","kind":"project","title":"Interact with Other Contracts","estimatedTime":"15min","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls","type":"topic","role":"project"},"FamiliarizeWithTypesSection1Step2.swift":{"fileName":"lib.swift","identifier":"FamiliarizeWithTypesSection1Step2.swift","highlights":[{"line":6}],"syntax":"swift","content":["import SpaceKit","","@Controller struct MyController {","    public func myEndpoint() {","        let myString: String = \"Hey!\" \/\/ Won't compile! ❌","        let myBuffer: Buffer = \"Hey!\" \/\/ Fine ✅","    }","}"],"type":"file","fileType":"swift"},"doc://SpaceKit/tutorials/SpaceKit/SyncCalls#Perform-a-Synchronous-Call":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls#Perform-a-Synchronous-Call","type":"section","url":"\/tutorials\/spacekit\/synccalls#Perform-a-Synchronous-Call","kind":"section","abstract":[{"text":"Smart contracts can interact not only with users but also with other smart contracts. This enables more advanced protocols by leveraging existing ones. For example, you could integrate a decentralized exchange directly into your contract to perform token swaps. Decentralized applications often involve multiple contracts, each with a dedicated role, working together to achieve complex functionality—similar to microservices in backend systems.","type":"text"}],"role":"pseudoSymbol","title":"Perform a Synchronous Call"},"FamiliarizeWithTypesSection1Step6.swift":{"fileName":"lib.swift","identifier":"FamiliarizeWithTypesSection1Step6.swift","highlights":[{"line":2}],"fileType":"swift","syntax":"swift","content":["import SpaceKit","import Foundation \/\/ Don't do this ❌","","@Controller struct MyController {","    public func myEndpoint() {","        let myString: String = \"Hey!\" \/\/ Won't compile! ❌","        let myBuffer: Buffer = \"Hey!\" \/\/ Fine ✅","        ","        let myArray: [UInt64] = [4, 8, 100] \/\/ Won't compile! ❌","        var myVector: Vector<UInt64> = Vector() \/\/ Fine ✅","            .appended(4)","            .appended(8)","            .appended(100)","        ","        let two = 2 \/\/ Fine ✅","        let ten: UInt64 = 10 \/\/ Fine ✅","        let isTwoEven = true \/\/ Fine ✅","    }","}"],"type":"file"},"doc://SpaceKit/tutorials/SpaceKit/CodingYourFirstContract#Testing-the-Contract":{"type":"section","kind":"section","abstract":[{"text":"In this tutorial, you’ll create a simple smart contract that manages a counter. Users can increment or decrement the counter, and the changes are persisted across contract executions.","type":"text"}],"url":"\/tutorials\/spacekit\/codingyourfirstcontract#Testing-the-Contract","role":"pseudoSymbol","title":"Testing the Contract","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Testing-the-Contract"},"doc://SpaceKit/tutorials/SpaceKit/AsyncCalls#Declare-the-Callee-Proxy":{"title":"Declare the Callee Proxy","role":"pseudoSymbol","url":"\/tutorials\/spacekit\/asynccalls#Declare-the-Callee-Proxy","abstract":[{"type":"text","text":"Blockchain platforms using SpaceVM enable seamless execution within a sharded environment. Sharding divides a blockchain’s global state and validation workload into smaller, manageable units known as shards. This method enhances scalability without compromising decentralization, allowing nodes to operate without significant computational resources."}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls#Declare-the-Callee-Proxy","type":"section","kind":"section"},"FamiliarizeWithTypesSection3Step4.swift":{"fileName":"lib.swift","identifier":"FamiliarizeWithTypesSection3Step4.swift","highlights":[{"line":8}],"syntax":"swift","content":["import SpaceKit","","@Controller struct MyController {","    public func myEndpoint() {","        let initialNumber: BigUint = 5","        ","        var result = initialNumber + 3","        result = result * 7","    }","}"],"type":"file","fileType":"swift"},"doc://SpaceKit/tutorials/SpaceKit/Getting-Started/Installing-the-Tools":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Getting-Started\/Installing-the-Tools","role":"article","url":"\/tutorials\/spacekit\/getting-started\/installing-the-tools","abstract":[],"kind":"article","type":"topic","title":"Installing the Tools"},"doc://SpaceKit/tutorials/SpaceKit/Deep-Dive-into-SpaceKit-Concepts/Calling-Contracts-Across-Shards":{"url":"\/tutorials\/spacekit\/deep-dive-into-spacekit-concepts\/calling-contracts-across-shards","abstract":[],"title":"Calling Contracts Across Shards","kind":"article","type":"topic","role":"article","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Calling-Contracts-Across-Shards"},"doc://SpaceKit/tutorials/SpaceKit":{"url":"\/tutorials\/spacekit","abstract":[{"type":"text","text":"Discover how SpaceKit simplifies blockchain development using Swift. Dive into the world of Web3 with ease and efficiency."}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit","title":"Meet SpaceKit","kind":"overview","type":"topic","role":"overview"},"FamiliarizeWithTypesSection5Step3.swift":{"fileName":"lib.swift","syntax":"swift","identifier":"FamiliarizeWithTypesSection5Step3.swift","content":["import SpaceKit","","@Controller struct MyController {","    public func myEndpoint(myStruct: MyStruct) {","        \/\/ Do what you want here","    }","}"],"fileType":"swift","highlights":[],"type":"file"},"doc://SpaceKit/tutorials/SpaceKit/Deep-Dive-into-SpaceKit-Concepts/Retrieving-Information-from-the-Blockchain":{"abstract":[],"url":"\/tutorials\/spacekit\/deep-dive-into-spacekit-concepts\/retrieving-information-from-the-blockchain","kind":"article","title":"Retrieving Information from the Blockchain","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Deep-Dive-into-SpaceKit-Concepts\/Retrieving-Information-from-the-Blockchain","type":"topic","role":"article"},"doc://SpaceKit/tutorials/SpaceKit/AsyncCalls":{"kind":"project","abstract":[{"type":"text","text":"Blockchain platforms using SpaceVM enable seamless execution within a sharded environment. Sharding divides a blockchain’s global state and validation workload into smaller, manageable units known as shards. This method enhances scalability without compromising decentralization, allowing nodes to operate without significant computational resources."}],"title":"Interacting with Contracts Across Shards","url":"\/tutorials\/spacekit\/asynccalls","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls","role":"project","type":"topic","estimatedTime":"15min"},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Working-with-the-BigUint-Type":{"abstract":[{"text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}],"url":"\/tutorials\/spacekit\/familiarizewithtypes#Working-with-the-BigUint-Type","kind":"section","title":"Working with the BigUint Type","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Working-with-the-BigUint-Type","type":"section","role":"pseudoSymbol"},"FamiliarizeWithTypesSection3Step6.swift":{"fileName":"lib.swift","identifier":"FamiliarizeWithTypesSection3Step6.swift","highlights":[{"line":10}],"syntax":"swift","content":["import SpaceKit","","@Controller struct MyController {","    public func myEndpoint() {","        let initialNumber: BigUint = 5","        ","        var result = initialNumber + 3","        result = result * 7","        result = result + initialNumber * 3","        result = result - 21","    }","}"],"type":"file","fileType":"swift"},"FamiliarizeWithTypesSection3Step7.swift":{"fileName":"lib.swift","identifier":"FamiliarizeWithTypesSection3Step7.swift","highlights":[{"line":11},{"line":12},{"line":13},{"line":14}],"fileType":"swift","syntax":"swift","content":["import SpaceKit","","@Controller struct MyController {","    public func myEndpoint() {","        let initialNumber: BigUint = 5","        ","        var result = initialNumber + 3","        result = result * 7","        result = result + initialNumber * 3","        result = result - 21","        ","        guard result % 10 == 0 else {","            smartContractError(message: \"result is not a multiple of 10\")","        }","    }","}"],"type":"file"},"FamiliarizeWithTypesSection1Step4.swift":{"fileName":"lib.swift","identifier":"FamiliarizeWithTypesSection1Step4.swift","highlights":[{"line":9},{"line":10},{"line":11},{"line":12}],"syntax":"swift","content":["import SpaceKit","","@Controller struct MyController {","    public func myEndpoint() {","        let myString: String = \"Hey!\" \/\/ Won't compile! ❌","        let myBuffer: Buffer = \"Hey!\" \/\/ Fine ✅","        ","        let myArray: [UInt64] = [4, 8, 100] \/\/ Won't compile! ❌","        var myVector: Vector<UInt64> = Vector() \/\/ Fine ✅","            .appended(4)","            .appended(8)","            .appended(100)","    }","}"],"type":"file","fileType":"swift"},"FamiliarizeWithTypesSection3Step5.swift":{"fileName":"lib.swift","syntax":"swift","identifier":"FamiliarizeWithTypesSection3Step5.swift","content":["import SpaceKit","","@Controller struct MyController {","    public func myEndpoint() {","        let initialNumber: BigUint = 5","        ","        var result = initialNumber + 3","        result = result * 7","        result = result + initialNumber * 3","    }","}"],"fileType":"swift","highlights":[{"line":9}],"type":"file"},"doc://SpaceKit/tutorials/SpaceKit/Getting-Started/Building-Your-First-Smart-Contract":{"type":"topic","role":"article","title":"Building Your First Smart Contract","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/Getting-Started\/Building-Your-First-Smart-Contract","kind":"article","url":"\/tutorials\/spacekit\/getting-started\/building-your-first-smart-contract","abstract":[]},"doc://SpaceKit/tutorials/SpaceKit/StoreValues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage":{"type":"section","kind":"section","abstract":[{"text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory.","type":"text"}],"url":"\/tutorials\/spacekit\/storevalues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage","role":"pseudoSymbol","title":"Leveraging @Mapping for Dynamic Key-Value Storage","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage"},"FamiliarizeWithTypesSection4Step4.swift":{"fileName":"lib.swift","identifier":"FamiliarizeWithTypesSection4Step4.swift","highlights":[{"line":9},{"line":10},{"line":11},{"line":12},{"line":13}],"syntax":"swift","content":["import SpaceKit","","@Controller struct MyController {","    public func myEndpoint() {","        var myVector: Vector<BigUint> = Vector()","        myVector = myVector.appended(2)","        myVector = myVector.appended(10)","        myVector = myVector.appended(1)","        ","        var sum: BigUint = 0","        myVector.forEach { item in","            sum = sum + item","        }","    }","}"],"type":"file","fileType":"swift"},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Working-with-the-Vector-Type":{"abstract":[{"text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}],"url":"\/tutorials\/spacekit\/familiarizewithtypes#Working-with-the-Vector-Type","kind":"section","title":"Working with the Vector Type","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Working-with-the-Vector-Type","type":"section","role":"pseudoSymbol"},"FamiliarizeWithTypesSection2Step3.swift":{"fileName":"lib.swift","syntax":"swift","identifier":"FamiliarizeWithTypesSection2Step3.swift","content":["import SpaceKit","","@Controller struct MyController {","    public func myEndpoint() {","        var myBuffer: Buffer = \"Hello\"","        myBuffer = myBuffer.appended(\" World!\")","    }","}"],"fileType":"swift","highlights":[{"line":6}],"type":"file"},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Understanding-the-Buffer-Type":{"url":"\/tutorials\/spacekit\/familiarizewithtypes#Understanding-the-Buffer-Type","abstract":[{"type":"text","text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM."}],"title":"Understanding the Buffer Type","kind":"section","type":"section","role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Understanding-the-Buffer-Type"},"doc://SpaceKit/tutorials/SpaceKit/CodingYourFirstContract#Initializing-the-Project":{"url":"\/tutorials\/spacekit\/codingyourfirstcontract#Initializing-the-Project","abstract":[{"type":"text","text":"In this tutorial, you’ll create a simple smart contract that manages a counter. Users can increment or decrement the counter, and the changes are persisted across contract executions."}],"title":"Initializing the Project","kind":"section","type":"section","role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Initializing-the-Project"}}}