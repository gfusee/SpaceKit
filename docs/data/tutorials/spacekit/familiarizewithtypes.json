{"kind":"project","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/tutorials\/spacekit\/familiarizewithtypes"]}],"sections":[{"chapter":"Exploring SpaceKit's Types","title":"Exploring SpaceKit's Types","kind":"hero","estimatedTimeInMinutes":20,"content":[{"inlineContent":[{"type":"text","text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM."}],"type":"paragraph"}]},{"kind":"tasks","tasks":[{"contentSection":[{"mediaPosition":"trailing","kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Writing code for blockchain involves operating within strict resource constraints. To address this, SpaceKit uses Swift’s “embedded” mode, ensuring the compiled code is as lightweight and efficient as possible."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"SpaceVM, the engine running smart contracts, limits heap allocations. As a result, types with dynamic sizes, such as Strings, Arrays, or classes, and any structs or enums containing these, are not permitted."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Additionally, Swift’s existential types—such as "},{"code":"any Protocol","type":"codeVoice"},{"type":"text","text":" where "},{"type":"codeVoice","code":"Protocol"},{"type":"text","text":" is a protocol—are also forbidden. Existential types introduce runtime overhead, which is why they are not allowed in SpaceKit."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The allowed Swift types are:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"StaticString","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Integer types: Int, UInt, UInt8, UInt16, etc."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Bool: treated as a UInt8"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"SpaceKit introduces specific types that serve as alternatives for those not allowed. This chapter introduces three key replacements:"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"code":"Buffer","type":"codeVoice"},{"type":"text","text":": A substitute for String and Data"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"BigUint","type":"codeVoice"},{"type":"text","text":": Capable of handling large unsigned integers"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Vector"},{"type":"text","text":": An alternative to Array"}]}]}]},{"inlineContent":[{"type":"text","text":"For security, these types do not feature mutating methods. Instead, they use methods that return new instances. For example, the "},{"type":"codeVoice","code":"Buffer"},{"text":" type does not include ","type":"text"},{"type":"codeVoice","code":"append(_:) -> Void"},{"type":"text","text":" but instead offers "},{"type":"codeVoice","code":"appending(_:) -> Buffer"},{"type":"text","text":"."}],"type":"paragraph"}]}],"stepsSection":[{"content":[{"inlineContent":[{"text":"Avoid using ","type":"text"},{"type":"codeVoice","code":"String"},{"text":" in SpaceKit, as it is prohibited due to memory restrictions.","type":"text"}],"type":"paragraph"}],"caption":[],"type":"step","runtimePreview":null,"code":"FamiliarizeWithTypesSection1Step1.swift","media":null},{"caption":[],"type":"step","media":null,"content":[{"inlineContent":[{"type":"text","text":"Use "},{"code":"Buffer","type":"codeVoice"},{"type":"text","text":" as a fixed-size alternative for handling raw data and text."}],"type":"paragraph"}],"code":"FamiliarizeWithTypesSection1Step2.swift","runtimePreview":null},{"media":null,"type":"step","caption":[],"content":[{"type":"paragraph","inlineContent":[{"text":"Similarly, avoid using ","type":"text"},{"code":"Array","type":"codeVoice"},{"type":"text","text":" since it leads to heap allocations and is not allowed."}]}],"code":"FamiliarizeWithTypesSection1Step3.swift","runtimePreview":null},{"media":null,"caption":[],"code":"FamiliarizeWithTypesSection1Step4.swift","runtimePreview":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Instead, leverage the "},{"type":"codeVoice","code":"Vector"},{"type":"text","text":" type as a memory-efficient alternative to "},{"code":"Array","type":"codeVoice"},{"text":".","type":"text"}]}]},{"code":"FamiliarizeWithTypesSection1Step5.swift","runtimePreview":null,"media":null,"type":"step","caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Integer types like "},{"type":"codeVoice","code":"Int"},{"type":"text","text":", "},{"code":"UInt","type":"codeVoice"},{"type":"text","text":", and "},{"type":"codeVoice","code":"Bool"},{"text":" are fully supported and safe to use.","type":"text"}]}]},{"type":"step","caption":[],"code":"FamiliarizeWithTypesSection1Step6.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Ensure you only import the SpaceKit framework to keep the contract lightweight and efficient."}]}],"media":null,"runtimePreview":null}],"title":"Handling Heap Allocation Challenges","anchor":"Handling-Heap-Allocation-Challenges"},{"contentSection":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"Buffer"},{"text":" is a fundamental type in SpaceKit, designed to store raw data and strings.","type":"text"}],"type":"paragraph"}],"kind":"contentAndMedia","mediaPosition":"trailing"}],"title":"Understanding the Buffer Type","anchor":"Understanding-the-Buffer-Type","stepsSection":[{"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Start by creating the basic structure for your contract."}]}],"type":"step","media":null,"code":"FamiliarizeWithTypesSection2Step1.swift","caption":[]},{"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Important: Explicitly declare your variable as "},{"code":"Buffer","type":"codeVoice"},{"type":"text","text":" to avoid being interpreted as "},{"code":"String","type":"codeVoice"},{"text":".","type":"text"}]}],"media":null,"content":[{"inlineContent":[{"text":"Initialize a ","type":"text"},{"code":"Buffer","type":"codeVoice"},{"type":"text","text":" variable using a string literal."}],"type":"paragraph"}],"type":"step","code":"FamiliarizeWithTypesSection2Step2.swift","runtimePreview":null},{"code":"FamiliarizeWithTypesSection2Step3.swift","content":[{"inlineContent":[{"type":"text","text":"Append another "},{"code":"Buffer","type":"codeVoice"},{"text":" to your existing variable.","type":"text"}],"type":"paragraph"}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"FamiliarizeWithTypesSection2Step4.swift","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Compare two ","type":"text"},{"type":"codeVoice","code":"Buffer"},{"text":" instances. If they don’t match, throw a smart contract error.","type":"text"}]}],"media":null,"caption":[{"inlineContent":[{"type":"text","text":"Note: The "},{"code":"smartContractError","type":"codeVoice"},{"text":" function requires a ","type":"text"},{"type":"codeVoice","code":"Buffer"},{"type":"text","text":" parameter. This topic is covered in detail in a later chapter."}],"type":"paragraph"}],"type":"step"}]},{"stepsSection":[{"runtimePreview":null,"content":[{"inlineContent":[{"text":"Begin by structuring your contract.","type":"text"}],"type":"paragraph"}],"code":"FamiliarizeWithTypesSection3Step1.swift","type":"step","caption":[],"media":null},{"caption":[{"inlineContent":[{"type":"text","text":"Important: You must specify the type explicitly as "},{"code":"BigUint","type":"codeVoice"},{"text":", or it will default to ","type":"text"},{"code":"Int","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}],"media":null,"code":"FamiliarizeWithTypesSection3Step2.swift","runtimePreview":null,"type":"step","content":[{"inlineContent":[{"text":"Declare a ","type":"text"},{"code":"BigUint","type":"codeVoice"},{"type":"text","text":" constant with an integer literal."}],"type":"paragraph"}]},{"media":null,"type":"step","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Create a new ","type":"text"},{"type":"codeVoice","code":"BigUint"},{"type":"text","text":" by adding 3 to the previous constant."}]}],"caption":[],"code":"FamiliarizeWithTypesSection3Step3.swift"},{"content":[{"type":"paragraph","inlineContent":[{"text":"Multiply the new variable by 7.","type":"text"}]}],"code":"FamiliarizeWithTypesSection3Step4.swift","caption":[],"runtimePreview":null,"media":null,"type":"step"},{"type":"step","runtimePreview":null,"media":null,"caption":[],"content":[{"type":"paragraph","inlineContent":[{"text":"Add three times the initial constant to the new variable.","type":"text"}]}],"code":"FamiliarizeWithTypesSection3Step5.swift"},{"type":"step","media":null,"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Subtract 21 from the variable."}]}],"code":"FamiliarizeWithTypesSection3Step6.swift","caption":[{"type":"paragraph","inlineContent":[{"text":"Note: A ","type":"text"},{"code":"BigUint","type":"codeVoice"},{"text":" value cannot be negative. If the subtraction results in a value below zero, SpaceKit will trigger a smart contract error.","type":"text"}]}]},{"media":null,"code":"FamiliarizeWithTypesSection3Step7.swift","runtimePreview":null,"type":"step","caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Verify that the result is a multiple of 10, and throw a smart contract error if not."}]}]},{"media":null,"code":"FamiliarizeWithTypesSection3Step8.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Ensure the result is greater than zero, throwing an error if it isn’t."}]}],"runtimePreview":null,"caption":[],"type":"step"}],"title":"Working with the BigUint Type","contentSection":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Blockchains do not support decimal numbers. However, real-world applications often require decimal representation, such as in cryptocurrency amounts like 0.09281 Bitcoin.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To handle such cases, values are expressed as large numbers, where many tokens allocate the last 18 digits to represent the decimal portion. For instance: 1 EGLD equals 1 * 10^18, or 1,000,000,000,000,000,000."}]},{"inlineContent":[{"text":"Standard Swift types, such as ","type":"text"},{"type":"codeVoice","code":"UInt64"},{"type":"text","text":", can only store values up to 18,446,744,073,709,551,615 (20 digits), making it impossible to represent values exceeding approximately 18.446744 EGLD."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"SpaceKit provides the ","type":"text"},{"type":"codeVoice","code":"BigUint"},{"type":"text","text":" type to store arbitrarily large positive numbers."}]}],"mediaPosition":"trailing","kind":"contentAndMedia"}],"anchor":"Working-with-the-BigUint-Type"},{"anchor":"Working-with-the-Vector-Type","contentSection":[{"mediaPosition":"trailing","content":[{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"Array"},{"type":"text","text":" type is often the default for storing dynamic-size data, but it is not permitted in SpaceKit. Fortunately, SpaceKit provides a suitable alternative: "},{"code":"Vector","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"code":"Vector","type":"codeVoice"},{"text":" can store any type compatible with SpaceKit, including user-defined structs and enums.","type":"text"}]}],"kind":"contentAndMedia"}],"stepsSection":[{"caption":[],"runtimePreview":null,"media":null,"type":"step","content":[{"inlineContent":[{"type":"text","text":"Begin by setting up the basic structure of your contract."}],"type":"paragraph"}],"code":"FamiliarizeWithTypesSection4Step1.swift"},{"runtimePreview":null,"caption":[{"inlineContent":[{"type":"text","text":"Important: Currently, array literal assignment is disabled. The SpaceKit team is investigating its impact on memory management in smart contracts before enabling it."}],"type":"paragraph"}],"media":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Declare a ","type":"text"},{"type":"codeVoice","code":"Vector"},{"text":" variable to hold ","type":"text"},{"type":"codeVoice","code":"BigUint"},{"type":"text","text":" elements."}]}],"code":"FamiliarizeWithTypesSection4Step2.swift"},{"caption":[],"code":"FamiliarizeWithTypesSection4Step3.swift","runtimePreview":null,"media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add elements to the "},{"type":"codeVoice","code":"Vector"},{"type":"text","text":"."}]}],"type":"step"},{"media":null,"caption":[{"inlineContent":[{"type":"text","text":"Important: The "},{"code":"for ... in","type":"codeVoice"},{"type":"text","text":" loop for vectors is currently disabled. The SpaceKit team is evaluating its effect on smart contract memory before enabling it."}],"type":"paragraph"}],"content":[{"inlineContent":[{"type":"text","text":"Iterate over the "},{"code":"Vector","type":"codeVoice"},{"text":" to sum all the elements.","type":"text"}],"type":"paragraph"}],"code":"FamiliarizeWithTypesSection4Step4.swift","runtimePreview":null,"type":"step"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Ensure the sum equals 13. Throw a smart contract error if it doesn’t."}]}],"media":null,"runtimePreview":null,"type":"step","caption":[],"code":"FamiliarizeWithTypesSection4Step5.swift"}],"title":"Working with the Vector Type"},{"stepsSection":[{"runtimePreview":null,"caption":[],"media":null,"code":"FamiliarizeWithTypesSection5Step1.swift","content":[{"type":"paragraph","inlineContent":[{"text":"Start by creating a struct with fields that are compatible with SpaceKit.","type":"text"}]}],"type":"step"},{"content":[{"inlineContent":[{"text":"Annotate your struct with ","type":"text"},{"code":"@Codable","type":"codeVoice"},{"type":"text","text":" to make it usable with SpaceKit’s encoding system."}],"type":"paragraph"}],"code":"FamiliarizeWithTypesSection5Step2.swift","type":"step","caption":[],"media":null,"runtimePreview":null},{"media":null,"code":"FamiliarizeWithTypesSection5Step3.swift","runtimePreview":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the "},{"type":"codeVoice","code":"@Codable"},{"type":"text","text":"-annotated type within your smart contracts."}]}],"caption":[]},{"type":"step","content":[{"inlineContent":[{"text":"Remember, a ","type":"text"},{"code":"@Codable","type":"codeVoice"},{"type":"text","text":" type can be used as a field in other "},{"code":"@Codable","type":"codeVoice"},{"type":"text","text":" types."}],"type":"paragraph"}],"media":null,"code":"FamiliarizeWithTypesSection5Step4.swift","runtimePreview":null,"caption":[]}],"contentSection":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You can define your own structures and enumerations and make them compatible with SpaceKit using the "},{"type":"codeVoice","code":"@Codable"},{"type":"text","text":" annotation. When a type is marked with "},{"type":"codeVoice","code":"@Codable"},{"type":"text","text":", it becomes eligible to be used as input or output for endpoints, within arrays, and anywhere SpaceKit’s encoding system is applied."}]},{"type":"paragraph","inlineContent":[{"text":"A type annotated with ","type":"text"},{"type":"codeVoice","code":"@Codable"},{"type":"text","text":" must only contain fields of types compatible with SpaceKit, such as integers, "},{"code":"Bool","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"Buffer"},{"type":"text","text":", "},{"type":"codeVoice","code":"BigUint"},{"text":", ","type":"text"},{"type":"codeVoice","code":"Vector"},{"text":", and other ","type":"text"},{"type":"codeVoice","code":"@Codable"},{"type":"text","text":" types."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Additionally, the "},{"code":"@Codable","type":"codeVoice"},{"text":" annotation prevents the structure from having methods or initializers.","type":"text"}]}],"mediaPosition":"trailing","kind":"contentAndMedia"}],"anchor":"Creating-Your-Own-Types","title":"Creating Your Own Types"}]},{"abstract":[{"type":"text","text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory."}],"title":"Persist Values Between Executions","featuredEyebrow":"Tutorial","kind":"callToAction","action":{"overridingTitleInlineContent":[{"type":"text","text":"Get started"}],"isActive":true,"type":"reference","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues","overridingTitle":"Get started"}}],"hierarchy":{"modules":[{"reference":"doc:\/\/SpaceKit\/tutorials\/Space\/Getting-Started\/Installing-the-Tools","projects":[{"sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Installing-SpaceKits-Dependencies","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Setting-Up-the-SpaceKit-CLI","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools"}]},{"reference":"doc:\/\/SpaceKit\/tutorials\/Space\/Getting-Started\/Building-Your-First-Smart-Contract","projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract","sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Initializing-the-Project","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Writing-the-Contract-Code","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Testing-the-Contract"}]}]},{"projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes","sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges","kind":"task"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Understanding-the-Buffer-Type","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Working-with-the-BigUint-Type"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Working-with-the-Vector-Type","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Creating-Your-Own-Types"}]}],"reference":"doc:\/\/SpaceKit\/tutorials\/Space\/Deep-Dive-into-SpaceKit-Concepts\/Exploring-SpaceKit's-Types"},{"projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues","sections":[{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues#Working-with-Storage-for-Single-Value-Persistence"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage"}]}],"reference":"doc:\/\/SpaceKit\/tutorials\/Space\/Deep-Dive-into-SpaceKit-Concepts\/Persisting-Data-Across-Executions"},{"reference":"doc:\/\/SpaceKit\/tutorials\/Space\/Deep-Dive-into-SpaceKit-Concepts\/Retrieving-Information-from-the-Blockchain","projects":[{"sections":[{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo#Accessing-Transaction-Context-Data"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo#Accessing-Blockchain-Context-Data","kind":"task"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo"}]},{"projects":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls","sections":[{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls#Declare-the-Callee-Proxy"},{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls#Perform-a-Synchronous-Call","kind":"task"}]}],"reference":"doc:\/\/SpaceKit\/tutorials\/Space\/Deep-Dive-into-SpaceKit-Concepts\/Interacting-with-Other-Contracts"},{"reference":"doc:\/\/SpaceKit\/tutorials\/Space\/Deep-Dive-into-SpaceKit-Concepts\/Calling-Contracts-Across-Shards","projects":[{"sections":[{"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls#Declare-the-Callee-Proxy","kind":"task"},{"kind":"task","reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls#Perform-an-Asynchronous-Call"}],"reference":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls"}]}],"reference":"doc:\/\/SpaceKit\/tutorials\/Space","paths":[["doc:\/\/SpaceKit\/tutorials\/Space","doc:\/\/SpaceKit\/tutorials\/Space\/Deep-Dive-into-SpaceKit-Concepts","doc:\/\/SpaceKit\/tutorials\/Space\/Deep-Dive-into-SpaceKit-Concepts\/Exploring-SpaceKit's-Types"]]},"schemaVersion":{"minor":3,"major":0,"patch":0},"identifier":{"url":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes","interfaceLanguage":"swift"},"metadata":{"title":"Exploring SpaceKit's Types","category":"SpaceKit","categoryPathComponent":"Space","role":"project"},"references":{"FamiliarizeWithTypesSection3Step6.swift":{"highlights":[{"line":10}],"fileType":"swift","content":["import SpaceKit","","@Contract struct MyContract {","    public func myEndpoint() {","        let initialNumber: BigUint = 5","        ","        var result = initialNumber + 3","        result = result * 7","        result = result + initialNumber * 3","        result = result - 21","    }","}"],"identifier":"FamiliarizeWithTypesSection3Step6.swift","fileName":"lib.swift","syntax":"swift","type":"file"},"doc://SpaceKit/tutorials/SpaceKit/StoreValues":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues","type":"topic","kind":"project","title":"Persist Values Between Executions","abstract":[{"text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory.","type":"text"}],"role":"project","estimatedTime":"15min","url":"\/tutorials\/spacekit\/storevalues"},"FamiliarizeWithTypesSection3Step4.swift":{"identifier":"FamiliarizeWithTypesSection3Step4.swift","fileType":"swift","highlights":[{"line":8}],"type":"file","fileName":"lib.swift","syntax":"swift","content":["import SpaceKit","","@Contract struct MyContract {","    public func myEndpoint() {","        let initialNumber: BigUint = 5","        ","        var result = initialNumber + 3","        result = result * 7","    }","}"]},"doc://SpaceKit/tutorials/Space/Deep-Dive-into-SpaceKit-Concepts/Retrieving-Information-from-the-Blockchain":{"kind":"article","type":"topic","url":"\/tutorials\/space\/deep-dive-into-spacekit-concepts\/retrieving-information-from-the-blockchain","identifier":"doc:\/\/SpaceKit\/tutorials\/Space\/Deep-Dive-into-SpaceKit-Concepts\/Retrieving-Information-from-the-Blockchain","role":"article","title":"Retrieving Information from the Blockchain","abstract":[]},"FamiliarizeWithTypesSection3Step7.swift":{"highlights":[{"line":11},{"line":12},{"line":13},{"line":14}],"fileType":"swift","content":["import SpaceKit","","@Contract struct MyContract {","    public func myEndpoint() {","        let initialNumber: BigUint = 5","        ","        var result = initialNumber + 3","        result = result * 7","        result = result + initialNumber * 3","        result = result - 21","        ","        guard result % 10 == 0 else {","            smartContractError(message: \"result is not a multiple of 10\")","        }","    }","}"],"identifier":"FamiliarizeWithTypesSection3Step7.swift","fileName":"lib.swift","syntax":"swift","type":"file"},"FamiliarizeWithTypesSection3Step1.swift":{"highlights":[],"identifier":"FamiliarizeWithTypesSection3Step1.swift","type":"file","content":["import SpaceKit","","@Contract struct MyContract {","    public func myEndpoint() {","        ","    }","}"],"fileType":"swift","fileName":"lib.swift","syntax":"swift"},"FamiliarizeWithTypesSection2Step1.swift":{"type":"file","fileType":"swift","highlights":[],"fileName":"lib.swift","syntax":"swift","content":["import SpaceKit","","@Contract struct MyContract {","    public func myEndpoint() {","        ","    }","}"],"identifier":"FamiliarizeWithTypesSection2Step1.swift"},"FamiliarizeWithTypesSection1Step6.swift":{"fileType":"swift","content":["import SpaceKit","import Foundation \/\/ Don't do this ❌","","@Contract struct MyContract {","    public func myEndpoint() {","        let myString: String = \"Hey!\" \/\/ Won't compile! ❌","        let myBuffer: Buffer = \"Hey!\" \/\/ Fine ✅","        ","        let myArray: [UInt64] = [4, 8, 100] \/\/ Won't compile! ❌","        var myVector: Vector<UInt64> = Vector() \/\/ Fine ✅","            .appended(4)","            .appended(8)","            .appended(100)","        ","        let two = 2 \/\/ Fine ✅","        let ten: UInt64 = 10 \/\/ Fine ✅","        let isTwoEven = true \/\/ Fine ✅","    }","}"],"highlights":[{"line":2}],"identifier":"FamiliarizeWithTypesSection1Step6.swift","fileName":"lib.swift","type":"file","syntax":"swift"},"doc://SpaceKit/tutorials/SpaceKit/SyncCalls#Declare-the-Callee-Proxy":{"role":"pseudoSymbol","title":"Declare the Callee Proxy","kind":"section","type":"section","abstract":[{"text":"Smart contracts can interact not only with users but also with other smart contracts. This enables more advanced protocols by leveraging existing ones. For example, you could integrate a decentralized exchange directly into your contract to perform token swaps. Decentralized applications often involve multiple contracts, each with a dedicated role, working together to achieve complex functionality—similar to microservices in backend systems.","type":"text"}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls#Declare-the-Callee-Proxy","url":"\/tutorials\/spacekit\/synccalls#Declare-the-Callee-Proxy"},"FamiliarizeWithTypesSection3Step2.swift":{"type":"file","fileType":"swift","highlights":[{"line":5}],"fileName":"lib.swift","syntax":"swift","content":["import SpaceKit","","@Contract struct MyContract {","    public func myEndpoint() {","        let initialNumber: BigUint = 5","    }","}"],"identifier":"FamiliarizeWithTypesSection3Step2.swift"},"FamiliarizeWithTypesSection2Step4.swift":{"fileType":"swift","content":["import SpaceKit","","@Contract struct MyContract {","    public func myEndpoint() {","        var myBuffer: Buffer = \"Hello\"","        myBuffer = myBuffer.appended(\" World!\")","        ","        guard myBuffer != \"Hello World!\" else {","            smartContractError(message: \"myBuffer is not equal to Hello World!\")","        }","    }","}"],"highlights":[{"line":7},{"line":8},{"line":9},{"line":10}],"identifier":"FamiliarizeWithTypesSection2Step4.swift","fileName":"lib.swift","type":"file","syntax":"swift"},"FamiliarizeWithTypesSection4Step3.swift":{"type":"file","fileType":"swift","highlights":[{"line":6},{"line":7},{"line":8}],"fileName":"lib.swift","syntax":"swift","content":["import SpaceKit","","@Contract struct MyContract {","    public func myEndpoint() {","        var myVector: Vector<BigUint> = Vector()","        myVector = myVector.appended(2)","        myVector = myVector.appended(10)","        myVector = myVector.appended(1)","    }","}"],"identifier":"FamiliarizeWithTypesSection4Step3.swift"},"doc://SpaceKit/tutorials/Space/Deep-Dive-into-SpaceKit-Concepts/Interacting-with-Other-Contracts":{"identifier":"doc:\/\/SpaceKit\/tutorials\/Space\/Deep-Dive-into-SpaceKit-Concepts\/Interacting-with-Other-Contracts","type":"topic","kind":"article","title":"Interacting with Other Contracts","abstract":[],"role":"article","url":"\/tutorials\/space\/deep-dive-into-spacekit-concepts\/interacting-with-other-contracts"},"doc://SpaceKit/tutorials/Space/Getting-Started/Installing-the-Tools":{"title":"Installing the Tools","type":"topic","kind":"article","abstract":[],"identifier":"doc:\/\/SpaceKit\/tutorials\/Space\/Getting-Started\/Installing-the-Tools","url":"\/tutorials\/space\/getting-started\/installing-the-tools","role":"article"},"doc://SpaceKit/tutorials/SpaceKit/InstallingTools#Setting-Up-the-SpaceKit-CLI":{"url":"\/tutorials\/spacekit\/installingtools#Setting-Up-the-SpaceKit-CLI","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Setting-Up-the-SpaceKit-CLI","type":"section","title":"Setting Up the SpaceKit CLI","abstract":[{"text":"Before writing your first smart contract with SpaceKit, ensure you have the necessary tools installed.","type":"text"}],"kind":"section","role":"pseudoSymbol"},"FamiliarizeWithTypesSection1Step1.swift":{"fileType":"swift","content":["import SpaceKit","","@Contract struct MyContract {","    public func myEndpoint() {","        let myString: String = \"Hey!\" \/\/ Won't compile! ❌","    }","}"],"highlights":[],"identifier":"FamiliarizeWithTypesSection1Step1.swift","fileName":"lib.swift","type":"file","syntax":"swift"},"FamiliarizeWithTypesSection1Step3.swift":{"type":"file","fileType":"swift","highlights":[{"line":7},{"line":8}],"fileName":"lib.swift","syntax":"swift","content":["import SpaceKit","","@Contract struct MyContract {","    public func myEndpoint() {","        let myString: String = \"Hey!\" \/\/ Won't compile! ❌","        let myBuffer: Buffer = \"Hey!\" \/\/ Fine ✅","        ","        let myArray: [UInt64] = [4, 8, 100] \/\/ Won't compile! ❌","    }","}"],"identifier":"FamiliarizeWithTypesSection1Step3.swift"},"doc://SpaceKit/tutorials/SpaceKit/SyncCalls#Perform-a-Synchronous-Call":{"type":"section","title":"Perform a Synchronous Call","url":"\/tutorials\/spacekit\/synccalls#Perform-a-Synchronous-Call","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls#Perform-a-Synchronous-Call","kind":"section","role":"pseudoSymbol","abstract":[{"type":"text","text":"Smart contracts can interact not only with users but also with other smart contracts. This enables more advanced protocols by leveraging existing ones. For example, you could integrate a decentralized exchange directly into your contract to perform token swaps. Decentralized applications often involve multiple contracts, each with a dedicated role, working together to achieve complex functionality—similar to microservices in backend systems."}]},"doc://SpaceKit/tutorials/SpaceKit/CodingYourFirstContract#Testing-the-Contract":{"role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Testing-the-Contract","type":"section","title":"Testing the Contract","abstract":[{"type":"text","text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user."}],"kind":"section","url":"\/tutorials\/spacekit\/codingyourfirstcontract#Testing-the-Contract"},"FamiliarizeWithTypesSection3Step8.swift":{"fileType":"swift","content":["import SpaceKit","","@Contract struct MyContract {","    public func myEndpoint() {","        let initialNumber: BigUint = 5","        ","        var result = initialNumber + 3","        result = result * 7","        result = result + initialNumber * 3","        result = result - 21","        ","        guard result % 10 == 0 else {","            smartContractError(message: \"result is not a multiple of 10\")","        }","        ","        guard result > 0 else {","            smartContractError(message: \"result is 0\")","        }","    }","}"],"highlights":[{"line":15},{"line":16},{"line":17},{"line":18}],"identifier":"FamiliarizeWithTypesSection3Step8.swift","fileName":"lib.swift","type":"file","syntax":"swift"},"FamiliarizeWithTypesSection5Step4.swift":{"type":"file","fileType":"swift","highlights":[],"fileName":"struct.swift","syntax":"swift","content":["import SpaceKit","","@Codable enum MyEnum {","    case firstCase(BigUint)","}","","@Codable struct MyStruct {","    let myBiguint: BigUint","    let myInteger: UInt64","    let myBuffer: Buffer","    let myEnum: MyEnum","}"],"identifier":"FamiliarizeWithTypesSection5Step4.swift"},"FamiliarizeWithTypesSection4Step5.swift":{"fileType":"swift","content":["import SpaceKit","","@Contract struct MyContract {","    public func myEndpoint() {","        var myVector: Vector<BigUint> = Vector()","        myVector = myVector.appended(2)","        myVector = myVector.appended(10)","        myVector = myVector.appended(1)","        ","        var sum: BigUint = 0","        myVector.forEach { item in","            sum = sum + item","        }","        ","        guard sum == 13 else {","            smartContractError(message: \"sum is not 13\")","        }","    }","}"],"highlights":[{"line":14},{"line":15},{"line":16},{"line":17}],"identifier":"FamiliarizeWithTypesSection4Step5.swift","fileName":"lib.swift","type":"file","syntax":"swift"},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Working-with-the-BigUint-Type":{"type":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Working-with-the-BigUint-Type","role":"pseudoSymbol","kind":"section","url":"\/tutorials\/spacekit\/familiarizewithtypes#Working-with-the-BigUint-Type","abstract":[{"text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}],"title":"Working with the BigUint Type"},"FamiliarizeWithTypesSection2Step2.swift":{"type":"file","fileType":"swift","highlights":[{"line":5}],"fileName":"lib.swift","syntax":"swift","content":["import SpaceKit","","@Contract struct MyContract {","    public func myEndpoint() {","        var myBuffer: Buffer = \"Hello\"","    }","}"],"identifier":"FamiliarizeWithTypesSection2Step2.swift"},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes":{"kind":"project","type":"topic","url":"\/tutorials\/spacekit\/familiarizewithtypes","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes","role":"project","title":"Exploring SpaceKit's Types","estimatedTime":"20min","abstract":[{"text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}]},"doc://SpaceKit/tutorials/SpaceKit/AsyncCalls":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls","type":"topic","kind":"project","title":"Interacting with Contracts Across Shards","abstract":[{"text":"Blockchain platforms using SpaceVM enable seamless execution within a sharded environment. Sharding divides a blockchain’s global state and validation workload into smaller, manageable units known as shards. This method enhances scalability without compromising decentralization, allowing nodes to operate without significant computational resources.","type":"text"}],"role":"project","estimatedTime":"15min","url":"\/tutorials\/spacekit\/asynccalls"},"doc://SpaceKit/tutorials/SpaceKit/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract":{"type":"section","abstract":[{"type":"text","text":"Before writing your first smart contract with SpaceKit, ensure you have the necessary tools installed."}],"url":"\/tutorials\/spacekit\/installingtools#Initializing-and-Compiling-Your-First-Smart-Contract","role":"pseudoSymbol","title":"Initializing and Compiling Your First Smart Contract","kind":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Initializing-and-Compiling-Your-First-Smart-Contract"},"doc://SpaceKit/tutorials/SpaceKit/GetInfo#Accessing-Transaction-Context-Data":{"abstract":[{"type":"text","text":"Many smart contracts rely on contextual data to execute their operations effectively. This data can include input payments, the caller’s address, the current time, the balance of a specific account, or even the contract owner."}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo#Accessing-Transaction-Context-Data","role":"pseudoSymbol","kind":"section","title":"Accessing Transaction Context Data","type":"section","url":"\/tutorials\/spacekit\/getinfo#Accessing-Transaction-Context-Data"},"FamiliarizeWithTypesSection5Step3.swift":{"fileType":"swift","content":["import SpaceKit","","@Contract struct MyContract {","    public func myEndpoint(myStruct: MyStruct) {","        \/\/ Do what you want here","    }","}"],"highlights":[],"identifier":"FamiliarizeWithTypesSection5Step3.swift","fileName":"lib.swift","type":"file","syntax":"swift"},"FamiliarizeWithTypesSection5Step2.swift":{"type":"file","fileType":"swift","highlights":[{"line":3}],"fileName":"struct.swift","syntax":"swift","content":["import SpaceKit","","@Codable struct MyStruct {","    let myBiguint: BigUint","    let myInteger: UInt64","    let myBuffer: Buffer","}"],"identifier":"FamiliarizeWithTypesSection5Step2.swift"},"doc://SpaceKit/tutorials/SpaceKit/StoreValues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage":{"title":"Leveraging @Mapping for Dynamic Key-Value Storage","type":"section","kind":"section","abstract":[{"text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory.","type":"text"}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage","url":"\/tutorials\/spacekit\/storevalues#Leveraging-Mapping-for-Dynamic-Key-Value-Storage","role":"pseudoSymbol"},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Creating-Your-Own-Types":{"role":"pseudoSymbol","title":"Creating Your Own Types","kind":"section","type":"section","abstract":[{"text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Creating-Your-Own-Types","url":"\/tutorials\/spacekit\/familiarizewithtypes#Creating-Your-Own-Types"},"doc://SpaceKit/tutorials/SpaceKit/InstallingTools#Installing-SpaceKits-Dependencies":{"title":"Installing SpaceKit's Dependencies","type":"section","kind":"section","abstract":[{"text":"Before writing your first smart contract with SpaceKit, ensure you have the necessary tools installed.","type":"text"}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools#Installing-SpaceKits-Dependencies","url":"\/tutorials\/spacekit\/installingtools#Installing-SpaceKits-Dependencies","role":"pseudoSymbol"},"FamiliarizeWithTypesSection3Step5.swift":{"fileType":"swift","content":["import SpaceKit","","@Contract struct MyContract {","    public func myEndpoint() {","        let initialNumber: BigUint = 5","        ","        var result = initialNumber + 3","        result = result * 7","        result = result + initialNumber * 3","    }","}"],"highlights":[{"line":9}],"identifier":"FamiliarizeWithTypesSection3Step5.swift","fileName":"lib.swift","type":"file","syntax":"swift"},"FamiliarizeWithTypesSection1Step4.swift":{"type":"file","fileType":"swift","highlights":[{"line":9},{"line":10},{"line":11},{"line":12}],"fileName":"lib.swift","syntax":"swift","content":["import SpaceKit","","@Contract struct MyContract {","    public func myEndpoint() {","        let myString: String = \"Hey!\" \/\/ Won't compile! ❌","        let myBuffer: Buffer = \"Hey!\" \/\/ Fine ✅","        ","        let myArray: [UInt64] = [4, 8, 100] \/\/ Won't compile! ❌","        var myVector: Vector<UInt64> = Vector() \/\/ Fine ✅","            .appended(4)","            .appended(8)","            .appended(100)","    }","}"],"identifier":"FamiliarizeWithTypesSection1Step4.swift"},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Working-with-the-Vector-Type":{"abstract":[{"type":"text","text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM."}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Working-with-the-Vector-Type","role":"pseudoSymbol","kind":"section","title":"Working with the Vector Type","type":"section","url":"\/tutorials\/spacekit\/familiarizewithtypes#Working-with-the-Vector-Type"},"FamiliarizeWithTypesSection1Step2.swift":{"fileType":"swift","content":["import SpaceKit","","@Contract struct MyContract {","    public func myEndpoint() {","        let myString: String = \"Hey!\" \/\/ Won't compile! ❌","        let myBuffer: Buffer = \"Hey!\" \/\/ Fine ✅","    }","}"],"highlights":[{"line":6}],"identifier":"FamiliarizeWithTypesSection1Step2.swift","fileName":"lib.swift","type":"file","syntax":"swift"},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges":{"title":"Handling Heap Allocation Challenges","type":"section","kind":"section","abstract":[{"text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Handling-Heap-Allocation-Challenges","url":"\/tutorials\/spacekit\/familiarizewithtypes#Handling-Heap-Allocation-Challenges","role":"pseudoSymbol"},"FamiliarizeWithTypesSection4Step1.swift":{"type":"file","fileType":"swift","highlights":[],"fileName":"lib.swift","syntax":"swift","content":["import SpaceKit","","@Contract struct MyContract {","    public func myEndpoint() {","        ","    }","}"],"identifier":"FamiliarizeWithTypesSection4Step1.swift"},"FamiliarizeWithTypesSection1Step5.swift":{"fileType":"swift","content":["import SpaceKit","","@Contract struct MyContract {","    public func myEndpoint() {","        let myString: String = \"Hey!\" \/\/ Won't compile! ❌","        let myBuffer: Buffer = \"Hey!\" \/\/ Fine ✅","        ","        let myArray: [UInt64] = [4, 8, 100] \/\/ Won't compile! ❌","        var myVector: Vector<UInt64> = Vector() \/\/ Fine ✅","            .appended(4)","            .appended(8)","            .appended(100)","        ","        let two = 2 \/\/ Fine ✅","        let ten: UInt64 = 10 \/\/ Fine ✅","        let isTwoEven = true \/\/ Fine ✅","    }","}"],"highlights":[{"line":13},{"line":14},{"line":15},{"line":16}],"identifier":"FamiliarizeWithTypesSection1Step5.swift","fileName":"lib.swift","type":"file","syntax":"swift"},"doc://SpaceKit/tutorials/SpaceKit/GetInfo#Accessing-Blockchain-Context-Data":{"type":"section","title":"Accessing Blockchain Context Data","url":"\/tutorials\/spacekit\/getinfo#Accessing-Blockchain-Context-Data","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo#Accessing-Blockchain-Context-Data","kind":"section","role":"pseudoSymbol","abstract":[{"type":"text","text":"Many smart contracts rely on contextual data to execute their operations effectively. This data can include input payments, the caller’s address, the current time, the balance of a specific account, or even the contract owner."}]},"FamiliarizeWithTypesSection5Step1.swift":{"type":"file","fileType":"swift","highlights":[],"fileName":"struct.swift","syntax":"swift","content":["import SpaceKit","","struct MyStruct {","    let myBiguint: BigUint","    let myInteger: UInt64","    let myBuffer: Buffer","}"],"identifier":"FamiliarizeWithTypesSection5Step1.swift"},"doc://SpaceKit/tutorials/SpaceKit/GetInfo":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/GetInfo","type":"topic","kind":"project","title":"Retrieving Information from the Blockchain","abstract":[{"text":"Many smart contracts rely on contextual data to execute their operations effectively. This data can include input payments, the caller’s address, the current time, the balance of a specific account, or even the contract owner.","type":"text"}],"role":"project","estimatedTime":"10min","url":"\/tutorials\/spacekit\/getinfo"},"doc://SpaceKit/tutorials/SpaceKit/AsyncCalls#Declare-the-Callee-Proxy":{"type":"section","abstract":[{"type":"text","text":"Blockchain platforms using SpaceVM enable seamless execution within a sharded environment. Sharding divides a blockchain’s global state and validation workload into smaller, manageable units known as shards. This method enhances scalability without compromising decentralization, allowing nodes to operate without significant computational resources."}],"url":"\/tutorials\/spacekit\/asynccalls#Declare-the-Callee-Proxy","role":"pseudoSymbol","title":"Declare the Callee Proxy","kind":"section","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls#Declare-the-Callee-Proxy"},"doc://SpaceKit/tutorials/SpaceKit/AsyncCalls#Perform-an-Asynchronous-Call":{"role":"pseudoSymbol","title":"Perform an Asynchronous Call","kind":"section","type":"section","abstract":[{"text":"Blockchain platforms using SpaceVM enable seamless execution within a sharded environment. Sharding divides a blockchain’s global state and validation workload into smaller, manageable units known as shards. This method enhances scalability without compromising decentralization, allowing nodes to operate without significant computational resources.","type":"text"}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/AsyncCalls#Perform-an-Asynchronous-Call","url":"\/tutorials\/spacekit\/asynccalls#Perform-an-Asynchronous-Call"},"doc://SpaceKit/tutorials/Space/Getting-Started/Building-Your-First-Smart-Contract":{"title":"Building Your First Smart Contract","type":"topic","url":"\/tutorials\/space\/getting-started\/building-your-first-smart-contract","kind":"article","abstract":[],"identifier":"doc:\/\/SpaceKit\/tutorials\/Space\/Getting-Started\/Building-Your-First-Smart-Contract","role":"article"},"doc://SpaceKit/tutorials/SpaceKit/CodingYourFirstContract#Writing-the-Contract-Code":{"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Writing-the-Contract-Code","type":"section","kind":"section","title":"Writing the Contract Code","abstract":[{"text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user.","type":"text"}],"role":"pseudoSymbol","url":"\/tutorials\/spacekit\/codingyourfirstcontract#Writing-the-Contract-Code"},"doc://SpaceKit/tutorials/SpaceKit/CodingYourFirstContract":{"role":"project","estimatedTime":"20min","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract","type":"topic","title":"Building Your First Smart Contract","abstract":[{"type":"text","text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user."}],"kind":"project","url":"\/tutorials\/spacekit\/codingyourfirstcontract"},"doc://SpaceKit/tutorials/SpaceKit/CodingYourFirstContract#Initializing-the-Project":{"title":"Initializing the Project","type":"section","kind":"section","abstract":[{"text":"In this chapter, you’ll create a simple smart contract that manages a counter, which can be incremented or decremented by any user.","type":"text"}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/CodingYourFirstContract#Initializing-the-Project","url":"\/tutorials\/spacekit\/codingyourfirstcontract#Initializing-the-Project","role":"pseudoSymbol"},"FamiliarizeWithTypesSection4Step2.swift":{"fileType":"swift","content":["import SpaceKit","","@Contract struct MyContract {","    public func myEndpoint() {","        var myVector: Vector<BigUint> = Vector()","    }","}"],"highlights":[{"line":5}],"identifier":"FamiliarizeWithTypesSection4Step2.swift","fileName":"lib.swift","type":"file","syntax":"swift"},"doc://SpaceKit/tutorials/Space/Deep-Dive-into-SpaceKit-Concepts/Exploring-SpaceKit's-Types":{"abstract":[],"identifier":"doc:\/\/SpaceKit\/tutorials\/Space\/Deep-Dive-into-SpaceKit-Concepts\/Exploring-SpaceKit's-Types","role":"article","kind":"article","title":"Exploring SpaceKit's Types","type":"topic","url":"\/tutorials\/space\/deep-dive-into-spacekit-concepts\/exploring-spacekit's-types"},"doc://SpaceKit/tutorials/Space/Deep-Dive-into-SpaceKit-Concepts/Persisting-Data-Across-Executions":{"title":"Persisting Data Across Executions","type":"topic","kind":"article","abstract":[],"identifier":"doc:\/\/SpaceKit\/tutorials\/Space\/Deep-Dive-into-SpaceKit-Concepts\/Persisting-Data-Across-Executions","url":"\/tutorials\/space\/deep-dive-into-spacekit-concepts\/persisting-data-across-executions","role":"article"},"doc://SpaceKit/tutorials/Space/Deep-Dive-into-SpaceKit-Concepts/Calling-Contracts-Across-Shards":{"abstract":[],"url":"\/tutorials\/space\/deep-dive-into-spacekit-concepts\/calling-contracts-across-shards","type":"topic","role":"article","identifier":"doc:\/\/SpaceKit\/tutorials\/Space\/Deep-Dive-into-SpaceKit-Concepts\/Calling-Contracts-Across-Shards","title":"Calling Contracts Across Shards","kind":"article"},"doc://SpaceKit/tutorials/Space":{"kind":"overview","type":"topic","url":"\/tutorials\/space","identifier":"doc:\/\/SpaceKit\/tutorials\/Space","role":"overview","title":"Meet SpaceKit","abstract":[{"text":"Discover how SpaceKit simplifies blockchain development using Swift. Dive into the world of Web3 with ease and efficiency.","type":"text"}]},"doc://SpaceKit/tutorials/SpaceKit/FamiliarizeWithTypes#Understanding-the-Buffer-Type":{"role":"pseudoSymbol","title":"Understanding the Buffer Type","kind":"section","type":"section","abstract":[{"text":"SpaceKit provides types that allow you to leverage the full potential of the SpaceVM.","type":"text"}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/FamiliarizeWithTypes#Understanding-the-Buffer-Type","url":"\/tutorials\/spacekit\/familiarizewithtypes#Understanding-the-Buffer-Type"},"doc://SpaceKit/tutorials/SpaceKit/InstallingTools":{"role":"project","estimatedTime":"10min","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/InstallingTools","type":"topic","title":"Install the Necessary Tools","abstract":[{"type":"text","text":"Before writing your first smart contract with SpaceKit, ensure you have the necessary tools installed."}],"kind":"project","url":"\/tutorials\/spacekit\/installingtools"},"doc://SpaceKit/tutorials/SpaceKit/SyncCalls":{"abstract":[{"type":"text","text":"Smart contracts can interact not only with users but also with other smart contracts. This enables more advanced protocols by leveraging existing ones. For example, you could integrate a decentralized exchange directly into your contract to perform token swaps. Decentralized applications often involve multiple contracts, each with a dedicated role, working together to achieve complex functionality—similar to microservices in backend systems."}],"identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/SyncCalls","estimatedTime":"15min","role":"project","kind":"project","title":"Interact with Other Contracts","type":"topic","url":"\/tutorials\/spacekit\/synccalls"},"FamiliarizeWithTypesSection2Step3.swift":{"type":"file","fileType":"swift","highlights":[{"line":6}],"fileName":"lib.swift","syntax":"swift","content":["import SpaceKit","","@Contract struct MyContract {","    public func myEndpoint() {","        var myBuffer: Buffer = \"Hello\"","        myBuffer = myBuffer.appended(\" World!\")","    }","}"],"identifier":"FamiliarizeWithTypesSection2Step3.swift"},"FamiliarizeWithTypesSection3Step3.swift":{"fileType":"swift","content":["import SpaceKit","","@Contract struct MyContract {","    public func myEndpoint() {","        let initialNumber: BigUint = 5","        ","        var result = initialNumber + 3","    }","}"],"highlights":[{"line":6},{"line":7}],"identifier":"FamiliarizeWithTypesSection3Step3.swift","fileName":"lib.swift","type":"file","syntax":"swift"},"doc://SpaceKit/tutorials/SpaceKit/StoreValues#Working-with-Storage-for-Single-Value-Persistence":{"abstract":[{"text":"Each time a smart contract is invoked, it runs a single operation. The contract is temporarily loaded into the SpaceVM memory, the operation is executed, and then the contract is removed from memory.","type":"text"}],"url":"\/tutorials\/spacekit\/storevalues#Working-with-Storage-for-Single-Value-Persistence","type":"section","role":"pseudoSymbol","identifier":"doc:\/\/SpaceKit\/tutorials\/SpaceKit\/StoreValues#Working-with-Storage-for-Single-Value-Persistence","title":"Working with @Storage for Single Value Persistence","kind":"section"},"FamiliarizeWithTypesSection4Step4.swift":{"type":"file","fileType":"swift","highlights":[{"line":9},{"line":10},{"line":11},{"line":12},{"line":13}],"fileName":"lib.swift","syntax":"swift","content":["import SpaceKit","","@Contract struct MyContract {","    public func myEndpoint() {","        var myVector: Vector<BigUint> = Vector()","        myVector = myVector.appended(2)","        myVector = myVector.appended(10)","        myVector = myVector.appended(1)","        ","        var sum: BigUint = 0","        myVector.forEach { item in","            sum = sum + item","        }","    }","}"],"identifier":"FamiliarizeWithTypesSection4Step4.swift"}}}