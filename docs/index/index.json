{"includedArchiveIdentifiers":["Space"],"interfaceLanguages":{"swift":[{"children":[{"title":"Installing the Tools","type":"groupMarker"},{"path":"\/tutorials\/space\/installingtools","title":"Install the Necessary Tools","type":"project"},{"title":"Building Your First Smart Contract","type":"groupMarker"},{"path":"\/tutorials\/space\/codingyourfirstcontract","title":"Building Your First Smart Contract","type":"project"}],"path":"\/tutorials\/gettingstarted","title":"Meet Space","type":"overview"},{"children":[{"title":"Classes","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/space\/contracttestcase\/initialaccounts","title":"var initialAccounts: [WorldAccount]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/contracttestcase\/getaccount(address:)","title":"func getAccount(address: String) -> WorldAccount?","type":"method"},{"path":"\/documentation\/space\/contracttestcase\/setup()","title":"func setUp()","type":"method"},{"path":"\/documentation\/space\/contracttestcase\/teardown()","title":"func tearDown()","type":"method"}],"path":"\/documentation\/space\/contracttestcase","title":"ContractTestCase","type":"class"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/dummyapi\/buffergetargument(argid:bufferhandle:)","title":"func bufferGetArgument(argId: Int32, bufferHandle: Int32) -> Int32","type":"method"},{"path":"\/documentation\/space\/dummyapi\/buffergetbytes(handle:resultpointer:)","title":"func bufferGetBytes(handle: Int32, resultPointer: UnsafeRawPointer) -> Int32","type":"method"},{"path":"\/documentation\/space\/dummyapi\/buffergetlength(handle:)","title":"func bufferGetLength(handle: Int32) -> Int32","type":"method"},{"path":"\/documentation\/space\/dummyapi\/managedupgradefromsourcecontract(dsthandle:gas:valuehandle:addresshandle:codemetadatahandle:argumentshandle:resulthandle:)","title":"func managedUpgradeFromSourceContract(dstHandle: Int32, gas: Int64, valueHandle: Int32, addressHandle: Int32, codeMetadataHandle: Int32, argumentsHandle: Int32, resultHandle: Int32)","type":"method"},{"path":"\/documentation\/space\/dummyapi\/registercontractendpointselectorforcontractaddress(contractaddress:selector:)","title":"func registerContractEndpointSelectorForContractAddress(contractAddress: Data, selector: any ContractEndpointSelector)","type":"method"},{"path":"\/documentation\/space\/dummyapi\/setcurrentscowneraddress(owner:)","title":"func setCurrentSCOwnerAddress(owner: Data)","type":"method"},{"path":"\/documentation\/space\/dummyapi\/throwfunctionnotfounderror()","title":"func throwFunctionNotFoundError() -> Never","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/dummyapi\/bigintadd(desthandle:lhshandle:rhshandle:)","title":"func bigIntAdd(destHandle: Int32, lhsHandle: Int32, rhsHandle: Int32)","type":"method"},{"path":"\/documentation\/space\/dummyapi\/bigintcompare(lhshandle:rhshandle:)","title":"func bigIntCompare(lhsHandle: Int32, rhsHandle: Int32) -> Int32","type":"method"},{"path":"\/documentation\/space\/dummyapi\/bigintgetint64(reference:)","title":"func bigIntGetInt64(reference: Int32) -> Int64?","type":"method"},{"path":"\/documentation\/space\/dummyapi\/bigintgetint64unsafe(reference:)","title":"func bigIntGetInt64Unsafe(reference: Int32) -> Int64","type":"method"},{"path":"\/documentation\/space\/dummyapi\/bigintisint64(reference:)","title":"func bigIntIsInt64(reference: Int32) -> Int32","type":"method"},{"path":"\/documentation\/space\/dummyapi\/bigintmul(desthandle:lhshandle:rhshandle:)","title":"func bigIntMul(destHandle: Int32, lhsHandle: Int32, rhsHandle: Int32)","type":"method"},{"path":"\/documentation\/space\/dummyapi\/bigintsetint64(destination:value:)","title":"func bigIntSetInt64(destination: Int32, value: Int64)","type":"method"},{"path":"\/documentation\/space\/dummyapi\/bigintsub(desthandle:lhshandle:rhshandle:)","title":"func bigIntSub(destHandle: Int32, lhsHandle: Int32, rhsHandle: Int32)","type":"method"},{"path":"\/documentation\/space\/dummyapi\/biginttdiv(desthandle:lhshandle:rhshandle:)","title":"func bigIntTDiv(destHandle: Int32, lhsHandle: Int32, rhsHandle: Int32)","type":"method"},{"path":"\/documentation\/space\/dummyapi\/biginttmod(desthandle:lhshandle:rhshandle:)","title":"func bigIntTMod(destHandle: Int32, lhsHandle: Int32, rhsHandle: Int32)","type":"method"},{"path":"\/documentation\/space\/dummyapi\/biginttobuffer(biginthandle:desthandle:)","title":"func bigIntToBuffer(bigIntHandle: Int32, destHandle: Int32)","type":"method"},{"path":"\/documentation\/space\/dummyapi\/biginttostring(biginthandle:desthandle:)","title":"func bigIntToString(bigIntHandle: Int32, destHandle: Int32)","type":"method"}],"path":"\/documentation\/space\/dummyapi\/bigintapiprotocol-implementations","title":"BigIntApiProtocol Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/dummyapi\/bigintgetesdtexternalbalance(addressptr:tokenidoffset:tokenidlen:nonce:dest:)","title":"func bigIntGetESDTExternalBalance(addressPtr: UnsafeRawPointer, tokenIDOffset: UnsafeRawPointer, tokenIDLen: Int32, nonce: Int64, dest: Int32)","type":"method"},{"path":"\/documentation\/space\/dummyapi\/bigintgetexternalbalance(addressptr:dest:)","title":"func bigIntGetExternalBalance(addressPtr: UnsafeRawPointer, dest: Int32)","type":"method"},{"path":"\/documentation\/space\/dummyapi\/getblockepoch()","title":"func getBlockEpoch() -> Int64","type":"method"},{"path":"\/documentation\/space\/dummyapi\/getblockround()","title":"func getBlockRound() -> Int64","type":"method"},{"path":"\/documentation\/space\/dummyapi\/getblocktimestamp()","title":"func getBlockTimestamp() -> Int64","type":"method"},{"path":"\/documentation\/space\/dummyapi\/getcaller(resultoffset:)","title":"func getCaller(resultOffset: UnsafeRawPointer)","type":"method"},{"path":"\/documentation\/space\/dummyapi\/getesdtlocalroles(tokenidhandle:)","title":"func getESDTLocalRoles(tokenIdHandle: Int32) -> Int64","type":"method"},{"path":"\/documentation\/space\/dummyapi\/getgasleft()","title":"func getGasLeft() -> Int64","type":"method"},{"path":"\/documentation\/space\/dummyapi\/managedgetblockrandomseed(resulthandle:)","title":"func managedGetBlockRandomSeed(resultHandle: Int32)","type":"method"},{"path":"\/documentation\/space\/dummyapi\/managedgetoriginaltxhash(resulthandle:)","title":"func managedGetOriginalTxHash(resultHandle: Int32)","type":"method"},{"path":"\/documentation\/space\/dummyapi\/managedowneraddress(resulthandle:)","title":"func managedOwnerAddress(resultHandle: Int32)","type":"method"},{"path":"\/documentation\/space\/dummyapi\/managedscaddress(resulthandle:)","title":"func managedSCAddress(resultHandle: Int32)","type":"method"}],"path":"\/documentation\/space\/dummyapi\/blockchainapiprotocol-implementations","title":"BlockchainApiProtocol Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/dummyapi\/bufferappend(accumulatorhandle:datahandle:)","title":"func bufferAppend(accumulatorHandle: Int32, dataHandle: Int32) -> Int32","type":"method"},{"path":"\/documentation\/space\/dummyapi\/buffercopybyteslice(sourcehandle:startingposition:slicelength:destinationhandle:)","title":"func bufferCopyByteSlice(sourceHandle: Int32, startingPosition: Int32, sliceLength: Int32, destinationHandle: Int32) -> Int32","type":"method"},{"path":"\/documentation\/space\/dummyapi\/bufferequal(handle1:handle2:)","title":"func bufferEqual(handle1: Int32, handle2: Int32) -> Int32","type":"method"},{"path":"\/documentation\/space\/dummyapi\/bufferfinish(handle:)","title":"func bufferFinish(handle: Int32) -> Int32","type":"method"},{"path":"\/documentation\/space\/dummyapi\/bufferfrombigintunsigned(bufferhandle:biginthandle:)","title":"func bufferFromBigIntUnsigned(bufferHandle: Int32, bigIntHandle: Int32) -> Int32","type":"method"},{"path":"\/documentation\/space\/dummyapi\/buffersetbytes(handle:byteptr:bytelen:)","title":"func bufferSetBytes(handle: Int32, bytePtr: UnsafeRawPointer, byteLen: Int32) -> Int32","type":"method"},{"path":"\/documentation\/space\/dummyapi\/buffertobigintunsigned(bufferhandle:biginthandle:)","title":"func bufferToBigIntUnsigned(bufferHandle: Int32, bigIntHandle: Int32) -> Int32","type":"method"},{"path":"\/documentation\/space\/dummyapi\/buffertodebugstring(handle:)","title":"func bufferToDebugString(handle: Int32) -> String","type":"method"},{"path":"\/documentation\/space\/dummyapi\/buffertoutf8string(handle:)","title":"func bufferToUTF8String(handle: Int32) -> String?","type":"method"},{"path":"\/documentation\/space\/dummyapi\/mbufferappendbytes(accumulatorhandle:byte_ptr:byte_len:)","title":"func mBufferAppendBytes(accumulatorHandle: Int32, byte_ptr: UnsafeRawPointer, byte_len: Int32) -> Int32","type":"method"},{"path":"\/documentation\/space\/dummyapi\/mbuffersetbyteslice(mbufferhandle:startingposition:datalength:dataoffset:)","title":"func mBufferSetByteSlice(mBufferHandle: Int32, startingPosition: Int32, dataLength: Int32, dataOffset: UnsafeRawPointer) -> Int32","type":"method"},{"path":"\/documentation\/space\/dummyapi\/mbuffersetrandom(destinationhandle:length:)","title":"func mBufferSetRandom(destinationHandle: Int32, length: Int32) -> Int32","type":"method"},{"path":"\/documentation\/space\/dummyapi\/managedbuffertohex(sourcehandle:destinationhandle:)","title":"func managedBufferToHex(sourceHandle: Int32, destinationHandle: Int32)","type":"method"}],"path":"\/documentation\/space\/dummyapi\/bufferapiprotocol-implementations","title":"BufferApiProtocol Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/dummyapi\/bigintgetcallvalue(dest:)","title":"func bigIntGetCallValue(dest: Int32)","type":"method"},{"path":"\/documentation\/space\/dummyapi\/managedgetmultiesdtcallvalue(resulthandle:)","title":"func managedGetMultiESDTCallValue(resultHandle: Int32)","type":"method"}],"path":"\/documentation\/space\/dummyapi\/callvalueapiprotocol-implementations","title":"CallValueApiProtocol Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/dummyapi\/managedsha256(inputhandle:outputhandle:)","title":"func managedSha256(inputHandle: Int32, outputHandle: Int32) -> Int32","type":"method"},{"path":"\/documentation\/space\/dummyapi\/managedverifyed25519(keyhandle:messagehandle:sighandle:)","title":"func managedVerifyEd25519(keyHandle: Int32, messageHandle: Int32, sigHandle: Int32) -> Int32","type":"method"}],"path":"\/documentation\/space\/dummyapi\/cryptoapiprotocol-implementations","title":"CryptoApiProtocol Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/dummyapi\/getnumarguments()","title":"func getNumArguments() -> Int32","type":"method"},{"path":"\/documentation\/space\/dummyapi\/managedgetcallbackclosure(callbackclosurehandle:)","title":"func managedGetCallbackClosure(callbackClosureHandle: Int32)","type":"method"}],"path":"\/documentation\/space\/dummyapi\/endpointapiprotocol-implementations","title":"EndpointApiProtocol Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/dummyapi\/managedsignalerror(messagehandle:)","title":"func managedSignalError(messageHandle: Int32) -> Never","type":"method"}],"path":"\/documentation\/space\/dummyapi\/errorapiprotocol-implementations","title":"ErrorApiProtocol Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/dummyapi\/managedwritelog(topicshandle:datahandle:)","title":"func managedWriteLog(topicsHandle: Int32, dataHandle: Int32)","type":"method"}],"path":"\/documentation\/space\/dummyapi\/logapiprotocol-implementations","title":"LogApiProtocol Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/dummyapi\/cleanreturndata()","title":"func cleanReturnData()","type":"method"},{"path":"\/documentation\/space\/dummyapi\/managedcreateasynccall(dsthandle:valuehandle:functionhandle:argumentshandle:successoffset:successlength:erroroffset:errorlength:gas:extragasforcallback:callbackclosurehandle:)","title":"func managedCreateAsyncCall(dstHandle: Int32, valueHandle: Int32, functionHandle: Int32, argumentsHandle: Int32, successOffset: UnsafeRawPointer, successLength: Int32, errorOffset: UnsafeRawPointer, errorLength: Int32, gas: Int64, extraGasForCallback: Int64, callbackClosureHandle: Int32) -> Int32","type":"method"},{"path":"\/documentation\/space\/dummyapi\/manageddeployfromsourcecontract(gas:valuehandle:addresshandle:codemetadatahandle:argumentshandle:resultaddresshandle:resulthandle:)","title":"func managedDeployFromSourceContract(gas: Int64, valueHandle: Int32, addressHandle: Int32, codeMetadataHandle: Int32, argumentsHandle: Int32, resultAddressHandle: Int32, resultHandle: Int32) -> Int32","type":"method"},{"path":"\/documentation\/space\/dummyapi\/managedexecuteondestcontext(gas:addresshandle:valuehandle:functionhandle:argumentshandle:resulthandle:)","title":"func managedExecuteOnDestContext(gas: Int64, addressHandle: Int32, valueHandle: Int32, functionHandle: Int32, argumentsHandle: Int32, resultHandle: Int32) -> Int32","type":"method"},{"path":"\/documentation\/space\/dummyapi\/managedmultitransferesdtnftexecute(dsthandle:tokentransfershandle:gaslimit:functionhandle:argumentshandle:)","title":"func managedMultiTransferESDTNFTExecute(dstHandle: Int32, tokenTransfersHandle: Int32, gasLimit: Int64, functionHandle: Int32, argumentsHandle: Int32) -> Int32","type":"method"},{"path":"\/documentation\/space\/dummyapi\/managedtransfervalueexecute(dsthandle:valuehandle:gaslimit:functionhandle:argumentshandle:)","title":"func managedTransferValueExecute(dstHandle: Int32, valueHandle: Int32, gasLimit: Int64, functionHandle: Int32, argumentsHandle: Int32) -> Int32","type":"method"}],"path":"\/documentation\/space\/dummyapi\/sendapiprotocol-implementations","title":"SendApiProtocol Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/dummyapi\/bufferstorageload(keyhandle:bufferhandle:)","title":"func bufferStorageLoad(keyHandle: Int32, bufferHandle: Int32) -> Int32","type":"method"},{"path":"\/documentation\/space\/dummyapi\/bufferstoragestore(keyhandle:bufferhandle:)","title":"func bufferStorageStore(keyHandle: Int32, bufferHandle: Int32) -> Int32","type":"method"}],"path":"\/documentation\/space\/dummyapi\/storageapiprotocol-implementations","title":"StorageApiProtocol Implementations","type":"symbol"}],"path":"\/documentation\/space\/dummyapi","title":"DummyApi","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/transactionoutput\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/transactionoutput\/getlogs()","title":"func getLogs() -> [TransactionOutputLog]","type":"method"}],"path":"\/documentation\/space\/transactionoutput","title":"TransactionOutput","type":"class"},{"title":"Protocols","type":"groupMarker"},{"path":"\/documentation\/space\/apiprotocol","title":"ApiProtocol","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/arrayitem\/intoarraypayload()","title":"func intoArrayPayload() -> Buffer","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/space\/arrayitem\/payloadsize","title":"static var payloadSize: Int32","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/space\/arrayitem\/decodearraypayload(payload:)","title":"static func decodeArrayPayload(payload: Buffer) -> Self","type":"method"}],"path":"\/documentation\/space\/arrayitem","title":"ArrayItem","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/bigintapiprotocol\/bigintadd(desthandle:lhshandle:rhshandle:)","title":"func bigIntAdd(destHandle: Int32, lhsHandle: Int32, rhsHandle: Int32)","type":"method"},{"path":"\/documentation\/space\/bigintapiprotocol\/bigintcompare(lhshandle:rhshandle:)","title":"func bigIntCompare(lhsHandle: Int32, rhsHandle: Int32) -> Int32","type":"method"},{"children":[{"children":[{"path":"\/documentation\/space\/bigintapiprotocol\/bigintgetint64(reference:)-7pl2w","title":"func bigIntGetInt64(reference: Int32) -> Int64?","type":"method"}],"title":"BigIntApiProtocol Implementations","type":"groupMarker"}],"path":"\/documentation\/space\/bigintapiprotocol\/bigintgetint64(reference:)-1dbk4","title":"func bigIntGetInt64(reference: Int32) -> Int64?","type":"method"},{"path":"\/documentation\/space\/bigintapiprotocol\/bigintgetint64unsafe(reference:)","title":"func bigIntGetInt64Unsafe(reference: Int32) -> Int64","type":"method"},{"path":"\/documentation\/space\/bigintapiprotocol\/bigintisint64(reference:)","title":"func bigIntIsInt64(reference: Int32) -> Int32","type":"method"},{"path":"\/documentation\/space\/bigintapiprotocol\/bigintmul(desthandle:lhshandle:rhshandle:)","title":"func bigIntMul(destHandle: Int32, lhsHandle: Int32, rhsHandle: Int32)","type":"method"},{"path":"\/documentation\/space\/bigintapiprotocol\/bigintsetint64(destination:value:)","title":"func bigIntSetInt64(destination: Int32, value: Int64)","type":"method"},{"path":"\/documentation\/space\/bigintapiprotocol\/bigintsub(desthandle:lhshandle:rhshandle:)","title":"func bigIntSub(destHandle: Int32, lhsHandle: Int32, rhsHandle: Int32)","type":"method"},{"path":"\/documentation\/space\/bigintapiprotocol\/biginttdiv(desthandle:lhshandle:rhshandle:)","title":"func bigIntTDiv(destHandle: Int32, lhsHandle: Int32, rhsHandle: Int32)","type":"method"},{"path":"\/documentation\/space\/bigintapiprotocol\/biginttmod(desthandle:lhshandle:rhshandle:)","title":"func bigIntTMod(destHandle: Int32, lhsHandle: Int32, rhsHandle: Int32)","type":"method"},{"path":"\/documentation\/space\/bigintapiprotocol\/biginttobuffer(biginthandle:desthandle:)","title":"func bigIntToBuffer(bigIntHandle: Int32, destHandle: Int32)","type":"method"},{"path":"\/documentation\/space\/bigintapiprotocol\/biginttostring(biginthandle:desthandle:)","title":"func bigIntToString(bigIntHandle: Int32, destHandle: Int32)","type":"method"}],"path":"\/documentation\/space\/bigintapiprotocol","title":"BigIntApiProtocol","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/blockchainapiprotocol\/bigintgetesdtexternalbalance(addressptr:tokenidoffset:tokenidlen:nonce:dest:)","title":"func bigIntGetESDTExternalBalance(addressPtr: UnsafeRawPointer, tokenIDOffset: UnsafeRawPointer, tokenIDLen: Int32, nonce: Int64, dest: Int32)","type":"method"},{"path":"\/documentation\/space\/blockchainapiprotocol\/bigintgetexternalbalance(addressptr:dest:)","title":"func bigIntGetExternalBalance(addressPtr: UnsafeRawPointer, dest: Int32)","type":"method"},{"path":"\/documentation\/space\/blockchainapiprotocol\/getblockepoch()","title":"func getBlockEpoch() -> Int64","type":"method"},{"path":"\/documentation\/space\/blockchainapiprotocol\/getblockround()","title":"func getBlockRound() -> Int64","type":"method"},{"path":"\/documentation\/space\/blockchainapiprotocol\/getblocktimestamp()","title":"func getBlockTimestamp() -> Int64","type":"method"},{"path":"\/documentation\/space\/blockchainapiprotocol\/getcaller(resultoffset:)","title":"func getCaller(resultOffset: UnsafeRawPointer)","type":"method"},{"path":"\/documentation\/space\/blockchainapiprotocol\/getesdtlocalroles(tokenidhandle:)","title":"func getESDTLocalRoles(tokenIdHandle: Int32) -> Int64","type":"method"},{"path":"\/documentation\/space\/blockchainapiprotocol\/getgasleft()","title":"func getGasLeft() -> Int64","type":"method"},{"path":"\/documentation\/space\/blockchainapiprotocol\/managedgetblockrandomseed(resulthandle:)","title":"func managedGetBlockRandomSeed(resultHandle: Int32)","type":"method"},{"path":"\/documentation\/space\/blockchainapiprotocol\/managedgetoriginaltxhash(resulthandle:)","title":"func managedGetOriginalTxHash(resultHandle: Int32)","type":"method"},{"path":"\/documentation\/space\/blockchainapiprotocol\/managedowneraddress(resulthandle:)","title":"func managedOwnerAddress(resultHandle: Int32)","type":"method"},{"path":"\/documentation\/space\/blockchainapiprotocol\/managedscaddress(resulthandle:)","title":"func managedSCAddress(resultHandle: Int32)","type":"method"}],"path":"\/documentation\/space\/blockchainapiprotocol","title":"BlockchainApiProtocol","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/bufferapiprotocol\/bufferappend(accumulatorhandle:datahandle:)","title":"func bufferAppend(accumulatorHandle: Int32, dataHandle: Int32) -> Int32","type":"method"},{"path":"\/documentation\/space\/bufferapiprotocol\/buffercopybyteslice(sourcehandle:startingposition:slicelength:destinationhandle:)","title":"func bufferCopyByteSlice(sourceHandle: Int32, startingPosition: Int32, sliceLength: Int32, destinationHandle: Int32) -> Int32","type":"method"},{"path":"\/documentation\/space\/bufferapiprotocol\/bufferequal(handle1:handle2:)","title":"func bufferEqual(handle1: Int32, handle2: Int32) -> Int32","type":"method"},{"path":"\/documentation\/space\/bufferapiprotocol\/bufferfinish(handle:)","title":"func bufferFinish(handle: Int32) -> Int32","type":"method"},{"path":"\/documentation\/space\/bufferapiprotocol\/bufferfrombigintunsigned(bufferhandle:biginthandle:)","title":"func bufferFromBigIntUnsigned(bufferHandle: Int32, bigIntHandle: Int32) -> Int32","type":"method"},{"path":"\/documentation\/space\/bufferapiprotocol\/buffersetbytes(handle:byteptr:bytelen:)","title":"func bufferSetBytes(handle: Int32, bytePtr: UnsafeRawPointer, byteLen: Int32) -> Int32","type":"method"},{"path":"\/documentation\/space\/bufferapiprotocol\/buffertobigintunsigned(bufferhandle:biginthandle:)","title":"func bufferToBigIntUnsigned(bufferHandle: Int32, bigIntHandle: Int32) -> Int32","type":"method"},{"path":"\/documentation\/space\/bufferapiprotocol\/buffertodebugstring(handle:)","title":"func bufferToDebugString(handle: Int32) -> String","type":"method"},{"path":"\/documentation\/space\/bufferapiprotocol\/buffertoutf8string(handle:)","title":"func bufferToUTF8String(handle: Int32) -> String?","type":"method"},{"path":"\/documentation\/space\/bufferapiprotocol\/mbufferappendbytes(accumulatorhandle:byte_ptr:byte_len:)","title":"func mBufferAppendBytes(accumulatorHandle: Int32, byte_ptr: UnsafeRawPointer, byte_len: Int32) -> Int32","type":"method"},{"path":"\/documentation\/space\/bufferapiprotocol\/mbuffersetbyteslice(mbufferhandle:startingposition:datalength:dataoffset:)","title":"func mBufferSetByteSlice(mBufferHandle: Int32, startingPosition: Int32, dataLength: Int32, dataOffset: UnsafeRawPointer) -> Int32","type":"method"},{"path":"\/documentation\/space\/bufferapiprotocol\/mbuffersetrandom(destinationhandle:length:)","title":"func mBufferSetRandom(destinationHandle: Int32, length: Int32) -> Int32","type":"method"},{"path":"\/documentation\/space\/bufferapiprotocol\/managedbuffertohex(sourcehandle:destinationhandle:)","title":"func managedBufferToHex(sourceHandle: Int32, destinationHandle: Int32)","type":"method"}],"path":"\/documentation\/space\/bufferapiprotocol","title":"BufferApiProtocol","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/callvalueapiprotocol\/bigintgetcallvalue(dest:)","title":"func bigIntGetCallValue(dest: Int32)","type":"method"},{"path":"\/documentation\/space\/callvalueapiprotocol\/managedgetmultiesdtcallvalue(resulthandle:)","title":"func managedGetMultiESDTCallValue(resultHandle: Int32)","type":"method"}],"path":"\/documentation\/space\/callvalueapiprotocol","title":"CallValueApiProtocol","type":"protocol"},{"path":"\/documentation\/space\/contractendpointselector","title":"ContractEndpointSelector","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/cryptoapiprotocol\/managedsha256(inputhandle:outputhandle:)","title":"func managedSha256(inputHandle: Int32, outputHandle: Int32) -> Int32","type":"method"},{"path":"\/documentation\/space\/cryptoapiprotocol\/managedverifyed25519(keyhandle:messagehandle:sighandle:)","title":"func managedVerifyEd25519(keyHandle: Int32, messageHandle: Int32, sigHandle: Int32) -> Int32","type":"method"}],"path":"\/documentation\/space\/cryptoapiprotocol","title":"CryptoApiProtocol","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/endpointapiprotocol\/getnumarguments()","title":"func getNumArguments() -> Int32","type":"method"},{"path":"\/documentation\/space\/endpointapiprotocol\/managedgetcallbackclosure(callbackclosurehandle:)","title":"func managedGetCallbackClosure(callbackClosureHandle: Int32)","type":"method"}],"path":"\/documentation\/space\/endpointapiprotocol","title":"EndpointApiProtocol","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/errorapiprotocol\/managedsignalerror(messagehandle:)","title":"func managedSignalError(messageHandle: Int32) -> Never","type":"method"}],"path":"\/documentation\/space\/errorapiprotocol","title":"ErrorApiProtocol","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/logapiprotocol\/managedwritelog(topicshandle:datahandle:)","title":"func managedWriteLog(topicsHandle: Int32, dataHandle: Int32)","type":"method"}],"path":"\/documentation\/space\/logapiprotocol","title":"LogApiProtocol","type":"protocol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/nesteddecode\/init(depdecode:)","title":"init(depDecode: inout some NestedDecodeInput)","type":"init"}],"path":"\/documentation\/space\/nesteddecode","title":"NestedDecode","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/nesteddecodeinput\/candecodemore()","title":"func canDecodeMore() -> Bool","type":"method"},{"path":"\/documentation\/space\/nesteddecodeinput\/getentirebuffer()","title":"func getEntireBuffer() -> Buffer","type":"method"},{"path":"\/documentation\/space\/nesteddecodeinput\/readnextbuffer(length:)","title":"func readNextBuffer(length: Int32) -> Buffer","type":"method"},{"path":"\/documentation\/space\/nesteddecodeinput\/readnextbufferofdynamiclength()","title":"func readNextBufferOfDynamicLength() -> Buffer","type":"method"}],"path":"\/documentation\/space\/nesteddecodeinput","title":"NestedDecodeInput","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/nestedencode\/depencode(dest:)","title":"func depEncode<O>(dest: inout O)","type":"method"}],"path":"\/documentation\/space\/nestedencode","title":"NestedEncode","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/nestedencodeoutput\/write(buffer:)","title":"func write(buffer: Buffer)","type":"method"}],"path":"\/documentation\/space\/nestedencodeoutput","title":"NestedEncodeOutput","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/sendapiprotocol\/cleanreturndata()","title":"func cleanReturnData()","type":"method"},{"path":"\/documentation\/space\/sendapiprotocol\/managedcreateasynccall(dsthandle:valuehandle:functionhandle:argumentshandle:successoffset:successlength:erroroffset:errorlength:gas:extragasforcallback:callbackclosurehandle:)","title":"func managedCreateAsyncCall(dstHandle: Int32, valueHandle: Int32, functionHandle: Int32, argumentsHandle: Int32, successOffset: UnsafeRawPointer, successLength: Int32, errorOffset: UnsafeRawPointer, errorLength: Int32, gas: Int64, extraGasForCallback: Int64, callbackClosureHandle: Int32) -> Int32","type":"method"},{"path":"\/documentation\/space\/sendapiprotocol\/manageddeployfromsourcecontract(gas:valuehandle:addresshandle:codemetadatahandle:argumentshandle:resultaddresshandle:resulthandle:)","title":"func managedDeployFromSourceContract(gas: Int64, valueHandle: Int32, addressHandle: Int32, codeMetadataHandle: Int32, argumentsHandle: Int32, resultAddressHandle: Int32, resultHandle: Int32) -> Int32","type":"method"},{"path":"\/documentation\/space\/sendapiprotocol\/managedexecuteondestcontext(gas:addresshandle:valuehandle:functionhandle:argumentshandle:resulthandle:)","title":"func managedExecuteOnDestContext(gas: Int64, addressHandle: Int32, valueHandle: Int32, functionHandle: Int32, argumentsHandle: Int32, resultHandle: Int32) -> Int32","type":"method"},{"path":"\/documentation\/space\/sendapiprotocol\/managedmultitransferesdtnftexecute(dsthandle:tokentransfershandle:gaslimit:functionhandle:argumentshandle:)","title":"func managedMultiTransferESDTNFTExecute(dstHandle: Int32, tokenTransfersHandle: Int32, gasLimit: Int64, functionHandle: Int32, argumentsHandle: Int32) -> Int32","type":"method"},{"path":"\/documentation\/space\/sendapiprotocol\/managedtransfervalueexecute(dsthandle:valuehandle:gaslimit:functionhandle:argumentshandle:)","title":"func managedTransferValueExecute(dstHandle: Int32, valueHandle: Int32, gasLimit: Int64, functionHandle: Int32, argumentsHandle: Int32) -> Int32","type":"method"}],"path":"\/documentation\/space\/sendapiprotocol","title":"SendApiProtocol","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/space\/spacesequence\/v","title":"V","type":"associatedtype"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/spacesequence\/foreach(_:)","title":"func forEach((Self.V) throws -> Void) rethrows","type":"method"}],"path":"\/documentation\/space\/spacesequence","title":"SpaceSequence","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/storageapiprotocol\/bufferstorageload(keyhandle:bufferhandle:)","title":"func bufferStorageLoad(keyHandle: Int32, bufferHandle: Int32) -> Int32","type":"method"},{"path":"\/documentation\/space\/storageapiprotocol\/bufferstoragestore(keyhandle:bufferhandle:)","title":"func bufferStorageStore(keyHandle: Int32, bufferHandle: Int32) -> Int32","type":"method"}],"path":"\/documentation\/space\/storageapiprotocol","title":"StorageApiProtocol","type":"protocol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/storagemapper\/init(basekey:)","title":"init(baseKey: Buffer)","type":"init"},{"children":[{"children":[{"path":"\/documentation\/space\/storagemapper\/init(basekey:_:)-3wg8x","title":"init(baseKey: Buffer, () -> Buffer)","type":"init"}],"title":"StorageMapper Implementations","type":"groupMarker"}],"path":"\/documentation\/space\/storagemapper\/init(basekey:_:)-78396","title":"init(baseKey: Buffer, () -> Buffer)","type":"init"}],"path":"\/documentation\/space\/storagemapper","title":"StorageMapper","type":"protocol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/topdecode\/init(topdecode:)","title":"init(topDecode: Buffer)","type":"init"}],"path":"\/documentation\/space\/topdecode","title":"TopDecode","type":"protocol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/space\/topdecodemulti\/init(topdecodemulti:)-76za5","title":"init(topDecodeMulti: inout some TopDecodeMultiInput)","type":"init"}],"title":"TopDecodeMulti Implementations","type":"groupMarker"}],"path":"\/documentation\/space\/topdecodemulti\/init(topdecodemulti:)-wm7y","title":"init(topDecodeMulti: inout some TopDecodeMultiInput)","type":"init"}],"path":"\/documentation\/space\/topdecodemulti","title":"TopDecodeMulti","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/topdecodemultiinput\/hasnext()","title":"func hasNext() -> Bool","type":"method"},{"path":"\/documentation\/space\/topdecodemultiinput\/nextvalueinput()","title":"func nextValueInput() -> Buffer","type":"method"}],"path":"\/documentation\/space\/topdecodemultiinput","title":"TopDecodeMultiInput","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/topencode\/topencode(output:)","title":"func topEncode<T>(output: inout T)","type":"method"}],"path":"\/documentation\/space\/topencode","title":"TopEncode","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/space\/topencodemulti\/multiencode(output:)-48uvv","title":"func multiEncode<O>(output: inout O)","type":"method"}],"title":"TopEncodeMulti Implementations","type":"groupMarker"}],"path":"\/documentation\/space\/topencodemulti\/multiencode(output:)-2nq12","title":"func multiEncode<O>(output: inout O)","type":"method"}],"path":"\/documentation\/space\/topencodemulti","title":"TopEncodeMulti","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/topencodemultioutput\/pushsinglevalue(arg:)","title":"func pushSingleValue<TE>(arg: TE)","type":"method"}],"path":"\/documentation\/space\/topencodemultioutput","title":"TopEncodeMultiOutput","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/topencodeoutput\/setbuffer(buffer:)","title":"func setBuffer(buffer: Buffer)","type":"method"}],"path":"\/documentation\/space\/topencodeoutput","title":"TopEncodeOutput","type":"protocol"},{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/address\/init()","title":"init()","type":"init"},{"path":"\/documentation\/space\/address\/init(buffer:)","title":"init(buffer: Buffer)","type":"init"},{"path":"\/documentation\/space\/address\/init(handle:)","title":"init(handle: Int32)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/space\/address\/buffer","title":"let buffer: Buffer","type":"property"},{"path":"\/documentation\/space\/address\/hexdescription","title":"var hexDescription: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/address\/iszero()","title":"func isZero() -> Bool","type":"method"},{"path":"\/documentation\/space\/address\/send(egldvalue:)","title":"func send(egldValue: BigUint)","type":"method"},{"path":"\/documentation\/space\/address\/send(payments:)","title":"func send(payments: Vector<TokenPayment>)","type":"method"},{"path":"\/documentation\/space\/address\/send(tokenidentifier:nonce:amount:)","title":"func send(tokenIdentifier: Buffer, nonce: UInt64, amount: BigUint)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/address\/intoarraypayload()","title":"func intoArrayPayload() -> Buffer","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/space\/address\/payloadsize","title":"static var payloadSize: Int32","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/space\/address\/decodearraypayload(payload:)","title":"static func decodeArrayPayload(payload: Buffer) -> Address","type":"method"}],"path":"\/documentation\/space\/address\/arrayitem-implementations","title":"ArrayItem Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/space\/address\/debugdescription","title":"var debugDescription: String","type":"property"}],"path":"\/documentation\/space\/address\/customdebugstringconvertible-implementations","title":"CustomDebugStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/space\/address\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/space\/address\/==(_:_:)","title":"static func == (Address, Address) -> Bool","type":"op"}],"path":"\/documentation\/space\/address\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/address\/init(extendedgraphemeclusterliteral:)","title":"init(extendedGraphemeClusterLiteral: Self.StringLiteralType)","type":"init"}],"path":"\/documentation\/space\/address\/expressiblebyextendedgraphemeclusterliteral-implementations","title":"ExpressibleByExtendedGraphemeClusterLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/address\/init(stringliteral:)","title":"init(stringLiteral: StaticString)","type":"init"}],"path":"\/documentation\/space\/address\/expressiblebystringliteral-implementations","title":"ExpressibleByStringLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/address\/init(unicodescalarliteral:)","title":"init(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)","type":"init"}],"path":"\/documentation\/space\/address\/expressiblebyunicodescalarliteral-implementations","title":"ExpressibleByUnicodeScalarLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/address\/init(depdecode:)","title":"init(depDecode: inout some NestedDecodeInput)","type":"init"}],"path":"\/documentation\/space\/address\/nesteddecode-implementations","title":"NestedDecode Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/address\/depencode(dest:)","title":"func depEncode<O>(dest: inout O)","type":"method"}],"path":"\/documentation\/space\/address\/nestedencode-implementations","title":"NestedEncode Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/address\/init(topdecode:)","title":"init(topDecode: Buffer)","type":"init"}],"path":"\/documentation\/space\/address\/topdecode-implementations","title":"TopDecode Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/address\/init(topdecodemulti:)","title":"init(topDecodeMulti: inout some TopDecodeMultiInput)","type":"init"}],"path":"\/documentation\/space\/address\/topdecodemulti-implementations","title":"TopDecodeMulti Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/address\/topencode(output:)","title":"func topEncode<EncodeOutput>(output: inout EncodeOutput)","type":"method"}],"path":"\/documentation\/space\/address\/topencode-implementations","title":"TopEncode Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/address\/multiencode(output:)","title":"func multiEncode<O>(output: inout O)","type":"method"}],"path":"\/documentation\/space\/address\/topencodemulti-implementations","title":"TopEncodeMulti Implementations","type":"symbol"}],"path":"\/documentation\/space\/address","title":"Address","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/apioutputadapter\/init()","title":"init()","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/apioutputadapter\/pushsinglevalue(arg:)","title":"func pushSingleValue<TE>(arg: TE)","type":"method"}],"path":"\/documentation\/space\/apioutputadapter\/topencodemultioutput-implementations","title":"TopEncodeMultiOutput Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/apioutputadapter\/setbuffer(buffer:)","title":"func setBuffer(buffer: Buffer)","type":"method"}],"path":"\/documentation\/space\/apioutputadapter\/topencodeoutput-implementations","title":"TopEncodeOutput Implementations","type":"symbol"}],"path":"\/documentation\/space\/apioutputadapter","title":"ApiOutputAdapter","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/argbuffer\/init()","title":"init()","type":"init"},{"path":"\/documentation\/space\/argbuffer\/init(rawargs:)","title":"init(rawArgs: Vector<Buffer>)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/argbuffer\/getrawargs()","title":"func getRawArgs() -> Vector<Buffer>","type":"method"},{"path":"\/documentation\/space\/argbuffer\/pusharg(arg:)","title":"func pushArg<T>(arg: T)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/argbuffer\/pushsinglevalue(arg:)","title":"func pushSingleValue<TE>(arg: TE)","type":"method"}],"path":"\/documentation\/space\/argbuffer\/topencodemultioutput-implementations","title":"TopEncodeMultiOutput Implementations","type":"symbol"}],"path":"\/documentation\/space\/argbuffer","title":"ArgBuffer","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/space\/asynccallerror\/errorcode","title":"let errorCode: UInt32","type":"property"},{"path":"\/documentation\/space\/asynccallerror\/errormessage","title":"let errorMessage: Buffer","type":"property"}],"path":"\/documentation\/space\/asynccallerror","title":"AsyncCallError","type":"struct"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/asynccontractcall\/registerpromise(callbackname:gas:gasforcallback:callbackargs:value:)","title":"func registerPromise(callbackName: StaticString, gas: UInt64, gasForCallback: UInt64, callbackArgs: ArgBuffer, value: BigUint)","type":"method"}],"path":"\/documentation\/space\/asynccontractcall","title":"AsyncContractCall","type":"struct"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/space\/biguint\/*(_:_:)","title":"static func * (BigUint, BigUint) -> BigUint","type":"op"},{"path":"\/documentation\/space\/biguint\/+(_:_:)","title":"static func + (BigUint, BigUint) -> BigUint","type":"op"},{"path":"\/documentation\/space\/biguint\/+=(_:_:)","title":"static func += (inout BigUint, BigUint)","type":"op"},{"path":"\/documentation\/space\/biguint\/-(_:_:)","title":"static func - (BigUint, BigUint) -> BigUint","type":"op"},{"path":"\/documentation\/space\/biguint\/_(_:_:)-18byj","title":"static func < (BigUint, BigUint) -> Bool","type":"op"},{"path":"\/documentation\/space\/biguint\/_(_:_:)-23c13","title":"static func \/ (BigUint, BigUint) -> BigUint","type":"op"},{"path":"\/documentation\/space\/biguint\/_(_:_:)-5q5nj","title":"static func % (BigUint, BigUint) -> BigUint","type":"op"},{"path":"\/documentation\/space\/biguint\/_(_:_:)-727ol","title":"static func > (BigUint, BigUint) -> Bool","type":"op"},{"path":"\/documentation\/space\/biguint\/_=(_:_:)-3a64l","title":"static func >= (BigUint, BigUint) -> Bool","type":"op"},{"path":"\/documentation\/space\/biguint\/_=(_:_:)-5khuu","title":"static func <= (BigUint, BigUint) -> Bool","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/biguint\/init()","title":"init()","type":"init"},{"path":"\/documentation\/space\/biguint\/init(bigendianbuffer:)","title":"init(bigEndianBuffer: Buffer)","type":"init"},{"path":"\/documentation\/space\/biguint\/init(value:)-74i8l","title":"init(value: UInt32)","type":"init"},{"path":"\/documentation\/space\/biguint\/init(value:)-84ev0","title":"init(value: UInt64)","type":"init"},{"path":"\/documentation\/space\/biguint\/init(value:)-86q0r","title":"init(value: Int32)","type":"init"},{"path":"\/documentation\/space\/biguint\/init(value:)-8iycp","title":"init(value: UInt8)","type":"init"},{"path":"\/documentation\/space\/biguint\/init(value:)-g70k","title":"init(value: Int64)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/space\/biguint\/hexdescription","title":"var hexDescription: String","type":"property"},{"path":"\/documentation\/space\/biguint\/stringdescription","title":"var stringDescription: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/biguint\/tobuffer()","title":"func toBuffer() -> Buffer","type":"method"},{"path":"\/documentation\/space\/biguint\/toint64()","title":"func toInt64() -> Int64?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/biguint\/intoarraypayload()","title":"func intoArrayPayload() -> Buffer","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/space\/biguint\/payloadsize","title":"static var payloadSize: Int32","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/space\/biguint\/decodearraypayload(payload:)","title":"static func decodeArrayPayload(payload: Buffer) -> BigUint","type":"method"}],"path":"\/documentation\/space\/biguint\/arrayitem-implementations","title":"ArrayItem Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/space\/biguint\/debugdescription","title":"var debugDescription: String","type":"property"}],"path":"\/documentation\/space\/biguint\/customdebugstringconvertible-implementations","title":"CustomDebugStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/space\/biguint\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/space\/biguint\/==(_:_:)","title":"static func == (BigUint, BigUint) -> Bool","type":"op"}],"path":"\/documentation\/space\/biguint\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/biguint\/init(integerliteral:)","title":"init(integerLiteral: IntegerLiteralType)","type":"init"}],"path":"\/documentation\/space\/biguint\/expressiblebyintegerliteral-implementations","title":"ExpressibleByIntegerLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/biguint\/init(depdecode:)","title":"init(depDecode: inout some NestedDecodeInput)","type":"init"}],"path":"\/documentation\/space\/biguint\/nesteddecode-implementations","title":"NestedDecode Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/biguint\/depencode(dest:)","title":"func depEncode<O>(dest: inout O)","type":"method"}],"path":"\/documentation\/space\/biguint\/nestedencode-implementations","title":"NestedEncode Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/biguint\/init(topdecode:)","title":"init(topDecode: Buffer)","type":"init"}],"path":"\/documentation\/space\/biguint\/topdecode-implementations","title":"TopDecode Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/biguint\/init(topdecodemulti:)","title":"init(topDecodeMulti: inout some TopDecodeMultiInput)","type":"init"}],"path":"\/documentation\/space\/biguint\/topdecodemulti-implementations","title":"TopDecodeMulti Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/biguint\/topencode(output:)","title":"func topEncode<EncodeOutput>(output: inout EncodeOutput)","type":"method"}],"path":"\/documentation\/space\/biguint\/topencode-implementations","title":"TopEncode Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/biguint\/multiencode(output:)","title":"func multiEncode<O>(output: inout O)","type":"method"}],"path":"\/documentation\/space\/biguint\/topencodemulti-implementations","title":"TopEncodeMulti Implementations","type":"symbol"}],"path":"\/documentation\/space\/biguint","title":"BigUint","type":"struct"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/space\/blockchain\/createnft(tokenidentifier:amount:name:royalties:hash:attributes:uris:)","title":"static func createNft<T>(tokenIdentifier: Buffer, amount: BigUint, name: Buffer, royalties: BigUint, hash: Buffer, attributes: T, uris: Vector<Buffer>) -> UInt64","type":"method"},{"path":"\/documentation\/space\/blockchain\/deployscfromsource(gas:sourceaddress:codemetadata:value:arguments:)","title":"static func deploySCFromSource(gas: UInt64, sourceAddress: Address, codeMetadata: CodeMetadata, value: BigUint, arguments: ArgBuffer) -> (newAddress: Address, results: Vector<Buffer>)","type":"method"},{"path":"\/documentation\/space\/blockchain\/getbalance(address:)","title":"static func getBalance(address: Address) -> BigUint","type":"method"},{"path":"\/documentation\/space\/blockchain\/getblockepoch()","title":"static func getBlockEpoch() -> UInt64","type":"method"},{"path":"\/documentation\/space\/blockchain\/getblockrandomseed()","title":"static func getBlockRandomSeed() -> Buffer","type":"method"},{"path":"\/documentation\/space\/blockchain\/getblockround()","title":"static func getBlockRound() -> UInt64","type":"method"},{"path":"\/documentation\/space\/blockchain\/getblocktimestamp()","title":"static func getBlockTimestamp() -> UInt64","type":"method"},{"path":"\/documentation\/space\/blockchain\/getesdtbalance(address:tokenidentifier:nonce:)","title":"static func getESDTBalance(address: Address, tokenIdentifier: Buffer, nonce: UInt64) -> BigUint","type":"method"},{"path":"\/documentation\/space\/blockchain\/getesdtlocalroles(tokenidentifier:)","title":"static func getESDTLocalRoles(tokenIdentifier: Buffer) -> EsdtLocalRoles","type":"method"},{"path":"\/documentation\/space\/blockchain\/getgasleft()","title":"static func getGasLeft() -> UInt64","type":"method"},{"path":"\/documentation\/space\/blockchain\/getowner()","title":"static func getOwner() -> Address","type":"method"},{"path":"\/documentation\/space\/blockchain\/getscaddress()","title":"static func getSCAddress() -> Address","type":"method"},{"path":"\/documentation\/space\/blockchain\/issuenonfungibletoken(tokendisplayname:tokenticker:properties:)","title":"static func issueNonFungibleToken(tokenDisplayName: Buffer, tokenTicker: Buffer, properties: NonFungibleTokenProperties) -> AsyncContractCall","type":"method"},{"path":"\/documentation\/space\/blockchain\/minttokens(tokenidentifier:nonce:amount:)","title":"static func mintTokens(tokenIdentifier: Buffer, nonce: UInt64, amount: BigUint)","type":"method"},{"path":"\/documentation\/space\/blockchain\/settokenroles(for:tokenidentifier:roles:)","title":"static func setTokenRoles(for: Address, tokenIdentifier: Buffer, roles: EsdtLocalRoles) -> AsyncContractCall","type":"method"},{"path":"\/documentation\/space\/blockchain\/upgradescfromsource(contractaddress:gas:sourceaddress:codemetadata:value:arguments:)","title":"static func upgradeSCFromSource(contractAddress: Address, gas: UInt64, sourceAddress: Address, codeMetadata: CodeMetadata, value: BigUint, arguments: ArgBuffer) -> Vector<Buffer>","type":"method"}],"path":"\/documentation\/space\/blockchain","title":"Blockchain","type":"struct"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/space\/buffer\/+(_:_:)","title":"static func + (Buffer, Buffer) -> Buffer","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/buffer\/init()","title":"init()","type":"init"},{"path":"\/documentation\/space\/buffer\/init(_:)-47l7b","title":"init(String)","type":"init"},{"path":"\/documentation\/space\/buffer\/init(_:)-7km1c","title":"init(StaticString)","type":"init"},{"path":"\/documentation\/space\/buffer\/init(handle:)","title":"init(handle: Int32)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/space\/buffer\/count","title":"var count: Int32","type":"property"},{"path":"\/documentation\/space\/buffer\/handle","title":"let handle: Int32","type":"property"},{"path":"\/documentation\/space\/buffer\/hexdescription","title":"var hexDescription: String","type":"property"},{"path":"\/documentation\/space\/buffer\/isempty","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/space\/buffer\/utf8description","title":"var utf8Description: String?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/buffer\/appended(_:)","title":"func appended(Buffer) -> Buffer","type":"method"},{"path":"\/documentation\/space\/buffer\/clone()","title":"func clone() -> Buffer","type":"method"},{"path":"\/documentation\/space\/buffer\/finish()","title":"func finish()","type":"method"},{"path":"\/documentation\/space\/buffer\/getsubbuffer(startindex:length:)","title":"func getSubBuffer(startIndex: Int32, length: Int32) -> Buffer","type":"method"},{"path":"\/documentation\/space\/buffer\/tobytes()","title":"func toBytes() -> [UInt8]","type":"method"},{"path":"\/documentation\/space\/buffer\/tohexadecimalbuffer()","title":"func toHexadecimalBuffer() -> Buffer","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/buffer\/intoarraypayload()","title":"func intoArrayPayload() -> Buffer","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/space\/buffer\/payloadsize","title":"static var payloadSize: Int32","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/space\/buffer\/decodearraypayload(payload:)","title":"static func decodeArrayPayload(payload: Buffer) -> Buffer","type":"method"}],"path":"\/documentation\/space\/buffer\/arrayitem-implementations","title":"ArrayItem Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/space\/buffer\/debugdescription","title":"var debugDescription: String","type":"property"}],"path":"\/documentation\/space\/buffer\/customdebugstringconvertible-implementations","title":"CustomDebugStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/space\/buffer\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/space\/buffer\/==(_:_:)","title":"static func == (Buffer, Buffer) -> Bool","type":"op"}],"path":"\/documentation\/space\/buffer\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/buffer\/init(extendedgraphemeclusterliteral:)","title":"init(extendedGraphemeClusterLiteral: Self.StringLiteralType)","type":"init"}],"path":"\/documentation\/space\/buffer\/expressiblebyextendedgraphemeclusterliteral-implementations","title":"ExpressibleByExtendedGraphemeClusterLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/buffer\/init(stringinterpolation:)","title":"init(stringInterpolation: BufferInterpolationMatcher)","type":"init"}],"path":"\/documentation\/space\/buffer\/expressiblebystringinterpolation-implementations","title":"ExpressibleByStringInterpolation Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/buffer\/init(stringliteral:)","title":"init(stringLiteral: StaticString)","type":"init"}],"path":"\/documentation\/space\/buffer\/expressiblebystringliteral-implementations","title":"ExpressibleByStringLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/buffer\/init(unicodescalarliteral:)","title":"init(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)","type":"init"}],"path":"\/documentation\/space\/buffer\/expressiblebyunicodescalarliteral-implementations","title":"ExpressibleByUnicodeScalarLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/buffer\/init(depdecode:)","title":"init(depDecode: inout some NestedDecodeInput)","type":"init"}],"path":"\/documentation\/space\/buffer\/nesteddecode-implementations","title":"NestedDecode Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/buffer\/depencode(dest:)","title":"func depEncode<O>(dest: inout O)","type":"method"}],"path":"\/documentation\/space\/buffer\/nestedencode-implementations","title":"NestedEncode Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/buffer\/write(buffer:)","title":"func write(buffer: Buffer)","type":"method"}],"path":"\/documentation\/space\/buffer\/nestedencodeoutput-implementations","title":"NestedEncodeOutput Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/buffer\/init(topdecode:)","title":"init(topDecode: Buffer)","type":"init"}],"path":"\/documentation\/space\/buffer\/topdecode-implementations","title":"TopDecode Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/buffer\/init(topdecodemulti:)","title":"init(topDecodeMulti: inout some TopDecodeMultiInput)","type":"init"}],"path":"\/documentation\/space\/buffer\/topdecodemulti-implementations","title":"TopDecodeMulti Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/buffer\/topencode(output:)","title":"func topEncode<EncodeOutput>(output: inout EncodeOutput)","type":"method"}],"path":"\/documentation\/space\/buffer\/topencode-implementations","title":"TopEncode Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/buffer\/multiencode(output:)","title":"func multiEncode<O>(output: inout O)","type":"method"}],"path":"\/documentation\/space\/buffer\/topencodemulti-implementations","title":"TopEncodeMulti Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/buffer\/setbuffer(buffer:)","title":"func setBuffer(buffer: Buffer)","type":"method"}],"path":"\/documentation\/space\/buffer\/topencodeoutput-implementations","title":"TopEncodeOutput Implementations","type":"symbol"}],"path":"\/documentation\/space\/buffer","title":"Buffer","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/bufferinterpolationmatcher\/init(literalcapacity:interpolationcount:)","title":"init(literalCapacity: Int, interpolationCount: Int)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/bufferinterpolationmatcher\/appendinterpolation(_:)-5bgse","title":"func appendInterpolation(String)","type":"method"},{"path":"\/documentation\/space\/bufferinterpolationmatcher\/appendinterpolation(_:)-6ano8","title":"func appendInterpolation(StaticString)","type":"method"},{"path":"\/documentation\/space\/bufferinterpolationmatcher\/appendinterpolation(_:)-6lxge","title":"func appendInterpolation(Address)","type":"method"},{"path":"\/documentation\/space\/bufferinterpolationmatcher\/appendinterpolation(_:)-7x6p7","title":"func appendInterpolation(Buffer)","type":"method"},{"path":"\/documentation\/space\/bufferinterpolationmatcher\/appendinterpolation(_:)-tw92","title":"func appendInterpolation(BigUint)","type":"method"},{"path":"\/documentation\/space\/bufferinterpolationmatcher\/appendliteral(_:)","title":"func appendLiteral(StaticString)","type":"method"}],"path":"\/documentation\/space\/bufferinterpolationmatcher","title":"BufferInterpolationMatcher","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/buffernesteddecodeinput\/init(buffer:)","title":"init(buffer: Buffer)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/space\/buffernesteddecodeinput\/buffercount","title":"let bufferCount: Int32","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/buffernesteddecodeinput\/candecodemore()","title":"func canDecodeMore() -> Bool","type":"method"},{"path":"\/documentation\/space\/buffernesteddecodeinput\/getentirebuffer()","title":"func getEntireBuffer() -> Buffer","type":"method"},{"path":"\/documentation\/space\/buffernesteddecodeinput\/readnextbuffer(length:)","title":"func readNextBuffer(length: Int32) -> Buffer","type":"method"},{"path":"\/documentation\/space\/buffernesteddecodeinput\/readnextbufferofdynamiclength()","title":"func readNextBufferOfDynamicLength() -> Buffer","type":"method"}],"path":"\/documentation\/space\/buffernesteddecodeinput\/nesteddecodeinput-implementations","title":"NestedDecodeInput Implementations","type":"symbol"}],"path":"\/documentation\/space\/buffernesteddecodeinput","title":"BufferNestedDecodeInput","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/callbackclosureloader\/init()","title":"init()","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/callbackclosureloader\/hasnext()","title":"func hasNext() -> Bool","type":"method"},{"path":"\/documentation\/space\/callbackclosureloader\/nextvalueinput()","title":"func nextValueInput() -> Buffer","type":"method"}],"path":"\/documentation\/space\/callbackclosureloader\/topdecodemultiinput-implementations","title":"TopDecodeMultiInput Implementations","type":"symbol"}],"path":"\/documentation\/space\/callbackclosureloader","title":"CallbackClosureLoader","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/codemetadata\/init(flag:)","title":"init(flag: UInt16)","type":"init"},{"path":"\/documentation\/space\/codemetadata\/init(upgradable:readable:payable:payablebysc:)","title":"init(upgradable: Bool, readable: Bool, payable: Bool, payableBySC: Bool)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/codemetadata\/intoarraypayload()","title":"func intoArrayPayload() -> Buffer","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/space\/codemetadata\/payloadsize","title":"static var payloadSize: Int32","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/space\/codemetadata\/decodearraypayload(payload:)","title":"static func decodeArrayPayload(payload: Buffer) -> CodeMetadata","type":"method"}],"path":"\/documentation\/space\/codemetadata\/arrayitem-implementations","title":"ArrayItem Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/codemetadata\/init(depdecode:)","title":"init(depDecode: inout some NestedDecodeInput)","type":"init"}],"path":"\/documentation\/space\/codemetadata\/nesteddecode-implementations","title":"NestedDecode Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/codemetadata\/depencode(dest:)","title":"func depEncode<O>(dest: inout O)","type":"method"}],"path":"\/documentation\/space\/codemetadata\/nestedencode-implementations","title":"NestedEncode Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/codemetadata\/init(topdecode:)","title":"init(topDecode: Buffer)","type":"init"}],"path":"\/documentation\/space\/codemetadata\/topdecode-implementations","title":"TopDecode Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/codemetadata\/init(topdecodemulti:)","title":"init(topDecodeMulti: inout some TopDecodeMultiInput)","type":"init"}],"path":"\/documentation\/space\/codemetadata\/topdecodemulti-implementations","title":"TopDecodeMulti Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/codemetadata\/topencode(output:)","title":"func topEncode<T>(output: inout T)","type":"method"}],"path":"\/documentation\/space\/codemetadata\/topencode-implementations","title":"TopEncode Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/codemetadata\/multiencode(output:)","title":"func multiEncode<O>(output: inout O)","type":"method"}],"path":"\/documentation\/space\/codemetadata\/topencodemulti-implementations","title":"TopEncodeMulti Implementations","type":"symbol"}],"path":"\/documentation\/space\/codemetadata","title":"CodeMetadata","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/contractcall\/init(receiver:endpointname:argbuffer:)","title":"init(receiver: Address, endpointName: Buffer, argBuffer: ArgBuffer)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/contractcall\/call(gas:value:)","title":"func call<ReturnType>(gas: UInt64, value: BigUint) -> ReturnType","type":"method"},{"path":"\/documentation\/space\/contractcall\/registerpromise(callbackname:gas:gasforcallback:callbackargs:value:)","title":"func registerPromise(callbackName: StaticString, gas: UInt64, gasForCallback: UInt64, callbackArgs: ArgBuffer, value: BigUint)","type":"method"},{"path":"\/documentation\/space\/contractcall\/transferexecute(gas:value:)","title":"func transferExecute(gas: UInt64, value: BigUint)","type":"method"}],"path":"\/documentation\/space\/contractcall","title":"ContractCall","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/contractcalltransactioninput\/init(calleraddress:egldvalue:esdtvalue:)","title":"init(callerAddress: String?, egldValue: BigUint, esdtValue: Vector<TokenPayment>)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/space\/contractcalltransactioninput\/calleraddress","title":"let callerAddress: String?","type":"property"},{"path":"\/documentation\/space\/contractcalltransactioninput\/egldvalue","title":"let egldValue: BigUint","type":"property"},{"path":"\/documentation\/space\/contractcalltransactioninput\/esdtvalue","title":"let esdtValue: Vector<TokenPayment>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/contractcalltransactioninput\/totransactioninput(contractaddress:)","title":"func toTransactionInput(contractAddress: String) -> TransactionInput","type":"method"}],"path":"\/documentation\/space\/contractcalltransactioninput","title":"ContractCallTransactionInput","type":"struct"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/space\/crypto\/getsha256hash(of:)","title":"static func getSha256Hash(of: Buffer) -> Buffer","type":"method"},{"path":"\/documentation\/space\/crypto\/verifyed25519(key:message:signature:)","title":"static func verifyEd25519(key: Buffer, message: Buffer, signature: Buffer)","type":"method"}],"path":"\/documentation\/space\/crypto","title":"Crypto","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/endpointargumentsloader\/init()","title":"init()","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/endpointargumentsloader\/hasnext()","title":"func hasNext() -> Bool","type":"method"},{"path":"\/documentation\/space\/endpointargumentsloader\/nextvalueinput()","title":"func nextValueInput() -> Buffer","type":"method"}],"path":"\/documentation\/space\/endpointargumentsloader\/topdecodemultiinput-implementations","title":"TopDecodeMultiInput Implementations","type":"symbol"}],"path":"\/documentation\/space\/endpointargumentsloader","title":"EndpointArgumentsLoader","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/esdtbalance\/init(nonce:balance:)","title":"init(nonce: UInt64, balance: BigInt)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/space\/esdtbalance\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/space\/esdtbalance\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/space\/esdtbalance","title":"EsdtBalance","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/esdtlocalroles\/init(canmint:canburn:cancreatenft:canaddnftquantity:canburnnft:canaddnfturi:canupdatenftattributes:cantransfer:)","title":"init(canMint: Bool, canBurn: Bool, canCreateNft: Bool, canAddNftQuantity: Bool, canBurnNft: Bool, canAddNftUri: Bool, canUpdateNftAttributes: Bool, canTransfer: Bool)","type":"init"},{"path":"\/documentation\/space\/esdtlocalroles\/init(flags:)","title":"init(flags: Int64)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/esdtlocalroles\/contains(flag:)","title":"func contains(flag: EsdtLocalRolesFlag) -> Bool","type":"method"},{"path":"\/documentation\/space\/esdtlocalroles\/foreachflag(_:)","title":"func forEachFlag((EsdtLocalRolesFlag) throws -> Void) rethrows","type":"method"}],"path":"\/documentation\/space\/esdtlocalroles","title":"EsdtLocalRoles","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/ignorevalue\/init()","title":"init()","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/ignorevalue\/init(depdecode:)","title":"init(depDecode: inout some NestedDecodeInput)","type":"init"}],"path":"\/documentation\/space\/ignorevalue\/nesteddecode-implementations","title":"NestedDecode Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/ignorevalue\/depencode(dest:)","title":"func depEncode<O>(dest: inout O)","type":"method"}],"path":"\/documentation\/space\/ignorevalue\/nestedencode-implementations","title":"NestedEncode Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/ignorevalue\/init(topdecode:)","title":"init(topDecode: Buffer)","type":"init"}],"path":"\/documentation\/space\/ignorevalue\/topdecode-implementations","title":"TopDecode Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/ignorevalue\/init(topdecodemulti:)-79ozr","title":"init(topDecodeMulti: inout some TopDecodeMultiInput)","type":"init"},{"path":"\/documentation\/space\/ignorevalue\/init(topdecodemulti:)-97l6w","title":"init(topDecodeMulti: inout some TopDecodeMultiInput)","type":"init"}],"path":"\/documentation\/space\/ignorevalue\/topdecodemulti-implementations","title":"TopDecodeMulti Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/ignorevalue\/topencode(output:)","title":"func topEncode<T>(output: inout T)","type":"method"}],"path":"\/documentation\/space\/ignorevalue\/topencode-implementations","title":"TopEncode Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/ignorevalue\/multiencode(output:)-5xvtc","title":"func multiEncode<O>(output: inout O)","type":"method"},{"path":"\/documentation\/space\/ignorevalue\/multiencode(output:)-kc3k","title":"func multiEncode<O>(output: inout O)","type":"method"}],"path":"\/documentation\/space\/ignorevalue\/topencodemulti-implementations","title":"TopEncodeMulti Implementations","type":"symbol"}],"path":"\/documentation\/space\/ignorevalue","title":"IgnoreValue","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/mapmapper\/init(basekey:)","title":"init(baseKey: Buffer)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/mapmapper\/clear()","title":"func clear()","type":"method"},{"path":"\/documentation\/space\/mapmapper\/foreach(_:)","title":"func forEach((K, V) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/space\/mapmapper\/get(_:)","title":"func get(K) -> V?","type":"method"},{"path":"\/documentation\/space\/mapmapper\/insert(key:value:)","title":"func insert(key: K, value: V) -> V?","type":"method"},{"path":"\/documentation\/space\/mapmapper\/remove(key:)","title":"func remove(key: K) -> V?","type":"method"}],"path":"\/documentation\/space\/mapmapper","title":"MapMapper","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/mapping\/init(key:)","title":"init(key: Buffer)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/space\/mapping\/projectedvalue","title":"var projectedValue: SingleValueMapperMap<K, T>","type":"property"},{"path":"\/documentation\/space\/mapping\/wrappedvalue","title":"var wrappedValue: StorageMap<K, T>","type":"property"}],"path":"\/documentation\/space\/mapping","title":"Mapping","type":"struct"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/space\/message\/allesdttransfers","title":"static var allEsdtTransfers: Vector<TokenPayment>","type":"property"},{"path":"\/documentation\/space\/message\/caller","title":"static var caller: Address","type":"property"},{"path":"\/documentation\/space\/message\/egldorsingleesdttransfer","title":"static var egldOrSingleEsdtTransfer: TokenPayment","type":"property"},{"path":"\/documentation\/space\/message\/egldvalue","title":"static var egldValue: BigUint","type":"property"},{"path":"\/documentation\/space\/message\/singleesdt","title":"static var singleEsdt: TokenPayment","type":"property"},{"path":"\/documentation\/space\/message\/singlefungibleesdt","title":"static var singleFungibleEsdt: TokenPayment","type":"property"},{"path":"\/documentation\/space\/message\/transactionhash","title":"static var transactionHash: Buffer","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/space\/message\/asynccallresult()","title":"static func asyncCallResult<T>() -> AsyncCallResult<T>","type":"method"}],"path":"\/documentation\/space\/message","title":"Message","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/multivalueencoded\/init()","title":"init()","type":"init"},{"path":"\/documentation\/space\/multivalueencoded\/init(items:)","title":"init(items: Vector<Item>)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/space\/multivalueencoded\/count","title":"var count: Int32","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/multivalueencoded\/appended(value:)","title":"func appended(value: Item) -> MultiValueEncoded<Item>","type":"method"},{"path":"\/documentation\/space\/multivalueencoded\/get(_:)","title":"func get(Int32) -> Item","type":"method"},{"path":"\/documentation\/space\/multivalueencoded\/toarray()","title":"func toArray() -> Vector<Item>","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/multivalueencoded\/foreach(_:)","title":"func forEach((Item) throws -> Void) rethrows","type":"method"}],"path":"\/documentation\/space\/multivalueencoded\/spacesequence-implementations","title":"SpaceSequence Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/multivalueencoded\/init(topdecodemulti:)","title":"init(topDecodeMulti: inout some TopDecodeMultiInput)","type":"init"}],"path":"\/documentation\/space\/multivalueencoded\/topdecodemulti-implementations","title":"TopDecodeMulti Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/multivalueencoded\/multiencode(output:)","title":"func multiEncode<O>(output: inout O)","type":"method"}],"path":"\/documentation\/space\/multivalueencoded\/topencodemulti-implementations","title":"TopEncodeMulti Implementations","type":"symbol"}],"path":"\/documentation\/space\/multivalueencoded","title":"MultiValueEncoded","type":"struct"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/space\/nonfungibletokenproperties\/new(canfreeze:canwipe:canpause:cantransfercreaterole:canchangeowner:canupgrade:canaddspecialroles:)","title":"static func new(canFreeze: Bool, canWipe: Bool, canPause: Bool, canTransferCreateRole: Bool, canChangeOwner: Bool, canUpgrade: Bool, canAddSpecialRoles: Bool) -> NonFungibleTokenProperties","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/nonfungibletokenproperties\/intoarraypayload()","title":"func intoArrayPayload() -> Buffer","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/space\/nonfungibletokenproperties\/payloadsize","title":"static var payloadSize: Int32","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/space\/nonfungibletokenproperties\/decodearraypayload(payload:)","title":"static func decodeArrayPayload(payload: Buffer) -> NonFungibleTokenProperties","type":"method"}],"path":"\/documentation\/space\/nonfungibletokenproperties\/arrayitem-implementations","title":"ArrayItem Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/nonfungibletokenproperties\/init(depdecode:)","title":"init(depDecode: inout some NestedDecodeInput)","type":"init"}],"path":"\/documentation\/space\/nonfungibletokenproperties\/nesteddecode-implementations","title":"NestedDecode Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/nonfungibletokenproperties\/depencode(dest:)","title":"func depEncode<O>(dest: inout O)","type":"method"}],"path":"\/documentation\/space\/nonfungibletokenproperties\/nestedencode-implementations","title":"NestedEncode Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/nonfungibletokenproperties\/init(topdecode:)","title":"init(topDecode: Buffer)","type":"init"}],"path":"\/documentation\/space\/nonfungibletokenproperties\/topdecode-implementations","title":"TopDecode Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/nonfungibletokenproperties\/init(topdecodemulti:)","title":"init(topDecodeMulti: inout some TopDecodeMultiInput)","type":"init"}],"path":"\/documentation\/space\/nonfungibletokenproperties\/topdecodemulti-implementations","title":"TopDecodeMulti Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/nonfungibletokenproperties\/topencode(output:)","title":"func topEncode<EncodeOutput>(output: inout EncodeOutput)","type":"method"}],"path":"\/documentation\/space\/nonfungibletokenproperties\/topencode-implementations","title":"TopEncode Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/nonfungibletokenproperties\/multiencode(output:)","title":"func multiEncode<O>(output: inout O)","type":"method"}],"path":"\/documentation\/space\/nonfungibletokenproperties\/topencodemulti-implementations","title":"TopEncodeMulti Implementations","type":"symbol"}],"path":"\/documentation\/space\/nonfungibletokenproperties","title":"NonFungibleTokenProperties","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/queuemapper\/init(basekey:)","title":"init(baseKey: Buffer)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/queuemapper\/clear()","title":"func clear()","type":"method"},{"path":"\/documentation\/space\/queuemapper\/isempty()","title":"func isEmpty() -> Bool","type":"method"},{"path":"\/documentation\/space\/queuemapper\/pushback(value:)","title":"func pushBack(value: V)","type":"method"},{"path":"\/documentation\/space\/queuemapper\/pushfront(value:)","title":"func pushFront(value: V)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/queuemapper\/foreach(_:)","title":"func forEach((V) throws -> Void) rethrows","type":"method"}],"path":"\/documentation\/space\/queuemapper\/spacesequence-implementations","title":"SpaceSequence Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/queuemapper\/init(basekey:_:)","title":"init(baseKey: Buffer, () -> Buffer)","type":"init"}],"path":"\/documentation\/space\/queuemapper\/storagemapper-implementations","title":"StorageMapper Implementations","type":"symbol"}],"path":"\/documentation\/space\/queuemapper","title":"QueueMapper","type":"struct"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/space\/randomness\/bufferhandle","title":"static var bufferHandle: Int32","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/space\/randomness\/nextuint32()","title":"static func nextUInt32() -> UInt32","type":"method"},{"path":"\/documentation\/space\/randomness\/nextuint32inrange(min:max:)","title":"static func nextUInt32InRange(min: UInt32, max: UInt32) -> UInt32","type":"method"},{"path":"\/documentation\/space\/randomness\/nextuint64()","title":"static func nextUInt64() -> UInt64","type":"method"},{"path":"\/documentation\/space\/randomness\/nextuint64inrange(min:max:)","title":"static func nextUInt64InRange(min: UInt64, max: UInt64) -> UInt64","type":"method"},{"path":"\/documentation\/space\/randomness\/nextuint8()","title":"static func nextUInt8() -> UInt8","type":"method"},{"path":"\/documentation\/space\/randomness\/nextuint8inrange(min:max:)","title":"static func nextUInt8InRange(min: UInt8, max: UInt8) -> UInt8","type":"method"}],"path":"\/documentation\/space\/randomness","title":"Randomness","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/setmapper\/init(basekey:)","title":"init(baseKey: Buffer)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/setmapper\/clear()","title":"func clear()","type":"method"},{"path":"\/documentation\/space\/setmapper\/contains(value:)","title":"func contains(value: V) -> Bool","type":"method"},{"path":"\/documentation\/space\/setmapper\/extend(iterable:)","title":"func extend<I>(iterable: I)","type":"method"},{"path":"\/documentation\/space\/setmapper\/insert(value:)","title":"func insert(value: V) -> Bool","type":"method"},{"path":"\/documentation\/space\/setmapper\/isempty()","title":"func isEmpty() -> Bool","type":"method"},{"path":"\/documentation\/space\/setmapper\/remove(value:)","title":"func remove(value: V) -> Bool","type":"method"},{"path":"\/documentation\/space\/setmapper\/removeall(iterable:)","title":"func removeAll<I>(iterable: I)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/setmapper\/foreach(_:)","title":"func forEach((V) throws -> Void) rethrows","type":"method"}],"path":"\/documentation\/space\/setmapper\/spacesequence-implementations","title":"SpaceSequence Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/setmapper\/init(basekey:_:)","title":"init(baseKey: Buffer, () -> Buffer)","type":"init"}],"path":"\/documentation\/space\/setmapper\/storagemapper-implementations","title":"StorageMapper Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/setmapper\/multiencode(output:)","title":"func multiEncode<O>(output: inout O)","type":"method"}],"path":"\/documentation\/space\/setmapper\/topencodemulti-implementations","title":"TopEncodeMulti Implementations","type":"symbol"}],"path":"\/documentation\/space\/setmapper","title":"SetMapper","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/setmapping\/init(key:)","title":"init(key: Buffer)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/space\/setmapping\/wrappedvalue","title":"var wrappedValue: SetMapper<V>","type":"property"}],"path":"\/documentation\/space\/setmapping","title":"SetMapping","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/singlevaluemapper\/init(basekey:)","title":"init(baseKey: Buffer)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/singlevaluemapper\/clear()","title":"func clear()","type":"method"},{"path":"\/documentation\/space\/singlevaluemapper\/get()","title":"func get() -> V","type":"method"},{"path":"\/documentation\/space\/singlevaluemapper\/isempty()","title":"func isEmpty() -> Bool","type":"method"},{"path":"\/documentation\/space\/singlevaluemapper\/set(_:)","title":"func set(V)","type":"method"},{"path":"\/documentation\/space\/singlevaluemapper\/take()","title":"func take() -> V","type":"method"},{"path":"\/documentation\/space\/singlevaluemapper\/update(_:)","title":"func update<R>((inout V) -> R) -> R","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/singlevaluemapper\/init(basekey:_:)","title":"init(baseKey: Buffer, () -> Buffer)","type":"init"}],"path":"\/documentation\/space\/singlevaluemapper\/storagemapper-implementations","title":"StorageMapper Implementations","type":"symbol"}],"path":"\/documentation\/space\/singlevaluemapper","title":"SingleValueMapper","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/singlevaluemappermap\/init(basekey:)","title":"init(baseKey: Buffer)","type":"init"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/space\/singlevaluemappermap\/subscript(_:)","title":"subscript(K) -> SingleValueMapper<V>","type":"subscript"}],"path":"\/documentation\/space\/singlevaluemappermap","title":"SingleValueMapperMap","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/storage\/init(key:)","title":"init(key: Buffer)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/space\/storage\/projectedvalue","title":"var projectedValue: SingleValueMapper<T>","type":"property"},{"path":"\/documentation\/space\/storage\/wrappedvalue","title":"var wrappedValue: T","type":"property"}],"path":"\/documentation\/space\/storage","title":"Storage","type":"struct"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/space\/storagekeybuilder\/buildpartialblock(accumulated:next:)","title":"static func buildPartialBlock(accumulated: Buffer, next: some NestedEncode) -> Buffer","type":"method"},{"path":"\/documentation\/space\/storagekeybuilder\/buildpartialblock(first:)","title":"static func buildPartialBlock(first: some NestedEncode) -> Buffer","type":"method"}],"path":"\/documentation\/space\/storagekeybuilder","title":"StorageKeyBuilder","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/storagemap\/init(basekey:)","title":"init(baseKey: Buffer)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/storagemap\/clear(_:)","title":"func clear(K)","type":"method"},{"path":"\/documentation\/space\/storagemap\/isempty(_:)","title":"func isEmpty(K) -> Bool","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/space\/storagemap\/subscript(_:)","title":"subscript(K) -> V","type":"subscript"},{"path":"\/documentation\/space\/storagemap\/subscript(ifpresent:)","title":"subscript(ifPresent _: K) -> V?","type":"subscript"}],"path":"\/documentation\/space\/storagemap","title":"StorageMap","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/space\/tokenpayment\/amount","title":"var amount: BigUint","type":"property"},{"path":"\/documentation\/space\/tokenpayment\/nonce","title":"var nonce: UInt64","type":"property"},{"path":"\/documentation\/space\/tokenpayment\/tokenidentifier","title":"var tokenIdentifier: Buffer","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/tokenpayment\/burn()","title":"func burn()","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/space\/tokenpayment\/new(tokenidentifier:nonce:amount:)","title":"static func new(tokenIdentifier: Buffer, nonce: UInt64, amount: BigUint) -> TokenPayment","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/tokenpayment\/intoarraypayload()","title":"func intoArrayPayload() -> Buffer","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/space\/tokenpayment\/payloadsize","title":"static var payloadSize: Int32","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/space\/tokenpayment\/decodearraypayload(payload:)","title":"static func decodeArrayPayload(payload: Buffer) -> TokenPayment","type":"method"}],"path":"\/documentation\/space\/tokenpayment\/arrayitem-implementations","title":"ArrayItem Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/space\/tokenpayment\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/space\/tokenpayment\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/tokenpayment\/init(depdecode:)","title":"init(depDecode: inout some NestedDecodeInput)","type":"init"}],"path":"\/documentation\/space\/tokenpayment\/nesteddecode-implementations","title":"NestedDecode Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/tokenpayment\/depencode(dest:)","title":"func depEncode<O>(dest: inout O)","type":"method"}],"path":"\/documentation\/space\/tokenpayment\/nestedencode-implementations","title":"NestedEncode Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/tokenpayment\/init(topdecode:)","title":"init(topDecode: Buffer)","type":"init"}],"path":"\/documentation\/space\/tokenpayment\/topdecode-implementations","title":"TopDecode Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/tokenpayment\/init(topdecodemulti:)","title":"init(topDecodeMulti: inout some TopDecodeMultiInput)","type":"init"}],"path":"\/documentation\/space\/tokenpayment\/topdecodemulti-implementations","title":"TopDecodeMulti Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/tokenpayment\/topencode(output:)","title":"func topEncode<EncodeOutput>(output: inout EncodeOutput)","type":"method"}],"path":"\/documentation\/space\/tokenpayment\/topencode-implementations","title":"TopEncode Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/tokenpayment\/multiencode(output:)","title":"func multiEncode<O>(output: inout O)","type":"method"}],"path":"\/documentation\/space\/tokenpayment\/topencodemulti-implementations","title":"TopEncodeMulti Implementations","type":"symbol"}],"path":"\/documentation\/space\/tokenpayment","title":"TokenPayment","type":"struct"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/tokenproperties\/intoarraypayload()","title":"func intoArrayPayload() -> Buffer","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/space\/tokenproperties\/payloadsize","title":"static var payloadSize: Int32","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/space\/tokenproperties\/decodearraypayload(payload:)","title":"static func decodeArrayPayload(payload: Buffer) -> TokenProperties","type":"method"}],"path":"\/documentation\/space\/tokenproperties\/arrayitem-implementations","title":"ArrayItem Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/tokenproperties\/init(depdecode:)","title":"init(depDecode: inout some NestedDecodeInput)","type":"init"}],"path":"\/documentation\/space\/tokenproperties\/nesteddecode-implementations","title":"NestedDecode Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/tokenproperties\/depencode(dest:)","title":"func depEncode<O>(dest: inout O)","type":"method"}],"path":"\/documentation\/space\/tokenproperties\/nestedencode-implementations","title":"NestedEncode Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/tokenproperties\/init(topdecode:)","title":"init(topDecode: Buffer)","type":"init"}],"path":"\/documentation\/space\/tokenproperties\/topdecode-implementations","title":"TopDecode Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/tokenproperties\/init(topdecodemulti:)","title":"init(topDecodeMulti: inout some TopDecodeMultiInput)","type":"init"}],"path":"\/documentation\/space\/tokenproperties\/topdecodemulti-implementations","title":"TopDecodeMulti Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/tokenproperties\/topencode(output:)","title":"func topEncode<EncodeOutput>(output: inout EncodeOutput)","type":"method"}],"path":"\/documentation\/space\/tokenproperties\/topencode-implementations","title":"TopEncode Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/tokenproperties\/multiencode(output:)","title":"func multiEncode<O>(output: inout O)","type":"method"}],"path":"\/documentation\/space\/tokenproperties\/topencodemulti-implementations","title":"TopEncodeMulti Implementations","type":"symbol"}],"path":"\/documentation\/space\/tokenproperties","title":"TokenProperties","type":"struct"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/tokenpropertiesargument\/multiencode(output:)","title":"func multiEncode<O>(output: inout O)","type":"method"}],"path":"\/documentation\/space\/tokenpropertiesargument\/topencodemulti-implementations","title":"TopEncodeMulti Implementations","type":"symbol"}],"path":"\/documentation\/space\/tokenpropertiesargument","title":"TokenPropertiesArgument","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"path":"\/documentation\/space\/transactioninput\/esdtpayment","title":"TransactionInput.EsdtPayment","type":"struct"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/space\/transactioninput\/calleraddress","title":"let callerAddress: Data","type":"property"},{"path":"\/documentation\/space\/transactioninput\/contractaddress","title":"let contractAddress: Data","type":"property"},{"path":"\/documentation\/space\/transactioninput\/egldvalue","title":"let egldValue: BigInt","type":"property"},{"path":"\/documentation\/space\/transactioninput\/esdtvalue","title":"let esdtValue: [TransactionInput.EsdtPayment]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/transactioninput\/witharguments(args:)","title":"func withArguments(args: Vector<Buffer>)","type":"method"}],"path":"\/documentation\/space\/transactioninput","title":"TransactionInput","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/transactionoutputlog\/init(topics:data:)","title":"init(topics: [String], data: String)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/space\/transactionoutputlog\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/space\/transactionoutputlog\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/space\/transactionoutputlog","title":"TransactionOutputLog","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/unorderedsetmapper\/init(basekey:)","title":"init(baseKey: Buffer)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/space\/unorderedsetmapper\/count","title":"var count: UInt32","type":"property"},{"path":"\/documentation\/space\/unorderedsetmapper\/isempty","title":"var isEmpty: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/unorderedsetmapper\/clear()","title":"func clear()","type":"method"},{"path":"\/documentation\/space\/unorderedsetmapper\/contains(value:)","title":"func contains(value: V) -> Bool","type":"method"},{"path":"\/documentation\/space\/unorderedsetmapper\/insert(value:)","title":"func insert(value: V) -> Bool","type":"method"},{"path":"\/documentation\/space\/unorderedsetmapper\/swapindexes(index1:index2:)","title":"func swapIndexes(index1: UInt32, index2: UInt32) -> Bool","type":"method"},{"path":"\/documentation\/space\/unorderedsetmapper\/swapremove(value:)","title":"func swapRemove(value: V) -> Bool","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/unorderedsetmapper\/foreach(_:)","title":"func forEach((V) throws -> Void) rethrows","type":"method"}],"path":"\/documentation\/space\/unorderedsetmapper\/spacesequence-implementations","title":"SpaceSequence Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/unorderedsetmapper\/init(basekey:_:)","title":"init(baseKey: Buffer, () -> Buffer)","type":"init"}],"path":"\/documentation\/space\/unorderedsetmapper\/storagemapper-implementations","title":"StorageMapper Implementations","type":"symbol"}],"path":"\/documentation\/space\/unorderedsetmapper","title":"UnorderedSetMapper","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/unorderedsetmapping\/init(key:)","title":"init(key: Buffer)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/space\/unorderedsetmapping\/wrappedvalue","title":"var wrappedValue: UnorderedSetMapper<V>","type":"property"}],"path":"\/documentation\/space\/unorderedsetmapping","title":"UnorderedSetMapping","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/usermapper\/init(basekey:)","title":"init(baseKey: Buffer)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/usermapper\/getalladdresses()","title":"func getAllAddresses() -> Vector<Address>","type":"method"},{"path":"\/documentation\/space\/usermapper\/getorcreateuser(address:)","title":"func getOrCreateUser(address: Address) -> UInt32","type":"method"},{"path":"\/documentation\/space\/usermapper\/getuseraddress(id:)","title":"func getUserAddress(id: UInt32) -> Address?","type":"method"},{"path":"\/documentation\/space\/usermapper\/getuseraddressunchecked(id:)","title":"func getUserAddressUnchecked(id: UInt32) -> Address","type":"method"},{"path":"\/documentation\/space\/usermapper\/getusercount()","title":"func getUserCount() -> UInt32","type":"method"},{"path":"\/documentation\/space\/usermapper\/getuserid(address:)","title":"func getUserId(address: Address) -> UInt32","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/usermapper\/init(basekey:_:)","title":"init(baseKey: Buffer, () -> Buffer)","type":"init"}],"path":"\/documentation\/space\/usermapper\/storagemapper-implementations","title":"StorageMapper Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/usermapper\/multiencode(output:)","title":"func multiEncode<O>(output: inout O)","type":"method"}],"path":"\/documentation\/space\/usermapper\/topencodemulti-implementations","title":"TopEncodeMulti Implementations","type":"symbol"}],"path":"\/documentation\/space\/usermapper","title":"UserMapper","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/usermapping\/init(key:)","title":"init(key: Buffer)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/space\/usermapping\/wrappedvalue","title":"var wrappedValue: UserMapper","type":"property"}],"path":"\/documentation\/space\/usermapping","title":"UserMapping","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/vecmapper\/init(basekey:)","title":"init(baseKey: Buffer)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/space\/vecmapper\/count","title":"var count: UInt32","type":"property"},{"path":"\/documentation\/space\/vecmapper\/isempty","title":"var isEmpty: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/vecmapper\/append(item:)","title":"func append(item: V) -> UInt32","type":"method"},{"path":"\/documentation\/space\/vecmapper\/clear()","title":"func clear()","type":"method"},{"path":"\/documentation\/space\/vecmapper\/clearentry(index:)","title":"func clearEntry(index: UInt32)","type":"method"},{"path":"\/documentation\/space\/vecmapper\/clearentryunchecked(index:)","title":"func clearEntryUnchecked(index: UInt32)","type":"method"},{"path":"\/documentation\/space\/vecmapper\/get(index:)","title":"func get(index: UInt32) -> V","type":"method"},{"path":"\/documentation\/space\/vecmapper\/getunchecked(index:)","title":"func getUnchecked(index: UInt32) -> V","type":"method"},{"path":"\/documentation\/space\/vecmapper\/set(index:item:)","title":"func set(index: UInt32, item: V)","type":"method"},{"path":"\/documentation\/space\/vecmapper\/setunchecked(index:item:)","title":"func setUnchecked(index: UInt32, item: V)","type":"method"},{"path":"\/documentation\/space\/vecmapper\/swapremove(index:)","title":"func swapRemove(index: UInt32)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/vecmapper\/foreach(_:)","title":"func forEach((V) throws -> Void) rethrows","type":"method"}],"path":"\/documentation\/space\/vecmapper\/spacesequence-implementations","title":"SpaceSequence Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/vecmapper\/init(basekey:_:)","title":"init(baseKey: Buffer, () -> Buffer)","type":"init"}],"path":"\/documentation\/space\/vecmapper\/storagemapper-implementations","title":"StorageMapper Implementations","type":"symbol"}],"path":"\/documentation\/space\/vecmapper","title":"VecMapper","type":"struct"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/space\/vector\/+(_:_:)","title":"static func + (Vector<T>, Vector<T>) -> Vector<T>","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/vector\/init()","title":"init()","type":"init"},{"path":"\/documentation\/space\/vector\/init(buffer:)","title":"init(buffer: Buffer)","type":"init"},{"path":"\/documentation\/space\/vector\/init(singleitem:)","title":"init(singleItem: T)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/space\/vector\/buffer","title":"let buffer: Buffer","type":"property"},{"path":"\/documentation\/space\/vector\/count","title":"var count: Int32","type":"property"},{"path":"\/documentation\/space\/vector\/isempty","title":"var isEmpty: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/vector\/appended(_:)","title":"func appended(T) -> Vector<T>","type":"method"},{"path":"\/documentation\/space\/vector\/appended(contentsof:)","title":"func appended(contentsOf: Vector<T>) -> Vector<T>","type":"method"},{"path":"\/documentation\/space\/vector\/clone()","title":"func clone() -> Vector<T>","type":"method"},{"path":"\/documentation\/space\/vector\/contains(_:)","title":"func contains(T) -> Bool","type":"method"},{"path":"\/documentation\/space\/vector\/get(_:)","title":"func get(Int32) -> T","type":"method"},{"path":"\/documentation\/space\/vector\/index(of:)","title":"func index(of: T) -> Int32?","type":"method"},{"path":"\/documentation\/space\/vector\/popfirst()","title":"func popFirst() -> (Vector<T>, T)","type":"method"},{"path":"\/documentation\/space\/vector\/poplast()","title":"func popLast() -> (Vector<T>, T)","type":"method"},{"path":"\/documentation\/space\/vector\/removed(_:)","title":"func removed(Int32) -> Vector<T>","type":"method"},{"path":"\/documentation\/space\/vector\/replaced(at:value:)","title":"func replaced(at: Int32, value: T) -> Vector<T>","type":"method"},{"path":"\/documentation\/space\/vector\/slice(startindex:endindex:)","title":"func slice(startIndex: Int32, endIndex: Int32) -> Vector<T>","type":"method"},{"path":"\/documentation\/space\/vector\/toargbuffer()","title":"func toArgBuffer() -> ArgBuffer","type":"method"},{"path":"\/documentation\/space\/vector\/toarray()","title":"func toArray() -> [T]","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/space\/vector\/subscript(_:)","title":"subscript(Int32) -> T","type":"subscript"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/vector\/intoarraypayload()","title":"func intoArrayPayload() -> Buffer","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/space\/vector\/payloadsize","title":"static var payloadSize: Int32","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/space\/vector\/decodearraypayload(payload:)","title":"static func decodeArrayPayload(payload: Buffer) -> Vector<T>","type":"method"}],"path":"\/documentation\/space\/vector\/arrayitem-implementations","title":"ArrayItem Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/space\/vector\/debugdescription","title":"var debugDescription: String","type":"property"}],"path":"\/documentation\/space\/vector\/customdebugstringconvertible-implementations","title":"CustomDebugStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/space\/vector\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/space\/vector\/==(_:_:)","title":"static func == (Vector<T>, Vector<T>) -> Bool","type":"op"}],"path":"\/documentation\/space\/vector\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/vector\/init(arrayliteral:)","title":"init(arrayLiteral: T...)","type":"init"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/space\/vector\/arrayliteralelement","title":"Vector.ArrayLiteralElement","type":"typealias"}],"path":"\/documentation\/space\/vector\/expressiblebyarrayliteral-implementations","title":"ExpressibleByArrayLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/vector\/init(depdecode:)","title":"init(depDecode: inout some NestedDecodeInput)","type":"init"}],"path":"\/documentation\/space\/vector\/nesteddecode-implementations","title":"NestedDecode Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/vector\/depencode(dest:)","title":"func depEncode<O>(dest: inout O)","type":"method"}],"path":"\/documentation\/space\/vector\/nestedencode-implementations","title":"NestedEncode Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/vector\/foreach(_:)","title":"func forEach((T) throws -> Void) rethrows","type":"method"}],"path":"\/documentation\/space\/vector\/spacesequence-implementations","title":"SpaceSequence Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/vector\/init(topdecode:)","title":"init(topDecode: Buffer)","type":"init"}],"path":"\/documentation\/space\/vector\/topdecode-implementations","title":"TopDecode Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/vector\/init(topdecodemulti:)","title":"init(topDecodeMulti: inout some TopDecodeMultiInput)","type":"init"}],"path":"\/documentation\/space\/vector\/topdecodemulti-implementations","title":"TopDecodeMulti Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/vector\/hasnext()","title":"func hasNext() -> Bool","type":"method"},{"path":"\/documentation\/space\/vector\/nextvalueinput()","title":"func nextValueInput() -> Buffer","type":"method"}],"path":"\/documentation\/space\/vector\/topdecodemultiinput-implementations","title":"TopDecodeMultiInput Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/vector\/topencode(output:)","title":"func topEncode<O>(output: inout O)","type":"method"}],"path":"\/documentation\/space\/vector\/topencode-implementations","title":"TopEncode Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/vector\/multiencode(output:)","title":"func multiEncode<O>(output: inout O)","type":"method"}],"path":"\/documentation\/space\/vector\/topencodemulti-implementations","title":"TopEncodeMulti Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/vector\/pushsinglevalue(arg:)","title":"func pushSingleValue<TE>(arg: TE)","type":"method"}],"path":"\/documentation\/space\/vector\/topencodemultioutput-implementations","title":"TopEncodeMultiOutput Implementations","type":"symbol"}],"path":"\/documentation\/space\/vector","title":"Vector","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/worldaccount\/init(address:balance:esdtbalances:owner:)","title":"init(address: String, balance: BigInt, esdtBalances: [String : [EsdtBalance]], owner: String?)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/worldaccount\/getbalance()","title":"func getBalance() -> BigUint","type":"method"},{"path":"\/documentation\/space\/worldaccount\/getesdtbalance(tokenidentifier:nonce:)","title":"func getEsdtBalance(tokenIdentifier: String, nonce: UInt64) -> BigUint","type":"method"},{"path":"\/documentation\/space\/worldaccount\/toaddress()","title":"func toAddress() -> Address","type":"method"}],"path":"\/documentation\/space\/worldaccount","title":"WorldAccount","type":"struct"},{"title":"Variables","type":"groupMarker"},{"path":"\/documentation\/space\/api","title":"var API: DummyApi","type":"var"},{"title":"Functions","type":"groupMarker"},{"path":"\/documentation\/space\/assertnoegldpayment()","title":"func assertNoEgldPayment()","type":"func"},{"path":"\/documentation\/space\/assertnoesdtpayment()","title":"func assertNoEsdtPayment()","type":"func"},{"path":"\/documentation\/space\/assertowner()","title":"func assertOwner()","type":"func"},{"path":"\/documentation\/space\/emitevent(topicshandle:datahandle:)","title":"func emitEvent(topicsHandle: Int32, dataHandle: Int32)","type":"func"},{"path":"\/documentation\/space\/getzeroedbuffer(count:)","title":"func getZeroedBuffer(count: Int32) -> Buffer","type":"func"},{"path":"\/documentation\/space\/require(_:_:)","title":"func require(Bool, @autoclosure () -> Buffer)","type":"func"},{"path":"\/documentation\/space\/runfailableoperations(transactions:)","title":"func runFailableOperations(transactions: () -> Void) throws(TransactionError)","type":"func"},{"path":"\/documentation\/space\/runtestcall(contractaddress:endpointname:args:transactioninput:transactionoutput:operation:)-2e22o","title":"func runTestCall<each InputArg, ReturnType>(contractAddress: String, endpointName: String, args: (repeat each InputArg), transactionInput: TransactionInput, transactionOutput: TransactionOutput, operation: (repeat each InputArg) -> ReturnType) throws(TransactionError) -> ReturnType","type":"func"},{"path":"\/documentation\/space\/runtestcall(contractaddress:endpointname:args:transactioninput:transactionoutput:operation:)-5103r","title":"func runTestCall<each InputArg>(contractAddress: String, endpointName: String, args: (repeat each InputArg), transactionInput: TransactionInput, transactionOutput: TransactionOutput, operation: (repeat each InputArg) -> Void) throws(TransactionError)","type":"func"},{"path":"\/documentation\/space\/smartcontracterror(message:)","title":"func smartContractError(message: Buffer) -> Never","type":"func"},{"title":"Macros","type":"groupMarker"},{"path":"\/documentation\/space\/callback()","title":"macro Callback()","type":"macro"},{"path":"\/documentation\/space\/codable()","title":"macro Codable()","type":"macro"},{"path":"\/documentation\/space\/contract()","title":"macro Contract()","type":"macro"},{"path":"\/documentation\/space\/event(datatype:)","title":"macro Event(dataType: any TopEncode.Type)","type":"macro"},{"path":"\/documentation\/space\/proxy()","title":"macro Proxy()","type":"macro"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/space\/spacecodable","title":"SpaceCodable","type":"typealias"},{"path":"\/documentation\/space\/vectortype","title":"VectorType","type":"typealias"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/space\/asynccallresult\/error(_:)","title":"case error(AsyncCallError)","type":"case"},{"path":"\/documentation\/space\/asynccallresult\/success(_:)","title":"case success(T)","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/asynccallresult\/init(topdecodemulti:)","title":"init(topDecodeMulti: inout some TopDecodeMultiInput)","type":"init"}],"path":"\/documentation\/space\/asynccallresult\/topdecodemulti-implementations","title":"TopDecodeMulti Implementations","type":"symbol"}],"path":"\/documentation\/space\/asynccallresult","title":"AsyncCallResult","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/space\/esdtlocalrolesflag\/burn","title":"case burn","type":"case"},{"path":"\/documentation\/space\/esdtlocalrolesflag\/mint","title":"case mint","type":"case"},{"path":"\/documentation\/space\/esdtlocalrolesflag\/nftaddquantity","title":"case nftAddQuantity","type":"case"},{"path":"\/documentation\/space\/esdtlocalrolesflag\/nftadduri","title":"case nftAddUri","type":"case"},{"path":"\/documentation\/space\/esdtlocalrolesflag\/nftburn","title":"case nftBurn","type":"case"},{"path":"\/documentation\/space\/esdtlocalrolesflag\/nftcreate","title":"case nftCreate","type":"case"},{"path":"\/documentation\/space\/esdtlocalrolesflag\/nftupdateattributes","title":"case nftUpdateAttributes","type":"case"},{"path":"\/documentation\/space\/esdtlocalrolesflag\/none","title":"case none","type":"case"},{"path":"\/documentation\/space\/esdtlocalrolesflag\/transfer","title":"case transfer","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/esdtlocalrolesflag\/init(rawvalue:)","title":"init?(rawValue: Int64)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/esdtlocalrolesflag\/getrolename()","title":"func getRoleName() -> Buffer","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/space\/esdtlocalrolesflag\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/space\/esdtlocalrolesflag\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/space\/esdtlocalrolesflag\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/esdtlocalrolesflag\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/space\/esdtlocalrolesflag\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/space\/esdtlocalrolesflag","title":"EsdtLocalRolesFlag","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/space\/optionalargument\/none","title":"case none","type":"case"},{"path":"\/documentation\/space\/optionalargument\/some(_:)","title":"case some(Wrapped)","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/optionalargument\/init(optional:)","title":"init(optional: Optional<Wrapped>)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/optionalargument\/intooptional()","title":"func intoOptional() -> Optional<Wrapped>","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/optionalargument\/init(depdecode:)","title":"init(depDecode: inout some NestedDecodeInput)","type":"init"}],"path":"\/documentation\/space\/optionalargument\/nesteddecode-implementations","title":"NestedDecode Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/optionalargument\/depencode(dest:)","title":"func depEncode<O>(dest: inout O)","type":"method"}],"path":"\/documentation\/space\/optionalargument\/nestedencode-implementations","title":"NestedEncode Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/optionalargument\/init(topdecode:)","title":"init(topDecode: Buffer)","type":"init"}],"path":"\/documentation\/space\/optionalargument\/topdecode-implementations","title":"TopDecode Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/optionalargument\/init(topdecodemulti:)-4n4xl","title":"init(topDecodeMulti: inout some TopDecodeMultiInput)","type":"init"},{"path":"\/documentation\/space\/optionalargument\/init(topdecodemulti:)-6d5mo","title":"init(topDecodeMulti: inout some TopDecodeMultiInput)","type":"init"}],"path":"\/documentation\/space\/optionalargument\/topdecodemulti-implementations","title":"TopDecodeMulti Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/optionalargument\/topencode(output:)","title":"func topEncode<T>(output: inout T)","type":"method"}],"path":"\/documentation\/space\/optionalargument\/topencode-implementations","title":"TopEncode Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/optionalargument\/multiencode(output:)-69hps","title":"func multiEncode<O>(output: inout O)","type":"method"},{"path":"\/documentation\/space\/optionalargument\/multiencode(output:)-9goqo","title":"func multiEncode<O>(output: inout O)","type":"method"}],"path":"\/documentation\/space\/optionalargument\/topencodemulti-implementations","title":"TopEncodeMulti Implementations","type":"symbol"}],"path":"\/documentation\/space\/optionalargument","title":"OptionalArgument","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/space\/tokentype\/fungible","title":"case fungible","type":"case"},{"path":"\/documentation\/space\/tokentype\/invalid","title":"case invalid","type":"case"},{"path":"\/documentation\/space\/tokentype\/meta","title":"case meta","type":"case"},{"path":"\/documentation\/space\/tokentype\/nonfungible","title":"case nonFungible","type":"case"},{"path":"\/documentation\/space\/tokentype\/semifungible","title":"case semiFungible","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/tokentype\/intoarraypayload()","title":"func intoArrayPayload() -> Buffer","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/space\/tokentype\/payloadsize","title":"static var payloadSize: Int32","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/space\/tokentype\/decodearraypayload(payload:)","title":"static func decodeArrayPayload(payload: Buffer) -> TokenType","type":"method"}],"path":"\/documentation\/space\/tokentype\/arrayitem-implementations","title":"ArrayItem Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/space\/tokentype\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/space\/tokentype\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/tokentype\/init(depdecode:)","title":"init(depDecode: inout some NestedDecodeInput)","type":"init"}],"path":"\/documentation\/space\/tokentype\/nesteddecode-implementations","title":"NestedDecode Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/tokentype\/depencode(dest:)","title":"func depEncode<O>(dest: inout O)","type":"method"}],"path":"\/documentation\/space\/tokentype\/nestedencode-implementations","title":"NestedEncode Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/tokentype\/init(topdecode:)","title":"init(topDecode: Buffer)","type":"init"}],"path":"\/documentation\/space\/tokentype\/topdecode-implementations","title":"TopDecode Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/tokentype\/init(topdecodemulti:)","title":"init(topDecodeMulti: inout some TopDecodeMultiInput)","type":"init"}],"path":"\/documentation\/space\/tokentype\/topdecodemulti-implementations","title":"TopDecodeMulti Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/tokentype\/topencode(output:)","title":"func topEncode<EncodeOutput>(output: inout EncodeOutput)","type":"method"}],"path":"\/documentation\/space\/tokentype\/topencode-implementations","title":"TopEncode Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/tokentype\/multiencode(output:)","title":"func multiEncode<O>(output: inout O)","type":"method"}],"path":"\/documentation\/space\/tokentype\/topencodemulti-implementations","title":"TopEncodeMulti Implementations","type":"symbol"}],"path":"\/documentation\/space\/tokentype","title":"TokenType","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/space\/transactionerror\/executionfailed(reason:)","title":"case executionFailed(reason: String)","type":"case"},{"path":"\/documentation\/space\/transactionerror\/usererror(message:)","title":"case userError(message: String)","type":"case"},{"path":"\/documentation\/space\/transactionerror\/worlderror(message:)","title":"case worldError(message: String)","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/space\/transactionerror\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/space\/transactionerror\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/space\/transactionerror\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/space\/transactionerror\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/space\/transactionerror","title":"TransactionError","type":"enum"},{"title":"Extended Modules","type":"groupMarker"},{"children":[{"title":"Extended Structures","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/foundation\/data\/hexencodedstring()","title":"func hexEncodedString() -> String","type":"method"}],"path":"\/documentation\/space\/foundation\/data","title":"Data","type":"extension"}],"path":"\/documentation\/space\/foundation","title":"Foundation","type":"extension"},{"children":[{"title":"Extended Structures","type":"groupMarker"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/swift\/bool\/intoarraypayload()","title":"func intoArrayPayload() -> Buffer","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/space\/swift\/bool\/payloadsize","title":"static var payloadSize: Int32","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/space\/swift\/bool\/decodearraypayload(payload:)","title":"static func decodeArrayPayload(payload: Buffer) -> Bool","type":"method"}],"path":"\/documentation\/space\/swift\/bool\/arrayitem-implementations","title":"ArrayItem Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/swift\/bool\/init(depdecode:)","title":"init(depDecode: inout some NestedDecodeInput)","type":"init"}],"path":"\/documentation\/space\/swift\/bool\/nesteddecode-implementations","title":"NestedDecode Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/swift\/bool\/depencode(dest:)","title":"func depEncode<O>(dest: inout O)","type":"method"}],"path":"\/documentation\/space\/swift\/bool\/nestedencode-implementations","title":"NestedEncode Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/swift\/bool\/init(topdecode:)","title":"init(topDecode: Buffer)","type":"init"}],"path":"\/documentation\/space\/swift\/bool\/topdecode-implementations","title":"TopDecode Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/swift\/bool\/init(topdecodemulti:)","title":"init(topDecodeMulti: inout some TopDecodeMultiInput)","type":"init"}],"path":"\/documentation\/space\/swift\/bool\/topdecodemulti-implementations","title":"TopDecodeMulti Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/swift\/bool\/topencode(output:)","title":"func topEncode<T>(output: inout T)","type":"method"}],"path":"\/documentation\/space\/swift\/bool\/topencode-implementations","title":"TopEncode Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/swift\/bool\/multiencode(output:)","title":"func multiEncode<O>(output: inout O)","type":"method"}],"path":"\/documentation\/space\/swift\/bool\/topencodemulti-implementations","title":"TopEncodeMulti Implementations","type":"symbol"}],"path":"\/documentation\/space\/swift\/bool","title":"Bool","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/swift\/int\/init(depdecode:)","title":"init(depDecode: inout some NestedDecodeInput)","type":"init"}],"path":"\/documentation\/space\/swift\/int\/nesteddecode-implementations","title":"NestedDecode Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/swift\/int\/depencode(dest:)","title":"func depEncode<O>(dest: inout O)","type":"method"}],"path":"\/documentation\/space\/swift\/int\/nestedencode-implementations","title":"NestedEncode Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/swift\/int\/init(topdecode:)","title":"init(topDecode: Buffer)","type":"init"}],"path":"\/documentation\/space\/swift\/int\/topdecode-implementations","title":"TopDecode Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/swift\/int\/init(topdecodemulti:)","title":"init(topDecodeMulti: inout some TopDecodeMultiInput)","type":"init"}],"path":"\/documentation\/space\/swift\/int\/topdecodemulti-implementations","title":"TopDecodeMulti Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/swift\/int\/topencode(output:)","title":"func topEncode<T>(output: inout T)","type":"method"}],"path":"\/documentation\/space\/swift\/int\/topencode-implementations","title":"TopEncode Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/swift\/int\/multiencode(output:)","title":"func multiEncode<O>(output: inout O)","type":"method"}],"path":"\/documentation\/space\/swift\/int\/topencodemulti-implementations","title":"TopEncodeMulti Implementations","type":"symbol"}],"path":"\/documentation\/space\/swift\/int","title":"Int","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/swift\/int32\/init(depdecode:)","title":"init(depDecode: inout some NestedDecodeInput)","type":"init"}],"path":"\/documentation\/space\/swift\/int32\/nesteddecode-implementations","title":"NestedDecode Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/swift\/int32\/depencode(dest:)","title":"func depEncode<O>(dest: inout O)","type":"method"}],"path":"\/documentation\/space\/swift\/int32\/nestedencode-implementations","title":"NestedEncode Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/swift\/int32\/init(topdecode:)","title":"init(topDecode: Buffer)","type":"init"}],"path":"\/documentation\/space\/swift\/int32\/topdecode-implementations","title":"TopDecode Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/swift\/int32\/init(topdecodemulti:)","title":"init(topDecodeMulti: inout some TopDecodeMultiInput)","type":"init"}],"path":"\/documentation\/space\/swift\/int32\/topdecodemulti-implementations","title":"TopDecodeMulti Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/swift\/int32\/topencode(output:)","title":"func topEncode<T>(output: inout T)","type":"method"}],"path":"\/documentation\/space\/swift\/int32\/topencode-implementations","title":"TopEncode Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/swift\/int32\/multiencode(output:)","title":"func multiEncode<O>(output: inout O)","type":"method"}],"path":"\/documentation\/space\/swift\/int32\/topencodemulti-implementations","title":"TopEncodeMulti Implementations","type":"symbol"}],"path":"\/documentation\/space\/swift\/int32","title":"Int32","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/swift\/staticstring\/depencode(dest:)","title":"func depEncode<O>(dest: inout O)","type":"method"}],"path":"\/documentation\/space\/swift\/staticstring\/nestedencode-implementations","title":"NestedEncode Implementations","type":"symbol"}],"path":"\/documentation\/space\/swift\/staticstring","title":"StaticString","type":"extension"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/space\/swift\/string\/hexadecimal","title":"var hexadecimal: Data","type":"property"},{"path":"\/documentation\/space\/swift\/string\/hexadecimalstring","title":"var hexadecimalString: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/swift\/string\/toaddressdata()","title":"func toAddressData() -> Data","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/swift\/string\/depencode(dest:)","title":"func depEncode<O>(dest: inout O)","type":"method"}],"path":"\/documentation\/space\/swift\/string\/nestedencode-implementations","title":"NestedEncode Implementations","type":"symbol"}],"path":"\/documentation\/space\/swift\/string","title":"String","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/swift\/uint16\/intoarraypayload()","title":"func intoArrayPayload() -> Buffer","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/space\/swift\/uint16\/payloadsize","title":"static var payloadSize: Int32","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/space\/swift\/uint16\/decodearraypayload(payload:)","title":"static func decodeArrayPayload(payload: Buffer) -> UInt16","type":"method"}],"path":"\/documentation\/space\/swift\/uint16\/arrayitem-implementations","title":"ArrayItem Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/swift\/uint16\/init(depdecode:)","title":"init(depDecode: inout some NestedDecodeInput)","type":"init"}],"path":"\/documentation\/space\/swift\/uint16\/nesteddecode-implementations","title":"NestedDecode Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/swift\/uint16\/depencode(dest:)","title":"func depEncode<O>(dest: inout O)","type":"method"}],"path":"\/documentation\/space\/swift\/uint16\/nestedencode-implementations","title":"NestedEncode Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/swift\/uint16\/init(topdecode:)","title":"init(topDecode: Buffer)","type":"init"}],"path":"\/documentation\/space\/swift\/uint16\/topdecode-implementations","title":"TopDecode Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/swift\/uint16\/init(topdecodemulti:)","title":"init(topDecodeMulti: inout some TopDecodeMultiInput)","type":"init"}],"path":"\/documentation\/space\/swift\/uint16\/topdecodemulti-implementations","title":"TopDecodeMulti Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/swift\/uint16\/topencode(output:)","title":"func topEncode<T>(output: inout T)","type":"method"}],"path":"\/documentation\/space\/swift\/uint16\/topencode-implementations","title":"TopEncode Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/swift\/uint16\/multiencode(output:)","title":"func multiEncode<O>(output: inout O)","type":"method"}],"path":"\/documentation\/space\/swift\/uint16\/topencodemulti-implementations","title":"TopEncodeMulti Implementations","type":"symbol"}],"path":"\/documentation\/space\/swift\/uint16","title":"UInt16","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/swift\/uint32\/intoarraypayload()","title":"func intoArrayPayload() -> Buffer","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/space\/swift\/uint32\/payloadsize","title":"static var payloadSize: Int32","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/space\/swift\/uint32\/decodearraypayload(payload:)","title":"static func decodeArrayPayload(payload: Buffer) -> UInt32","type":"method"}],"path":"\/documentation\/space\/swift\/uint32\/arrayitem-implementations","title":"ArrayItem Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/swift\/uint32\/init(depdecode:)","title":"init(depDecode: inout some NestedDecodeInput)","type":"init"}],"path":"\/documentation\/space\/swift\/uint32\/nesteddecode-implementations","title":"NestedDecode Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/swift\/uint32\/depencode(dest:)","title":"func depEncode<O>(dest: inout O)","type":"method"}],"path":"\/documentation\/space\/swift\/uint32\/nestedencode-implementations","title":"NestedEncode Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/swift\/uint32\/init(topdecode:)","title":"init(topDecode: Buffer)","type":"init"}],"path":"\/documentation\/space\/swift\/uint32\/topdecode-implementations","title":"TopDecode Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/swift\/uint32\/init(topdecodemulti:)","title":"init(topDecodeMulti: inout some TopDecodeMultiInput)","type":"init"}],"path":"\/documentation\/space\/swift\/uint32\/topdecodemulti-implementations","title":"TopDecodeMulti Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/swift\/uint32\/topencode(output:)","title":"func topEncode<T>(output: inout T)","type":"method"}],"path":"\/documentation\/space\/swift\/uint32\/topencode-implementations","title":"TopEncode Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/swift\/uint32\/multiencode(output:)","title":"func multiEncode<O>(output: inout O)","type":"method"}],"path":"\/documentation\/space\/swift\/uint32\/topencodemulti-implementations","title":"TopEncodeMulti Implementations","type":"symbol"}],"path":"\/documentation\/space\/swift\/uint32","title":"UInt32","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/swift\/uint64\/intoarraypayload()","title":"func intoArrayPayload() -> Buffer","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/space\/swift\/uint64\/payloadsize","title":"static var payloadSize: Int32","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/space\/swift\/uint64\/decodearraypayload(payload:)","title":"static func decodeArrayPayload(payload: Buffer) -> UInt64","type":"method"}],"path":"\/documentation\/space\/swift\/uint64\/arrayitem-implementations","title":"ArrayItem Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/swift\/uint64\/init(depdecode:)","title":"init(depDecode: inout some NestedDecodeInput)","type":"init"}],"path":"\/documentation\/space\/swift\/uint64\/nesteddecode-implementations","title":"NestedDecode Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/swift\/uint64\/depencode(dest:)","title":"func depEncode<O>(dest: inout O)","type":"method"}],"path":"\/documentation\/space\/swift\/uint64\/nestedencode-implementations","title":"NestedEncode Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/swift\/uint64\/init(topdecode:)","title":"init(topDecode: Buffer)","type":"init"}],"path":"\/documentation\/space\/swift\/uint64\/topdecode-implementations","title":"TopDecode Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/swift\/uint64\/init(topdecodemulti:)","title":"init(topDecodeMulti: inout some TopDecodeMultiInput)","type":"init"}],"path":"\/documentation\/space\/swift\/uint64\/topdecodemulti-implementations","title":"TopDecodeMulti Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/swift\/uint64\/topencode(output:)","title":"func topEncode<T>(output: inout T)","type":"method"}],"path":"\/documentation\/space\/swift\/uint64\/topencode-implementations","title":"TopEncode Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/swift\/uint64\/multiencode(output:)","title":"func multiEncode<O>(output: inout O)","type":"method"}],"path":"\/documentation\/space\/swift\/uint64\/topencodemulti-implementations","title":"TopEncodeMulti Implementations","type":"symbol"}],"path":"\/documentation\/space\/swift\/uint64","title":"UInt64","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/swift\/uint8\/intoarraypayload()","title":"func intoArrayPayload() -> Buffer","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/space\/swift\/uint8\/payloadsize","title":"static var payloadSize: Int32","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/space\/swift\/uint8\/decodearraypayload(payload:)","title":"static func decodeArrayPayload(payload: Buffer) -> UInt8","type":"method"}],"path":"\/documentation\/space\/swift\/uint8\/arrayitem-implementations","title":"ArrayItem Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/swift\/uint8\/init(depdecode:)","title":"init(depDecode: inout some NestedDecodeInput)","type":"init"}],"path":"\/documentation\/space\/swift\/uint8\/nesteddecode-implementations","title":"NestedDecode Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/swift\/uint8\/depencode(dest:)","title":"func depEncode<O>(dest: inout O)","type":"method"}],"path":"\/documentation\/space\/swift\/uint8\/nestedencode-implementations","title":"NestedEncode Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/swift\/uint8\/init(topdecode:)","title":"init(topDecode: Buffer)","type":"init"}],"path":"\/documentation\/space\/swift\/uint8\/topdecode-implementations","title":"TopDecode Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/swift\/uint8\/init(topdecodemulti:)","title":"init(topDecodeMulti: inout some TopDecodeMultiInput)","type":"init"}],"path":"\/documentation\/space\/swift\/uint8\/topdecodemulti-implementations","title":"TopDecodeMulti Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/swift\/uint8\/topencode(output:)","title":"func topEncode<T>(output: inout T)","type":"method"}],"path":"\/documentation\/space\/swift\/uint8\/topencode-implementations","title":"TopEncode Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/swift\/uint8\/multiencode(output:)","title":"func multiEncode<O>(output: inout O)","type":"method"}],"path":"\/documentation\/space\/swift\/uint8\/topencodemulti-implementations","title":"TopEncodeMulti Implementations","type":"symbol"}],"path":"\/documentation\/space\/swift\/uint8","title":"UInt8","type":"extension"},{"title":"Extended Enumerations","type":"groupMarker"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/swift\/optional\/init(depdecode:)","title":"init(depDecode: inout some NestedDecodeInput)","type":"init"}],"path":"\/documentation\/space\/swift\/optional\/nesteddecode-implementations","title":"NestedDecode Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/swift\/optional\/depencode(dest:)","title":"func depEncode<O>(dest: inout O)","type":"method"}],"path":"\/documentation\/space\/swift\/optional\/nestedencode-implementations","title":"NestedEncode Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/swift\/optional\/init(topdecode:)","title":"init(topDecode: Buffer)","type":"init"}],"path":"\/documentation\/space\/swift\/optional\/topdecode-implementations","title":"TopDecode Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/space\/swift\/optional\/init(topdecodemulti:)","title":"init(topDecodeMulti: inout some TopDecodeMultiInput)","type":"init"}],"path":"\/documentation\/space\/swift\/optional\/topdecodemulti-implementations","title":"TopDecodeMulti Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/space\/swift\/optional\/topencode(output:)","title":"func topEncode<EncodeOutput>(output: inout EncodeOutput)","type":"method"}],"path":"\/documentation\/space\/swift\/optional\/topencode-implementations","title":"TopEncode Implementations","type":"symbol"}],"path":"\/documentation\/space\/swift\/optional","title":"Optional","type":"extension"}],"path":"\/documentation\/space\/swift","title":"Swift","type":"extension"}],"path":"\/documentation\/space","title":"Space","type":"module"}]},"schemaVersion":{"major":0,"minor":1,"patch":2}}