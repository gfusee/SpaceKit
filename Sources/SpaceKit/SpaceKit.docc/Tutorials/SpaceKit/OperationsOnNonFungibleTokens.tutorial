@Tutorial(time: 15) {
    @Intro(title: "Managing Non-Fungible Tokens") {
        Non-fungible tokens (NFTs) are unique digital assets that cannot be interchanged. Each NFT is associated with a unique identifier, known as a nonce. You can think of it like an airline ticket—each ticket is assigned to a specific passenger, with individual preferences and details.

        Once an NFT has been issued, new nonces can be created if the appropriate role is granted. This operation executes synchronously.

        For tokens that are semi-fungible or classified as meta-ESDTs, the supply for an existing nonce can be increased, provided the necessary role is assigned. This process, referred to as "adding quantity," functions similarly to minting for fungible tokens and is also synchronous.

        Burning tokens requires that they be designated as burnable and that the smart contract holds the burn role. A contract can only burn tokens that it owns. Like creating new nonces or increasing supply, burning is a synchronous operation.

        In this tutorial, we will focus on semi-fungible tokens.
    }

    @Section(title: "Assign Create, AddQuantity, and Burn Roles") {
        @ContentAndMedia {
            By default, a smart contract does not have permission to create new nonces, increase supply, or burn tokens. These roles must be explicitly granted before executing any of these actions. Assigning roles is an asynchronous operation that does not require a callback. If the token supports role management, only the token’s manager—the original issuer—can assign these roles.
        }

        @Steps {
            @Step {
                Begin with the code from a previous section where we issued a semi-fungible token.

                The token is configured to support nonce creation, supply increases, and burning.

                @Code(name: "lib.swift", file: "OperationsOnNonFungibleTokensSection1Step1.swift")
            }

            @Step {
                Define a restricted endpoint named `setRoles`, allowing only the contract owner to invoke it.

                @Code(name: "lib.swift", file: "OperationsOnNonFungibleTokensSection1Step2.swift")
            }

            @Step {
                Ensure that the token has already been issued before proceeding.

                @Code(name: "lib.swift", file: "OperationsOnNonFungibleTokensSection1Step3.swift")
            }

            @Step {
                Implement the `setTokenRoles` function to assign the necessary roles.

                @Code(name: "lib.swift", file: "OperationsOnNonFungibleTokensSection1Step4.swift")
            }

            @Step {
                Register a promise to initiate the asynchronous role assignment.

                @Code(name: "lib.swift", file: "OperationsOnNonFungibleTokensSection1Step5.swift")
            }
        }
    }

    @Section(title: "Create a New Nonce") {
        @ContentAndMedia {
            With the create role assigned, you can now generate new nonces for the token.
        }

        @Steps {
            @Step {
                Start from the code in the previous section.

                @Code(name: "lib.swift", file: "OperationsOnNonFungibleTokensSection2Step1.swift")
            }

            @Step {
                Define a `createNewNonce` endpoint, accessible only to the contract owner. This endpoint accepts an `initialSupply` parameter, specifying the number of tokens to create for the nonce. It returns a `UInt64` representing the newly created nonce.

                @Code(name: "lib.swift", file: "OperationsOnNonFungibleTokensSection2Step2.swift")
            }

            @Step {
                Verify that the contract holds the create role.

                This ensures that `setTokenRoles` executed successfully and that the role assignment completed.

                @Code(name: "lib.swift", file: "OperationsOnNonFungibleTokensSection2Step3.swift")
            }

            @Step {
                Execute the nonce creation.

                This operation is synchronous. If it fails, the transaction is reverted, and the newly created tokens are immediately added to the contract’s balance.

                @Code(name: "lib.swift", file: "OperationsOnNonFungibleTokensSection2Step4.swift")
            }

            @Step {
                Transfer the created tokens to the endpoint caller.

                @Code(name: "lib.swift", file: "OperationsOnNonFungibleTokensSection2Step5.swift")
            }

            @Step {
                Return the newly created nonce.

                @Code(name: "lib.swift", file: "OperationsOnNonFungibleTokensSection2Step6.swift")
            }
        }
    }

    @Section(title: "Add Quantity to an Existing Nonce") {
        @ContentAndMedia {
            After creating new tokens, you may need to increase their supply. This applies only to semi-fungible and meta-ESDT tokens, as non-fungible tokens have a fixed supply of one per nonce.
        }

        @Steps {
            @Step {
                Use the code from the previous section as a starting point.

                @Code(name: "lib.swift", file: "OperationsOnNonFungibleTokensSection3Step1.swift")
            }

            @Step {
                Define an `addQuantity` endpoint, accessible only to the contract owner. This endpoint accepts `nonce` and `amount` parameters, specifying which nonce to increase and by how much.

                @Code(name: "lib.swift", file: "OperationsOnNonFungibleTokensSection3Step2.swift")
            }

            @Step {
                Verify that the contract holds the necessary role.

                This ensures that `setTokenRoles` executed successfully and that the role assignment completed.

                @Code(name: "lib.swift", file: "OperationsOnNonFungibleTokensSection3Step3.swift")
            }

            @Step {
                Execute the quantity addition.

                SpaceKit automatically determines the appropriate function for minting fungible or increasing semi-fungible token supply.

                @Code(name: "lib.swift", file: "OperationsOnNonFungibleTokensSection3Step4.swift")
            }

            @Step {
                Transfer the newly minted tokens to the caller.

                @Code(name: "lib.swift", file: "OperationsOnNonFungibleTokensSection3Step5.swift")
            }
        }
    }

    @Section(title: "Burn Tokens") {
        @ContentAndMedia {
            Burning tokens is the inverse of adding quantity. Now that the contract has the burn role, you can proceed with this operation.
        }

        @Steps {
            @Step {
                Use the code from the previous section as a foundation.

                @Code(name: "lib.swift", file: "OperationsOnNonFungibleTokensSection4Step1.swift")
            }

            @Step {
                Define a `burnTokens` endpoint, restricted to the contract owner. This endpoint accepts `nonce` and `burnAmount` parameters, specifying which nonce and how many tokens to burn.

                @Code(name: "lib.swift", file: "OperationsOnNonFungibleTokensSection4Step2.swift")
            }

            @Step {
                Ensure that the contract possesses the required burn role.

                @Code(name: "lib.swift", file: "OperationsOnNonFungibleTokensSection4Step3.swift")
            }

            @Step {
                Execute the burn operation, removing the specified amount from the contract’s balance.

                Note: The burn operation is synchronous. If the contract does not have enough tokens, the transaction is reverted.

                @Code(name: "lib.swift", file: "OperationsOnNonFungibleTokensSection4Step4.swift")
            }
        }
    }
}
