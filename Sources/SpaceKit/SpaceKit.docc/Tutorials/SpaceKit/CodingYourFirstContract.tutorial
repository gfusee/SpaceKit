@Tutorial(time: 20) {
    @Intro(title: "Building Your First Smart Contract") {
        In this tutorial, you’ll create a simple smart contract that manages a counter. Users can increment or decrement the counter, and the changes are persisted across contract executions.
    }

    @Section(title: "Initializing the Project") {
        @ContentAndMedia {
            Before writing the contract, set up the project using the SpaceKit command-line tool.
        }

        @Steps {
            @Step {
                Open a terminal.

                @Image(source: "InstallingToolsSection1Step1.png", alt: "An empty terminal window.")
            }

            @Step {
                Navigate to your desired directory and execute the command `space init Counter`.

                This command generates a new folder named "Counter."

                @Image(source: "CodingFirstContractSection1Step2.png", alt: "Output of the `space init Counter` command.")
            }

            @Step {
                Open the "Counter" directory in your preferred Swift IDE. Xcode or VSCode (with the official Swift extension) are recommended.
                
                In this tutorial, Xcode is used. If using other environments, consult their respective guides.

                @Image(source: "CodingFirstContractSection1Step3.png", alt: "Xcode project selection screen with 'Counter' highlighted.")
            }

            @Step {
                (Optional) Build the project for improved IDE performance and macro generation.

                In Xcode, go to **Product > Build** or use the shortcut `⌘ + B`.

                @Image(source: "CodingFirstContractSection1Step4.png", alt: "Xcode's Product menu with 'Build' highlighted.")
            }
        }
    }

    @Section(title: "Writing the Contract Code") {
        @ContentAndMedia {
            Let’s write the code for the smart contract.
        }

        @Steps {
            @Step {
                Open the `Contracts/Counter/Source/lib.swift` file and clear its contents.

                @Code(name: "lib.swift", file: "CodingFirstContractSection2Step1.swift")
            }

            @Step {
                Import the SpaceKit framework by adding `import SpaceKit` at the top of the file.

                **Note:** Only the SpaceKit library is compatible with SpaceVM. Avoid importing Foundation or other frameworks.

                @Code(name: "lib.swift", file: "CodingFirstContractSection2Step2.swift")
            }

            @Step {
                Define the contract by creating a struct annotated with `@Controller`.

                **Tip:** You can define multiple controllers in a single or multiple files. A contract consists of all the controllers declared.

                @Code(name: "lib.swift", file: "CodingFirstContractSection2Step3.swift")
            }

            @Step {
                Add a storage property to persist the counter using `@Storage(key: "counter")`.
                
                Use the `BigUint` type to handle arbitrarily large numbers.

                @Code(name: "lib.swift", file: "CodingFirstContractSection2Step4.swift")
            }

            @Step {
                Create an `increase` endpoint to increment the counter. This endpoint accepts a parameter specifying the increment amount.

                @Code(name: "lib.swift", file: "CodingFirstContractSection2Step5.swift")
            }

            @Step {
                Add a `decrease` endpoint to decrement the counter.

                **Note:** The `BigUint` type prevents negative values. If a decrement results in a negative value, the operation fails without any changes.

                @Code(name: "lib.swift", file: "CodingFirstContractSection2Step6.swift")
            }

            @Step {
                Implement a view function `getCounter` to retrieve the counter value.
                
                This function does not modify the contract’s state, that's why we call it "view".

                @Code(name: "lib.swift", file: "CodingFirstContractSection2Step7.swift")
            }

            @Step {
                Add an initializer to set the initial counter value during contract deployment.

                **Tip:** The initializer is a global function executed once during deployment. It is optional.

                @Code(name: "lib.swift", file: "CodingFirstContractSection2Step8.swift")
            }
        }
    }

    @Section(title: "Testing the Contract") {
        @ContentAndMedia {
            Test your contract using SpaceKit’s SwiftVM emulator.
        }

        @Steps {
            @Step {
                Open the `Contracts/Counter/Tests/CounterTests` directory. Replace any files with a new file named `CounterTests.swift`.

                @Image(source: "CodingFirstContractSection3Step1.png", alt: "File tree showing newly created `CounterTests.swift`.")
            }

            @Step {
                Import `SpaceKit`, your contract, and `XCTest` into the test file.

                **Note:** XCTest is the official framework for unit tests in Swift.

                @Code(name: "CounterTests.swift", file: "CodingFirstContractSection3Step2.swift")
            }

            @Step {
                Define the contract address. SwiftVM assigns a deterministic address for your contract.

                @Code(name: "CounterTests.swift", file: "CodingFirstContractSection3Step3.swift")
            }

            @Step {
                Create a test class inheriting from `ContractTestCase`.

                **Important:** Avoid overriding `setUp` and `tearDown` methods.

                @Code(name: "CounterTests.swift", file: "CodingFirstContractSection3Step4.swift")
            }

            @Step {
                Override `initialAccounts` to define the contract address in SwiftVM.

                **Important:** Include all `@Controller` annotated structs in the `controllers` parameter.

                @Code(name: "CounterTests.swift", file: "CodingFirstContractSection3Step5.swift")
            }

            @Step {
                Write a unit test for deploying the contract with an initial counter value of zero.

                @Code(name: "CounterTests.swift", file: "CodingFirstContractSection3Step6.swift")
            }

            @Step {
                Deploy the contract using `self.deployContract`.
                
                This calls your @Init function if defined and captures any deployment errors.

                @Code(name: "CounterTests.swift", file: "CodingFirstContractSection3Step7.swift")
            }

            @Step {
                Instantiate the `CounterController` for interacting with the contract.

                **Note:** The instantiated controller includes, on each endpoint, optional parameters to mock transaction data.

                @Code(name: "CounterTests.swift", file: "CodingFirstContractSection3Step8.swift")
            }

            @Step {
                Verify the counter’s initial value with the `getCounter` view.

                @Code(name: "CounterTests.swift", file: "CodingFirstContractSection3Step9.swift")
            }
            
            @Step {
                Add a unit test to verify deploying the contract with a non-zero initial value.

                @Code(name: "CounterTests.swift", file: "CodingFirstContractSection3Step10.swift")
            }

            @Step {
                Create unit tests for the increase endpoint, similar to the deployment tests.

                @Code(name: "CounterTests.swift", file: "CodingFirstContractSection3Step11.swift")
            }

            @Step {
                Repeat for the decrease endpoint.

                @Code(name: "CounterTests.swift", file: "CodingFirstContractSection3Step12.swift")
            }

            @Step {
                Add a test to ensure failure when trying to decrease the counter below zero.

                @Code(name: "CounterTests.swift", file: "CodingFirstContractSection3Step13.swift")
            }

            @Step {
                Run the tests to confirm your contract works correctly!

                @Image(source: "CodingFirstContractSection3Step14.png", alt: "Xcode's test tab showing all tests passed.")
            }
        }
    }
}
