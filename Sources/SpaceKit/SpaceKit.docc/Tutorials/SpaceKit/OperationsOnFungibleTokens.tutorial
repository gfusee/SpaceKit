@Tutorial(time: 15) {
    @Intro(title: "Managing Fungible Tokens") {
        Fungible tokens function similarly to traditional currencies, making them the simplest type of token to work with.

        After issuing a fungible token, you can increase its supply by minting new tokens or decrease it by burning existing tokens.

        Minting creates new tokens, expanding the total supply. Burning permanently removes tokens from circulation, reducing the total supply.

        To mint tokens, the token must be designated as mintable, and the smart contract must hold the mint role. Minting occurs synchronously, making the newly created tokens immediately available for transactions.

        To burn tokens, the token must be designated as burnable, and the smart contract must hold the burn role. A contract can only burn tokens that it owns. Like minting, burning is a synchronous process.
    }
        
    @Section(title: "Assign Mint and Burn Roles") {
        @ContentAndMedia {
            By default, a smart contract does not have permission to mint or burn tokens. These roles must be explicitly assigned before performing either operation. Assigning roles is an asynchronous process that does not require a callback. If the token supports role management, only the token’s manager—the original issuer—can grant these roles.
        }

        @Steps {
            @Step {
                Start with the code from the previous section, where the fungible token was issued.

                The token is configured to be both mintable and burnable.

                @Code(name: "lib.swift", file: "OperationsOnFungibleTokensSection1Step1.swift")
            }

            @Step {
                Define a restricted endpoint named `setMintAndBurnRoles`, allowing only the contract owner to invoke it.

                @Code(name: "lib.swift", file: "OperationsOnFungibleTokensSection1Step2.swift")
            }

            @Step {
                Ensure that the token has already been issued before proceeding.

                @Code(name: "lib.swift", file: "OperationsOnFungibleTokensSection1Step3.swift")
            }

            @Step {
                Implement the `setTokenRoles` function to assign the necessary roles.

                @Code(name: "lib.swift", file: "OperationsOnFungibleTokensSection1Step4.swift")
            }

            @Step {
                Register a promise to initiate the asynchronous role assignment.

                @Code(name: "lib.swift", file: "OperationsOnFungibleTokensSection1Step5.swift")
            }
        }
    }
        
    @Section(title: "Mint New Tokens") {
        @ContentAndMedia {
            Now that the contract has the mint role, you can proceed with minting tokens.
        }

        @Steps {
            @Step {
                Use the code from the previous section as your starting point.

                The token remains both mintable and burnable.

                @Code(name: "lib.swift", file: "OperationsOnFungibleTokensSection2Step1.swift")
            }

            @Step {
                Define a `mintTokens` endpoint, accessible only to the contract owner. This endpoint accepts a `mintAmount` parameter, specifying the number of tokens to mint.

                @Code(name: "lib.swift", file: "OperationsOnFungibleTokensSection2Step2.swift")
            }

            @Step {
                Retrieve the roles assigned to the smart contract for the issued token.

                @Code(name: "lib.swift", file: "OperationsOnFungibleTokensSection2Step3.swift")
            }

            @Step {
                Confirm that the contract possesses the mint role.

                This ensures that `setMintAndBurnRoles` executed successfully and that the role assignment completed.

                @Code(name: "lib.swift", file: "OperationsOnFungibleTokensSection2Step4.swift")
            }

            @Step {
                Execute the minting operation.

                Minting occurs synchronously. If the operation fails, the transaction is reverted. Newly minted tokens are added to the contract’s balance immediately.

                @Code(name: "lib.swift", file: "OperationsOnFungibleTokensSection2Step5.swift")
            }

            @Step {
                Transfer the minted tokens to the caller of the endpoint.

                @Code(name: "lib.swift", file: "OperationsOnFungibleTokensSection2Step6.swift")
            }
        }
    }
        
    @Section(title: "Burn Tokens") {
        @ContentAndMedia {
            Burning tokens is the inverse of minting. Since the contract now has the burn role, you can proceed with the burn operation.
        }

        @Steps {
            @Step {
                Use the code from the previous section as your base.

                The token remains both mintable and burnable.

                @Code(name: "lib.swift", file: "OperationsOnFungibleTokensSection3Step1.swift")
            }
            
            @Step {
                Define a `burnTokens` endpoint, restricted to the contract owner. This endpoint requires a `burnAmount` parameter, specifying the number of tokens to remove from circulation.

                @Code(name: "lib.swift", file: "OperationsOnFungibleTokensSection3Step2.swift")
            }

            @Step {
                Validate that the contract holds the necessary burn role before proceeding.

                @Code(name: "lib.swift", file: "OperationsOnFungibleTokensSection3Step3.swift")
            }

            @Step {
                Execute the burn operation, removing tokens from the contract’s balance.

                Note: The burn operation is synchronous. If the contract does not have enough tokens, the transaction is reverted.

                @Code(name: "lib.swift", file: "OperationsOnFungibleTokensSection3Step4.swift")
            }
        }
    }
}
