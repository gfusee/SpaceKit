@Tutorials(name: "SpaceKit") {
    @Intro(title: "Meet SpaceKit") {
        Discover how SpaceKit simplifies blockchain development using Swift. Dive into the world of Web3 with ease and efficiency.
    }

    @Volume(name: "Getting Started") {
        Start your journey as a blockchain developer.

        @Image(source: "logo.png", alt: "A dummy image.")

        @Chapter(name: "Installing the Tools") {
            @TutorialReference(tutorial: "doc:InstallingTools")

            @Image(source: "logo.png", alt: "A dummy image.")
        }

        @Chapter(name: "Building Your First Smart Contract") {
            @TutorialReference(tutorial: "doc:CodingYourFirstContract")

            @Image(source: "logo.png", alt: "A dummy image.")
        }
    }

    @Volume(name: "Deep Dive into SpaceKit Concepts") {
        Gain a deeper understanding of SpaceKit's architecture, from core types to advanced usage scenarios.

        @Image(source: "logo.png", alt: "A dummy image.")

        @Chapter(name: "Exploring SpaceKit's Types") {
            @TutorialReference(tutorial: "doc:FamiliarizeWithTypes")
            Learn about the core types that power smart contracts in SpaceKit, including WebAssembly integration and Swift interoperability.

            @Image(source: "logo.png", alt: "A dummy image.")
        }

        @Chapter(name: "Persisting Data Across Executions") {
            @TutorialReference(tutorial: "doc:StoreValues")
            Discover how to retain data across multiple contract executions using SpaceKit's storage features.

            @Image(source: "logo.png", alt: "A dummy image.")
        }

        @Chapter(name: "Retrieving Information from the Blockchain") {
            @TutorialReference(tutorial: "doc:GetInfo")
            Learn how to access transaction and blockchain context data, such as caller information, payments, and timestamps, using the SpaceKit framework.

            @Image(source: "logo.png", alt: "A dummy image.")
        }
        
        @Chapter(name: "Interacting with Other Contracts") {
            @TutorialReference(tutorial: "doc:SyncCalls")
            Learn how to enable smart contracts to call other contracts in a synchronous manner, and explore contract-to-contract interaction using SpaceKit's proxy mechanisms.

            @Image(source: "logo.png", alt: "A dummy image.")
        }
        
        @Chapter(name: "Calling Contracts Across Shards") {
            @TutorialReference(tutorial: "doc:AsyncCalls")
            Asynchronous calls enable interaction with contracts across different shards. Let’s explore how to implement these cross-shard calls in SpaceKit.

            @Image(source: "logo.png", alt: "A dummy image.")
        }
    }
    
    @Volume(name: "Create and Manage Tokens") {
        Tokens are a core component of blockchain technology. With SpaceKit, you can easily create and manage tokens to suit your application's needs.

        @Image(source: "logo.png", alt: "A dummy image.")
        
        @Chapter(name: "Creating and Understanding Tokens") {
            @TutorialReference(tutorial: "doc:UnderstandTokens")
            Explore the ESDT token standard and understand the differences between fungible, non-fungible, semi-fungible, and meta tokens. Follow step-by-step instructions to create each type.

            @Image(source: "logo.png", alt: "A dummy image.")
        }
        
        @Chapter(name: "Managing Fungible Tokens") {
            @TutorialReference(tutorial: "doc:OperationsOnFungibleTokens")
            Learn how to manage your issued fungible tokens by performing key operations such as minting and burning.

            @Image(source: "logo.png", alt: "A dummy image.")
        }
        
        @Chapter(name: "Managing Non-Fungible Tokens") {
            @TutorialReference(tutorial: "doc:OperationsOnNonFungibleTokens")
            Discover how to manage your issued non-fungible and semi-fungible tokens by executing essential operations, including creating new nonces, increasing supply, and burning tokens.

            @Image(source: "logo.png", alt: "A dummy image.")
        }

        @Chapter(name: "Enhancing Contracts with Token Attributes") {
            @TutorialReference(tutorial: "doc:TokenAttributes")
            Discover how to embed custom attributes into your ESDT tokens, enabling more flexible and powerful smart contract logic.

            @Image(source: "logo.png", alt: "A dummy image.")
        }
    }
    
    @Volume(name: "Build a Coin Flip Contract") {
        Follow a full walkthrough to build, and test a complete contract with random logic, fees, and admin access.

        @Image(source: "logo.png", alt: "A dummy image.")

        @Chapter(name: "Build a Coin Flip Smart Contract") {
            @TutorialReference(tutorial: "doc:FlipContractIntro")
            Learn how to design the rules of your flip-based game, configure its economics, and protect it against random number manipulation.
            
            @Image(source: "logo.png", alt: "A dummy image.")
        }

        @Chapter(name: "Define the Storage for the Flip Contract") {
            @TutorialReference(tutorial: "doc:FlipContractWriteTheStorage")
            Define the structures and values your contract will store—including flips, reserves, fees, and configuration parameters.
            
            @Image(source: "logo.png", alt: "A dummy image.")
        }

        @Chapter(name: "Add Administrative Endpoints to the Flip Contract") {
            @TutorialReference(tutorial: "doc:FlipContractWriteAdmin")
            Implement the logic needed to let contract owners configure fees, set limits, and manage reserves.
            
            @Image(source: "logo.png", alt: "A dummy image.")
        }

        @Chapter(name: "Implement the Game Logic for the Flip Contract") {
            @TutorialReference(tutorial: "doc:FlipContractWriteTheGame")
            Build the core mechanics that power the game: accepting bets, resolving outcomes, and managing bounty rewards.
            
            @Image(source: "logo.png", alt: "A dummy image.")
        }

        @Chapter(name: "Set Up Testing in the SwiftVM") {
            @TutorialReference(tutorial: "doc:FlipContractInitTests")
            Prepare your project for unit testing using SwiftVM. Learn how to simulate blockchain state and transactions in Swift.
            
            @Image(source: "logo.png", alt: "A dummy image.")
        }

        @Chapter(name: "Test the Admin Endpoints") {
            @TutorialReference(tutorial: "doc:FlipContractTestAdmin")
            Write tests to ensure admin-only access is enforced and configuration changes behave as expected.
            
            @Image(source: "logo.png", alt: "A dummy image.")
        }

        @Chapter(name: "Test the Game Logic for the Flip Contract") {
            @TutorialReference(tutorial: "doc:FlipContractTestTheGame")
            Validate end-to-end gameplay scenarios, simulate randomness, and test both winning and losing outcomes.
            
            @Image(source: "logo.png", alt: "A dummy image.")
        }
    }
}
