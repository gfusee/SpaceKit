@Tutorial(time: 20) {
    @Intro(title: "Writing the Flip storage") {
        You initialized the Flip project, it's time to write the contract's code. The contract will be composed of the following component:
        
        - Flip: a structure that holds the information of a flip such as the player's address or the bet amount.
        - StorageController: a controller holding all the values our contract needs to store.
        - init: The init function that will be executed on contract deployment, its role is to set the initial storage values.
        - AdminController: a controller with endpoints only accessible by the owner wallet (our wallet). It will allow use to administrate the contract by performing operations such as setting maximum allowed bets, depositing or withdrawing funds.
        - GameController: a controller that handles the flip logics, this is where the endpoint dedicated for the players and bounty will be declared
    }

    @Section(title: "Writing the Flip structure") {
        @ContentAndMedia {
            The Flip structure holds all the information of a flip. This structure will be used in many places of the contract's code, let's define it. 
        }

        @Steps {
            @Step {
                Create an empty `Contracts/Flip/Source/Flip.swift` file.

                @Code(name: "Flip.swift", file: "FlipContractWriteTheStorageSection1Step1.swift")
            }
            
            @Step {
                Import `SpaceKit`.

                @Code(name: "Flip.swift", file: "FlipContractWriteTheStorageSection1Step2.swift")
            }
            
            @Step {
                Create a struct named `Flip`.
                
                Make it compatible with the SpaceKit's encoding system by annotating it with `@Codable`.

                @Code(name: "Flip.swift", file: "FlipContractWriteTheStorageSection1Step3.swift")
            }
            
            @Step {
                Define an `UInt64` field named `id`.
                
                This is the identifier that can be used by the contract or any off-chain backend.

                @Code(name: "Flip.swift", file: "FlipContractWriteTheStorageSection1Step4.swift")
            }
            
            @Step {
                Define an `Address` field named `playerAddress`.

                @Code(name: "Flip.swift", file: "FlipContractWriteTheStorageSection1Step5.swift")
            }
            
            @Step {
                Define a `TokenIdentifier` field named `tokenIdentifier`.
                
                This represents the token identifier the player chose to bet.

                @Code(name: "Flip.swift", file: "FlipContractWriteTheStorageSection1Step6.swift")
            }
            
            @Step {
                Define a `UInt64` field named `tokenNonce`.
                
                This represents the token nonce the player chose to bet.

                @Code(name: "Flip.swift", file: "FlipContractWriteTheStorageSection1Step7.swift")
            }
            
            @Step {
                Define an `BigUint` field named `amount`.
                
                This represents the amount bets by the player.

                @Code(name: "Flip.swift", file: "FlipContractWriteTheStorageSection1Step8.swift")
            }
            
            @Step {
                Define an `BigUint` field named `bounty`.
                
                This represents the rewards that will be sent to the one that bounties this flip.

                @Code(name: "Flip.swift", file: "FlipContractWriteTheStorageSection1Step9.swift")
            }
            
            @Step {
                Define an `UInt64` field named `blockNonce`.
                
                It represents the block in which the flip has been initiated.

                @Code(name: "Flip.swift", file: "FlipContractWriteTheStorageSection1Step10.swift")
            }
            
            @Step {
                Define an `UInt64` field named `minimumBlockBounty`.
                
                This allows the contract to know if enough block has passed to allow bountying this flip.

                @Code(name: "Flip.swift", file: "FlipContractWriteTheStorageSection1Step11.swift")
            }
        }
    }
        
    @Section(title: "Writing the Storage Code") {
        @ContentAndMedia {
            When building a smart contract, one of the first thing to do is to write its storage (which is the set of values the contract needs to store accross executions).
        }

        @Steps {
            @Step {
                Create an empty `Contracts/Flip/Source/StorageController.swift` file.

                @Code(name: "StorageController.swift", file: "FlipContractWriteTheStorageSection2Step1.swift")
            }
            
            @Step {
                Import `SpaceKit`.

                @Code(name: "StorageController.swift", file: "FlipContractWriteTheStorageSection2Step2.swift")
            }
            
            @Step {
                Create a controller named `StorageController`.

                @Code(name: "StorageController.swift", file: "FlipContractWriteTheStorageSection2Step3.swift")
            }
            
            @Step {
                Store the percentage of fees going to the owner.

                @Code(name: "StorageController.swift", file: "FlipContractWriteTheStorageSection2Step4.swift")
            }
            
            @Step {
                Store the percentage of fees going to the one that bounties a flip.

                @Code(name: "StorageController.swift", file: "FlipContractWriteTheStorageSection2Step5.swift")
            }
            
            @Step {
                Store the minimum number of blocks required before someone can bounty a flip.

                @Code(name: "StorageController.swift", file: "FlipContractWriteTheStorageSection2Step6.swift")
            }
            
            @Step {
                Store the last initiated flip id.
                
                This allows the contract to know which flip are pending bounty.

                @Code(name: "StorageController.swift", file: "FlipContractWriteTheStorageSection2Step7.swift")
            }
            
            @Step {
                Store the last bountied flip id.
                
                This allows the contract to not bounty multiple times a flip.

                @Code(name: "StorageController.swift", file: "FlipContractWriteTheStorageSection2Step8.swift")
            }
            
            @Step {
                Declare a mapping that will stores the flip information for each identifier.
                
                **Tips:** Storing a vector of Flip works but is bad in terms and optimisation because it might require to iterate over a large number of elements, making transactions to cost a lot.

                @Code(name: "StorageController.swift", file: "FlipContractWriteTheStorageSection2Step9.swift")
            }
            
            @Step {
                Declare a mapper that stores, for each token identifier and nonce, the maximum bet allowed in absolute value.
                
                **Important:** This way of storing values is exactly the same as using a `@Mapping`, while allowing for multiple keys.

                @Code(name: "StorageController.swift", file: "FlipContractWriteTheStorageSection2Step10.swift")
            }
            
            @Step {
                Store in a similar way the maximum allowed bet in percentage of the token's reserve.

                @Code(name: "StorageController.swift", file: "FlipContractWriteTheStorageSection2Step11.swift")
            }
            
            @Step {
                Store the contract's reserve for each token and nonce.
                
                **Important:** here we cannot rely on the contract's balance because we have to keep the bounty rewards while the flip is pending.

                @Code(name: "StorageController.swift", file: "FlipContractWriteTheStorageSection2Step12.swift")
            }
            
            @Step {
                (Optional) Create a view for the owner percentage fees stored value so frontends and backends can retrieve it.
                
                **Important:** At the time of writing, `@Storage` and `@Mapping` don't automatically provide a view, prefer to use the functional declaration showed in the steps above for this use case.

                @Code(name: "StorageController.swift", file: "FlipContractWriteTheStorageSection2Step13.swift")
            }
            
            @Step {
                (Optional) Create a view for the bounty percentage fees.

                @Code(name: "StorageController.swift", file: "FlipContractWriteTheStorageSection2Step14.swift")
            }
            
            @Step {
                (Optional) Create a view for the minimum block before bounty.

                @Code(name: "StorageController.swift", file: "FlipContractWriteTheStorageSection2Step15.swift")
            }
            
            @Step {
                (Optional) Create a view for the lastest flip registered.

                @Code(name: "StorageController.swift", file: "FlipContractWriteTheStorageSection2Step16.swift")
            }
            
            @Step {
                (Optional) Create a view for the lastest flip bountied.

                @Code(name: "StorageController.swift", file: "FlipContractWriteTheStorageSection2Step17.swift")
            }
            
            @Step {
                (Optional) Create a view to retrieve a specific flip for a given id.

                @Code(name: "StorageController.swift", file: "FlipContractWriteTheStorageSection2Step18.swift")
            }
        }
    }
}
