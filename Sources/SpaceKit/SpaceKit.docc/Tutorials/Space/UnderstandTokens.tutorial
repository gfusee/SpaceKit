@Tutorial(time: 15) {
    @Intro(title: "Understand the ESDT Standard") {
        The Space framework uses a token standard called ESDT. This standard defines four types of tokens: fungible, non-fungible (NFT), semi-fungible, and meta-esdt.

        Fungible tokens are interchangeable; for instance, one USDC in your wallet holds the same value as one USDC in another wallet. However, non-fungible tokens differ, where each token in a collection is unique. For example, consider a collection of flight tickets—each ticket represents a unique seat with specific options like cabin luggage or priority boarding. They cannot be exchanged one-to-one.

        The ESDT standard addresses NFTs by assigning each token in a collection a unique "nonce" This allows differentiation between tokens. If we have a flight ticket collection labeled `$FLIGHT`, each token has a unique nonce such as `$FLIGHT#1`, `$FLIGHT#2`, etc.

        Semi-fungible tokens operate similarly to NFTs, but for a given nonce, there can be multiple identical tokens. For example, state bonds labeled `$BOND` could have different nonces for the year they were issued. If `$BOND#1` represents bonds from 2010 and `$BOND#2` represents those from 2011, all tokens with the same nonce are fungible within their group, as they share the same maturity date.

        Meta-esdt tokens enhance this concept by allowing attributes to be added on-chain for each nonce. These attributes can be of any Space-compatible type, such as `Buffer`, `BigUint`, or `UInt64`, or even complex structs and enums with the `@Codable` annotation. Meta-esdt is powerful because it enables contracts to process on-chain logic using these attributes.

        The ESDT standard supports various token operations like minting, burning, freezing, and more. These actions must be explicitly declared at the time of token issuance, ensuring transparency. For example, a non-mintable ESDT cannot be minted or altered after issuance.
    }

    @Section(title: "Working with @Storage for Single Value Persistence") {
        @ContentAndMedia {
            The `@Storage` annotation allows you to persist a single value under a defined key. It’s recommended to align the storage key with the variable name for clarity.

            In this section, you’ll implement an endpoint called `increaseStoredValue`, which increments a stored integer each time it’s invoked. When the value reaches 100, it resets to 0.

            Note: This section covers basic implementation. Transaction cost optimizations will be discussed in a later chapter.
        }

        @Steps {
            @Step {
                Set up the basic structure of the contract.

                @Code(name: "lib.swift", file: "StoreValuesSection1Step1.swift")
            }

            @Step {
                Add a persistent integer to the contract using the `@Storage` annotation. By default, the integer initializes to 0 unless otherwise specified.

                @Code(name: "lib.swift", file: "StoreValuesSection1Step2.swift")
            }

            @Step {
                Implement the logic to increment the stored integer whenever the `increaseStoredValue` endpoint is invoked. 

                Tip: Keep in mind that reading from storage increases transaction costs. This chapter focuses on functionality, with optimization techniques to follow.

                @Code(name: "lib.swift", file: "StoreValuesSection1Step3.swift")
            }

            @Step {
                Add logic to reset the integer back to 0 when it reaches 100.

                @Code(name: "lib.swift", file: "StoreValuesSection1Step4.swift")
            }
        }
    }
}
