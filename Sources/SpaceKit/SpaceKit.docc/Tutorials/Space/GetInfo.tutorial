@Tutorial(time: 10) {
    @Intro(title: "Retrieving Information from the Blockchain") {
        Many smart contracts rely on contextual data to execute their operations effectively. This data can include input payments, the caller's address, the current time, the balance of a specific account, or even the contract owner.

        The SpaceKit framework provides an intuitive way to retrieve all of this information using the `Message` and `Blockchain` objects.
    }

    @Section(title: "Accessing Transaction Context Data") {
        @ContentAndMedia {
            In this section, you will create a simple smart contract that allows users to deposit a specified fungible token. The contract will track the total amount of tokens deposited by each user.
        }

        @Steps {
            @Step {
                Start by defining the contract’s basic structure.

                @Code(name: "lib.swift", file: "GetInfoSection1Step1.swift")
            }

            @Step {
                Track the specific token type to be deposited. Store its identifier in the contract’s storage using a `@Storage` variable.

                Note: This variable will be initialized later in the contract’s `init` function.

                @Code(name: "lib.swift", file: "GetInfoSection1Step2.swift")
            }

            @Step {
                Create a `@Mapping` variable to keep track of the total amount deposited by each user.

                Reminder: Numeric storage variables default to 0.

                @Code(name: "lib.swift", file: "GetInfoSection1Step3.swift")
            }

            @Step {
                Add an initializer to the contract, which accepts the token identifier as a parameter.

                @Code(name: "lib.swift", file: "GetInfoSection1Step4.swift")
            }

            @Step {
                Define the `deposit` endpoint for the contract.

                @Code(name: "lib.swift", file: "GetInfoSection1Step5.swift")
            }

            @Step {
                Use the `Message.caller` property to retrieve the address of the user making the deposit.

                @Code(name: "lib.swift", file: "GetInfoSection1Step6.swift")
            }

            @Step {
                Access the single fungible token payment using `Message.singleFungibleEsdt`. If the transaction doesn't include exactly one fungible token payment, the transaction will fail.

                Note: The `Message` object also allows retrieval of multi payments, non-fungible tokens, and EGLD payments.

                @Code(name: "lib.swift", file: "GetInfoSection1Step7.swift")
            }

            @Step {
                Verify the payment by comparing the token identifier with the stored value.

                @Code(name: "lib.swift", file: "GetInfoSection1Step8.swift")
            }

            @Step {
                Add the payment amount to the storage mapping for the caller’s address.

                @Code(name: "lib.swift", file: "GetInfoSection1Step9.swift")
            }
        }
    }

    @Section(title: "Accessing Blockchain Context Data") {
        @ContentAndMedia {
            In this section, you will improve the previous contract by adding constraints: each address can deposit only once every 24 hours, and deposits must not exceed 10% of the user's token balance.
        }

        @Steps {
            @Step {
                Start by using the contract from the previous section.

                @Code(name: "lib.swift", file: "GetInfoSection2Step1.swift")
            }

            @Step {
                Define a global constant representing the number of seconds in a day.

                @Code(name: "lib.swift", file: "GetInfoSection2Step2.swift")
            }

            @Step {
                Add a mapping to store the last deposit time for each user.

                @Code(name: "lib.swift", file: "GetInfoSection2Step3.swift")
            }

            @Step {
                In the `deposit` endpoint, retrieve the current timestamp using `Blockchain.getBlockTimestamp()`.

                Note: The timestamp is the number of seconds since January 1, 1970.

                @Code(name: "lib.swift", file: "GetInfoSection2Step4.swift")
            }

            @Step {
                Retrieve the last deposit time for the caller from the storage.

                @Code(name: "lib.swift", file: "GetInfoSection2Step5.swift")
            }

            @Step {
                Compute the next allowed deposit time by adding one day’s worth of seconds to the last deposit time.

                @Code(name: "lib.swift", file: "GetInfoSection2Step6.swift")
            }

            @Step {
                Ensure the caller is allowed to deposit now.

                @Code(name: "lib.swift", file: "GetInfoSection2Step7.swift")
            }

            @Step {
                If the deposit isn’t allowed yet, calculate the remaining time before the next deposit is permitted.

                @Code(name: "lib.swift", file: "GetInfoSection2Step8.swift")
            }

            @Step {
                Use the calculated time to return an error message with the remaining time.

                Tip: You can interpolate buffers, addresses, and numeric types into string literals when creating error messages.

                @Code(name: "lib.swift", file: "GetInfoSection2Step9.swift")
            }

            @Step {
                Retrieve the caller’s token balance using `Blockchain.getBalance()`.
                
                Tip: If no token identifier is provided, the EGLD balance is returned.

                @Code(name: "lib.swift", file: "GetInfoSection2Step10.swift")
            }

            @Step {
                Calculate the maximum allowable deposit by dividing the caller’s token balance by 10.

                Note: Be cautious when performing integer division as any fractional part is discarded.

                @Code(name: "lib.swift", file: "GetInfoSection2Step11.swift")
            }

            @Step {
                Ensure the deposit amount does not exceed the maximum allowable limit.

                @Code(name: "lib.swift", file: "GetInfoSection2Step12.swift")
            }
            
            @Step {
                Update the last deposit time for the caller to the current block timestamp.

                @Code(name: "lib.swift", file: "GetInfoSection2Step13.swift")
            }
        }
    }
}
